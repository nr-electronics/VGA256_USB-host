
F411_VGA256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003a4e8  0800bfc4  0800bfc4  0001bfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080464ac  080464ac  0006025c  2**0
                  CONTENTS
  4 .ARM          00000008  080464ac  080464ac  000564ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080464b4  080464b4  0006025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080464b4  080464b4  000564b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080464b8  080464b8  000564b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  080464bc  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013fe4  2000025c  08046718  0006025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014240  08046718  00064240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0006025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001912e  00000000  00000000  0006028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000421f  00000000  00000000  000793ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0007d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0007e908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b540  00000000  00000000  0007fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ee7  00000000  00000000  0009af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094995  00000000  00000000  000b3e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014880c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005974  00000000  00000000  0014885c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfac 	.word	0x0800bfac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	0800bfac 	.word	0x0800bfac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <VGA_update>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void VGA_update(){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	   vga_voff11=VOFFSET;		//offset for 1st line
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <VGA_update+0x40>)
 800058a:	881a      	ldrh	r2, [r3, #0]
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <VGA_update+0x44>)
 800058e:	801a      	strh	r2, [r3, #0]
	   vga_voff12=VOFFSET+VGA_LBUFFERSIZE;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <VGA_update+0x40>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <VGA_update+0x48>)
 800059c:	801a      	strh	r2, [r3, #0]
	   vga_voff21=VOFFSET+VGA_LBUFFERSIZE+VGA_LBUFFERSIZE;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <VGA_update+0x40>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <VGA_update+0x4c>)
 80005aa:	801a      	strh	r2, [r3, #0]
	   vga_voff22=VOFFSET+VGA_LBUFFERSIZE+VGA_LBUFFERSIZE+VGA_LBUFFERSIZE;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <VGA_update+0x40>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <VGA_update+0x50>)
 80005b8:	801a      	strh	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	200003b0 	.word	0x200003b0
 80005c8:	200003b6 	.word	0x200003b6
 80005cc:	20000002 	.word	0x20000002
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000006 	.word	0x20000006

080005d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_9){
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e8:	d10f      	bne.n	800060a <HAL_GPIO_EXTI_Callback+0x32>
		if(VOFFSET>0)VOFFSET-=1;
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d005      	beq.n	80005fe <HAL_GPIO_EXTI_Callback+0x26>
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 80005fc:	801a      	strh	r2, [r3, #0]
		vga_stop=1;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_GPIO_EXTI_Callback+0x88>)
 8000600:	2201      	movs	r2, #1
 8000602:	801a      	strh	r2, [r3, #0]
		VGA_update();
 8000604:	f7ff ffbe 	bl	8000584 <VGA_update>
 8000608:	e012      	b.n	8000630 <HAL_GPIO_EXTI_Callback+0x58>
	}
	else if(GPIO_Pin==GPIO_PIN_10){
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000610:	d10e      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x58>
		if(VOFFSET<(VGA_LBUFFERSIZE-VGA_WIDTH))VOFFSET+=1;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d805      	bhi.n	8000626 <HAL_GPIO_EXTI_Callback+0x4e>
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	b29a      	uxth	r2, r3
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 8000624:	801a      	strh	r2, [r3, #0]
		vga_stop=1;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_GPIO_EXTI_Callback+0x88>)
 8000628:	2201      	movs	r2, #1
 800062a:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800062c:	f7ff ffaa 	bl	8000584 <VGA_update>
	}
	   sprintf(msg,"%d ",VOFFSET);
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	490b      	ldr	r1, [pc, #44]	; (8000664 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <HAL_GPIO_EXTI_Callback+0x90>)
 800063a:	f00a fbe7 	bl	800ae0c <siprintf>
	   SetCursor(3,50);
 800063e:	2132      	movs	r1, #50	; 0x32
 8000640:	2003      	movs	r0, #3
 8000642:	f002 f8d3 	bl	80027ec <SetCursor>
	   WriteString(msg,Font_7x10,VGA_WHITE);
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <HAL_GPIO_EXTI_Callback+0x94>)
 8000648:	23ff      	movs	r3, #255	; 0xff
 800064a:	ca06      	ldmia	r2, {r1, r2}
 800064c:	4806      	ldr	r0, [pc, #24]	; (8000668 <HAL_GPIO_EXTI_Callback+0x90>)
 800064e:	f002 f8a7 	bl	80027a0 <WriteString>

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200003b0 	.word	0x200003b0
 8000660:	200003b2 	.word	0x200003b2
 8000664:	0800bfc4 	.word	0x0800bfc4
 8000668:	200003d4 	.word	0x200003d4
 800066c:	200001c8 	.word	0x200001c8

08000670 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
     if(htim==&htim9){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d11f      	bne.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x50>
		line=-14;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000682:	f64f 72f2 	movw	r2, #65522	; 0xfff2
 8000686:	801a      	strh	r2, [r3, #0]
		if(firstTrig){
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d017      	beq.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x50>
			if(
            HAL_DMA_Start_IT(&hdma_tim1_up,(uint32_t)VGA_obuffer,GPIOB_ODR,VGA_FULL)
 8000690:	4910      	ldr	r1, [pc, #64]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800069a:	4810      	ldr	r0, [pc, #64]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800069c:	f002 fdb6 	bl	800320c <HAL_DMA_Start_IT>
 80006a0:	4603      	mov	r3, r0
			if(
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d009      	beq.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x4a>
			!= HAL_OK){
				while(1){
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006ac:	f003 faf3 	bl	8003c96 <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f002 fbc6 	bl	8002e44 <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80006b8:	e7f5      	b.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0x36>
				}
			}
			firstTrig=0;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200002c0 	.word	0x200002c0
 80006cc:	200003b4 	.word	0x200003b4
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000b50 	.word	0x20000b50
 80006d8:	200003b8 	.word	0x200003b8
 80006dc:	20000350 	.word	0x20000350
 80006e0:	40020800 	.word	0x40020800

080006e4 <DMA_HalfCpltCallback>:

static void DMA_HalfCpltCallback(DMA_HandleTypeDef *hdma){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
     //fill in line1
	if((line<0)||(line>=VGA_VBUFFER)){
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <DMA_HalfCpltCallback+0xd0>)
 80006ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db04      	blt.n	8000700 <DMA_HalfCpltCallback+0x1c>
 80006f6:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <DMA_HalfCpltCallback+0xd0>)
 80006f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006fc:	2bed      	cmp	r3, #237	; 0xed
 80006fe:	dd06      	ble.n	800070e <DMA_HalfCpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 8000700:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000704:	2100      	movs	r1, #0
 8000706:	482c      	ldr	r0, [pc, #176]	; (80007b8 <DMA_HalfCpltCallback+0xd4>)
 8000708:	f00a fa1c 	bl	800ab44 <memset>
 800070c:	e027      	b.n	800075e <DMA_HalfCpltCallback+0x7a>
	}else{
	memcpy((uint8_t *)VGA_obuffer + vga_voff11,VGA_buffer[line],VGA_LBUFFER);
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <DMA_HalfCpltCallback+0xd8>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <DMA_HalfCpltCallback+0xd4>)
 8000716:	18d0      	adds	r0, r2, r3
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <DMA_HalfCpltCallback+0xd0>)
 800071a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800071e:	461a      	mov	r2, r3
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	019b      	lsls	r3, r3, #6
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <DMA_HalfCpltCallback+0xdc>)
 800072a:	4413      	add	r3, r2
 800072c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000730:	4619      	mov	r1, r3
 8000732:	f00a f9f9 	bl	800ab28 <memcpy>
	memcpy((uint8_t *)VGA_obuffer + vga_voff12,VGA_buffer[line],VGA_LBUFFER);
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <DMA_HalfCpltCallback+0xe0>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <DMA_HalfCpltCallback+0xd4>)
 800073e:	18d0      	adds	r0, r2, r3
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <DMA_HalfCpltCallback+0xd0>)
 8000742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000746:	461a      	mov	r2, r3
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	019b      	lsls	r3, r3, #6
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <DMA_HalfCpltCallback+0xdc>)
 8000752:	4413      	add	r3, r2
 8000754:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000758:	4619      	mov	r1, r3
 800075a:	f00a f9e5 	bl	800ab28 <memcpy>
	}
	line++;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <DMA_HalfCpltCallback+0xd0>)
 8000760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000764:	b29b      	uxth	r3, r3
 8000766:	3301      	adds	r3, #1
 8000768:	b29b      	uxth	r3, r3
 800076a:	b21a      	sxth	r2, r3
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <DMA_HalfCpltCallback+0xd0>)
 800076e:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <DMA_HalfCpltCallback+0xe4>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00a      	beq.n	800078e <DMA_HalfCpltCallback+0xaa>
		HAL_DMA_Abort_IT(&hdma_tim1_up);
 8000778:	4814      	ldr	r0, [pc, #80]	; (80007cc <DMA_HalfCpltCallback+0xe8>)
 800077a:	f002 fe0f 	bl	800339c <HAL_DMA_Abort_IT>
		firstTrig=1;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <DMA_HalfCpltCallback+0xec>)
 8000780:	2201      	movs	r2, #1
 8000782:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <DMA_HalfCpltCallback+0xe4>)
 8000786:	2200      	movs	r2, #0
 8000788:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800078a:	f7ff fefb 	bl	8000584 <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <DMA_HalfCpltCallback+0xd0>)
 8000790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000794:	2bed      	cmp	r3, #237	; 0xed
 8000796:	dd09      	ble.n	80007ac <DMA_HalfCpltCallback+0xc8>
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <DMA_HalfCpltCallback+0xec>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d105      	bne.n	80007ac <DMA_HalfCpltCallback+0xc8>
		HAL_DMA_Abort_IT(&hdma_tim1_up);
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <DMA_HalfCpltCallback+0xe8>)
 80007a2:	f002 fdfb 	bl	800339c <HAL_DMA_Abort_IT>
		firstTrig=1;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <DMA_HalfCpltCallback+0xec>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	801a      	strh	r2, [r3, #0]
	}
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200003b4 	.word	0x200003b4
 80007b8:	20000b50 	.word	0x20000b50
 80007bc:	200003b6 	.word	0x200003b6
 80007c0:	20001190 	.word	0x20001190
 80007c4:	20000002 	.word	0x20000002
 80007c8:	200003b2 	.word	0x200003b2
 80007cc:	20000350 	.word	0x20000350
 80007d0:	20000000 	.word	0x20000000

080007d4 <DMA_CpltCallback>:

static void DMA_CpltCallback(DMA_HandleTypeDef *hdma){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    //fill in line2 (later half)
	if((line<0)||(line>=VGA_VBUFFER)){
 80007dc:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <DMA_CpltCallback+0xd0>)
 80007de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db04      	blt.n	80007f0 <DMA_CpltCallback+0x1c>
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <DMA_CpltCallback+0xd0>)
 80007e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ec:	2bed      	cmp	r3, #237	; 0xed
 80007ee:	dd06      	ble.n	80007fe <DMA_CpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 80007f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80007f4:	2100      	movs	r1, #0
 80007f6:	482c      	ldr	r0, [pc, #176]	; (80008a8 <DMA_CpltCallback+0xd4>)
 80007f8:	f00a f9a4 	bl	800ab44 <memset>
 80007fc:	e027      	b.n	800084e <DMA_CpltCallback+0x7a>
	}else{
	memcpy((uint8_t *)VGA_obuffer + vga_voff21,VGA_buffer[line],VGA_LBUFFER);
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <DMA_CpltCallback+0xd8>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <DMA_CpltCallback+0xd4>)
 8000806:	18d0      	adds	r0, r2, r3
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <DMA_CpltCallback+0xd0>)
 800080a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800080e:	461a      	mov	r2, r3
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	019b      	lsls	r3, r3, #6
 8000818:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <DMA_CpltCallback+0xdc>)
 800081a:	4413      	add	r3, r2
 800081c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000820:	4619      	mov	r1, r3
 8000822:	f00a f981 	bl	800ab28 <memcpy>
	memcpy((uint8_t *)VGA_obuffer + vga_voff22,VGA_buffer[line],VGA_LBUFFER);
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <DMA_CpltCallback+0xe0>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <DMA_CpltCallback+0xd4>)
 800082e:	18d0      	adds	r0, r2, r3
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <DMA_CpltCallback+0xd0>)
 8000832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000836:	461a      	mov	r2, r3
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	019b      	lsls	r3, r3, #6
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <DMA_CpltCallback+0xdc>)
 8000842:	4413      	add	r3, r2
 8000844:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000848:	4619      	mov	r1, r3
 800084a:	f00a f96d 	bl	800ab28 <memcpy>
	}
	line++;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <DMA_CpltCallback+0xd0>)
 8000850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000854:	b29b      	uxth	r3, r3
 8000856:	3301      	adds	r3, #1
 8000858:	b29b      	uxth	r3, r3
 800085a:	b21a      	sxth	r2, r3
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <DMA_CpltCallback+0xd0>)
 800085e:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <DMA_CpltCallback+0xe4>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00a      	beq.n	800087e <DMA_CpltCallback+0xaa>
		HAL_DMA_Abort_IT(&hdma_tim1_up);
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <DMA_CpltCallback+0xe8>)
 800086a:	f002 fd97 	bl	800339c <HAL_DMA_Abort_IT>
		firstTrig=1;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <DMA_CpltCallback+0xec>)
 8000870:	2201      	movs	r2, #1
 8000872:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <DMA_CpltCallback+0xe4>)
 8000876:	2200      	movs	r2, #0
 8000878:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800087a:	f7ff fe83 	bl	8000584 <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <DMA_CpltCallback+0xd0>)
 8000880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000884:	2bed      	cmp	r3, #237	; 0xed
 8000886:	dd09      	ble.n	800089c <DMA_CpltCallback+0xc8>
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <DMA_CpltCallback+0xec>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <DMA_CpltCallback+0xc8>
		HAL_DMA_Abort_IT(&hdma_tim1_up);
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <DMA_CpltCallback+0xe8>)
 8000892:	f002 fd83 	bl	800339c <HAL_DMA_Abort_IT>
		firstTrig=1;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <DMA_CpltCallback+0xec>)
 8000898:	2201      	movs	r2, #1
 800089a:	801a      	strh	r2, [r3, #0]
	}
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200003b4 	.word	0x200003b4
 80008a8:	20000b50 	.word	0x20000b50
 80008ac:	20000004 	.word	0x20000004
 80008b0:	20001190 	.word	0x20001190
 80008b4:	20000006 	.word	0x20000006
 80008b8:	200003b2 	.word	0x200003b2
 80008bc:	20000350 	.word	0x20000350
 80008c0:	20000000 	.word	0x20000000

080008c4 <USBH_HID_EventCallback>:

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD){
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f007 fedd 	bl	800868c <USBH_HID_GetDeviceType>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d129      	bne.n	800092c <USBH_HID_EventCallback+0x68>
		HID_KEYBD_Info_TypeDef *Keyboard_Info;
		Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f008 f80f 	bl	80088fc <USBH_HID_GetKeybdInfo>
 80008de:	60f8      	str	r0, [r7, #12]
		uint8_t key = USBH_HID_GetASCIICode(Keyboard_Info);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f008 f8af 	bl	8008a44 <USBH_HID_GetASCIICode>
 80008e6:	4603      	mov	r3, r0
 80008e8:	72fb      	strb	r3, [r7, #11]
		if(key==0)return;
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d01a      	beq.n	8000926 <USBH_HID_EventCallback+0x62>
		if(((kBin+1)&0xf)==kBout)return;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <USBH_HID_EventCallback+0x70>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	f003 020f 	and.w	r2, r3, #15
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <USBH_HID_EventCallback+0x74>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d013      	beq.n	800092a <USBH_HID_EventCallback+0x66>
		kBuffer[kBin]=key;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <USBH_HID_EventCallback+0x70>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <USBH_HID_EventCallback+0x78>)
 8000908:	7afa      	ldrb	r2, [r7, #11]
 800090a:	54ca      	strb	r2, [r1, r3]
		kBin=(kBin+1)&0xf;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <USBH_HID_EventCallback+0x70>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <USBH_HID_EventCallback+0x70>)
 8000918:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800091a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <USBH_HID_EventCallback+0x7c>)
 8000920:	f003 f9b9 	bl	8003c96 <HAL_GPIO_TogglePin>
 8000924:	e002      	b.n	800092c <USBH_HID_EventCallback+0x68>
		if(key==0)return;
 8000926:	bf00      	nop
 8000928:	e000      	b.n	800092c <USBH_HID_EventCallback+0x68>
		if(((kBin+1)&0xf)==kBout)return;
 800092a:	bf00      	nop
	}
}
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200003cc 	.word	0x200003cc
 8000938:	200003d0 	.word	0x200003d0
 800093c:	200003bc 	.word	0x200003bc
 8000940:	40020800 	.word	0x40020800

08000944 <getch>:

extern uint8_t getch(char *ch){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<10;i++){
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e007      	b.n	8000962 <getch+0x1e>
	   MX_USB_HOST_Process();
 8000952:	f009 fddb 	bl	800a50c <MX_USB_HOST_Process>
	   HAL_Delay(2);
 8000956:	2002      	movs	r0, #2
 8000958:	f002 fa74 	bl	8002e44 <HAL_Delay>
	for(int i=0;i<10;i++){
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2b09      	cmp	r3, #9
 8000966:	ddf4      	ble.n	8000952 <getch+0xe>
	}
	if(kBin==kBout) return 0;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <getch+0x58>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <getch+0x5c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d101      	bne.n	8000978 <getch+0x34>
 8000974:	2300      	movs	r3, #0
 8000976:	e00d      	b.n	8000994 <getch+0x50>
	*ch = kBuffer[kBout];
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <getch+0x5c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <getch+0x60>)
 800097e:	5cd2      	ldrb	r2, [r2, r3]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	701a      	strb	r2, [r3, #0]
	kBout = (kBout+1)&0xf;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <getch+0x5c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <getch+0x5c>)
 8000990:	6013      	str	r3, [r2, #0]
	return 1;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200003cc 	.word	0x200003cc
 80009a0:	200003d0 	.word	0x200003d0
 80009a4:	200003bc 	.word	0x200003bc

080009a8 <myDelay>:

extern void myDelay(int ms){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fa46 	bl	8002e44 <HAL_Delay>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b093      	sub	sp, #76	; 0x4c
 80009c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f002 f9cb 	bl	8002d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 fa79 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f000 fc01 	bl	80011d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d2:	f000 fbdf 	bl	8001194 <MX_DMA_Init>
  MX_TIM10_Init();
 80009d6:	f000 fb8f 	bl	80010f8 <MX_TIM10_Init>
  MX_TIM9_Init();
 80009da:	f000 fb29 	bl	8001030 <MX_TIM9_Init>
  MX_TIM1_Init();
 80009de:	f000 fad7 	bl	8000f90 <MX_TIM1_Init>
  MX_USB_HOST_Init();
 80009e2:	f009 fd6d 	bl	800a4c0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Abort(&hdma_tim1_up);
 80009e6:	4813      	ldr	r0, [pc, #76]	; (8000a34 <main+0x74>)
 80009e8:	f002 fc68 	bl	80032bc <HAL_DMA_Abort>
  if(
  	  HAL_DMA_RegisterCallback(&hdma_tim1_up,HAL_DMA_XFER_HALFCPLT_CB_ID,DMA_HalfCpltCallback)
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <main+0x78>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	4810      	ldr	r0, [pc, #64]	; (8000a34 <main+0x74>)
 80009f2:	f002 fe7f 	bl	80036f4 <HAL_DMA_RegisterCallback>
 80009f6:	4603      	mov	r3, r0
  if(
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d009      	beq.n	8000a10 <main+0x50>
  	  !=HAL_OK){
  	  while(1){
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80009fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a00:	480e      	ldr	r0, [pc, #56]	; (8000a3c <main+0x7c>)
 8000a02:	f003 f948 	bl	8003c96 <HAL_GPIO_TogglePin>
  		  HAL_Delay(500);
 8000a06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a0a:	f002 fa1b 	bl	8002e44 <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000a0e:	e7f5      	b.n	80009fc <main+0x3c>
  	  }
  }
  if(
        HAL_DMA_RegisterCallback(&hdma_tim1_up,HAL_DMA_XFER_CPLT_CB_ID,DMA_CpltCallback)
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <main+0x80>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <main+0x74>)
 8000a16:	f002 fe6d 	bl	80036f4 <HAL_DMA_RegisterCallback>
 8000a1a:	4603      	mov	r3, r0
  if(
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d011      	beq.n	8000a44 <main+0x84>
        !=HAL_OK){
  	  while(1){
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <main+0x7c>)
 8000a26:	f003 f936 	bl	8003c96 <HAL_GPIO_TogglePin>
  		  HAL_Delay(250);
 8000a2a:	20fa      	movs	r0, #250	; 0xfa
 8000a2c:	f002 fa0a 	bl	8002e44 <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000a30:	e7f6      	b.n	8000a20 <main+0x60>
 8000a32:	bf00      	nop
 8000a34:	20000350 	.word	0x20000350
 8000a38:	080006e5 	.word	0x080006e5
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	080007d5 	.word	0x080007d5
  	  }
  }
  GPIOB_ODR = (uint32_t)&(GPIOB->ODR);
 8000a44:	4bbe      	ldr	r3, [pc, #760]	; (8000d40 <main+0x380>)
 8000a46:	4abf      	ldr	r2, [pc, #764]	; (8000d44 <main+0x384>)
 8000a48:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim9);
 8000a4a:	48bf      	ldr	r0, [pc, #764]	; (8000d48 <main+0x388>)
 8000a4c:	f005 fa2e 	bl	8005eac <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 8000a50:	2100      	movs	r1, #0
 8000a52:	48bd      	ldr	r0, [pc, #756]	; (8000d48 <main+0x388>)
 8000a54:	f005 fae6 	bl	8006024 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 8000a58:	48bc      	ldr	r0, [pc, #752]	; (8000d4c <main+0x38c>)
 8000a5a:	f005 fa27 	bl	8005eac <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	48ba      	ldr	r0, [pc, #744]	; (8000d4c <main+0x38c>)
 8000a62:	f005 fadf 	bl	8006024 <HAL_TIM_PWM_Start>


  __HAL_DMA_ENABLE_IT(&hdma_tim1_up,DMA_IT_TC);
 8000a66:	4bba      	ldr	r3, [pc, #744]	; (8000d50 <main+0x390>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4bb8      	ldr	r3, [pc, #736]	; (8000d50 <main+0x390>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0210 	orr.w	r2, r2, #16
 8000a74:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up,DMA_IT_HT);
 8000a76:	4bb6      	ldr	r3, [pc, #728]	; (8000d50 <main+0x390>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4bb4      	ldr	r3, [pc, #720]	; (8000d50 <main+0x390>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f042 0208 	orr.w	r2, r2, #8
 8000a84:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000a86:	4bb3      	ldr	r3, [pc, #716]	; (8000d54 <main+0x394>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	4bb1      	ldr	r3, [pc, #708]	; (8000d54 <main+0x394>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a94:	60da      	str	r2, [r3, #12]
//  firstTrig=0;

//  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
//  __HAL_TIM_ENABLE(&htim1);
  HAL_TIM_Base_Start(&htim1);
 8000a96:	48af      	ldr	r0, [pc, #700]	; (8000d54 <main+0x394>)
 8000a98:	f005 f9ae 	bl	8005df8 <HAL_TIM_Base_Start>
//  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);

//  while(1)
  HAL_Delay(100);
 8000a9c:	2064      	movs	r0, #100	; 0x64
 8000a9e:	f002 f9d1 	bl	8002e44 <HAL_Delay>
  vga_stop=1;
 8000aa2:	4bad      	ldr	r3, [pc, #692]	; (8000d58 <main+0x398>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	801a      	strh	r2, [r3, #0]

  ClearScreen(VGA_BLACK);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 fc8d 	bl	80023c8 <ClearScreen>
  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000aae:	23ff      	movs	r3, #255	; 0xff
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	23e7      	movs	r3, #231	; 0xe7
 8000ab4:	f240 123d 	movw	r2, #317	; 0x13d
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2000      	movs	r0, #0
 8000abc:	f001 ff59 	bl	8002972 <DrawRectangle>
  char msg[32]="Testing";
 8000ac0:	4aa6      	ldr	r2, [pc, #664]	; (8000d5c <main+0x39c>)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac8:	e883 0003 	stmia.w	r3, {r0, r1}
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]
  SetCursor(3,3);
 8000ade:	2103      	movs	r1, #3
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f001 fe83 	bl	80027ec <SetCursor>
  WriteString(msg,Font_7x10,VGA_GREEN);
 8000ae6:	4a9e      	ldr	r2, [pc, #632]	; (8000d60 <main+0x3a0>)
 8000ae8:	1d38      	adds	r0, r7, #4
 8000aea:	231c      	movs	r3, #28
 8000aec:	ca06      	ldmia	r2, {r1, r2}
 8000aee:	f001 fe57 	bl	80027a0 <WriteString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int r,x,y,w,h,z=0,c;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1)
  {
	  char cc;
//	  MX_USB_HOST_Process();
//	  continue;
	  r = rand()%50;
 8000af6:	f00a f93b 	bl	800ad70 <rand>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a99      	ldr	r2, [pc, #612]	; (8000d64 <main+0x3a4>)
 8000afe:	fb82 1203 	smull	r1, r2, r2, r3
 8000b02:	1111      	asrs	r1, r2, #4
 8000b04:	17da      	asrs	r2, r3, #31
 8000b06:	1a8a      	subs	r2, r1, r2
 8000b08:	2132      	movs	r1, #50	; 0x32
 8000b0a:	fb01 f202 	mul.w	r2, r1, r2
 8000b0e:	1a9b      	subs	r3, r3, r2
 8000b10:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000b12:	f00a f92d 	bl	800ad70 <rand>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a93      	ldr	r2, [pc, #588]	; (8000d68 <main+0x3a8>)
 8000b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b1e:	1151      	asrs	r1, r2, #5
 8000b20:	17da      	asrs	r2, r3, #31
 8000b22:	1a8a      	subs	r2, r1, r2
 8000b24:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000b28:	fb01 f202 	mul.w	r2, r1, r2
 8000b2c:	1a9b      	subs	r3, r3, r2
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000b30:	f00a f91e 	bl	800ad70 <rand>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4a8d      	ldr	r2, [pc, #564]	; (8000d6c <main+0x3ac>)
 8000b38:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3c:	441a      	add	r2, r3
 8000b3e:	11d1      	asrs	r1, r2, #7
 8000b40:	17da      	asrs	r2, r3, #31
 8000b42:	1a8a      	subs	r2, r1, r2
 8000b44:	21e8      	movs	r1, #232	; 0xe8
 8000b46:	fb01 f202 	mul.w	r2, r1, r2
 8000b4a:	1a9b      	subs	r3, r3, r2
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000b4e:	f00a f90f 	bl	800ad70 <rand>
 8000b52:	4603      	mov	r3, r0
 8000b54:	425a      	negs	r2, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	bf58      	it	pl
 8000b5c:	4253      	negpl	r3, r2
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawCircle(x,y,r,c);
 8000b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b62:	b218      	sxth	r0, r3
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	b219      	sxth	r1, r3
 8000b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f001 fe6c 	bl	800284c <DrawCircle>
	  r = rand()%50;
 8000b74:	f00a f8fc 	bl	800ad70 <rand>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4a7a      	ldr	r2, [pc, #488]	; (8000d64 <main+0x3a4>)
 8000b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b80:	1111      	asrs	r1, r2, #4
 8000b82:	17da      	asrs	r2, r3, #31
 8000b84:	1a8a      	subs	r2, r1, r2
 8000b86:	2132      	movs	r1, #50	; 0x32
 8000b88:	fb01 f202 	mul.w	r2, r1, r2
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000b90:	f00a f8ee 	bl	800ad70 <rand>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a74      	ldr	r2, [pc, #464]	; (8000d68 <main+0x3a8>)
 8000b98:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9c:	1151      	asrs	r1, r2, #5
 8000b9e:	17da      	asrs	r2, r3, #31
 8000ba0:	1a8a      	subs	r2, r1, r2
 8000ba2:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000ba6:	fb01 f202 	mul.w	r2, r1, r2
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000bae:	f00a f8df 	bl	800ad70 <rand>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a6d      	ldr	r2, [pc, #436]	; (8000d6c <main+0x3ac>)
 8000bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bba:	441a      	add	r2, r3
 8000bbc:	11d1      	asrs	r1, r2, #7
 8000bbe:	17da      	asrs	r2, r3, #31
 8000bc0:	1a8a      	subs	r2, r1, r2
 8000bc2:	21e8      	movs	r1, #232	; 0xe8
 8000bc4:	fb01 f202 	mul.w	r2, r1, r2
 8000bc8:	1a9b      	subs	r3, r3, r2
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000bcc:	f00a f8d0 	bl	800ad70 <rand>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	425a      	negs	r2, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	bf58      	it	pl
 8000bda:	4253      	negpl	r3, r2
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillCircle(x,y,r,c);
 8000bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be0:	b218      	sxth	r0, r3
 8000be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be4:	b219      	sxth	r1, r3
 8000be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f001 ff4c 	bl	8002a8a <FillCircle>
	  x = rand()%VGA_WIDTH;
 8000bf2:	f00a f8bd 	bl	800ad70 <rand>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a5b      	ldr	r2, [pc, #364]	; (8000d68 <main+0x3a8>)
 8000bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bfe:	1151      	asrs	r1, r2, #5
 8000c00:	17da      	asrs	r2, r3, #31
 8000c02:	1a8a      	subs	r2, r1, r2
 8000c04:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000c08:	fb01 f202 	mul.w	r2, r1, r2
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000c10:	f00a f8ae 	bl	800ad70 <rand>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a55      	ldr	r2, [pc, #340]	; (8000d6c <main+0x3ac>)
 8000c18:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1c:	441a      	add	r2, r3
 8000c1e:	11d1      	asrs	r1, r2, #7
 8000c20:	17da      	asrs	r2, r3, #31
 8000c22:	1a8a      	subs	r2, r1, r2
 8000c24:	21e8      	movs	r1, #232	; 0xe8
 8000c26:	fb01 f202 	mul.w	r2, r1, r2
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%50;
 8000c2e:	f00a f89f 	bl	800ad70 <rand>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a4b      	ldr	r2, [pc, #300]	; (8000d64 <main+0x3a4>)
 8000c36:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3a:	1111      	asrs	r1, r2, #4
 8000c3c:	17da      	asrs	r2, r3, #31
 8000c3e:	1a8a      	subs	r2, r1, r2
 8000c40:	2132      	movs	r1, #50	; 0x32
 8000c42:	fb01 f202 	mul.w	r2, r1, r2
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%50;
 8000c4a:	f00a f891 	bl	800ad70 <rand>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <main+0x3a4>)
 8000c52:	fb82 1203 	smull	r1, r2, r2, r3
 8000c56:	1111      	asrs	r1, r2, #4
 8000c58:	17da      	asrs	r2, r3, #31
 8000c5a:	1a8a      	subs	r2, r1, r2
 8000c5c:	2132      	movs	r1, #50	; 0x32
 8000c5e:	fb01 f202 	mul.w	r2, r1, r2
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000c66:	f00a f883 	bl	800ad70 <rand>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	425a      	negs	r2, r3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	bf58      	it	pl
 8000c74:	4253      	negpl	r3, r2
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawRectangle(x,y,x+w,y+h,c);
 8000c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7a:	b218      	sxth	r0, r3
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7e:	b219      	sxth	r1, r3
 8000c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b21c      	sxth	r4, r3
 8000c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4413      	add	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	f001 fe64 	bl	8002972 <DrawRectangle>
	  x = rand()%VGA_WIDTH;
 8000caa:	f00a f861 	bl	800ad70 <rand>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <main+0x3a8>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1151      	asrs	r1, r2, #5
 8000cb8:	17da      	asrs	r2, r3, #31
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000cc0:	fb01 f202 	mul.w	r2, r1, r2
 8000cc4:	1a9b      	subs	r3, r3, r2
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000cc8:	f00a f852 	bl	800ad70 <rand>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <main+0x3ac>)
 8000cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd4:	441a      	add	r2, r3
 8000cd6:	11d1      	asrs	r1, r2, #7
 8000cd8:	17da      	asrs	r2, r3, #31
 8000cda:	1a8a      	subs	r2, r1, r2
 8000cdc:	21e8      	movs	r1, #232	; 0xe8
 8000cde:	fb01 f202 	mul.w	r2, r1, r2
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%50;
 8000ce6:	f00a f843 	bl	800ad70 <rand>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <main+0x3a4>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1111      	asrs	r1, r2, #4
 8000cf4:	17da      	asrs	r2, r3, #31
 8000cf6:	1a8a      	subs	r2, r1, r2
 8000cf8:	2132      	movs	r1, #50	; 0x32
 8000cfa:	fb01 f202 	mul.w	r2, r1, r2
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%50;
 8000d02:	f00a f835 	bl	800ad70 <rand>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <main+0x3a4>)
 8000d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0e:	1111      	asrs	r1, r2, #4
 8000d10:	17da      	asrs	r2, r3, #31
 8000d12:	1a8a      	subs	r2, r1, r2
 8000d14:	2132      	movs	r1, #50	; 0x32
 8000d16:	fb01 f202 	mul.w	r2, r1, r2
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000d1e:	f00a f827 	bl	800ad70 <rand>
 8000d22:	4603      	mov	r3, r0
 8000d24:	425a      	negs	r2, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	bf58      	it	pl
 8000d2c:	4253      	negpl	r3, r2
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillRectangle(x,y,w,h,c);
 8000d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d32:	b218      	sxth	r0, r3
 8000d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d36:	b219      	sxth	r1, r3
 8000d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	e018      	b.n	8000d70 <main+0x3b0>
 8000d3e:	bf00      	nop
 8000d40:	200003b8 	.word	0x200003b8
 8000d44:	40020414 	.word	0x40020414
 8000d48:	200002c0 	.word	0x200002c0
 8000d4c:	20000308 	.word	0x20000308
 8000d50:	20000350 	.word	0x20000350
 8000d54:	20000278 	.word	0x20000278
 8000d58:	200003b2 	.word	0x200003b2
 8000d5c:	0800bfdc 	.word	0x0800bfdc
 8000d60:	200001c8 	.word	0x200001c8
 8000d64:	51eb851f 	.word	0x51eb851f
 8000d68:	19c2d14f 	.word	0x19c2d14f
 8000d6c:	8d3dcb09 	.word	0x8d3dcb09
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	b21c      	sxth	r4, r3
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	f001 fe40 	bl	8002a00 <FillRectangle>

	  if(getch(&cc)){
 8000d80:	1cfb      	adds	r3, r7, #3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fdde 	bl	8000944 <getch>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d019      	beq.n	8000dc2 <main+0x402>
		FillRectangle(VGA_WIDTH-100,0,VGA_WIDTH-1,20,VGA_BLACK);
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2314      	movs	r3, #20
 8000d94:	f240 123d 	movw	r2, #317	; 0x13d
 8000d98:	2100      	movs	r1, #0
 8000d9a:	20da      	movs	r0, #218	; 0xda
 8000d9c:	f001 fe30 	bl	8002a00 <FillRectangle>
		sprintf(msg,"KEY:%d:%c",cc,cc);
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	461a      	mov	r2, r3
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	1d38      	adds	r0, r7, #4
 8000da8:	493c      	ldr	r1, [pc, #240]	; (8000e9c <main+0x4dc>)
 8000daa:	f00a f82f 	bl	800ae0c <siprintf>
		SetCursor(VGA_WIDTH-100,5);
 8000dae:	2105      	movs	r1, #5
 8000db0:	20da      	movs	r0, #218	; 0xda
 8000db2:	f001 fd1b 	bl	80027ec <SetCursor>
		WriteString(msg,Font_7x10,VGA_GREEN);
 8000db6:	4a3a      	ldr	r2, [pc, #232]	; (8000ea0 <main+0x4e0>)
 8000db8:	1d38      	adds	r0, r7, #4
 8000dba:	231c      	movs	r3, #28
 8000dbc:	ca06      	ldmia	r2, {r1, r2}
 8000dbe:	f001 fcef 	bl	80027a0 <WriteString>
	  }
	  z=z+1;
 8000dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(z>=100){
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	2b63      	cmp	r3, #99	; 0x63
 8000dcc:	dd60      	ble.n	8000e90 <main+0x4d0>
		  /////////
		  ClearScreen(VGA_BLACK);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f001 fafa 	bl	80023c8 <ClearScreen>
		  ShowImage((uint8_t *)color,320,240,0,0);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	22f0      	movs	r2, #240	; 0xf0
 8000ddc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000de0:	4830      	ldr	r0, [pc, #192]	; (8000ea4 <main+0x4e4>)
 8000de2:	f001 ff49 	bl	8002c78 <ShowImage>
		  HAL_Delay(5000);
 8000de6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dea:	f002 f82b 	bl	8002e44 <HAL_Delay>
		  ShowImage((uint8_t *)image,360,228,0,0);
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	22e4      	movs	r2, #228	; 0xe4
 8000df6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000dfa:	482b      	ldr	r0, [pc, #172]	; (8000ea8 <main+0x4e8>)
 8000dfc:	f001 ff3c 	bl	8002c78 <ShowImage>
		  HAL_Delay(5000);
 8000e00:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e04:	f002 f81e 	bl	8002e44 <HAL_Delay>
		  ShowImage((uint8_t *)rgb,320,240,0,0);
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	22f0      	movs	r2, #240	; 0xf0
 8000e10:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000e14:	4825      	ldr	r0, [pc, #148]	; (8000eac <main+0x4ec>)
 8000e16:	f001 ff2f 	bl	8002c78 <ShowImage>
		  HAL_Delay(5000);
 8000e1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e1e:	f002 f811 	bl	8002e44 <HAL_Delay>

		  tetris();
 8000e22:	f001 f931 	bl	8002088 <tetris>
		  //////////
		  z=0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ClearScreen(VGA_BLACK);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f001 facc 	bl	80023c8 <ClearScreen>
		  HAL_Delay(100);
 8000e30:	2064      	movs	r0, #100	; 0x64
 8000e32:	f002 f807 	bl	8002e44 <HAL_Delay>
		  vga_stop=1;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <main+0x4f0>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	801a      	strh	r2, [r3, #0]
		  sprintf(msg,"Testing");
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	491d      	ldr	r1, [pc, #116]	; (8000eb4 <main+0x4f4>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f009 ffe3 	bl	800ae0c <siprintf>
		  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000e46:	23ff      	movs	r3, #255	; 0xff
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	23e7      	movs	r3, #231	; 0xe7
 8000e4c:	f240 123d 	movw	r2, #317	; 0x13d
 8000e50:	2100      	movs	r1, #0
 8000e52:	2000      	movs	r0, #0
 8000e54:	f001 fd8d 	bl	8002972 <DrawRectangle>
		  SetCursor(3,3);
 8000e58:	2103      	movs	r1, #3
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f001 fcc6 	bl	80027ec <SetCursor>
		  WriteString(msg,Font_7x10,VGA_GREEN);
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <main+0x4e0>)
 8000e62:	1d38      	adds	r0, r7, #4
 8000e64:	231c      	movs	r3, #28
 8000e66:	ca06      	ldmia	r2, {r1, r2}
 8000e68:	f001 fc9a 	bl	80027a0 <WriteString>
		  sprintf(msg,"%d ",VOFFSET);
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <main+0x4f8>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4911      	ldr	r1, [pc, #68]	; (8000ebc <main+0x4fc>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f009 ffc8 	bl	800ae0c <siprintf>
		  SetCursor(3,50);
 8000e7c:	2132      	movs	r1, #50	; 0x32
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f001 fcb4 	bl	80027ec <SetCursor>
		  WriteString(msg,Font_7x10,VGA_WHITE);
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <main+0x4e0>)
 8000e86:	1d38      	adds	r0, r7, #4
 8000e88:	23ff      	movs	r3, #255	; 0xff
 8000e8a:	ca06      	ldmia	r2, {r1, r2}
 8000e8c:	f001 fc88 	bl	80027a0 <WriteString>
	  }
	  HAL_Delay(100);
 8000e90:	2064      	movs	r0, #100	; 0x64
 8000e92:	f001 ffd7 	bl	8002e44 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e96:	f009 fb39 	bl	800a50c <MX_USB_HOST_Process>
  {
 8000e9a:	e62c      	b.n	8000af6 <main+0x136>
 8000e9c:	0800bfc8 	.word	0x0800bfc8
 8000ea0:	200001c8 	.word	0x200001c8
 8000ea4:	080200d0 	.word	0x080200d0
 8000ea8:	0800c030 	.word	0x0800c030
 8000eac:	08032cd0 	.word	0x08032cd0
 8000eb0:	200003b2 	.word	0x200003b2
 8000eb4:	0800bfd4 	.word	0x0800bfd4
 8000eb8:	200003b0 	.word	0x200003b0
 8000ebc:	0800bfc4 	.word	0x0800bfc4

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2230      	movs	r2, #48	; 0x30
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f009 fe38 	bl	800ab44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <SystemClock_Config+0xc8>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <SystemClock_Config+0xc8>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <SystemClock_Config+0xc8>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <SystemClock_Config+0xcc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <SystemClock_Config+0xcc>)
 8000f0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <SystemClock_Config+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f26:	2302      	movs	r3, #2
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f30:	2319      	movs	r3, #25
 8000f32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f34:	23c0      	movs	r3, #192	; 0xc0
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fae3 	bl	8005510 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f50:	f000 f9ea 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2103      	movs	r1, #3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 fd45 	bl	8005a00 <HAL_RCC_ClockConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f7c:	f000 f9d4 	bl	8001328 <Error_Handler>
  }
}
 8000f80:	bf00      	nop
 8000f82:	3750      	adds	r7, #80	; 0x50
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4-1;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_TIM1_Init+0x98>)
 8000fd8:	f004 febe 	bl	8005d58 <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000fe2:	f000 f9a1 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_TIM1_Init+0x98>)
 8000ff4:	f005 fa90 	bl	8006518 <HAL_TIM_ConfigClockSource>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000ffe:	f000 f993 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001002:	2320      	movs	r3, #32
 8001004:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_TIM1_Init+0x98>)
 8001010:	f005 ff10 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800101a:	f000 f985 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000278 	.word	0x20000278
 800102c:	40010000 	.word	0x40010000

08001030 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <MX_TIM9_Init+0xc0>)
 800105a:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <MX_TIM9_Init+0xc4>)
 800105c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_TIM9_Init+0xc0>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <MX_TIM9_Init+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 523;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_TIM9_Init+0xc0>)
 800106c:	f240 220b 	movw	r2, #523	; 0x20b
 8001070:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_TIM9_Init+0xc0>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_TIM9_Init+0xc0>)
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800107e:	481c      	ldr	r0, [pc, #112]	; (80010f0 <MX_TIM9_Init+0xc0>)
 8001080:	f004 fe6a 	bl	8005d58 <HAL_TIM_Base_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800108a:	f000 f94d 	bl	8001328 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800108e:	4818      	ldr	r0, [pc, #96]	; (80010f0 <MX_TIM9_Init+0xc0>)
 8001090:	f004 ff6e 	bl	8005f70 <HAL_TIM_PWM_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 f945 	bl	8001328 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800109e:	2307      	movs	r3, #7
 80010a0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80010a2:	2320      	movs	r3, #32
 80010a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <MX_TIM9_Init+0xc0>)
 80010ae:	f005 fafa 	bl	80066a6 <HAL_TIM_SlaveConfigSynchro>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 80010b8:	f000 f936 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010bc:	2360      	movs	r3, #96	; 0x60
 80010be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2-1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010c8:	2304      	movs	r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_TIM9_Init+0xc0>)
 80010d4:	f005 f95e 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM9_Init+0xb2>
  {
    Error_Handler();
 80010de:	f000 f923 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <MX_TIM9_Init+0xc0>)
 80010e4:	f000 f9e8 	bl	80014b8 <HAL_TIM_MspPostInit>

}
 80010e8:	bf00      	nop
 80010ea:	3730      	adds	r7, #48	; 0x30
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200002c0 	.word	0x200002c0
 80010f4:	40014000 	.word	0x40014000

080010f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_TIM10_Init+0x94>)
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <MX_TIM10_Init+0x98>)
 8001114:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4-1;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_TIM10_Init+0x94>)
 8001118:	2203      	movs	r2, #3
 800111a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_TIM10_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800-1;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_TIM10_Init+0x94>)
 8001124:	f240 321f 	movw	r2, #799	; 0x31f
 8001128:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_TIM10_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_TIM10_Init+0x94>)
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <MX_TIM10_Init+0x94>)
 8001138:	f004 fe0e 	bl	8005d58 <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001142:	f000 f8f1 	bl	8001328 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <MX_TIM10_Init+0x94>)
 8001148:	f004 ff12 	bl	8005f70 <HAL_TIM_PWM_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001152:	f000 f8e9 	bl	8001328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001156:	2360      	movs	r3, #96	; 0x60
 8001158:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 96-1;
 800115a:	235f      	movs	r3, #95	; 0x5f
 800115c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001162:	2304      	movs	r3, #4
 8001164:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM10_Init+0x94>)
 800116e:	f005 f911 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001178:	f000 f8d6 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM10_Init+0x94>)
 800117e:	f000 f99b 	bl	80014b8 <HAL_TIM_MspPostInit>

}
 8001182:	bf00      	nop
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000308 	.word	0x20000308
 8001190:	40014400 	.word	0x40014400

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_DMA_Init+0x3c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <MX_DMA_Init+0x3c>)
 80011a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_DMA_Init+0x3c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2044      	movs	r0, #68	; 0x44
 80011bc:	f001 ff41 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c0:	2044      	movs	r0, #68	; 0x44
 80011c2:	f001 ff5a 	bl	800307a <HAL_NVIC_EnableIRQ>

}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <MX_GPIO_Init+0x144>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a49      	ldr	r2, [pc, #292]	; (8001318 <MX_GPIO_Init+0x144>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b47      	ldr	r3, [pc, #284]	; (8001318 <MX_GPIO_Init+0x144>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <MX_GPIO_Init+0x144>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a42      	ldr	r2, [pc, #264]	; (8001318 <MX_GPIO_Init+0x144>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <MX_GPIO_Init+0x144>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <MX_GPIO_Init+0x144>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a3b      	ldr	r2, [pc, #236]	; (8001318 <MX_GPIO_Init+0x144>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <MX_GPIO_Init+0x144>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <MX_GPIO_Init+0x144>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a34      	ldr	r2, [pc, #208]	; (8001318 <MX_GPIO_Init+0x144>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <MX_GPIO_Init+0x144>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001260:	482e      	ldr	r0, [pc, #184]	; (800131c <MX_GPIO_Init+0x148>)
 8001262:	f002 fcff 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B0_Pin|B1_Pin|G0_Pin|G1_Pin
 8001266:	2200      	movs	r2, #0
 8001268:	21ff      	movs	r1, #255	; 0xff
 800126a:	482d      	ldr	r0, [pc, #180]	; (8001320 <MX_GPIO_Init+0x14c>)
 800126c:	f002 fcfa 	bl	8003c64 <HAL_GPIO_WritePin>
                          |G2_Pin|R0_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001276:	482b      	ldr	r0, [pc, #172]	; (8001324 <MX_GPIO_Init+0x150>)
 8001278:	f002 fcf4 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <MX_GPIO_Init+0x148>)
 8001296:	f002 fb61 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin B1_Pin G0_Pin G1_Pin
                           G2_Pin R0_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|G0_Pin|G1_Pin
 800129a:	23ff      	movs	r3, #255	; 0xff
 800129c:	617b      	str	r3, [r7, #20]
                          |G2_Pin|R0_Pin|R1_Pin|R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <MX_GPIO_Init+0x14c>)
 80012b2:	f002 fb53 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80012b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <MX_GPIO_Init+0x14c>)
 80012ce:	f002 fb45 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <MX_GPIO_Init+0x150>)
 80012ec:	f002 fb36 	bl	800395c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2017      	movs	r0, #23
 80012f6:	f001 fea4 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012fa:	2017      	movs	r0, #23
 80012fc:	f001 febd 	bl	800307a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2028      	movs	r0, #40	; 0x28
 8001306:	f001 fe9c 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800130a:	2028      	movs	r0, #40	; 0x28
 800130c:	f001 feb5 	bl	800307a <HAL_NVIC_EnableIRQ>

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800
 8001320:	40020400 	.word	0x40020400
 8001324:	40020000 	.word	0x40020000

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_MspInit+0x4c>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x4c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <HAL_TIM_Base_MspInit+0x11c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d150      	bne.n	8001438 <HAL_TIM_Base_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013b4:	4a3d      	ldr	r2, [pc, #244]	; (80014ac <HAL_TIM_Base_MspInit+0x128>)
 80013b6:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013ba:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013be:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80013cc:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d2:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d4:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013da:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ee:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013f8:	2203      	movs	r2, #3
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_up.Init.MemBurst = DMA_MBURST_INC16;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 80013fe:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 8001406:	2200      	movs	r2, #0
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800140a:	4827      	ldr	r0, [pc, #156]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 800140c:	f001 fe50 	bl	80030b0 <HAL_DMA_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8001416:	f7ff ff87 	bl	8001328 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 800141e:	621a      	str	r2, [r3, #32]
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <HAL_TIM_Base_MspInit+0x124>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2018      	movs	r0, #24
 800142c:	f001 fe09 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001430:	2018      	movs	r0, #24
 8001432:	f001 fe22 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001436:	e02e      	b.n	8001496 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM9)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <HAL_TIM_Base_MspInit+0x12c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d116      	bne.n	8001470 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2018      	movs	r0, #24
 8001464:	f001 fded 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001468:	2018      	movs	r0, #24
 800146a:	f001 fe06 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 800146e:	e012      	b.n	8001496 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM10)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_TIM_Base_MspInit+0x130>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10d      	bne.n	8001496 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_TIM_Base_MspInit+0x120>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	20000350 	.word	0x20000350
 80014ac:	40026488 	.word	0x40026488
 80014b0:	40014000 	.word	0x40014000
 80014b4:	40014400 	.word	0x40014400

080014b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_TIM_MspPostInit+0xb0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d11e      	bne.n	8001518 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_TIM_MspPostInit+0xb4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <HAL_TIM_MspPostInit+0xb4>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_TIM_MspPostInit+0xb4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f6:	2304      	movs	r3, #4
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001506:	2303      	movs	r3, #3
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4817      	ldr	r0, [pc, #92]	; (8001570 <HAL_TIM_MspPostInit+0xb8>)
 8001512:	f002 fa23 	bl	800395c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001516:	e023      	b.n	8001560 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a15      	ldr	r2, [pc, #84]	; (8001574 <HAL_TIM_MspPostInit+0xbc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d11e      	bne.n	8001560 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_TIM_MspPostInit+0xb4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_TIM_MspPostInit+0xb4>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_TIM_MspPostInit+0xb4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800153e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001550:	2303      	movs	r3, #3
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <HAL_TIM_MspPostInit+0xc0>)
 800155c:	f002 f9fe 	bl	800395c <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40014000 	.word	0x40014000
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	40014400 	.word	0x40014400
 8001578:	40020400 	.word	0x40020400

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x4>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f001 fc1c 	bl	8002e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80015d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015d8:	f002 fb78 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80015e6:	f004 fdcd 	bl	8006184 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80015ea:	4803      	ldr	r0, [pc, #12]	; (80015f8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80015ec:	f004 fdca 	bl	8006184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000278 	.word	0x20000278
 80015f8:	200002c0 	.word	0x200002c0

080015fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001600:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001604:	f002 fb62 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <OTG_FS_IRQHandler+0x10>)
 8001612:	f002 fddd 	bl	80041d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20013f2c 	.word	0x20013f2c

08001620 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA2_Stream5_IRQHandler+0x10>)
 8001626:	f001 fedb 	bl	80033e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000350 	.word	0x20000350

08001634 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_kill>:

int _kill(int pid, int sig)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800164e:	f009 fa31 	bl	800aab4 <__errno>
 8001652:	4603      	mov	r3, r0
 8001654:	2216      	movs	r2, #22
 8001656:	601a      	str	r2, [r3, #0]
	return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_exit>:

void _exit (int status)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ffe7 	bl	8001644 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001676:	e7fe      	b.n	8001676 <_exit+0x12>

08001678 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
	}

return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e009      	b.n	80016d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf1      	blt.n	80016c4 <_write+0x12>
	}
	return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_close>:

int _close(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	return -1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001712:	605a      	str	r2, [r3, #4]
	return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_isatty>:

int _isatty(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	return 1;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f009 f996 	bl	800aab4 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20020000 	.word	0x20020000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	20000414 	.word	0x20000414
 80017bc:	20014240 	.word	0x20014240

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NextBlock>:
extern uint8_t getch(char *ch);
extern void myDelay(int ms);

//spawning next falling block
void NextBlock()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
fallingblockNum=rand()%5;
 80017e8:	f009 fac2 	bl	800ad70 <rand>
 80017ec:	4601      	mov	r1, r0
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <NextBlock+0x88>)
 80017f0:	fb83 2301 	smull	r2, r3, r3, r1
 80017f4:	105a      	asrs	r2, r3, #1
 80017f6:	17cb      	asrs	r3, r1, #31
 80017f8:	1ad2      	subs	r2, r2, r3
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	1aca      	subs	r2, r1, r3
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <NextBlock+0x8c>)
 8001804:	601a      	str	r2, [r3, #0]
if(fallingblockNum==0||fallingblockNum==1)
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <NextBlock+0x8c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <NextBlock+0x32>
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <NextBlock+0x8c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10c      	bne.n	8001830 <NextBlock+0x4c>
 fallingBlockVersion=rand()%4;
 8001816:	f009 faab 	bl	800ad70 <rand>
 800181a:	4603      	mov	r3, r0
 800181c:	425a      	negs	r2, r3
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	bf58      	it	pl
 8001828:	4253      	negpl	r3, r2
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <NextBlock+0x90>)
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e015      	b.n	800185c <NextBlock+0x78>
else if(fallingblockNum==4||fallingblockNum==3)
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <NextBlock+0x8c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b04      	cmp	r3, #4
 8001836:	d003      	beq.n	8001840 <NextBlock+0x5c>
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <NextBlock+0x8c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d10a      	bne.n	8001856 <NextBlock+0x72>
 fallingBlockVersion=rand()%2;
 8001840:	f009 fa96 	bl	800ad70 <rand>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	bfb8      	it	lt
 800184e:	425b      	neglt	r3, r3
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <NextBlock+0x90>)
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e002      	b.n	800185c <NextBlock+0x78>
else
 fallingBlockVersion=0;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <NextBlock+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
fallingBlockRow=0;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <NextBlock+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
fallingBlockCol=5;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <NextBlock+0x98>)
 8001864:	2205      	movs	r2, #5
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	66666667 	.word	0x66666667
 8001870:	20000b38 	.word	0x20000b38
 8001874:	20000b3c 	.word	0x20000b3c
 8001878:	20000b40 	.word	0x20000b40
 800187c:	20000b44 	.word	0x20000b44

08001880 <getFallingBlockArray>:
//store pointer to current falling block's array in *blockarray;
int *getFallingBlockArray()
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
int a=fallingblockNum*10+fallingBlockVersion;
 8001886:	4b43      	ldr	r3, [pc, #268]	; (8001994 <getFallingBlockArray+0x114>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	461a      	mov	r2, r3
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <getFallingBlockArray+0x118>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4413      	add	r3, r2
 800189a:	607b      	str	r3, [r7, #4]
switch(a)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b29      	cmp	r3, #41	; 0x29
 80018a0:	d870      	bhi.n	8001984 <getFallingBlockArray+0x104>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <getFallingBlockArray+0x28>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	08001951 	.word	0x08001951
 80018ac:	08001955 	.word	0x08001955
 80018b0:	08001959 	.word	0x08001959
 80018b4:	0800195d 	.word	0x0800195d
 80018b8:	08001985 	.word	0x08001985
 80018bc:	08001985 	.word	0x08001985
 80018c0:	08001985 	.word	0x08001985
 80018c4:	08001985 	.word	0x08001985
 80018c8:	08001985 	.word	0x08001985
 80018cc:	08001985 	.word	0x08001985
 80018d0:	08001961 	.word	0x08001961
 80018d4:	08001965 	.word	0x08001965
 80018d8:	08001969 	.word	0x08001969
 80018dc:	0800196d 	.word	0x0800196d
 80018e0:	08001985 	.word	0x08001985
 80018e4:	08001985 	.word	0x08001985
 80018e8:	08001985 	.word	0x08001985
 80018ec:	08001985 	.word	0x08001985
 80018f0:	08001985 	.word	0x08001985
 80018f4:	08001985 	.word	0x08001985
 80018f8:	08001971 	.word	0x08001971
 80018fc:	08001985 	.word	0x08001985
 8001900:	08001985 	.word	0x08001985
 8001904:	08001985 	.word	0x08001985
 8001908:	08001985 	.word	0x08001985
 800190c:	08001985 	.word	0x08001985
 8001910:	08001985 	.word	0x08001985
 8001914:	08001985 	.word	0x08001985
 8001918:	08001985 	.word	0x08001985
 800191c:	08001985 	.word	0x08001985
 8001920:	08001975 	.word	0x08001975
 8001924:	08001979 	.word	0x08001979
 8001928:	08001985 	.word	0x08001985
 800192c:	08001985 	.word	0x08001985
 8001930:	08001985 	.word	0x08001985
 8001934:	08001985 	.word	0x08001985
 8001938:	08001985 	.word	0x08001985
 800193c:	08001985 	.word	0x08001985
 8001940:	08001985 	.word	0x08001985
 8001944:	08001985 	.word	0x08001985
 8001948:	0800197d 	.word	0x0800197d
 800194c:	08001981 	.word	0x08001981
    {
    case 0:return ((int*)&t_);
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <getFallingBlockArray+0x11c>)
 8001952:	e018      	b.n	8001986 <getFallingBlockArray+0x106>
    case 1:return ((int*)&t_90);
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <getFallingBlockArray+0x120>)
 8001956:	e016      	b.n	8001986 <getFallingBlockArray+0x106>
    case 2:return ((int*)&t_180);
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <getFallingBlockArray+0x124>)
 800195a:	e014      	b.n	8001986 <getFallingBlockArray+0x106>
    case 3:return ((int*)&t_270);
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <getFallingBlockArray+0x128>)
 800195e:	e012      	b.n	8001986 <getFallingBlockArray+0x106>
    case 10:return ((int*)&l_);
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <getFallingBlockArray+0x12c>)
 8001962:	e010      	b.n	8001986 <getFallingBlockArray+0x106>
    case 11:return ((int*)&l_90);
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <getFallingBlockArray+0x130>)
 8001966:	e00e      	b.n	8001986 <getFallingBlockArray+0x106>
    case 12:return ((int*)&l_180);
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <getFallingBlockArray+0x134>)
 800196a:	e00c      	b.n	8001986 <getFallingBlockArray+0x106>
    case 13:return ((int*)&l_270);
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <getFallingBlockArray+0x138>)
 800196e:	e00a      	b.n	8001986 <getFallingBlockArray+0x106>
    case 20:return ((int*)&s_);
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <getFallingBlockArray+0x13c>)
 8001972:	e008      	b.n	8001986 <getFallingBlockArray+0x106>
    case 30:return ((int*)&z_);
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <getFallingBlockArray+0x140>)
 8001976:	e006      	b.n	8001986 <getFallingBlockArray+0x106>
    case 31:return ((int*)&z_90);
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <getFallingBlockArray+0x144>)
 800197a:	e004      	b.n	8001986 <getFallingBlockArray+0x106>
    case 40:return ((int*)&i_hor);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <getFallingBlockArray+0x148>)
 800197e:	e002      	b.n	8001986 <getFallingBlockArray+0x106>
    case 41:return ((int*)&i_ver);
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <getFallingBlockArray+0x14c>)
 8001982:	e000      	b.n	8001986 <getFallingBlockArray+0x106>
    }
return ((int*)&i_ver);
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <getFallingBlockArray+0x14c>)
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000b38 	.word	0x20000b38
 8001998:	20000b3c 	.word	0x20000b3c
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	2000002c 	.word	0x2000002c
 80019a4:	2000004c 	.word	0x2000004c
 80019a8:	2000006c 	.word	0x2000006c
 80019ac:	2000008c 	.word	0x2000008c
 80019b0:	200000ac 	.word	0x200000ac
 80019b4:	200000cc 	.word	0x200000cc
 80019b8:	200000ec 	.word	0x200000ec
 80019bc:	2000010c 	.word	0x2000010c
 80019c0:	2000012c 	.word	0x2000012c
 80019c4:	2000014c 	.word	0x2000014c
 80019c8:	2000018c 	.word	0x2000018c
 80019cc:	2000016c 	.word	0x2000016c

080019d0 <isDrawable>:
/* To check if moving to left or right
or rotation of falling block is feasible.
i.e to check whether there is enough space around it.
*/
int isDrawable(int newrow,int newcol,int blockversion)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
int i,tempversion,flag=1;;
 80019dc:	2301      	movs	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
tempversion=fallingBlockVersion;
 80019e0:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <isDrawable+0xf0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	617b      	str	r3, [r7, #20]
fallingBlockVersion=blockversion;
 80019e6:	4a36      	ldr	r2, [pc, #216]	; (8001ac0 <isDrawable+0xf0>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]
blockarray=getFallingBlockArray();
 80019ec:	f7ff ff48 	bl	8001880 <getFallingBlockArray>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a34      	ldr	r2, [pc, #208]	; (8001ac4 <isDrawable+0xf4>)
 80019f4:	6013      	str	r3, [r2, #0]
for(i=0;i<8;i+=2)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e051      	b.n	8001aa0 <isDrawable+0xd0>
    {
//check if block goes out of the matrix (up or down)

if(newrow+blockarray[i]>34||newrow+blockarray[i]<0)
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <isDrawable+0xf4>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2b22      	cmp	r3, #34	; 0x22
 8001a0e:	dc09      	bgt.n	8001a24 <isDrawable+0x54>
 8001a10:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <isDrawable+0xf4>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da02      	bge.n	8001a2a <isDrawable+0x5a>
 {
 flag=0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
 break;
 8001a28:	e03d      	b.n	8001aa6 <isDrawable+0xd6>
 }
//check if block goes out of the matrix (left or right)

if(newcol+blockarray[i+1]>12||newcol+blockarray[i+1]<0)
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <isDrawable+0xf4>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	dc0a      	bgt.n	8001a56 <isDrawable+0x86>
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <isDrawable+0xf4>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4413      	add	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da02      	bge.n	8001a5c <isDrawable+0x8c>
 {
 flag=0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 break;
 8001a5a:	e024      	b.n	8001aa6 <isDrawable+0xd6>
 }
//check if there is any obstacle on the proposed position

if(board[(newrow+blockarray[i])][(newcol+blockarray[i+1])]==2)
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <isDrawable+0xf4>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <isDrawable+0xf4>)
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3301      	adds	r3, #1
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4419      	add	r1, r3
 8001a7e:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <isDrawable+0xf8>)
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d102      	bne.n	8001a9a <isDrawable+0xca>
 {
 flag=0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
 break;
 8001a98:	e005      	b.n	8001aa6 <isDrawable+0xd6>
for(i=0;i<8;i+=2)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b07      	cmp	r3, #7
 8001aa4:	ddaa      	ble.n	80019fc <isDrawable+0x2c>
 }
    }
fallingBlockVersion=tempversion;
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <isDrawable+0xf0>)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	6013      	str	r3, [r2, #0]
blockarray=getFallingBlockArray();
 8001aac:	f7ff fee8 	bl	8001880 <getFallingBlockArray>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <isDrawable+0xf4>)
 8001ab4:	6013      	str	r3, [r2, #0]
return flag;
 8001ab6:	69bb      	ldr	r3, [r7, #24]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000b3c 	.word	0x20000b3c
 8001ac4:	20000b34 	.word	0x20000b34
 8001ac8:	20000418 	.word	0x20000418

08001acc <clearOldBlockVersion>:
To clear the old position of falling block
after it moves to a new position (row/column change)
or after it is rotated
*/
void clearOldBlockVersion()
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af02      	add	r7, sp, #8
int i,r,c;
for(i=0;i<8;i+=2)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e04f      	b.n	8001b78 <clearOldBlockVersion+0xac>
 {
 r=fallingBlockRow+blockarray[i];
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <clearOldBlockVersion+0xbc>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <clearOldBlockVersion+0xc0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
 c=fallingBlockCol+blockarray[i+1];
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <clearOldBlockVersion+0xbc>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3301      	adds	r3, #1
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <clearOldBlockVersion+0xc4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	607b      	str	r3, [r7, #4]
 board[r][c]=0;
 8001b02:	4924      	ldr	r1, [pc, #144]	; (8001b94 <clearOldBlockVersion+0xc8>)
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	2200      	movs	r2, #0
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

// setfillstyle(EMPTY_FILL,BLACK);
 //setcolor(BLACK);
 //      bar(2+c*13,2+r*13,2+c*13+13,2+r*13+13);
 FillRectangle(2+c*SIZE,2+r*SIZE,2+c*SIZE+SIZE,2+r*SIZE+SIZE,VGA_BLACK);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	0052      	lsls	r2, r2, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3302      	adds	r3, #2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b218      	sxth	r0, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	0052      	lsls	r2, r2, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b219      	sxth	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	0052      	lsls	r2, r2, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3308      	adds	r3, #8
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	461c      	mov	r4, r3
 8001b5c:	0064      	lsls	r4, r4, #1
 8001b5e:	4423      	add	r3, r4
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3308      	adds	r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	9400      	str	r4, [sp, #0]
 8001b6e:	f000 ff47 	bl	8002a00 <FillRectangle>
for(i=0;i<8;i+=2)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3302      	adds	r3, #2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	ddac      	ble.n	8001ad8 <clearOldBlockVersion+0xc>
 }
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	20000b34 	.word	0x20000b34
 8001b8c:	20000b40 	.word	0x20000b40
 8001b90:	20000b44 	.word	0x20000b44
 8001b94:	20000418 	.word	0x20000418

08001b98 <drawNewBlockVersion>:
or after it is rotated

*/

void drawNewBlockVersion()
{
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
int i,r,c;
for(i=0;i<8;i+=2)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e055      	b.n	8001c50 <drawNewBlockVersion+0xb8>
 {
 r=fallingBlockRow+blockarray[i];
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <drawNewBlockVersion+0xc8>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <drawNewBlockVersion+0xcc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
 c=fallingBlockCol+blockarray[i+1];
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <drawNewBlockVersion+0xc8>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <drawNewBlockVersion+0xd0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	607b      	str	r3, [r7, #4]
 board[r][c]=1;
 8001bce:	4927      	ldr	r1, [pc, #156]	; (8001c6c <drawNewBlockVersion+0xd4>)
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	2201      	movs	r2, #1
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
// setfillstyle(XHATCH_FILL,CYAN);
 //setcolor(GREEN);
 //bar(2+c*13,2+r*13,2+c*13+13,2+r*13+13);
 FillRectangle(2+c*SIZE,2+r*SIZE,2+c*SIZE+SIZE-1,2+r*SIZE+SIZE-1,Tcolor[fallingblockNum]);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	0052      	lsls	r2, r2, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b218      	sxth	r0, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	0052      	lsls	r2, r2, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3302      	adds	r3, #2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b219      	sxth	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	0052      	lsls	r2, r2, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3307      	adds	r3, #7
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461c      	mov	r4, r3
 8001c28:	0064      	lsls	r4, r4, #1
 8001c2a:	4423      	add	r3, r4
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3307      	adds	r3, #7
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b21c      	sxth	r4, r3
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <drawNewBlockVersion+0xd8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4d0e      	ldr	r5, [pc, #56]	; (8001c74 <drawNewBlockVersion+0xdc>)
 8001c3c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4623      	mov	r3, r4
 8001c46:	f000 fedb 	bl	8002a00 <FillRectangle>
for(i=0;i<8;i+=2)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b07      	cmp	r3, #7
 8001c54:	dda6      	ble.n	8001ba4 <drawNewBlockVersion+0xc>
 }
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c60:	20000b34 	.word	0x20000b34
 8001c64:	20000b40 	.word	0x20000b40
 8001c68:	20000b44 	.word	0x20000b44
 8001c6c:	20000418 	.word	0x20000418
 8001c70:	20000b38 	.word	0x20000b38
 8001c74:	200001ac 	.word	0x200001ac

08001c78 <isGameOver>:

*/


int isGameOver()
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
if(isDrawable(0,5,fallingBlockVersion)==0)
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <isGameOver+0x34>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	2105      	movs	r1, #5
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff fea3 	bl	80019d0 <isDrawable>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <isGameOver+0x1c>
    return 1;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e009      	b.n	8001ca8 <isGameOver+0x30>
drawNewBlockVersion();
 8001c94:	f7ff ff80 	bl	8001b98 <drawNewBlockVersion>
if(isAtBottom())
 8001c98:	f000 f80a 	bl	8001cb0 <isAtBottom>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <isGameOver+0x2e>
    return 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <isGameOver+0x30>
return 0;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000b3c 	.word	0x20000b3c

08001cb0 <isAtBottom>:
/*
To check if falling block reached the bottom
*/
int isAtBottom()
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
int i,max=0,ti,tj;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
for(i=0;i<8;i+=2)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e012      	b.n	8001ce6 <isAtBottom+0x36>
    if(*(blockarray+i)>max)
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <isAtBottom+0xb8>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	da06      	bge.n	8001ce0 <isAtBottom+0x30>
 max=*(blockarray+i);
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <isAtBottom+0xb8>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60bb      	str	r3, [r7, #8]
for(i=0;i<8;i+=2)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	dde9      	ble.n	8001cc0 <isAtBottom+0x10>
if(fallingBlockRow+max>=34)
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <isAtBottom+0xbc>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2b21      	cmp	r3, #33	; 0x21
 8001cf6:	dd01      	ble.n	8001cfc <isAtBottom+0x4c>
 return 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e02e      	b.n	8001d5a <isAtBottom+0xaa>
for(i=0;i<8;i+=2)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e027      	b.n	8001d52 <isAtBottom+0xa2>
    {
    ti=*(blockarray+i)+fallingBlockRow;
 8001d02:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <isAtBottom+0xb8>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <isAtBottom+0xbc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	607b      	str	r3, [r7, #4]
    tj=*(blockarray+i+1)+fallingBlockCol;
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <isAtBottom+0xb8>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <isAtBottom+0xc0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	603b      	str	r3, [r7, #0]
    if(board[ti+1][tj]==2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4910      	ldr	r1, [pc, #64]	; (8001d74 <isAtBottom+0xc4>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d101      	bne.n	8001d4c <isAtBottom+0x9c>
       return 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e006      	b.n	8001d5a <isAtBottom+0xaa>
for(i=0;i<8;i+=2)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3302      	adds	r3, #2
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	ddd4      	ble.n	8001d02 <isAtBottom+0x52>
    }
return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000b34 	.word	0x20000b34
 8001d6c:	20000b40 	.word	0x20000b40
 8001d70:	20000b44 	.word	0x20000b44
 8001d74:	20000418 	.word	0x20000418

08001d78 <showScore>:
/*
Draw score on screen
*/
void showScore()
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b08d      	sub	sp, #52	; 0x34
 8001d7c:	af02      	add	r7, sp, #8
int left,top;
//setcolor(BLACK);
//setfillstyle(EMPTY_FILL,BLACK);
left=VGA_WIDTH-100;
 8001d7e:	23da      	movs	r3, #218	; 0xda
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
top=VGA_HEIGHT/2;
 8001d82:	2374      	movs	r3, #116	; 0x74
 8001d84:	623b      	str	r3, [r7, #32]
FillRectangle(left,top,left+60,top+30,VGA_BLACK);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	b218      	sxth	r0, r3
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	b219      	sxth	r1, r3
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	333c      	adds	r3, #60	; 0x3c
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	331e      	adds	r3, #30
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	2400      	movs	r4, #0
 8001da4:	9400      	str	r4, [sp, #0]
 8001da6:	f000 fe2b 	bl	8002a00 <FillRectangle>
//bar3d(left,top,left+60,top+70,2,1);
//setcolor(YELLOW);
//settextstyle(TRIPLEX_FONT, HORIZ_DIR,2);
char msg[32]="SCORE";
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <showScore+0xb8>)
 8001dac:	463b      	mov	r3, r7
 8001dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db2:	6018      	str	r0, [r3, #0]
 8001db4:	3304      	adds	r3, #4
 8001db6:	8019      	strh	r1, [r3, #0]
 8001db8:	1dbb      	adds	r3, r7, #6
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
 8001dc6:	615a      	str	r2, [r3, #20]
 8001dc8:	831a      	strh	r2, [r3, #24]
SetCursor(left+5,top+3);
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3305      	adds	r3, #5
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3303      	adds	r3, #3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f000 fd03 	bl	80027ec <SetCursor>
WriteString(msg,Font_7x10,VGA_YELLOW);
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <showScore+0xbc>)
 8001de8:	4638      	mov	r0, r7
 8001dea:	23fc      	movs	r3, #252	; 0xfc
 8001dec:	ca06      	ldmia	r2, {r1, r2}
 8001dee:	f000 fcd7 	bl	80027a0 <WriteString>
//outtextxy(getmaxx()-100,getmaxy()/2,"Score: ");
sprintf(msg,"%d",myscore);
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <showScore+0xc0>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	463b      	mov	r3, r7
 8001df8:	4910      	ldr	r1, [pc, #64]	; (8001e3c <showScore+0xc4>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f009 f806 	bl	800ae0c <siprintf>
SetCursor(left+5,top+17);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3305      	adds	r3, #5
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3311      	adds	r3, #17
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f000 fce8 	bl	80027ec <SetCursor>
WriteString(msg,Font_7x10,VGA_YELLOW);
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <showScore+0xbc>)
 8001e1e:	4638      	mov	r0, r7
 8001e20:	23fc      	movs	r3, #252	; 0xfc
 8001e22:	ca06      	ldmia	r2, {r1, r2}
 8001e24:	f000 fcbc 	bl	80027a0 <WriteString>
//outtextxy(getmaxx()-100,getmaxy()/2+20,itoa(myscore,scorestr,10));
}
 8001e28:	bf00      	nop
 8001e2a:	372c      	adds	r7, #44	; 0x2c
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	0800c000 	.word	0x0800c000
 8001e34:	200001c8 	.word	0x200001c8
 8001e38:	20000b4c 	.word	0x20000b4c
 8001e3c:	0800bffc 	.word	0x0800bffc

08001e40 <CollapseFullRow>:
Also settles rows over the cleared row down.

*/

void CollapseFullRow()
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af02      	add	r7, sp, #8
int i,j,k,sum,copyskipover=0,r;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
for(i=34;i>=0;)
 8001e4a:	2322      	movs	r3, #34	; 0x22
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e0ba      	b.n	8001fc6 <CollapseFullRow+0x186>
    {
    sum=0;//full flag
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
    for(j=0;j<13;j++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	e010      	b.n	8001e7c <CollapseFullRow+0x3c>
 sum+=board[i][j];
 8001e5a:	4988      	ldr	r1, [pc, #544]	; (800207c <CollapseFullRow+0x23c>)
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	4413      	add	r3, r2
 8001e74:	60bb      	str	r3, [r7, #8]
    for(j=0;j<13;j++)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	ddeb      	ble.n	8001e5a <CollapseFullRow+0x1a>
    if(sum==2*13)//row full
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b1a      	cmp	r3, #26
 8001e86:	d109      	bne.n	8001e9c <CollapseFullRow+0x5c>
 {
 myscore+=scoreInc;
 8001e88:	4b7d      	ldr	r3, [pc, #500]	; (8002080 <CollapseFullRow+0x240>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <CollapseFullRow+0x244>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a7b      	ldr	r2, [pc, #492]	; (8002080 <CollapseFullRow+0x240>)
 8001e94:	6013      	str	r3, [r2, #0]
 copyskipover++;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 }
    if(sum==0)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8096 	beq.w	8001fd0 <CollapseFullRow+0x190>
 break;
    i--;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
    if(copyskipover>0)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f340 808a 	ble.w	8001fc6 <CollapseFullRow+0x186>
 {
 for(j=0;j<13;j++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	e082      	b.n	8001fbe <CollapseFullRow+0x17e>
     {
     r=i+copyskipover;
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	603b      	str	r3, [r7, #0]
     board[r][j]=board[i][j];
 8001ec0:	496e      	ldr	r1, [pc, #440]	; (800207c <CollapseFullRow+0x23c>)
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001ed6:	4869      	ldr	r0, [pc, #420]	; (800207c <CollapseFullRow+0x23c>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
     if(board[i][j]==0)
 8001eec:	4963      	ldr	r1, [pc, #396]	; (800207c <CollapseFullRow+0x23c>)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d12c      	bne.n	8001f60 <CollapseFullRow+0x120>
  {
//  setfillstyle(EMPTY_FILL,BLACK);//empty yo hatch
//  setcolor(BLACK);
  FillRectangle(2+j*SIZE,2+r*SIZE,2+j*SIZE+SIZE-1,2+r*SIZE+SIZE-1,VGA_BLACK);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	0052      	lsls	r2, r2, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3302      	adds	r3, #2
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b218      	sxth	r0, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	0052      	lsls	r2, r2, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3302      	adds	r3, #2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b219      	sxth	r1, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	0052      	lsls	r2, r2, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3307      	adds	r3, #7
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	461c      	mov	r4, r3
 8001f48:	0064      	lsls	r4, r4, #1
 8001f4a:	4423      	add	r3, r4
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3307      	adds	r3, #7
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	2400      	movs	r4, #0
 8001f58:	9400      	str	r4, [sp, #0]
 8001f5a:	f000 fd51 	bl	8002a00 <FillRectangle>
 8001f5e:	e02b      	b.n	8001fb8 <CollapseFullRow+0x178>
     else
  {
//  setfillstyle(XHATCH_FILL,CYAN);
//  setcolor(GREEN);
//  bar(2+j*13,2+r*13,2+j*13+13,2+r*13+13);
  FillRectangle(2+j*SIZE,2+r*SIZE,2+j*SIZE+SIZE-1,2+r*SIZE+SIZE-1,VGA_CYAN);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3302      	adds	r3, #2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b218      	sxth	r0, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	0052      	lsls	r2, r2, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3302      	adds	r3, #2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b219      	sxth	r1, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	0052      	lsls	r2, r2, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3307      	adds	r3, #7
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461c      	mov	r4, r3
 8001fa2:	0064      	lsls	r4, r4, #1
 8001fa4:	4423      	add	r3, r4
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3307      	adds	r3, #7
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	241f      	movs	r4, #31
 8001fb2:	9400      	str	r4, [sp, #0]
 8001fb4:	f000 fd24 	bl	8002a00 <FillRectangle>
 for(j=0;j<13;j++)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b0c      	cmp	r3, #12
 8001fc2:	f77f af79 	ble.w	8001eb8 <CollapseFullRow+0x78>
for(i=34;i>=0;)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f6bf af41 	bge.w	8001e50 <CollapseFullRow+0x10>
 8001fce:	e000      	b.n	8001fd2 <CollapseFullRow+0x192>
 break;
 8001fd0:	bf00      	nop
  }
     }
 }
    }
for(k=0;k<copyskipover;k++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e047      	b.n	8002068 <CollapseFullRow+0x228>
    {
    r=i+k;
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	603b      	str	r3, [r7, #0]
    for(j=0;j<13;j++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	e03a      	b.n	800205c <CollapseFullRow+0x21c>
 {
 board[r][j]=0;
 8001fe6:	4925      	ldr	r1, [pc, #148]	; (800207c <CollapseFullRow+0x23c>)
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
// setfillstyle(XHATCH_FILL,BLACK);
// setcolor(BLACK);
 FillRectangle(2+j*SIZE,2+r*SIZE,2+j*SIZE+SIZE,2+r*SIZE+SIZE,VGA_BLACK);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	0052      	lsls	r2, r2, #1
 8002006:	4413      	add	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	b29b      	uxth	r3, r3
 800200c:	3302      	adds	r3, #2
 800200e:	b29b      	uxth	r3, r3
 8002010:	b218      	sxth	r0, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	0052      	lsls	r2, r2, #1
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	b29b      	uxth	r3, r3
 8002020:	3302      	adds	r3, #2
 8002022:	b29b      	uxth	r3, r3
 8002024:	b219      	sxth	r1, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	0052      	lsls	r2, r2, #1
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	3308      	adds	r3, #8
 8002036:	b29b      	uxth	r3, r3
 8002038:	b21a      	sxth	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	461c      	mov	r4, r3
 8002040:	0064      	lsls	r4, r4, #1
 8002042:	4423      	add	r3, r4
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	b29b      	uxth	r3, r3
 8002048:	3308      	adds	r3, #8
 800204a:	b29b      	uxth	r3, r3
 800204c:	b21b      	sxth	r3, r3
 800204e:	2400      	movs	r4, #0
 8002050:	9400      	str	r4, [sp, #0]
 8002052:	f000 fcd5 	bl	8002a00 <FillRectangle>
    for(j=0;j<13;j++)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	3301      	adds	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b0c      	cmp	r3, #12
 8002060:	ddc1      	ble.n	8001fe6 <CollapseFullRow+0x1a6>
for(k=0;k<copyskipover;k++)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbb3      	blt.n	8001fd8 <CollapseFullRow+0x198>
 }
    }
showScore();
 8002070:	f7ff fe82 	bl	8001d78 <showScore>
}
 8002074:	bf00      	nop
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	20000418 	.word	0x20000418
 8002080:	20000b4c 	.word	0x20000b4c
 8002084:	200001c4 	.word	0x200001c4

08002088 <tetris>:

//function to display game over and end game
void GameOver();

void tetris()
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af02      	add	r7, sp, #8
int scorespeedctrl=0;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
//char arrowpre,ch,timehalving=0;
char ch,timehalving=0;
 8002092:	2300      	movs	r3, #0
 8002094:	76fb      	strb	r3, [r7, #27]
int i,j,k=1,spawn=1,tversion;
 8002096:	2301      	movs	r3, #1
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	2301      	movs	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
motiondelay=startdelay;
 800209e:	4b8f      	ldr	r3, [pc, #572]	; (80022dc <tetris+0x254>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a8f      	ldr	r2, [pc, #572]	; (80022e0 <tetris+0x258>)
 80020a4:	6013      	str	r3, [r2, #0]
//char scorestr[16];
//scorestr=(char*)malloc(sizeof(char)*10);
for(i=0;i<35;i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e017      	b.n	80020dc <tetris+0x54>
    for(j=0;j<13;j++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	e00e      	b.n	80020d0 <tetris+0x48>
 board[i][j]=0;
 80020b2:	498c      	ldr	r1, [pc, #560]	; (80022e4 <tetris+0x25c>)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	2200      	movs	r2, #0
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(j=0;j<13;j++)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3301      	adds	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	dded      	ble.n	80020b2 <tetris+0x2a>
for(i=0;i<35;i++)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b22      	cmp	r3, #34	; 0x22
 80020e0:	dde4      	ble.n	80020ac <tetris+0x24>
arrowpre=();
if(kbhit())
 k=();
}
*/
ClearScreen(VGA_BLACK);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f000 f970 	bl	80023c8 <ClearScreen>
//initgraph(&gd,&gm,"C:\\TURBOC3\\BGI\\");
//cleardevice();
//setcolor(YELLOW);
FillRectangle(0,0,13*SIZE+6,35*SIZE+6,VGA_BLACK);
 80020e8:	2300      	movs	r3, #0
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	23d8      	movs	r3, #216	; 0xd8
 80020ee:	2254      	movs	r2, #84	; 0x54
 80020f0:	2100      	movs	r1, #0
 80020f2:	2000      	movs	r0, #0
 80020f4:	f000 fc84 	bl	8002a00 <FillRectangle>
DrawRectangle(0,0,13*SIZE+6,35*SIZE+6,VGA_BLUE);
 80020f8:	2303      	movs	r3, #3
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	23d8      	movs	r3, #216	; 0xd8
 80020fe:	2254      	movs	r2, #84	; 0x54
 8002100:	2100      	movs	r1, #0
 8002102:	2000      	movs	r0, #0
 8002104:	f000 fc35 	bl	8002972 <DrawRectangle>
//srand(time(NULL));
srand(0);
 8002108:	2000      	movs	r0, #0
 800210a:	f008 fe03 	bl	800ad14 <srand>
showScore();
 800210e:	f7ff fe33 	bl	8001d78 <showScore>


///here


while(ch!='q'&&ch!='Q'&&k!='q'&&k!='Q'){
 8002112:	e12d      	b.n	8002370 <tetris+0x2e8>
    if(getch(&ch)&&(spawn==0)){
 8002114:	1cfb      	adds	r3, r7, #3
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fc14 	bl	8000944 <getch>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8095 	beq.w	800224e <tetris+0x1c6>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 8091 	bne.w	800224e <tetris+0x1c6>
    	if(ch=='8')//if up arrow key pressed
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b38      	cmp	r3, #56	; 0x38
 8002130:	d140      	bne.n	80021b4 <tetris+0x12c>
    	{
    		if(fallingblockNum==0||fallingblockNum==1)
 8002132:	4b6d      	ldr	r3, [pc, #436]	; (80022e8 <tetris+0x260>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <tetris+0xba>
 800213a:	4b6b      	ldr	r3, [pc, #428]	; (80022e8 <tetris+0x260>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10b      	bne.n	800215a <tetris+0xd2>
    			tversion=(fallingBlockVersion+1)%4;
 8002142:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <tetris+0x264>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	425a      	negs	r2, r3
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	bf58      	it	pl
 8002154:	4253      	negpl	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	e010      	b.n	800217c <tetris+0xf4>
    		else if(fallingblockNum==4||fallingblockNum==3)
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <tetris+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b04      	cmp	r3, #4
 8002160:	d003      	beq.n	800216a <tetris+0xe2>
 8002162:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <tetris+0x260>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d108      	bne.n	800217c <tetris+0xf4>
    			tversion=(fallingBlockVersion+1)%2;
 800216a:	4b60      	ldr	r3, [pc, #384]	; (80022ec <tetris+0x264>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	bfb8      	it	lt
 8002178:	425b      	neglt	r3, r3
 800217a:	60bb      	str	r3, [r7, #8]

    		if(fallingblockNum!=2&&isDrawable(fallingBlockRow,fallingBlockCol,tversion))
 800217c:	4b5a      	ldr	r3, [pc, #360]	; (80022e8 <tetris+0x260>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d064      	beq.n	800224e <tetris+0x1c6>
 8002184:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <tetris+0x268>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5a      	ldr	r2, [pc, #360]	; (80022f4 <tetris+0x26c>)
 800218a:	6811      	ldr	r1, [r2, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fc1e 	bl	80019d0 <isDrawable>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d059      	beq.n	800224e <tetris+0x1c6>
    		{
    			clearOldBlockVersion();
 800219a:	f7ff fc97 	bl	8001acc <clearOldBlockVersion>
    			fallingBlockVersion=tversion;
 800219e:	4a53      	ldr	r2, [pc, #332]	; (80022ec <tetris+0x264>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6013      	str	r3, [r2, #0]
    			blockarray=getFallingBlockArray();
 80021a4:	f7ff fb6c 	bl	8001880 <getFallingBlockArray>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4a53      	ldr	r2, [pc, #332]	; (80022f8 <tetris+0x270>)
 80021ac:	6013      	str	r3, [r2, #0]
    			drawNewBlockVersion();
 80021ae:	f7ff fcf3 	bl	8001b98 <drawNewBlockVersion>
 80021b2:	e04c      	b.n	800224e <tetris+0x1c6>
    		}
    	}else if(ch=='4')//if left arrow key is pressed
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	2b34      	cmp	r3, #52	; 0x34
 80021b8:	d116      	bne.n	80021e8 <tetris+0x160>
    	{
    		if(isDrawable(fallingBlockRow,fallingBlockCol-1,fallingBlockVersion))
 80021ba:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <tetris+0x268>)
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <tetris+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	4a49      	ldr	r2, [pc, #292]	; (80022ec <tetris+0x264>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7ff fc01 	bl	80019d0 <isDrawable>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d03c      	beq.n	800224e <tetris+0x1c6>
    		{
    			clearOldBlockVersion();
 80021d4:	f7ff fc7a 	bl	8001acc <clearOldBlockVersion>
    			fallingBlockCol--;
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <tetris+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3b01      	subs	r3, #1
 80021de:	4a45      	ldr	r2, [pc, #276]	; (80022f4 <tetris+0x26c>)
 80021e0:	6013      	str	r3, [r2, #0]
    			drawNewBlockVersion();
 80021e2:	f7ff fcd9 	bl	8001b98 <drawNewBlockVersion>
 80021e6:	e032      	b.n	800224e <tetris+0x1c6>
    		}
    	}else if(ch=='6')//if right arrow key is pressed
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	2b36      	cmp	r3, #54	; 0x36
 80021ec:	d116      	bne.n	800221c <tetris+0x194>
        {
    		if(isDrawable(fallingBlockRow,fallingBlockCol+1,fallingBlockVersion))
 80021ee:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <tetris+0x268>)
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <tetris+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	4a3c      	ldr	r2, [pc, #240]	; (80022ec <tetris+0x264>)
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7ff fbe7 	bl	80019d0 <isDrawable>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d022      	beq.n	800224e <tetris+0x1c6>
    		{
    			clearOldBlockVersion();
 8002208:	f7ff fc60 	bl	8001acc <clearOldBlockVersion>
    			fallingBlockCol++;
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <tetris+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <tetris+0x26c>)
 8002214:	6013      	str	r3, [r2, #0]
    			drawNewBlockVersion();
 8002216:	f7ff fcbf 	bl	8001b98 <drawNewBlockVersion>
 800221a:	e018      	b.n	800224e <tetris+0x1c6>
    		}
        }else if(ch=='2')//if down arrow key is pressed
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	2b32      	cmp	r3, #50	; 0x32
 8002220:	d115      	bne.n	800224e <tetris+0x1c6>
        {
        	if(isDrawable(fallingBlockRow+1,fallingBlockCol,fallingBlockVersion))
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <tetris+0x268>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	4a32      	ldr	r2, [pc, #200]	; (80022f4 <tetris+0x26c>)
 800222a:	6811      	ldr	r1, [r2, #0]
 800222c:	4a2f      	ldr	r2, [pc, #188]	; (80022ec <tetris+0x264>)
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fbcd 	bl	80019d0 <isDrawable>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <tetris+0x1c6>
        	{
        		clearOldBlockVersion();
 800223c:	f7ff fc46 	bl	8001acc <clearOldBlockVersion>
        		fallingBlockRow++;
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <tetris+0x268>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <tetris+0x268>)
 8002248:	6013      	str	r3, [r2, #0]
        		drawNewBlockVersion();
 800224a:	f7ff fca5 	bl	8001b98 <drawNewBlockVersion>
        	}
        }
    }
    if(isAtBottom()&&spawn==0){
 800224e:	f7ff fd2f 	bl	8001cb0 <isAtBottom>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02c      	beq.n	80022b2 <tetris+0x22a>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d129      	bne.n	80022b2 <tetris+0x22a>
    	for(i=0;i<8;i+=2){
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e01f      	b.n	80022a4 <tetris+0x21c>
    		board[fallingBlockRow+blockarray[i]][fallingBlockCol+blockarray[i+1]]=2;
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <tetris+0x270>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <tetris+0x268>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	441a      	add	r2, r3
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <tetris+0x270>)
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <tetris+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4419      	add	r1, r3
 800228a:	4816      	ldr	r0, [pc, #88]	; (80022e4 <tetris+0x25c>)
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	440b      	add	r3, r1
 8002298:	2202      	movs	r2, #2
 800229a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    	for(i=0;i<8;i+=2){
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3302      	adds	r3, #2
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b07      	cmp	r3, #7
 80022a8:	dddc      	ble.n	8002264 <tetris+0x1dc>
    	}
    	spawn=1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
    	CollapseFullRow();
 80022ae:	f7ff fdc7 	bl	8001e40 <CollapseFullRow>
    }
    if(spawn){
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d021      	beq.n	80022fc <tetris+0x274>
    	NextBlock();
 80022b8:	f7ff fa94 	bl	80017e4 <NextBlock>
    	blockarray=getFallingBlockArray();
 80022bc:	f7ff fae0 	bl	8001880 <getFallingBlockArray>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <tetris+0x270>)
 80022c4:	6013      	str	r3, [r2, #0]
    	spawn=0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
    	if(isGameOver())
 80022ca:	f7ff fcd5 	bl	8001c78 <isGameOver>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02c      	beq.n	800232e <tetris+0x2a6>
    	{
    		GameOver();
 80022d4:	f000 f866 	bl	80023a4 <GameOver>
 80022d8:	e057      	b.n	800238a <tetris+0x302>
 80022da:	bf00      	nop
 80022dc:	200001c0 	.word	0x200001c0
 80022e0:	20000b48 	.word	0x20000b48
 80022e4:	20000418 	.word	0x20000418
 80022e8:	20000b38 	.word	0x20000b38
 80022ec:	20000b3c 	.word	0x20000b3c
 80022f0:	20000b40 	.word	0x20000b40
 80022f4:	20000b44 	.word	0x20000b44
 80022f8:	20000b34 	.word	0x20000b34
    		return;
    	}
    }else{
    	timehalving=(timehalving+1)%3;
 80022fc:	7efb      	ldrb	r3, [r7, #27]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	4b23      	ldr	r3, [pc, #140]	; (8002390 <tetris+0x308>)
 8002302:	fb83 3102 	smull	r3, r1, r3, r2
 8002306:	17d3      	asrs	r3, r2, #31
 8002308:	1ac9      	subs	r1, r1, r3
 800230a:	460b      	mov	r3, r1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	440b      	add	r3, r1
 8002310:	1ad1      	subs	r1, r2, r3
 8002312:	460b      	mov	r3, r1
 8002314:	76fb      	strb	r3, [r7, #27]
    	if(timehalving==2){
 8002316:	7efb      	ldrb	r3, [r7, #27]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d108      	bne.n	800232e <tetris+0x2a6>
    		clearOldBlockVersion();
 800231c:	f7ff fbd6 	bl	8001acc <clearOldBlockVersion>
    		fallingBlockRow++;
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <tetris+0x30c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <tetris+0x30c>)
 8002328:	6013      	str	r3, [r2, #0]
    		drawNewBlockVersion();
 800232a:	f7ff fc35 	bl	8001b98 <drawNewBlockVersion>
    	}
    }
    scorespeedctrl=(scorespeedctrl+1)%280;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	4a19      	ldr	r2, [pc, #100]	; (8002398 <tetris+0x310>)
 8002334:	fb82 1203 	smull	r1, r2, r2, r3
 8002338:	441a      	add	r2, r3
 800233a:	1211      	asrs	r1, r2, #8
 800233c:	17da      	asrs	r2, r3, #31
 800233e:	1a8a      	subs	r2, r1, r2
 8002340:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002344:	fb01 f202 	mul.w	r2, r1, r2
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	61fb      	str	r3, [r7, #28]
    if(scorespeedctrl==0){
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <tetris+0x2de>
    	motiondelay-=8;
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <tetris+0x314>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3b08      	subs	r3, #8
 8002358:	4a10      	ldr	r2, [pc, #64]	; (800239c <tetris+0x314>)
 800235a:	6013      	str	r3, [r2, #0]
    	scoreInc++;
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <tetris+0x318>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <tetris+0x318>)
 8002364:	6013      	str	r3, [r2, #0]
    }
    myDelay(motiondelay);
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <tetris+0x314>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fb1c 	bl	80009a8 <myDelay>
while(ch!='q'&&ch!='Q'&&k!='q'&&k!='Q'){
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	2b71      	cmp	r3, #113	; 0x71
 8002374:	d009      	beq.n	800238a <tetris+0x302>
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	2b51      	cmp	r3, #81	; 0x51
 800237a:	d006      	beq.n	800238a <tetris+0x302>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b71      	cmp	r3, #113	; 0x71
 8002380:	d003      	beq.n	800238a <tetris+0x302>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b51      	cmp	r3, #81	; 0x51
 8002386:	f47f aec5 	bne.w	8002114 <tetris+0x8c>
    }
}
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	55555556 	.word	0x55555556
 8002394:	20000b40 	.word	0x20000b40
 8002398:	ea0ea0eb 	.word	0xea0ea0eb
 800239c:	20000b48 	.word	0x20000b48
 80023a0:	200001c4 	.word	0x200001c4

080023a4 <GameOver>:

void GameOver()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	SetCursor(5,17);
 80023a8:	2111      	movs	r1, #17
 80023aa:	2005      	movs	r0, #5
 80023ac:	f000 fa1e 	bl	80027ec <SetCursor>
	WriteString("GAME OVER",Font_7x10,VGA_YELLOW);
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <GameOver+0x1c>)
 80023b2:	23fc      	movs	r3, #252	; 0xfc
 80023b4:	ca06      	ldmia	r2, {r1, r2}
 80023b6:	4803      	ldr	r0, [pc, #12]	; (80023c4 <GameOver+0x20>)
 80023b8:	f000 f9f2 	bl	80027a0 <WriteString>
//setcolor(YELLOW);
//settextjustify(CENTER_TEXT, CENTER_TEXT);
//settextstyle(style, HORIZ_DIR, size);
//outtextxy(getmaxx()/2-10,getmaxy()/2,"Game Over.\n");

}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200001c8 	.word	0x200001c8
 80023c4:	0800c020 	.word	0x0800c020

080023c8 <ClearScreen>:

uint8_t VGA_obuffer[VGA_FULL];
uint8_t VGA_buffer[VGA_VBUFFER][VGA_LBUFFER];
VGA_t VGA;

void ClearScreen(VGA_COLOR color){
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
	int i,j;
	for(j=0;j<VGA_VBUFFER;j++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	e017      	b.n	8002408 <ClearScreen+0x40>
		for(i=0;i<VGA_LBUFFER;i++){
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e00d      	b.n	80023fa <ClearScreen+0x32>
			VGA_buffer[j][i]= color;
 80023de:	490f      	ldr	r1, [pc, #60]	; (800241c <ClearScreen+0x54>)
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	18ca      	adds	r2, r1, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	701a      	strb	r2, [r3, #0]
		for(i=0;i<VGA_LBUFFER;i++){
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002400:	dbed      	blt.n	80023de <ClearScreen+0x16>
	for(j=0;j<VGA_VBUFFER;j++)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3301      	adds	r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2bed      	cmp	r3, #237	; 0xed
 800240c:	dde4      	ble.n	80023d8 <ClearScreen+0x10>
	}
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	20001190 	.word	0x20001190

08002420 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, VGA_COLOR color) {
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
 800242a:	460b      	mov	r3, r1
 800242c:	80bb      	strh	r3, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (y <0)||
 8002432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db1a      	blt.n	8002470 <DrawPixel+0x50>
 800243a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db16      	blt.n	8002470 <DrawPixel+0x50>
 8002442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002446:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800244a:	da11      	bge.n	8002470 <DrawPixel+0x50>
	    (x >= VGA_WIDTH) || (y >= VGA_HEIGHT)) {
 800244c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002450:	2be7      	cmp	r3, #231	; 0xe7
 8002452:	dc0d      	bgt.n	8002470 <DrawPixel+0x50>
		/* Error */
		return;
	}
	/* Set color */
	VGA_buffer[y][x]=color;
 8002454:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002458:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800245c:	4807      	ldr	r0, [pc, #28]	; (800247c <DrawPixel+0x5c>)
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	019b      	lsls	r3, r3, #6
 8002466:	4403      	add	r3, r0
 8002468:	440b      	add	r3, r1
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e000      	b.n	8002472 <DrawPixel+0x52>
		return;
 8002470:	bf00      	nop
}
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	20001190 	.word	0x20001190

08002480 <DrawLine>:

void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, VGA_COLOR c) {
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4623      	mov	r3, r4
 8002490:	80fb      	strh	r3, [r7, #6]
 8002492:	4603      	mov	r3, r0
 8002494:	80bb      	strh	r3, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]
 800249a:	4613      	mov	r3, r2
 800249c:	803b      	strh	r3, [r7, #0]
	}
	if (y1 >= VGA_HEIGHT) {
		y1 = VGA_HEIGHT - 1;
	}
*/
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 800249e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	da05      	bge.n	80024b6 <DrawLine+0x36>
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	e004      	b.n	80024c0 <DrawLine+0x40>
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b21b      	sxth	r3, r3
 80024c0:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 80024c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80024c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	da05      	bge.n	80024da <DrawLine+0x5a>
 80024ce:	883a      	ldrh	r2, [r7, #0]
 80024d0:	88bb      	ldrh	r3, [r7, #4]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	e004      	b.n	80024e4 <DrawLine+0x64>
 80024da:	88ba      	ldrh	r2, [r7, #4]
 80024dc:	883b      	ldrh	r3, [r7, #0]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 80024e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	da01      	bge.n	80024f6 <DrawLine+0x76>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e001      	b.n	80024fa <DrawLine+0x7a>
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 80024fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002500:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002504:	429a      	cmp	r2, r3
 8002506:	da01      	bge.n	800250c <DrawLine+0x8c>
 8002508:	2301      	movs	r3, #1
 800250a:	e001      	b.n	8002510 <DrawLine+0x90>
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8002512:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002516:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800251a:	429a      	cmp	r2, r3
 800251c:	dd06      	ble.n	800252c <DrawLine+0xac>
 800251e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002522:	0fda      	lsrs	r2, r3, #31
 8002524:	4413      	add	r3, r2
 8002526:	105b      	asrs	r3, r3, #1
 8002528:	b21b      	sxth	r3, r3
 800252a:	e006      	b.n	800253a <DrawLine+0xba>
 800252c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002530:	0fda      	lsrs	r2, r3, #31
 8002532:	4413      	add	r3, r2
 8002534:	105b      	asrs	r3, r3, #1
 8002536:	425b      	negs	r3, r3
 8002538:	b21b      	sxth	r3, r3
 800253a:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800253c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d130      	bne.n	80025a6 <DrawLine+0x126>
		if (y1 < y0) {
 8002544:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002548:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	da05      	bge.n	800255c <DrawLine+0xdc>
			tmp = y1;
 8002550:	883b      	ldrh	r3, [r7, #0]
 8002552:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002554:	88bb      	ldrh	r3, [r7, #4]
 8002556:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002558:	893b      	ldrh	r3, [r7, #8]
 800255a:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800255c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002564:	429a      	cmp	r2, r3
 8002566:	da05      	bge.n	8002574 <DrawLine+0xf4>
			tmp = x1;
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002570:	893b      	ldrh	r3, [r7, #8]
 8002572:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002574:	88bb      	ldrh	r3, [r7, #4]
 8002576:	82bb      	strh	r3, [r7, #20]
 8002578:	e00e      	b.n	8002598 <DrawLine+0x118>
			DrawPixel(x0, i, c);
 800257a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800257e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff4a 	bl	8002420 <DrawPixel>
		for (i = y0; i <= y1; i++) {
 800258c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002590:	b29b      	uxth	r3, r3
 8002592:	3301      	adds	r3, #1
 8002594:	b29b      	uxth	r3, r3
 8002596:	82bb      	strh	r3, [r7, #20]
 8002598:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800259c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	ddea      	ble.n	800257a <DrawLine+0xfa>
		}

		/* Return from function */
		return;
 80025a4:	e06e      	b.n	8002684 <DrawLine+0x204>
	}

	if (dy == 0) {
 80025a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d130      	bne.n	8002610 <DrawLine+0x190>
		if (y1 < y0) {
 80025ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 80025b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	da05      	bge.n	80025c6 <DrawLine+0x146>
			tmp = y1;
 80025ba:	883b      	ldrh	r3, [r7, #0]
 80025bc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80025be:	88bb      	ldrh	r3, [r7, #4]
 80025c0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80025c2:	893b      	ldrh	r3, [r7, #8]
 80025c4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80025c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	da05      	bge.n	80025de <DrawLine+0x15e>
			tmp = x1;
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80025da:	893b      	ldrh	r3, [r7, #8]
 80025dc:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	82bb      	strh	r3, [r7, #20]
 80025e2:	e00e      	b.n	8002602 <DrawLine+0x182>
			DrawPixel(i, y0, c);
 80025e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80025e8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80025ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff15 	bl	8002420 <DrawPixel>
		for (i = x0; i <= x1; i++) {
 80025f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	b29b      	uxth	r3, r3
 8002600:	82bb      	strh	r3, [r7, #20]
 8002602:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002606:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800260a:	429a      	cmp	r2, r3
 800260c:	ddea      	ble.n	80025e4 <DrawLine+0x164>
		}

		/* Return from function */
		return;
 800260e:	e039      	b.n	8002684 <DrawLine+0x204>
	}

	while (1) {
		DrawPixel(x0, y0, c);
 8002610:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002614:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff feff 	bl	8002420 <DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002622:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002626:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800262a:	429a      	cmp	r2, r3
 800262c:	d105      	bne.n	800263a <DrawLine+0x1ba>
 800262e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002632:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002636:	429a      	cmp	r2, r3
 8002638:	d023      	beq.n	8002682 <DrawLine+0x202>
			break;
		}
		e2 = err;
 800263a:	8afb      	ldrh	r3, [r7, #22]
 800263c:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800263e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002642:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002646:	425b      	negs	r3, r3
 8002648:	429a      	cmp	r2, r3
 800264a:	dd09      	ble.n	8002660 <DrawLine+0x1e0>
			err -= dy;
 800264c:	8afa      	ldrh	r2, [r7, #22]
 800264e:	8a3b      	ldrh	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	b29b      	uxth	r3, r3
 8002654:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	89fb      	ldrh	r3, [r7, #14]
 800265a:	4413      	add	r3, r2
 800265c:	b29b      	uxth	r3, r3
 800265e:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8002660:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002664:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	dad1      	bge.n	8002610 <DrawLine+0x190>
			err += dx;
 800266c:	8afa      	ldrh	r2, [r7, #22]
 800266e:	8a7b      	ldrh	r3, [r7, #18]
 8002670:	4413      	add	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002676:	88ba      	ldrh	r2, [r7, #4]
 8002678:	89bb      	ldrh	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	b29b      	uxth	r3, r3
 800267e:	80bb      	strh	r3, [r7, #4]
		DrawPixel(x0, y0, c);
 8002680:	e7c6      	b.n	8002610 <DrawLine+0x190>
			break;
 8002682:	bf00      	nop
		}
	}
}
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}
	...

0800268c <WriteChar>:

char WriteChar(char ch, FontDef Font, VGA_COLOR color) {
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	4604      	mov	r4, r0
 8002694:	1d38      	adds	r0, r7, #4
 8002696:	e880 0006 	stmia.w	r0, {r1, r2}
 800269a:	461a      	mov	r2, r3
 800269c:	4623      	mov	r3, r4
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	4613      	mov	r3, r2
 80026a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b1f      	cmp	r3, #31
 80026a8:	d902      	bls.n	80026b0 <WriteChar+0x24>
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b7e      	cmp	r3, #126	; 0x7e
 80026ae:	d901      	bls.n	80026b4 <WriteChar+0x28>
        return 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e06e      	b.n	8002792 <WriteChar+0x106>

    // Check remaining space on current line
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 80026b4:	4b39      	ldr	r3, [pc, #228]	; (800279c <WriteChar+0x110>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	793b      	ldrb	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 80026c2:	dc06      	bgt.n	80026d2 <WriteChar+0x46>
        VGA_HEIGHT < (VGA.CurrentY + Font.FontHeight))
 80026c4:	4b35      	ldr	r3, [pc, #212]	; (800279c <WriteChar+0x110>)
 80026c6:	885b      	ldrh	r3, [r3, #2]
 80026c8:	461a      	mov	r2, r3
 80026ca:	797b      	ldrb	r3, [r7, #5]
 80026cc:	4413      	add	r3, r2
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 80026ce:	2be8      	cmp	r3, #232	; 0xe8
 80026d0:	dd01      	ble.n	80026d6 <WriteChar+0x4a>
    {
        // Not enough space on current line
        return 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e05d      	b.n	8002792 <WriteChar+0x106>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e04c      	b.n	8002776 <WriteChar+0xea>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	3b20      	subs	r3, #32
 80026e2:	7979      	ldrb	r1, [r7, #5]
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4619      	mov	r1, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	440b      	add	r3, r1
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e034      	b.n	8002766 <WriteChar+0xda>
            if((b << j) & 0x8000)  {
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <WriteChar+0xa6>
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR) color);
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <WriteChar+0x110>)
 800270e:	881a      	ldrh	r2, [r3, #0]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4413      	add	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	b218      	sxth	r0, r3
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <WriteChar+0x110>)
 800271c:	885a      	ldrh	r2, [r3, #2]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4413      	add	r3, r2
 8002724:	b29b      	uxth	r3, r3
 8002726:	b21b      	sxth	r3, r3
 8002728:	7bba      	ldrb	r2, [r7, #14]
 800272a:	4619      	mov	r1, r3
 800272c:	f7ff fe78 	bl	8002420 <DrawPixel>
 8002730:	e016      	b.n	8002760 <WriteChar+0xd4>
            } else {
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR)!color);
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <WriteChar+0x110>)
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4413      	add	r3, r2
 800273c:	b29b      	uxth	r3, r3
 800273e:	b218      	sxth	r0, r3
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <WriteChar+0x110>)
 8002742:	885a      	ldrh	r2, [r3, #2]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4413      	add	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	b219      	sxth	r1, r3
 800274e:	7bbb      	ldrb	r3, [r7, #14]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	f7ff fe60 	bl	8002420 <DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	3301      	adds	r3, #1
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	793b      	ldrb	r3, [r7, #4]
 8002768:	461a      	mov	r2, r3
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4293      	cmp	r3, r2
 800276e:	d3c5      	bcc.n	80026fc <WriteChar+0x70>
    for(i = 0; i < Font.FontHeight; i++) {
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3301      	adds	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	797b      	ldrb	r3, [r7, #5]
 8002778:	461a      	mov	r2, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4293      	cmp	r3, r2
 800277e:	d3ad      	bcc.n	80026dc <WriteChar+0x50>
            }
        }
    }

    // The current space is now taken
    VGA.CurrentX += Font.FontWidth;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <WriteChar+0x110>)
 8002782:	881a      	ldrh	r2, [r3, #0]
 8002784:	793b      	ldrb	r3, [r7, #4]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <WriteChar+0x110>)
 800278e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd90      	pop	{r4, r7, pc}
 800279a:	bf00      	nop
 800279c:	20013b10 	.word	0x20013b10

080027a0 <WriteString>:

char WriteString(char* str, FontDef Font, VGA_COLOR color) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	1d38      	adds	r0, r7, #4
 80027aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80027ae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80027b0:	e012      	b.n	80027d8 <WriteString+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	7818      	ldrb	r0, [r3, #0]
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	1d3a      	adds	r2, r7, #4
 80027ba:	ca06      	ldmia	r2, {r1, r2}
 80027bc:	f7ff ff66 	bl	800268c <WriteChar>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d002      	beq.n	80027d2 <WriteString+0x32>
            // Char could not be written
            return *str;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	e008      	b.n	80027e4 <WriteString+0x44>
        }

        // Next char
        str++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e8      	bne.n	80027b2 <WriteString+0x12>
    }

    // Everything ok
    return *str;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <SetCursor>:

// Position the cursor
void SetCursor(int16_t x, int16_t y) {
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	460a      	mov	r2, r1
 80027f6:	80fb      	strh	r3, [r7, #6]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80bb      	strh	r3, [r7, #4]
	if((x<0)||(x>=VGA_WIDTH))
 80027fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db04      	blt.n	800280e <SetCursor+0x22>
 8002804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002808:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800280c:	db03      	blt.n	8002816 <SetCursor+0x2a>
	    VGA.CurrentX = 0;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <SetCursor+0x5c>)
 8002810:	2200      	movs	r2, #0
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	e002      	b.n	800281c <SetCursor+0x30>
	else
		VGA.CurrentX = x;
 8002816:	88fa      	ldrh	r2, [r7, #6]
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <SetCursor+0x5c>)
 800281a:	801a      	strh	r2, [r3, #0]
	if((y<0)||(y>=VGA_HEIGHT))
 800281c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db03      	blt.n	800282c <SetCursor+0x40>
 8002824:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002828:	2be7      	cmp	r3, #231	; 0xe7
 800282a:	dd03      	ble.n	8002834 <SetCursor+0x48>
	    VGA.CurrentY = 0;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <SetCursor+0x5c>)
 800282e:	2200      	movs	r2, #0
 8002830:	805a      	strh	r2, [r3, #2]
 8002832:	e003      	b.n	800283c <SetCursor+0x50>
	else
        VGA.CurrentY = y;
 8002834:	88ba      	ldrh	r2, [r7, #4]
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <SetCursor+0x5c>)
 8002838:	805a      	strh	r2, [r3, #2]
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	20013b10 	.word	0x20013b10

0800284c <DrawCircle>:
    }

    return;
}

void DrawCircle(int16_t par_x,int16_t par_y,int16_t par_r,VGA_COLOR par_color) {
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	4604      	mov	r4, r0
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4623      	mov	r3, r4
 800285c:	80fb      	strh	r3, [r7, #6]
 800285e:	4603      	mov	r3, r0
 8002860:	80bb      	strh	r3, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	807b      	strh	r3, [r7, #2]
 8002866:	4613      	mov	r3, r2
 8002868:	707b      	strb	r3, [r7, #1]
  int32_t x = -par_r;
 800286a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800286e:	425b      	negs	r3, r3
 8002870:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8002876:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800287a:	f1c3 0301 	rsb	r3, r3, #1
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= VGA_WIDTH || par_y >= VGA_HEIGHT) {
 8002882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002886:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800288a:	da6e      	bge.n	800296a <DrawCircle+0x11e>
 800288c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002890:	2be7      	cmp	r3, #231	; 0xe7
 8002892:	dc6a      	bgt.n	800296a <DrawCircle+0x11e>
    return;
  }

    do {
      DrawPixel(par_x - x, par_y + y, par_color);
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	b29b      	uxth	r3, r3
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	b29b      	uxth	r3, r3
 800289e:	b218      	sxth	r0, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	88bb      	ldrh	r3, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	787a      	ldrb	r2, [r7, #1]
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7ff fdb6 	bl	8002420 <DrawPixel>
      DrawPixel(par_x + x, par_y + y, par_color);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	4413      	add	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b218      	sxth	r0, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	88bb      	ldrh	r3, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	787a      	ldrb	r2, [r7, #1]
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7ff fda6 	bl	8002420 <DrawPixel>
      DrawPixel(par_x + x, par_y - y, par_color);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	4413      	add	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	b218      	sxth	r0, r3
 80028e0:	88ba      	ldrh	r2, [r7, #4]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	787a      	ldrb	r2, [r7, #1]
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7ff fd96 	bl	8002420 <DrawPixel>
      DrawPixel(par_x - x, par_y - y, par_color);
 80028f4:	88fa      	ldrh	r2, [r7, #6]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	b218      	sxth	r0, r3
 8002900:	88ba      	ldrh	r2, [r7, #4]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	b29b      	uxth	r3, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	b29b      	uxth	r3, r3
 800290a:	b21b      	sxth	r3, r3
 800290c:	787a      	ldrb	r2, [r7, #1]
 800290e:	4619      	mov	r1, r3
 8002910:	f7ff fd86 	bl	8002420 <DrawPixel>
        e2 = err;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	dc13      	bgt.n	8002948 <DrawCircle+0xfc>
            y++;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	3301      	adds	r3, #1
 8002924:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	3301      	adds	r3, #1
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	425b      	negs	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d105      	bne.n	8002948 <DrawCircle+0xfc>
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	dc01      	bgt.n	8002948 <DrawCircle+0xfc>
              e2 = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	dd08      	ble.n	8002962 <DrawCircle+0x116>
          x++;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3301      	adds	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	3301      	adds	r3, #1
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	dd95      	ble.n	8002894 <DrawCircle+0x48>

    return;
 8002968:	e000      	b.n	800296c <DrawCircle+0x120>
    return;
 800296a:	bf00      	nop
}
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}

08002972 <DrawRectangle>:

void DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 8002972:	b590      	push	{r4, r7, lr}
 8002974:	b085      	sub	sp, #20
 8002976:	af02      	add	r7, sp, #8
 8002978:	4604      	mov	r4, r0
 800297a:	4608      	mov	r0, r1
 800297c:	4611      	mov	r1, r2
 800297e:	461a      	mov	r2, r3
 8002980:	4623      	mov	r3, r4
 8002982:	80fb      	strh	r3, [r7, #6]
 8002984:	4603      	mov	r3, r0
 8002986:	80bb      	strh	r3, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	803b      	strh	r3, [r7, #0]
  DrawLine(x1,y1,x2,y1,color);
 8002990:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002994:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002998:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800299c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80029a0:	7e3b      	ldrb	r3, [r7, #24]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	4623      	mov	r3, r4
 80029a6:	f7ff fd6b 	bl	8002480 <DrawLine>
  DrawLine(x2,y1,x2,y2,color);
 80029aa:	f9b7 4000 	ldrsh.w	r4, [r7]
 80029ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80029b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80029b6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80029ba:	7e3b      	ldrb	r3, [r7, #24]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4623      	mov	r3, r4
 80029c0:	f7ff fd5e 	bl	8002480 <DrawLine>
  DrawLine(x2,y2,x1,y2,color);
 80029c4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80029c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029cc:	f9b7 1000 	ldrsh.w	r1, [r7]
 80029d0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80029d4:	7e3b      	ldrb	r3, [r7, #24]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4623      	mov	r3, r4
 80029da:	f7ff fd51 	bl	8002480 <DrawLine>
  DrawLine(x1,y2,x1,y1,color);
 80029de:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80029e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029e6:	f9b7 1000 	ldrsh.w	r1, [r7]
 80029ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80029ee:	7e3b      	ldrb	r3, [r7, #24]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	4623      	mov	r3, r4
 80029f4:	f7ff fd44 	bl	8002480 <DrawLine>
  return;
 80029f8:	bf00      	nop
}
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <FillRectangle>:

void FillRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	4604      	mov	r4, r0
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	80fb      	strh	r3, [r7, #6]
 8002a12:	4603      	mov	r3, r0
 8002a14:	80bb      	strh	r3, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	807b      	strh	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 8002a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a22:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002a26:	da2c      	bge.n	8002a82 <FillRectangle+0x82>
 8002a28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a2c:	2be7      	cmp	r3, #231	; 0xe7
 8002a2e:	dc28      	bgt.n	8002a82 <FillRectangle+0x82>
    if(x2 >= VGA_WIDTH) x2 = VGA_WIDTH-1;
 8002a30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a34:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002a38:	db02      	blt.n	8002a40 <FillRectangle+0x40>
 8002a3a:	f240 133d 	movw	r3, #317	; 0x13d
 8002a3e:	807b      	strh	r3, [r7, #2]
    if(y2 >= VGA_HEIGHT) y2 = VGA_HEIGHT-1;
 8002a40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a44:	2be7      	cmp	r3, #231	; 0xe7
 8002a46:	dd01      	ble.n	8002a4c <FillRectangle+0x4c>
 8002a48:	23e7      	movs	r3, #231	; 0xe7
 8002a4a:	803b      	strh	r3, [r7, #0]
    for(int yy = y1; yy <= y2; yy++) {
 8002a4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e010      	b.n	8002a76 <FillRectangle+0x76>
    	DrawLine(x1,yy,x2,yy,color);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	b219      	sxth	r1, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	b21c      	sxth	r4, r3
 8002a5c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002a60:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	f7ff fd08 	bl	8002480 <DrawLine>
    for(int yy = y1; yy <= y2; yy++) {
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	dde9      	ble.n	8002a54 <FillRectangle+0x54>
 8002a80:	e000      	b.n	8002a84 <FillRectangle+0x84>
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 8002a82:	bf00      	nop
    }
}
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}

08002a8a <FillCircle>:

void FillCircle(int16_t x0, int16_t y0, int16_t r, VGA_COLOR c) {
 8002a8a:	b590      	push	{r4, r7, lr}
 8002a8c:	b089      	sub	sp, #36	; 0x24
 8002a8e:	af02      	add	r7, sp, #8
 8002a90:	4604      	mov	r4, r0
 8002a92:	4608      	mov	r0, r1
 8002a94:	4611      	mov	r1, r2
 8002a96:	461a      	mov	r2, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	80fb      	strh	r3, [r7, #6]
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	80bb      	strh	r3, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002aa8:	887b      	ldrh	r3, [r7, #2]
 8002aaa:	f1c3 0301 	rsb	r3, r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	03d2      	lsls	r2, r2, #15
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	81fb      	strh	r3, [r7, #14]

    DrawPixel(x0, y0 + r, c);
 8002acc:	88ba      	ldrh	r2, [r7, #4]
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b219      	sxth	r1, r3
 8002ad6:	787a      	ldrb	r2, [r7, #1]
 8002ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fc9f 	bl	8002420 <DrawPixel>
    DrawPixel(x0, y0 - r, c);
 8002ae2:	88ba      	ldrh	r2, [r7, #4]
 8002ae4:	887b      	ldrh	r3, [r7, #2]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	b219      	sxth	r1, r3
 8002aec:	787a      	ldrb	r2, [r7, #1]
 8002aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fc94 	bl	8002420 <DrawPixel>
    DrawPixel(x0 + r, y0, c);
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	4413      	add	r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	787a      	ldrb	r2, [r7, #1]
 8002b04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fc89 	bl	8002420 <DrawPixel>
    DrawPixel(x0 - r, y0, c);
 8002b0e:	88fa      	ldrh	r2, [r7, #6]
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b21b      	sxth	r3, r3
 8002b18:	787a      	ldrb	r2, [r7, #1]
 8002b1a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fc7e 	bl	8002420 <DrawPixel>
    DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	b218      	sxth	r0, r3
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	4413      	add	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b21a      	sxth	r2, r3
 8002b38:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002b3c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4623      	mov	r3, r4
 8002b46:	f7ff fc9b 	bl	8002480 <DrawLine>

    while (x < y) {
 8002b4a:	e089      	b.n	8002c60 <FillCircle+0x1d6>
        if (f >= 0) {
 8002b4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0e      	blt.n	8002b72 <FillCircle+0xe8>
            y--;
 8002b54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002b60:	8a7b      	ldrh	r3, [r7, #18]
 8002b62:	3302      	adds	r3, #2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002b68:	8afa      	ldrh	r2, [r7, #22]
 8002b6a:	8a7b      	ldrh	r3, [r7, #18]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002b72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002b7e:	8abb      	ldrh	r3, [r7, #20]
 8002b80:	3302      	adds	r3, #2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002b86:	8afa      	ldrh	r2, [r7, #22]
 8002b88:	8abb      	ldrh	r3, [r7, #20]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	8a3b      	ldrh	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	b218      	sxth	r0, r3
 8002b9a:	88ba      	ldrh	r2, [r7, #4]
 8002b9c:	89fb      	ldrh	r3, [r7, #14]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b219      	sxth	r1, r3
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	8a3b      	ldrh	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b21c      	sxth	r4, r3
 8002bae:	88ba      	ldrh	r2, [r7, #4]
 8002bb0:	89fb      	ldrh	r3, [r7, #14]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	f7ff fc5e 	bl	8002480 <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	8a3b      	ldrh	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	b218      	sxth	r0, r3
 8002bce:	88ba      	ldrh	r2, [r7, #4]
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	b219      	sxth	r1, r3
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	8a3b      	ldrh	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b21c      	sxth	r4, r3
 8002be2:	88ba      	ldrh	r2, [r7, #4]
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	787b      	ldrb	r3, [r7, #1]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	f7ff fc44 	bl	8002480 <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002bf8:	88fa      	ldrh	r2, [r7, #6]
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b218      	sxth	r0, r3
 8002c02:	88ba      	ldrh	r2, [r7, #4]
 8002c04:	8a3b      	ldrh	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	b219      	sxth	r1, r3
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	b21c      	sxth	r4, r3
 8002c16:	88ba      	ldrh	r2, [r7, #4]
 8002c18:	8a3b      	ldrh	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	b21a      	sxth	r2, r3
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	4622      	mov	r2, r4
 8002c28:	f7ff fc2a 	bl	8002480 <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002c2c:	88fa      	ldrh	r2, [r7, #6]
 8002c2e:	89fb      	ldrh	r3, [r7, #14]
 8002c30:	4413      	add	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b218      	sxth	r0, r3
 8002c36:	88ba      	ldrh	r2, [r7, #4]
 8002c38:	8a3b      	ldrh	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	b219      	sxth	r1, r3
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	b21c      	sxth	r4, r3
 8002c4a:	88ba      	ldrh	r2, [r7, #4]
 8002c4c:	8a3b      	ldrh	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	787b      	ldrb	r3, [r7, #1]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	f7ff fc10 	bl	8002480 <DrawLine>
    while (x < y) {
 8002c60:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	f6ff af6f 	blt.w	8002b4c <FillCircle+0xc2>
    }
}
 8002c6e:	bf00      	nop
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}

08002c78 <ShowImage>:

void ShowImage(uint8_t *image,int16_t x,int16_t y,int16_t locX,int16_t locY){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	817b      	strh	r3, [r7, #10]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	813b      	strh	r3, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
    int16_t j,i;

    for(j=0;j<y;j++){
 8002c92:	2300      	movs	r3, #0
 8002c94:	82fb      	strh	r3, [r7, #22]
 8002c96:	e02e      	b.n	8002cf6 <ShowImage+0x7e>
    	for(i=0;i<x;i++){
 8002c98:	2300      	movs	r3, #0
 8002c9a:	82bb      	strh	r3, [r7, #20]
 8002c9c:	e01f      	b.n	8002cde <ShowImage+0x66>
    		DrawPixel(i+locX,j+locY,image[j*x+i]);
 8002c9e:	8aba      	ldrh	r2, [r7, #20]
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	b218      	sxth	r0, r3
 8002ca8:	8afa      	ldrh	r2, [r7, #22]
 8002caa:	8c3b      	ldrh	r3, [r7, #32]
 8002cac:	4413      	add	r3, r2
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	b219      	sxth	r1, r3
 8002cb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002cb6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002cba:	fb03 f202 	mul.w	r2, r3, r2
 8002cbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f7ff fba7 	bl	8002420 <DrawPixel>
    	for(i=0;i<x;i++){
 8002cd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	82bb      	strh	r3, [r7, #20]
 8002cde:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002ce2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	dbd9      	blt.n	8002c9e <ShowImage+0x26>
    for(j=0;j<y;j++){
 8002cea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	82fb      	strh	r3, [r7, #22]
 8002cf6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002cfa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	dbca      	blt.n	8002c98 <ShowImage+0x20>
    	}
    }
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d12:	490e      	ldr	r1, [pc, #56]	; (8002d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d18:	e002      	b.n	8002d20 <LoopCopyDataInit>

08002d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1e:	3304      	adds	r3, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d24:	d3f9      	bcc.n	8002d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d28:	4c0b      	ldr	r4, [pc, #44]	; (8002d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d2c:	e001      	b.n	8002d32 <LoopFillZerobss>

08002d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d30:	3204      	adds	r2, #4

08002d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d34:	d3fb      	bcc.n	8002d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d36:	f7fe fd43 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f007 fec1 	bl	800aac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d3e:	f7fd fe3f 	bl	80009c0 <main>
  bx  lr    
 8002d42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8002d50:	080464bc 	.word	0x080464bc
  ldr r2, =_sbss
 8002d54:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8002d58:	20014240 	.word	0x20014240

08002d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC_IRQHandler>
	...

08002d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_Init+0x40>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_Init+0x40>)
 8002d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_Init+0x40>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_Init+0x40>)
 8002d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_Init+0x40>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_Init+0x40>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f000 f94f 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d8e:	200f      	movs	r0, #15
 8002d90:	f000 f808 	bl	8002da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d94:	f7fe face 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00

08002da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dac:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_InitTick+0x54>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_InitTick+0x58>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f967 	bl	8003096 <HAL_SYSTICK_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00e      	b.n	8002df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d80a      	bhi.n	8002dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f000 f92f 	bl	8003042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de4:	4a06      	ldr	r2, [pc, #24]	; (8002e00 <HAL_InitTick+0x5c>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000008 	.word	0x20000008
 8002dfc:	200001d4 	.word	0x200001d4
 8002e00:	200001d0 	.word	0x200001d0

08002e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_IncTick+0x20>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x24>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_IncTick+0x24>)
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	200001d4 	.word	0x200001d4
 8002e28:	20013b14 	.word	0x20013b14

08002e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_GetTick+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20013b14 	.word	0x20013b14

08002e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff ffee 	bl	8002e2c <HAL_GetTick>
 8002e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d005      	beq.n	8002e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_Delay+0x44>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e6a:	bf00      	nop
 8002e6c:	f7ff ffde 	bl	8002e2c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d8f7      	bhi.n	8002e6c <HAL_Delay+0x28>
  {
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200001d4 	.word	0x200001d4

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	60d3      	str	r3, [r2, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4907      	ldr	r1, [pc, #28]	; (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	; (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	; (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	f7ff ff8e 	bl	8002f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff29 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003054:	f7ff ff3e 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 8003058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7ff ff8e 	bl	8002f80 <NVIC_EncodePriority>
 8003064:	4602      	mov	r2, r0
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff5d 	bl	8002f2c <__NVIC_SetPriority>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff31 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ffa2 	bl	8002fe8 <SysTick_Config>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff feb6 	bl	8002e2c <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e099      	b.n	8003200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ec:	e00f      	b.n	800310e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ee:	f7ff fe9d 	bl	8002e2c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d908      	bls.n	800310e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e078      	b.n	8003200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e8      	bne.n	80030ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <HAL_DMA_Init+0x158>)
 8003128:	4013      	ands	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b04      	cmp	r3, #4
 8003166:	d107      	bne.n	8003178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	4313      	orrs	r3, r2
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0307 	bic.w	r3, r3, #7
 800318e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d117      	bne.n	80031d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00e      	beq.n	80031d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb55 	bl	8003864 <DMA_CheckFifoParam>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031ce:	2301      	movs	r3, #1
 80031d0:	e016      	b.n	8003200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fb0c 	bl	80037f8 <DMA_CalcBaseAndBitshift>
 80031e0:	4603      	mov	r3, r0
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	223f      	movs	r2, #63	; 0x3f
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	f010803f 	.word	0xf010803f

0800320c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_DMA_Start_IT+0x26>
 800322e:	2302      	movs	r3, #2
 8003230:	e040      	b.n	80032b4 <HAL_DMA_Start_IT+0xa8>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d12f      	bne.n	80032a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa9e 	bl	800379c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	223f      	movs	r2, #63	; 0x3f
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0216 	orr.w	r2, r2, #22
 800327a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0208 	orr.w	r2, r2, #8
 8003292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e005      	b.n	80032b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032ca:	f7ff fdaf 	bl	8002e2c <HAL_GetTick>
 80032ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d008      	beq.n	80032ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e052      	b.n	8003394 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0216 	bic.w	r2, r2, #22
 80032fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_DMA_Abort+0x62>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0208 	bic.w	r2, r2, #8
 800332c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333e:	e013      	b.n	8003368 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003340:	f7ff fd74 	bl	8002e2c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b05      	cmp	r3, #5
 800334c:	d90c      	bls.n	8003368 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2203      	movs	r2, #3
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e015      	b.n	8003394 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e4      	bne.n	8003340 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	223f      	movs	r2, #63	; 0x3f
 800337c:	409a      	lsls	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d004      	beq.n	80033ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00c      	b.n	80033d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2205      	movs	r2, #5
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033ec:	4b8e      	ldr	r3, [pc, #568]	; (8003628 <HAL_DMA_IRQHandler+0x248>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a8e      	ldr	r2, [pc, #568]	; (800362c <HAL_DMA_IRQHandler+0x24c>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	2208      	movs	r2, #8
 800340c:	409a      	lsls	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01a      	beq.n	800344c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0204 	bic.w	r2, r2, #4
 8003432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	2208      	movs	r2, #8
 800343a:	409a      	lsls	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2201      	movs	r2, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d012      	beq.n	8003482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	2201      	movs	r2, #1
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f043 0202 	orr.w	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2204      	movs	r2, #4
 8003488:	409a      	lsls	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d012      	beq.n	80034b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2204      	movs	r2, #4
 80034a6:	409a      	lsls	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	2210      	movs	r2, #16
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d043      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d03c      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2210      	movs	r2, #16
 80034dc:	409a      	lsls	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d108      	bne.n	8003510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d024      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
 800350e:	e01f      	b.n	8003550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
 8003520:	e016      	b.n	8003550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0208 	bic.w	r2, r2, #8
 800353e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003554:	2220      	movs	r2, #32
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 808f 	beq.w	8003680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8087 	beq.w	8003680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	2220      	movs	r2, #32
 8003578:	409a      	lsls	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b05      	cmp	r3, #5
 8003588:	d136      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0216 	bic.w	r2, r2, #22
 8003598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <HAL_DMA_IRQHandler+0x1da>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0208 	bic.w	r2, r2, #8
 80035c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	223f      	movs	r2, #63	; 0x3f
 80035d0:	409a      	lsls	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d07e      	beq.n	80036ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
        }
        return;
 80035f6:	e079      	b.n	80036ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01d      	beq.n	8003642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10d      	bne.n	8003630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	2b00      	cmp	r3, #0
 800361a:	d031      	beq.n	8003680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
 8003624:	e02c      	b.n	8003680 <HAL_DMA_IRQHandler+0x2a0>
 8003626:	bf00      	nop
 8003628:	20000008 	.word	0x20000008
 800362c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d023      	beq.n	8003680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
 8003640:	e01e      	b.n	8003680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10f      	bne.n	8003670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0210 	bic.w	r2, r2, #16
 800365e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	2b00      	cmp	r3, #0
 8003686:	d032      	beq.n	80036ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d022      	beq.n	80036da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2205      	movs	r2, #5
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	3301      	adds	r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d307      	bcc.n	80036c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f2      	bne.n	80036ac <HAL_DMA_IRQHandler+0x2cc>
 80036c6:	e000      	b.n	80036ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
 80036ea:	e000      	b.n	80036ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80036ec:	bf00      	nop
    }
  }
}
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	460b      	mov	r3, r1
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_DMA_RegisterCallback+0x20>
 8003710:	2302      	movs	r3, #2
 8003712:	e03d      	b.n	8003790 <HAL_DMA_RegisterCallback+0x9c>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d12c      	bne.n	8003782 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8003728:	7afb      	ldrb	r3, [r7, #11]
 800372a:	2b05      	cmp	r3, #5
 800372c:	d826      	bhi.n	800377c <HAL_DMA_RegisterCallback+0x88>
 800372e:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <HAL_DMA_RegisterCallback+0x40>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	0800374d 	.word	0x0800374d
 8003738:	08003755 	.word	0x08003755
 800373c:	0800375d 	.word	0x0800375d
 8003740:	08003765 	.word	0x08003765
 8003744:	0800376d 	.word	0x0800376d
 8003748:	08003775 	.word	0x08003775
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8003752:	e018      	b.n	8003786 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800375a:	e014      	b.n	8003786 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8003762:	e010      	b.n	8003786 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800376a:	e00c      	b.n	8003786 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8003772:	e008      	b.n	8003786 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800377a:	e004      	b.n	8003786 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
      break;
 8003780:	e001      	b.n	8003786 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800378e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003790:	4618      	mov	r0, r3
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d108      	bne.n	80037dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037da:	e007      	b.n	80037ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	3b10      	subs	r3, #16
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <DMA_CalcBaseAndBitshift+0x64>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <DMA_CalcBaseAndBitshift+0x68>)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d909      	bls.n	800383a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	659a      	str	r2, [r3, #88]	; 0x58
 8003838:	e007      	b.n	800384a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	aaaaaaab 	.word	0xaaaaaaab
 8003860:	0804604c 	.word	0x0804604c

08003864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11f      	bne.n	80038be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d856      	bhi.n	8003932 <DMA_CheckFifoParam+0xce>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <DMA_CheckFifoParam+0x28>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038af 	.word	0x080038af
 8003894:	0800389d 	.word	0x0800389d
 8003898:	08003933 	.word	0x08003933
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d046      	beq.n	8003936 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ac:	e043      	b.n	8003936 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038b6:	d140      	bne.n	800393a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038bc:	e03d      	b.n	800393a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c6:	d121      	bne.n	800390c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d837      	bhi.n	800393e <DMA_CheckFifoParam+0xda>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <DMA_CheckFifoParam+0x70>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038eb 	.word	0x080038eb
 80038dc:	080038e5 	.word	0x080038e5
 80038e0:	080038fd 	.word	0x080038fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      break;
 80038e8:	e030      	b.n	800394c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d025      	beq.n	8003942 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fa:	e022      	b.n	8003942 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003904:	d11f      	bne.n	8003946 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800390a:	e01c      	b.n	8003946 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d903      	bls.n	800391a <DMA_CheckFifoParam+0xb6>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d003      	beq.n	8003920 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003918:	e018      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
      break;
 800391e:	e015      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e00b      	b.n	800394a <DMA_CheckFifoParam+0xe6>
      break;
 8003932:	bf00      	nop
 8003934:	e00a      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
 8003938:	e008      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 800393a:	bf00      	nop
 800393c:	e006      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
 8003940:	e004      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;   
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <DMA_CheckFifoParam+0xe8>
      break;
 800394a:	bf00      	nop
    }
  } 
  
  return status; 
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop

0800395c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e159      	b.n	8003c2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003978:	2201      	movs	r2, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	f040 8148 	bne.w	8003c26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d005      	beq.n	80039ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d130      	bne.n	8003a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 0201 	and.w	r2, r3, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d017      	beq.n	8003a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d123      	bne.n	8003aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80a2 	beq.w	8003c26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	4b57      	ldr	r3, [pc, #348]	; (8003c44 <HAL_GPIO_Init+0x2e8>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	4a56      	ldr	r2, [pc, #344]	; (8003c44 <HAL_GPIO_Init+0x2e8>)
 8003aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af0:	6453      	str	r3, [r2, #68]	; 0x44
 8003af2:	4b54      	ldr	r3, [pc, #336]	; (8003c44 <HAL_GPIO_Init+0x2e8>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003afe:	4a52      	ldr	r2, [pc, #328]	; (8003c48 <HAL_GPIO_Init+0x2ec>)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	3302      	adds	r3, #2
 8003b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a49      	ldr	r2, [pc, #292]	; (8003c4c <HAL_GPIO_Init+0x2f0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0x202>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a48      	ldr	r2, [pc, #288]	; (8003c50 <HAL_GPIO_Init+0x2f4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x1fe>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a47      	ldr	r2, [pc, #284]	; (8003c54 <HAL_GPIO_Init+0x2f8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x1fa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a46      	ldr	r2, [pc, #280]	; (8003c58 <HAL_GPIO_Init+0x2fc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x1f6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a45      	ldr	r2, [pc, #276]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x1f2>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	e008      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b4e:	2307      	movs	r3, #7
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b52:	2303      	movs	r3, #3
 8003b54:	e004      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_GPIO_Init+0x204>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	f002 0203 	and.w	r2, r2, #3
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b70:	4935      	ldr	r1, [pc, #212]	; (8003c48 <HAL_GPIO_Init+0x2ec>)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7e:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ba2:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba8:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bcc:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bfc:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <HAL_GPIO_Init+0x304>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b0f      	cmp	r3, #15
 8003c30:	f67f aea2 	bls.w	8003978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	40020400 	.word	0x40020400
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020c00 	.word	0x40020c00
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40013c00 	.word	0x40013c00

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c80:	e003      	b.n	8003c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	041a      	lsls	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	619a      	str	r2, [r3, #24]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ca8:	887a      	ldrh	r2, [r7, #2]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4013      	ands	r3, r2
 8003cae:	041a      	lsls	r2, r3, #16
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	43d9      	mvns	r1, r3
 8003cb4:	887b      	ldrh	r3, [r7, #2]
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	619a      	str	r2, [r3, #24]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fc74 	bl	80005d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40013c00 	.word	0x40013c00

08003cfc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfe:	b08f      	sub	sp, #60	; 0x3c
 8003d00:	af0a      	add	r7, sp, #40	; 0x28
 8003d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e054      	b.n	8003db8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f006 fc27 	bl	800a57c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2203      	movs	r2, #3
 8003d32:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f003 f965 	bl	800701c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	687e      	ldr	r6, [r7, #4]
 8003d5a:	466d      	mov	r5, sp
 8003d5c:	f106 0410 	add.w	r4, r6, #16
 8003d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d70:	1d33      	adds	r3, r6, #4
 8003d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d74:	6838      	ldr	r0, [r7, #0]
 8003d76:	f003 f8df 	bl	8006f38 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f003 f95c 	bl	800703e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	687e      	ldr	r6, [r7, #4]
 8003d8e:	466d      	mov	r5, sp
 8003d90:	f106 0410 	add.w	r4, r6, #16
 8003d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003da0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003da4:	1d33      	adds	r3, r6, #4
 8003da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f003 fae5 	bl	8007378 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dc0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af04      	add	r7, sp, #16
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	4608      	mov	r0, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	70fb      	strb	r3, [r7, #3]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	70bb      	strb	r3, [r7, #2]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_HCD_HC_Init+0x28>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e076      	b.n	8003ed6 <HAL_HCD_HC_Init+0x116>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	333d      	adds	r3, #61	; 0x3d
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3338      	adds	r3, #56	; 0x38
 8003e10:	787a      	ldrb	r2, [r7, #1]
 8003e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	212c      	movs	r1, #44	; 0x2c
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	4413      	add	r3, r2
 8003e20:	3340      	adds	r3, #64	; 0x40
 8003e22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e24:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	3339      	adds	r3, #57	; 0x39
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	333f      	adds	r3, #63	; 0x3f
 8003e46:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	78ba      	ldrb	r2, [r7, #2]
 8003e50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e54:	b2d0      	uxtb	r0, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	333a      	adds	r3, #58	; 0x3a
 8003e62:	4602      	mov	r2, r0
 8003e64:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	da09      	bge.n	8003e82 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	333b      	adds	r3, #59	; 0x3b
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e008      	b.n	8003e94 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	333b      	adds	r3, #59	; 0x3b
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	333c      	adds	r3, #60	; 0x3c
 8003ea2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003ea6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	787c      	ldrb	r4, [r7, #1]
 8003eae:	78ba      	ldrb	r2, [r7, #2]
 8003eb0:	78f9      	ldrb	r1, [r7, #3]
 8003eb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	f003 fbde 	bl	8007684 <USB_HC_Init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}

08003ede <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_HCD_HC_Halt+0x1e>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e00f      	b.n	8003f1c <HAL_HCD_HC_Halt+0x3e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 fe2e 	bl	8007b6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	70fb      	strb	r3, [r7, #3]
 8003f36:	460b      	mov	r3, r1
 8003f38:	70bb      	strb	r3, [r7, #2]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	333b      	adds	r3, #59	; 0x3b
 8003f4c:	78ba      	ldrb	r2, [r7, #2]
 8003f4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	333f      	adds	r3, #63	; 0x3f
 8003f5e:	787a      	ldrb	r2, [r7, #1]
 8003f60:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f62:	7c3b      	ldrb	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d112      	bne.n	8003f8e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3342      	adds	r3, #66	; 0x42
 8003f76:	2203      	movs	r2, #3
 8003f78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	212c      	movs	r1, #44	; 0x2c
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	333d      	adds	r3, #61	; 0x3d
 8003f88:	7f3a      	ldrb	r2, [r7, #28]
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e008      	b.n	8003fa0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	212c      	movs	r1, #44	; 0x2c
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	3342      	adds	r3, #66	; 0x42
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003fa0:	787b      	ldrb	r3, [r7, #1]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	f200 80c6 	bhi.w	8004134 <HAL_HCD_HC_SubmitRequest+0x210>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08004121 	.word	0x08004121
 8003fb8:	08004025 	.word	0x08004025
 8003fbc:	080040a3 	.word	0x080040a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003fc0:	7c3b      	ldrb	r3, [r7, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	f040 80b8 	bne.w	8004138 <HAL_HCD_HC_SubmitRequest+0x214>
 8003fc8:	78bb      	ldrb	r3, [r7, #2]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 80b4 	bne.w	8004138 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003fd0:	8b3b      	ldrh	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d108      	bne.n	8003fe8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3355      	adds	r3, #85	; 0x55
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3355      	adds	r3, #85	; 0x55
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3342      	adds	r3, #66	; 0x42
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800400e:	e093      	b.n	8004138 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3342      	adds	r3, #66	; 0x42
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]
      break;
 8004022:	e089      	b.n	8004138 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004024:	78bb      	ldrb	r3, [r7, #2]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11d      	bne.n	8004066 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	3355      	adds	r3, #85	; 0x55
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	3342      	adds	r3, #66	; 0x42
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004050:	e073      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	3342      	adds	r3, #66	; 0x42
 8004060:	2202      	movs	r2, #2
 8004062:	701a      	strb	r2, [r3, #0]
      break;
 8004064:	e069      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	3354      	adds	r3, #84	; 0x54
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	3342      	adds	r3, #66	; 0x42
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
      break;
 800408c:	e055      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	212c      	movs	r1, #44	; 0x2c
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	4413      	add	r3, r2
 800409a:	3342      	adds	r3, #66	; 0x42
 800409c:	2202      	movs	r2, #2
 800409e:	701a      	strb	r2, [r3, #0]
      break;
 80040a0:	e04b      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80040a2:	78bb      	ldrb	r3, [r7, #2]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11d      	bne.n	80040e4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3355      	adds	r3, #85	; 0x55
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3342      	adds	r3, #66	; 0x42
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040ce:	e034      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	3342      	adds	r3, #66	; 0x42
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
      break;
 80040e2:	e02a      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3354      	adds	r3, #84	; 0x54
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3342      	adds	r3, #66	; 0x42
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
      break;
 800410a:	e016      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3342      	adds	r3, #66	; 0x42
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]
      break;
 800411e:	e00c      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3342      	adds	r3, #66	; 0x42
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
      break;
 8004132:	e002      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004138:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3344      	adds	r3, #68	; 0x44
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	8b3a      	ldrh	r2, [r7, #24]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	202c      	movs	r0, #44	; 0x2c
 8004154:	fb00 f303 	mul.w	r3, r0, r3
 8004158:	440b      	add	r3, r1
 800415a:	334c      	adds	r3, #76	; 0x4c
 800415c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	212c      	movs	r1, #44	; 0x2c
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	3360      	adds	r3, #96	; 0x60
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3350      	adds	r3, #80	; 0x50
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	212c      	movs	r1, #44	; 0x2c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	3339      	adds	r3, #57	; 0x39
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3361      	adds	r3, #97	; 0x61
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	222c      	movs	r2, #44	; 0x2c
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	3338      	adds	r3, #56	; 0x38
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	18d1      	adds	r1, r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	f003 fb82 	bl	80078c8 <USB_HC_StartXfer>
 80041c4:	4603      	mov	r3, r0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop

080041d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f003 f883 	bl	80072f2 <USB_GetMode>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	f040 80f6 	bne.w	80043e0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f003 f867 	bl	80072cc <USB_ReadInterrupts>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80ec 	beq.w	80043de <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f003 f85e 	bl	80072cc <USB_ReadInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800421a:	d104      	bne.n	8004226 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004224:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f003 f84e 	bl	80072cc <USB_ReadInterrupts>
 8004230:	4603      	mov	r3, r0
 8004232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423a:	d104      	bne.n	8004246 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004244:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f003 f83e 	bl	80072cc <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800425a:	d104      	bne.n	8004266 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004264:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f003 f82e 	bl	80072cc <USB_ReadInterrupts>
 8004270:	4603      	mov	r3, r0
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b02      	cmp	r3, #2
 8004278:	d103      	bne.n	8004282 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2202      	movs	r2, #2
 8004280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f003 f820 	bl	80072cc <USB_ReadInterrupts>
 800428c:	4603      	mov	r3, r0
 800428e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004296:	d11c      	bne.n	80042d2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80042a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80042b2:	2110      	movs	r1, #16
 80042b4:	6938      	ldr	r0, [r7, #16]
 80042b6:	f002 ff0f 	bl	80070d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80042ba:	6938      	ldr	r0, [r7, #16]
 80042bc:	f002 ff40 	bl	8007140 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f003 f916 	bl	80074f8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f006 f9c5 	bl	800a65c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f002 fff8 	bl	80072cc <USB_ReadInterrupts>
 80042dc:	4603      	mov	r3, r0
 80042de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e6:	d102      	bne.n	80042ee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f001 f89e 	bl	800542a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f002 ffea 	bl	80072cc <USB_ReadInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d106      	bne.n	8004310 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f006 f98e 	bl	800a624 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f002 ffd9 	bl	80072cc <USB_ReadInterrupts>
 800431a:	4603      	mov	r3, r0
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d101      	bne.n	8004328 <HAL_HCD_IRQHandler+0x158>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_HCD_IRQHandler+0x15a>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d012      	beq.n	8004354 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699a      	ldr	r2, [r3, #24]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0210 	bic.w	r2, r2, #16
 800433c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 ffa1 	bl	8005286 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0210 	orr.w	r2, r2, #16
 8004352:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f002 ffb7 	bl	80072cc <USB_ReadInterrupts>
 800435e:	4603      	mov	r3, r0
 8004360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004368:	d13a      	bne.n	80043e0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f003 fbec 	bl	8007b4c <USB_HC_ReadInterrupt>
 8004374:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e025      	b.n	80043c8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d018      	beq.n	80043c2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a6:	d106      	bne.n	80043b6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8ab 	bl	800450a <HCD_HC_IN_IRQHandler>
 80043b4:	e005      	b.n	80043c2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fbf9 	bl	8004bb4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3301      	adds	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3d4      	bcc.n	800437c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043da:	615a      	str	r2, [r3, #20]
 80043dc:	e000      	b.n	80043e0 <HAL_HCD_IRQHandler+0x210>
      return;
 80043de:	bf00      	nop
    }
  }
}
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_HCD_Start+0x16>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e013      	b.n	8004424 <HAL_HCD_Start+0x3e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f003 f8d8 	bl	80075c0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f002 fdf0 	bl	8006ffa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_HCD_Stop+0x16>
 800443e:	2302      	movs	r3, #2
 8004440:	e00d      	b.n	800445e <HAL_HCD_Stop+0x32>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f003 fcc6 	bl	8007de0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f003 f87a 	bl	800756c <USB_ResetPort>
 8004478:	4603      	mov	r3, r0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	460b      	mov	r3, r1
 800448c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	3360      	adds	r3, #96	; 0x60
 800449c:	781b      	ldrb	r3, [r3, #0]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3350      	adds	r3, #80	; 0x50
 80044c4:	681b      	ldr	r3, [r3, #0]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f003 f8be 	bl	8007660 <USB_GetCurrentFrame>
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f003 f899 	bl	8007632 <USB_GetHostSpeed>
 8004500:	4603      	mov	r3, r0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d11a      	bne.n	8004570 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004546:	461a      	mov	r2, r3
 8004548:	2304      	movs	r3, #4
 800454a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	3361      	adds	r3, #97	; 0x61
 800455a:	2206      	movs	r2, #6
 800455c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f003 fb00 	bl	8007b6e <USB_HC_Halt>
 800456e:	e0af      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d11b      	bne.n	80045c0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004594:	461a      	mov	r2, r3
 8004596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800459a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3361      	adds	r3, #97	; 0x61
 80045aa:	2207      	movs	r2, #7
 80045ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 fad8 	bl	8007b6e <USB_HC_Halt>
 80045be:	e087      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d109      	bne.n	80045ea <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e2:	461a      	mov	r2, r3
 80045e4:	2320      	movs	r3, #32
 80045e6:	6093      	str	r3, [r2, #8]
 80045e8:	e072      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d11a      	bne.n	8004636 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	461a      	mov	r2, r3
 800460e:	2308      	movs	r3, #8
 8004610:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3361      	adds	r3, #97	; 0x61
 8004620:	2205      	movs	r2, #5
 8004622:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f003 fa9d 	bl	8007b6e <USB_HC_Halt>
 8004634:	e04c      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4413      	add	r3, r2
 800463e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464c:	d11b      	bne.n	8004686 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	461a      	mov	r2, r3
 800465c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004660:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	212c      	movs	r1, #44	; 0x2c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	3361      	adds	r3, #97	; 0x61
 8004670:	2208      	movs	r2, #8
 8004672:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f003 fa75 	bl	8007b6e <USB_HC_Halt>
 8004684:	e024      	b.n	80046d0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b80      	cmp	r3, #128	; 0x80
 800469a:	d119      	bne.n	80046d0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a8:	461a      	mov	r2, r3
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	212c      	movs	r1, #44	; 0x2c
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	4413      	add	r3, r2
 80046ba:	3361      	adds	r3, #97	; 0x61
 80046bc:	2206      	movs	r2, #6
 80046be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 fa4f 	bl	8007b6e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e6:	d112      	bne.n	800470e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f003 fa3b 	bl	8007b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	461a      	mov	r2, r3
 8004706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800470a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800470c:	e24e      	b.n	8004bac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	f040 80df 	bne.w	80048e4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d019      	beq.n	8004762 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	3348      	adds	r3, #72	; 0x48
 800473c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	0159      	lsls	r1, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	440b      	add	r3, r1
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004750:	1ad2      	subs	r2, r2, r3
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	202c      	movs	r0, #44	; 0x2c
 8004758:	fb00 f303 	mul.w	r3, r0, r3
 800475c:	440b      	add	r3, r1
 800475e:	3350      	adds	r3, #80	; 0x50
 8004760:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	212c      	movs	r1, #44	; 0x2c
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	4413      	add	r3, r2
 800476e:	3361      	adds	r3, #97	; 0x61
 8004770:	2201      	movs	r2, #1
 8004772:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	212c      	movs	r1, #44	; 0x2c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	335c      	adds	r3, #92	; 0x5c
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4413      	add	r3, r2
 800478e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004792:	461a      	mov	r2, r3
 8004794:	2301      	movs	r3, #1
 8004796:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	212c      	movs	r1, #44	; 0x2c
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	333f      	adds	r3, #63	; 0x3f
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	212c      	movs	r1, #44	; 0x2c
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	333f      	adds	r3, #63	; 0x3f
 80047ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d111      	bne.n	80047e4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	4611      	mov	r1, r2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 f9cf 	bl	8007b6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047dc:	461a      	mov	r2, r3
 80047de:	2310      	movs	r3, #16
 80047e0:	6093      	str	r3, [r2, #8]
 80047e2:	e03a      	b.n	800485a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	212c      	movs	r1, #44	; 0x2c
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	333f      	adds	r3, #63	; 0x3f
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d009      	beq.n	800480c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	333f      	adds	r3, #63	; 0x3f
 8004806:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004808:	2b01      	cmp	r3, #1
 800480a:	d126      	bne.n	800485a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	440a      	add	r2, r1
 8004822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800482a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	212c      	movs	r1, #44	; 0x2c
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	4413      	add	r3, r2
 8004838:	3360      	adds	r3, #96	; 0x60
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	b2d9      	uxtb	r1, r3
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	202c      	movs	r0, #44	; 0x2c
 8004848:	fb00 f303 	mul.w	r3, r0, r3
 800484c:	4413      	add	r3, r2
 800484e:	3360      	adds	r3, #96	; 0x60
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f005 ff0f 	bl	800a678 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d12b      	bne.n	80048ba <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	212c      	movs	r1, #44	; 0x2c
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	3348      	adds	r3, #72	; 0x48
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	202c      	movs	r0, #44	; 0x2c
 8004878:	fb00 f202 	mul.w	r2, r0, r2
 800487c:	440a      	add	r2, r1
 800487e:	3240      	adds	r2, #64	; 0x40
 8004880:	8812      	ldrh	r2, [r2, #0]
 8004882:	fbb3 f3f2 	udiv	r3, r3, r2
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 818e 	beq.w	8004bac <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	3354      	adds	r3, #84	; 0x54
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	f083 0301 	eor.w	r3, r3, #1
 80048a4:	b2d8      	uxtb	r0, r3
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	212c      	movs	r1, #44	; 0x2c
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	3354      	adds	r3, #84	; 0x54
 80048b4:	4602      	mov	r2, r0
 80048b6:	701a      	strb	r2, [r3, #0]
}
 80048b8:	e178      	b.n	8004bac <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	212c      	movs	r1, #44	; 0x2c
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	3354      	adds	r3, #84	; 0x54
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f083 0301 	eor.w	r3, r3, #1
 80048ce:	b2d8      	uxtb	r0, r3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	3354      	adds	r3, #84	; 0x54
 80048de:	4602      	mov	r2, r0
 80048e0:	701a      	strb	r2, [r3, #0]
}
 80048e2:	e163      	b.n	8004bac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f040 80f6 	bne.w	8004ae8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	212c      	movs	r1, #44	; 0x2c
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	4413      	add	r3, r2
 8004908:	3361      	adds	r3, #97	; 0x61
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d109      	bne.n	8004924 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	212c      	movs	r1, #44	; 0x2c
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	4413      	add	r3, r2
 800491c:	3360      	adds	r3, #96	; 0x60
 800491e:	2201      	movs	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	e0c9      	b.n	8004ab8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3361      	adds	r3, #97	; 0x61
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b05      	cmp	r3, #5
 8004936:	d109      	bne.n	800494c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	3360      	adds	r3, #96	; 0x60
 8004946:	2205      	movs	r2, #5
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e0b5      	b.n	8004ab8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	212c      	movs	r1, #44	; 0x2c
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	3361      	adds	r3, #97	; 0x61
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b06      	cmp	r3, #6
 800495e:	d009      	beq.n	8004974 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3361      	adds	r3, #97	; 0x61
 800496e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004970:	2b08      	cmp	r3, #8
 8004972:	d150      	bne.n	8004a16 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	212c      	movs	r1, #44	; 0x2c
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	335c      	adds	r3, #92	; 0x5c
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	202c      	movs	r0, #44	; 0x2c
 800498c:	fb00 f303 	mul.w	r3, r0, r3
 8004990:	440b      	add	r3, r1
 8004992:	335c      	adds	r3, #92	; 0x5c
 8004994:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	335c      	adds	r3, #92	; 0x5c
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d912      	bls.n	80049d0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	335c      	adds	r3, #92	; 0x5c
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3360      	adds	r3, #96	; 0x60
 80049ca:	2204      	movs	r2, #4
 80049cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049ce:	e073      	b.n	8004ab8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	212c      	movs	r1, #44	; 0x2c
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	3360      	adds	r3, #96	; 0x60
 80049de:	2202      	movs	r2, #2
 80049e0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049f8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a00:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a14:	e050      	b.n	8004ab8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	3361      	adds	r3, #97	; 0x61
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d122      	bne.n	8004a70 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	212c      	movs	r1, #44	; 0x2c
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	3360      	adds	r3, #96	; 0x60
 8004a38:	2202      	movs	r2, #2
 8004a3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e023      	b.n	8004ab8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3361      	adds	r3, #97	; 0x61
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b07      	cmp	r3, #7
 8004a82:	d119      	bne.n	8004ab8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	212c      	movs	r1, #44	; 0x2c
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	335c      	adds	r3, #92	; 0x5c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	202c      	movs	r0, #44	; 0x2c
 8004a9c:	fb00 f303 	mul.w	r3, r0, r3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	335c      	adds	r3, #92	; 0x5c
 8004aa4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	212c      	movs	r1, #44	; 0x2c
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3360      	adds	r3, #96	; 0x60
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	b2d9      	uxtb	r1, r3
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	202c      	movs	r0, #44	; 0x2c
 8004ad4:	fb00 f303 	mul.w	r3, r0, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	3360      	adds	r3, #96	; 0x60
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f005 fdc9 	bl	800a678 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ae6:	e061      	b.n	8004bac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b10      	cmp	r3, #16
 8004afc:	d156      	bne.n	8004bac <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	212c      	movs	r1, #44	; 0x2c
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	4413      	add	r3, r2
 8004b0a:	333f      	adds	r3, #63	; 0x3f
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d111      	bne.n	8004b36 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	212c      	movs	r1, #44	; 0x2c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	335c      	adds	r3, #92	; 0x5c
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 f81d 	bl	8007b6e <USB_HC_Halt>
 8004b34:	e031      	b.n	8004b9a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	333f      	adds	r3, #63	; 0x3f
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	333f      	adds	r3, #63	; 0x3f
 8004b58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d11d      	bne.n	8004b9a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	212c      	movs	r1, #44	; 0x2c
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	335c      	adds	r3, #92	; 0x5c
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d110      	bne.n	8004b9a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	212c      	movs	r1, #44	; 0x2c
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	3361      	adds	r3, #97	; 0x61
 8004b86:	2203      	movs	r2, #3
 8004b88:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	4611      	mov	r1, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f002 ffea 	bl	8007b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2310      	movs	r3, #16
 8004baa:	6093      	str	r3, [r2, #8]
}
 8004bac:	bf00      	nop
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11a      	bne.n	8004c1a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	3361      	adds	r3, #97	; 0x61
 8004c04:	2206      	movs	r2, #6
 8004c06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	4611      	mov	r1, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f002 ffab 	bl	8007b6e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004c18:	e331      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d12e      	bne.n	8004c8e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2320      	movs	r3, #32
 8004c40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	333d      	adds	r3, #61	; 0x3d
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	f040 8313 	bne.w	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	212c      	movs	r1, #44	; 0x2c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	333d      	adds	r3, #61	; 0x3d
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3360      	adds	r3, #96	; 0x60
 8004c78:	2202      	movs	r2, #2
 8004c7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f002 ff71 	bl	8007b6e <USB_HC_Halt>
}
 8004c8c:	e2f7      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca4:	d112      	bne.n	8004ccc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f002 ff52 	bl	8007b6e <USB_HC_Halt>
}
 8004cca:	e2d8      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d140      	bne.n	8004d64 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	335c      	adds	r3, #92	; 0x5c
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d111      	bne.n	8004d2e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	333d      	adds	r3, #61	; 0x3d
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2340      	movs	r3, #64	; 0x40
 8004d2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	212c      	movs	r1, #44	; 0x2c
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3361      	adds	r3, #97	; 0x61
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 ff06 	bl	8007b6e <USB_HC_Halt>
}
 8004d62:	e28c      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d12c      	bne.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	3361      	adds	r3, #97	; 0x61
 8004d88:	2204      	movs	r2, #4
 8004d8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	212c      	movs	r1, #44	; 0x2c
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	333d      	adds	r3, #61	; 0x3d
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	212c      	movs	r1, #44	; 0x2c
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	4413      	add	r3, r2
 8004daa:	335c      	adds	r3, #92	; 0x5c
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f002 fed7 	bl	8007b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dcc:	461a      	mov	r2, r3
 8004dce:	2340      	movs	r3, #64	; 0x40
 8004dd0:	6093      	str	r3, [r2, #8]
}
 8004dd2:	e254      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d11a      	bne.n	8004e20 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df6:	461a      	mov	r2, r3
 8004df8:	2308      	movs	r3, #8
 8004dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	212c      	movs	r1, #44	; 0x2c
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	3361      	adds	r3, #97	; 0x61
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	4611      	mov	r1, r2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f002 fea8 	bl	8007b6e <USB_HC_Halt>
}
 8004e1e:	e22e      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d140      	bne.n	8004eb8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	212c      	movs	r1, #44	; 0x2c
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	335c      	adds	r3, #92	; 0x5c
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	212c      	movs	r1, #44	; 0x2c
 8004e4e:	fb01 f303 	mul.w	r3, r1, r3
 8004e52:	4413      	add	r3, r2
 8004e54:	3361      	adds	r3, #97	; 0x61
 8004e56:	2203      	movs	r2, #3
 8004e58:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	212c      	movs	r1, #44	; 0x2c
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	333d      	adds	r3, #61	; 0x3d
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d112      	bne.n	8004e94 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	212c      	movs	r1, #44	; 0x2c
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	333c      	adds	r3, #60	; 0x3c
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	333d      	adds	r3, #61	; 0x3d
 8004e90:	2201      	movs	r2, #1
 8004e92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f002 fe65 	bl	8007b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	6093      	str	r3, [r2, #8]
}
 8004eb6:	e1e2      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eca:	2b80      	cmp	r3, #128	; 0x80
 8004ecc:	d164      	bne.n	8004f98 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d111      	bne.n	8004efa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	212c      	movs	r1, #44	; 0x2c
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3361      	adds	r3, #97	; 0x61
 8004ee4:	2206      	movs	r2, #6
 8004ee6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f002 fe3b 	bl	8007b6e <USB_HC_Halt>
 8004ef8:	e044      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	212c      	movs	r1, #44	; 0x2c
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	335c      	adds	r3, #92	; 0x5c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	202c      	movs	r0, #44	; 0x2c
 8004f12:	fb00 f303 	mul.w	r3, r0, r3
 8004f16:	440b      	add	r3, r1
 8004f18:	335c      	adds	r3, #92	; 0x5c
 8004f1a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	212c      	movs	r1, #44	; 0x2c
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	335c      	adds	r3, #92	; 0x5c
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d920      	bls.n	8004f72 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	212c      	movs	r1, #44	; 0x2c
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	335c      	adds	r3, #92	; 0x5c
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	212c      	movs	r1, #44	; 0x2c
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3360      	adds	r3, #96	; 0x60
 8004f50:	2204      	movs	r2, #4
 8004f52:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	b2d9      	uxtb	r1, r3
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	202c      	movs	r0, #44	; 0x2c
 8004f5e:	fb00 f303 	mul.w	r3, r0, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	3360      	adds	r3, #96	; 0x60
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f005 fb84 	bl	800a678 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f70:	e008      	b.n	8004f84 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	212c      	movs	r1, #44	; 0x2c
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3360      	adds	r3, #96	; 0x60
 8004f80:	2202      	movs	r2, #2
 8004f82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	461a      	mov	r2, r3
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	6093      	str	r3, [r2, #8]
}
 8004f96:	e172      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fae:	d11b      	bne.n	8004fe8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3361      	adds	r3, #97	; 0x61
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f002 fdce 	bl	8007b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe4:	6093      	str	r3, [r2, #8]
}
 8004fe6:	e14a      	b.n	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	f040 813f 	bne.w	800527e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	212c      	movs	r1, #44	; 0x2c
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	3361      	adds	r3, #97	; 0x61
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d17d      	bne.n	8005110 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	212c      	movs	r1, #44	; 0x2c
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	3360      	adds	r3, #96	; 0x60
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	212c      	movs	r1, #44	; 0x2c
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	4413      	add	r3, r2
 8005032:	333f      	adds	r3, #63	; 0x3f
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d00a      	beq.n	8005050 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	212c      	movs	r1, #44	; 0x2c
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	4413      	add	r3, r2
 8005046:	333f      	adds	r3, #63	; 0x3f
 8005048:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800504a:	2b03      	cmp	r3, #3
 800504c:	f040 8100 	bne.w	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d113      	bne.n	8005080 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	212c      	movs	r1, #44	; 0x2c
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	4413      	add	r3, r2
 8005064:	3355      	adds	r3, #85	; 0x55
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	f083 0301 	eor.w	r3, r3, #1
 800506c:	b2d8      	uxtb	r0, r3
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	212c      	movs	r1, #44	; 0x2c
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	3355      	adds	r3, #85	; 0x55
 800507c:	4602      	mov	r2, r0
 800507e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b01      	cmp	r3, #1
 8005086:	f040 80e3 	bne.w	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	212c      	movs	r1, #44	; 0x2c
 8005090:	fb01 f303 	mul.w	r3, r1, r3
 8005094:	4413      	add	r3, r2
 8005096:	334c      	adds	r3, #76	; 0x4c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80d8 	beq.w	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	334c      	adds	r3, #76	; 0x4c
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	202c      	movs	r0, #44	; 0x2c
 80050b6:	fb00 f202 	mul.w	r2, r0, r2
 80050ba:	440a      	add	r2, r1
 80050bc:	3240      	adds	r2, #64	; 0x40
 80050be:	8812      	ldrh	r2, [r2, #0]
 80050c0:	4413      	add	r3, r2
 80050c2:	3b01      	subs	r3, #1
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	202c      	movs	r0, #44	; 0x2c
 80050ca:	fb00 f202 	mul.w	r2, r0, r2
 80050ce:	440a      	add	r2, r1
 80050d0:	3240      	adds	r2, #64	; 0x40
 80050d2:	8812      	ldrh	r2, [r2, #0]
 80050d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80b5 	beq.w	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	212c      	movs	r1, #44	; 0x2c
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	3355      	adds	r3, #85	; 0x55
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	f083 0301 	eor.w	r3, r3, #1
 80050fa:	b2d8      	uxtb	r0, r3
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	212c      	movs	r1, #44	; 0x2c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	3355      	adds	r3, #85	; 0x55
 800510a:	4602      	mov	r2, r0
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e09f      	b.n	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	212c      	movs	r1, #44	; 0x2c
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	3361      	adds	r3, #97	; 0x61
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d109      	bne.n	8005138 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	3360      	adds	r3, #96	; 0x60
 8005132:	2202      	movs	r2, #2
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e08b      	b.n	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	212c      	movs	r1, #44	; 0x2c
 800513e:	fb01 f303 	mul.w	r3, r1, r3
 8005142:	4413      	add	r3, r2
 8005144:	3361      	adds	r3, #97	; 0x61
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d109      	bne.n	8005160 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	212c      	movs	r1, #44	; 0x2c
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	4413      	add	r3, r2
 8005158:	3360      	adds	r3, #96	; 0x60
 800515a:	2202      	movs	r2, #2
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e077      	b.n	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3361      	adds	r3, #97	; 0x61
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b05      	cmp	r3, #5
 8005172:	d109      	bne.n	8005188 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3360      	adds	r3, #96	; 0x60
 8005182:	2205      	movs	r2, #5
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e063      	b.n	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3361      	adds	r3, #97	; 0x61
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b06      	cmp	r3, #6
 800519a:	d009      	beq.n	80051b0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	212c      	movs	r1, #44	; 0x2c
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	4413      	add	r3, r2
 80051a8:	3361      	adds	r3, #97	; 0x61
 80051aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d14f      	bne.n	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	335c      	adds	r3, #92	; 0x5c
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	202c      	movs	r0, #44	; 0x2c
 80051c8:	fb00 f303 	mul.w	r3, r0, r3
 80051cc:	440b      	add	r3, r1
 80051ce:	335c      	adds	r3, #92	; 0x5c
 80051d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	212c      	movs	r1, #44	; 0x2c
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	335c      	adds	r3, #92	; 0x5c
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d912      	bls.n	800520c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	212c      	movs	r1, #44	; 0x2c
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	335c      	adds	r3, #92	; 0x5c
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	212c      	movs	r1, #44	; 0x2c
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	4413      	add	r3, r2
 8005204:	3360      	adds	r3, #96	; 0x60
 8005206:	2204      	movs	r2, #4
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e021      	b.n	8005250 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	3360      	adds	r3, #96	; 0x60
 800521a:	2202      	movs	r2, #2
 800521c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005234:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800523c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	4413      	add	r3, r2
 8005246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524a:	461a      	mov	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	4413      	add	r3, r2
 8005258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525c:	461a      	mov	r2, r3
 800525e:	2302      	movs	r3, #2
 8005260:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	b2d9      	uxtb	r1, r3
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	202c      	movs	r0, #44	; 0x2c
 800526c:	fb00 f303 	mul.w	r3, r0, r3
 8005270:	4413      	add	r3, r2
 8005272:	3360      	adds	r3, #96	; 0x60
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f005 f9fd 	bl	800a678 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800527e:	bf00      	nop
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b08a      	sub	sp, #40	; 0x28
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	0c5b      	lsrs	r3, r3, #17
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d004      	beq.n	80052cc <HCD_RXQLVL_IRQHandler+0x46>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	f000 80a9 	beq.w	800541c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80052ca:	e0aa      	b.n	8005422 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80a6 	beq.w	8005420 <HCD_RXQLVL_IRQHandler+0x19a>
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	212c      	movs	r1, #44	; 0x2c
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	4413      	add	r3, r2
 80052e0:	3344      	adds	r3, #68	; 0x44
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 809b 	beq.w	8005420 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	212c      	movs	r1, #44	; 0x2c
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	3350      	adds	r3, #80	; 0x50
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	441a      	add	r2, r3
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	202c      	movs	r0, #44	; 0x2c
 8005304:	fb00 f303 	mul.w	r3, r0, r3
 8005308:	440b      	add	r3, r1
 800530a:	334c      	adds	r3, #76	; 0x4c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d87a      	bhi.n	8005408 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	212c      	movs	r1, #44	; 0x2c
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	4413      	add	r3, r2
 8005322:	3344      	adds	r3, #68	; 0x44
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	b292      	uxth	r2, r2
 800532a:	4619      	mov	r1, r3
 800532c:	f001 ff76 	bl	800721c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	212c      	movs	r1, #44	; 0x2c
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	3344      	adds	r3, #68	; 0x44
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	441a      	add	r2, r3
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	202c      	movs	r0, #44	; 0x2c
 800534a:	fb00 f303 	mul.w	r3, r0, r3
 800534e:	440b      	add	r3, r1
 8005350:	3344      	adds	r3, #68	; 0x44
 8005352:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	212c      	movs	r1, #44	; 0x2c
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	3350      	adds	r3, #80	; 0x50
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	441a      	add	r2, r3
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	202c      	movs	r0, #44	; 0x2c
 800536e:	fb00 f303 	mul.w	r3, r0, r3
 8005372:	440b      	add	r3, r1
 8005374:	3350      	adds	r3, #80	; 0x50
 8005376:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	0cdb      	lsrs	r3, r3, #19
 8005388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	3340      	adds	r3, #64	; 0x40
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d13c      	bne.n	8005420 <HCD_RXQLVL_IRQHandler+0x19a>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d039      	beq.n	8005420 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	461a      	mov	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	212c      	movs	r1, #44	; 0x2c
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	4413      	add	r3, r2
 80053ea:	3354      	adds	r3, #84	; 0x54
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f083 0301 	eor.w	r3, r3, #1
 80053f2:	b2d8      	uxtb	r0, r3
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	212c      	movs	r1, #44	; 0x2c
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	4413      	add	r3, r2
 8005400:	3354      	adds	r3, #84	; 0x54
 8005402:	4602      	mov	r2, r0
 8005404:	701a      	strb	r2, [r3, #0]
      break;
 8005406:	e00b      	b.n	8005420 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	212c      	movs	r1, #44	; 0x2c
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	4413      	add	r3, r2
 8005414:	3360      	adds	r3, #96	; 0x60
 8005416:	2204      	movs	r2, #4
 8005418:	701a      	strb	r2, [r3, #0]
      break;
 800541a:	e001      	b.n	8005420 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800541c:	bf00      	nop
 800541e:	e000      	b.n	8005422 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005420:	bf00      	nop
  }
}
 8005422:	bf00      	nop
 8005424:	3728      	adds	r7, #40	; 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b086      	sub	sp, #24
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005456:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b02      	cmp	r3, #2
 8005460:	d10b      	bne.n	800547a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d102      	bne.n	8005472 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f005 f8e7 	bl	800a640 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b08      	cmp	r3, #8
 8005482:	d132      	bne.n	80054ea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f043 0308 	orr.w	r3, r3, #8
 800548a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d126      	bne.n	80054e4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d113      	bne.n	80054c6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80054a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054a8:	d106      	bne.n	80054b8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2102      	movs	r1, #2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f002 f821 	bl	80074f8 <USB_InitFSLSPClkSel>
 80054b6:	e011      	b.n	80054dc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2101      	movs	r1, #1
 80054be:	4618      	mov	r0, r3
 80054c0:	f002 f81a 	bl	80074f8 <USB_InitFSLSPClkSel>
 80054c4:	e00a      	b.n	80054dc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d106      	bne.n	80054dc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d4:	461a      	mov	r2, r3
 80054d6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80054da:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f005 f8d9 	bl	800a694 <HAL_HCD_PortEnabled_Callback>
 80054e2:	e002      	b.n	80054ea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f005 f8e3 	bl	800a6b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d103      	bne.n	80054fc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f043 0320 	orr.w	r3, r3, #32
 80054fa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005502:	461a      	mov	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e267      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d075      	beq.n	800561a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800552e:	4b88      	ldr	r3, [pc, #544]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b04      	cmp	r3, #4
 8005538:	d00c      	beq.n	8005554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800553a:	4b85      	ldr	r3, [pc, #532]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005542:	2b08      	cmp	r3, #8
 8005544:	d112      	bne.n	800556c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005546:	4b82      	ldr	r3, [pc, #520]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005552:	d10b      	bne.n	800556c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005554:	4b7e      	ldr	r3, [pc, #504]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d05b      	beq.n	8005618 <HAL_RCC_OscConfig+0x108>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d157      	bne.n	8005618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e242      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005574:	d106      	bne.n	8005584 <HAL_RCC_OscConfig+0x74>
 8005576:	4b76      	ldr	r3, [pc, #472]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a75      	ldr	r2, [pc, #468]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 800557c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e01d      	b.n	80055c0 <HAL_RCC_OscConfig+0xb0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800558c:	d10c      	bne.n	80055a8 <HAL_RCC_OscConfig+0x98>
 800558e:	4b70      	ldr	r3, [pc, #448]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a6f      	ldr	r2, [pc, #444]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	4b6d      	ldr	r3, [pc, #436]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a6c      	ldr	r2, [pc, #432]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e00b      	b.n	80055c0 <HAL_RCC_OscConfig+0xb0>
 80055a8:	4b69      	ldr	r3, [pc, #420]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a68      	ldr	r2, [pc, #416]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	4b66      	ldr	r3, [pc, #408]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a65      	ldr	r2, [pc, #404]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80055ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d013      	beq.n	80055f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fd fc30 	bl	8002e2c <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fd fc2c 	bl	8002e2c <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e207      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0xc0>
 80055ee:	e014      	b.n	800561a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fd fc1c 	bl	8002e2c <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f8:	f7fd fc18 	bl	8002e2c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b64      	cmp	r3, #100	; 0x64
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1f3      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560a:	4b51      	ldr	r3, [pc, #324]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0xe8>
 8005616:	e000      	b.n	800561a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d063      	beq.n	80056ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005626:	4b4a      	ldr	r3, [pc, #296]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005632:	4b47      	ldr	r3, [pc, #284]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800563a:	2b08      	cmp	r3, #8
 800563c:	d11c      	bne.n	8005678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563e:	4b44      	ldr	r3, [pc, #272]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d116      	bne.n	8005678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564a:	4b41      	ldr	r3, [pc, #260]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_RCC_OscConfig+0x152>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d001      	beq.n	8005662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e1c7      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005662:	4b3b      	ldr	r3, [pc, #236]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4937      	ldr	r1, [pc, #220]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005676:	e03a      	b.n	80056ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d020      	beq.n	80056c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005680:	4b34      	ldr	r3, [pc, #208]	; (8005754 <HAL_RCC_OscConfig+0x244>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005686:	f7fd fbd1 	bl	8002e2c <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800568e:	f7fd fbcd 	bl	8002e2c <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e1a8      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a0:	4b2b      	ldr	r3, [pc, #172]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ac:	4b28      	ldr	r3, [pc, #160]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4925      	ldr	r1, [pc, #148]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	600b      	str	r3, [r1, #0]
 80056c0:	e015      	b.n	80056ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c2:	4b24      	ldr	r3, [pc, #144]	; (8005754 <HAL_RCC_OscConfig+0x244>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fd fbb0 	bl	8002e2c <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d0:	f7fd fbac 	bl	8002e2c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e187      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e2:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d036      	beq.n	8005768 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <HAL_RCC_OscConfig+0x248>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fd fb90 	bl	8002e2c <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005710:	f7fd fb8c 	bl	8002e2c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e167      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCC_OscConfig+0x240>)
 8005724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCC_OscConfig+0x200>
 800572e:	e01b      	b.n	8005768 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005730:	4b09      	ldr	r3, [pc, #36]	; (8005758 <HAL_RCC_OscConfig+0x248>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005736:	f7fd fb79 	bl	8002e2c <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800573c:	e00e      	b.n	800575c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800573e:	f7fd fb75 	bl	8002e2c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d907      	bls.n	800575c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e150      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
 8005750:	40023800 	.word	0x40023800
 8005754:	42470000 	.word	0x42470000
 8005758:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800575c:	4b88      	ldr	r3, [pc, #544]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800575e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1ea      	bne.n	800573e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8097 	beq.w	80058a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005776:	2300      	movs	r3, #0
 8005778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577a:	4b81      	ldr	r3, [pc, #516]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005786:	2300      	movs	r3, #0
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	4b7d      	ldr	r3, [pc, #500]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	4a7c      	ldr	r2, [pc, #496]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005794:	6413      	str	r3, [r2, #64]	; 0x40
 8005796:	4b7a      	ldr	r3, [pc, #488]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a6:	4b77      	ldr	r3, [pc, #476]	; (8005984 <HAL_RCC_OscConfig+0x474>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d118      	bne.n	80057e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057b2:	4b74      	ldr	r3, [pc, #464]	; (8005984 <HAL_RCC_OscConfig+0x474>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a73      	ldr	r2, [pc, #460]	; (8005984 <HAL_RCC_OscConfig+0x474>)
 80057b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057be:	f7fd fb35 	bl	8002e2c <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c6:	f7fd fb31 	bl	8002e2c <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e10c      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d8:	4b6a      	ldr	r3, [pc, #424]	; (8005984 <HAL_RCC_OscConfig+0x474>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d106      	bne.n	80057fa <HAL_RCC_OscConfig+0x2ea>
 80057ec:	4b64      	ldr	r3, [pc, #400]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	4a63      	ldr	r2, [pc, #396]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	6713      	str	r3, [r2, #112]	; 0x70
 80057f8:	e01c      	b.n	8005834 <HAL_RCC_OscConfig+0x324>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0x30c>
 8005802:	4b5f      	ldr	r3, [pc, #380]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	4a5e      	ldr	r2, [pc, #376]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005808:	f043 0304 	orr.w	r3, r3, #4
 800580c:	6713      	str	r3, [r2, #112]	; 0x70
 800580e:	4b5c      	ldr	r3, [pc, #368]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a5b      	ldr	r2, [pc, #364]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
 800581a:	e00b      	b.n	8005834 <HAL_RCC_OscConfig+0x324>
 800581c:	4b58      	ldr	r3, [pc, #352]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	4a57      	ldr	r2, [pc, #348]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	6713      	str	r3, [r2, #112]	; 0x70
 8005828:	4b55      	ldr	r3, [pc, #340]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	4a54      	ldr	r2, [pc, #336]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800582e:	f023 0304 	bic.w	r3, r3, #4
 8005832:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d015      	beq.n	8005868 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fd faf6 	bl	8002e2c <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005842:	e00a      	b.n	800585a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005844:	f7fd faf2 	bl	8002e2c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0cb      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585a:	4b49      	ldr	r3, [pc, #292]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0ee      	beq.n	8005844 <HAL_RCC_OscConfig+0x334>
 8005866:	e014      	b.n	8005892 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005868:	f7fd fae0 	bl	8002e2c <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586e:	e00a      	b.n	8005886 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005870:	f7fd fadc 	bl	8002e2c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f241 3288 	movw	r2, #5000	; 0x1388
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e0b5      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005886:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1ee      	bne.n	8005870 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005892:	7dfb      	ldrb	r3, [r7, #23]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d105      	bne.n	80058a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005898:	4b39      	ldr	r3, [pc, #228]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	4a38      	ldr	r2, [pc, #224]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800589e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80a1 	beq.w	80059f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058ae:	4b34      	ldr	r3, [pc, #208]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 030c 	and.w	r3, r3, #12
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d05c      	beq.n	8005974 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d141      	bne.n	8005946 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c2:	4b31      	ldr	r3, [pc, #196]	; (8005988 <HAL_RCC_OscConfig+0x478>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd fab0 	bl	8002e2c <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fd faac 	bl	8002e2c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e087      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e2:	4b27      	ldr	r3, [pc, #156]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69da      	ldr	r2, [r3, #28]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	019b      	lsls	r3, r3, #6
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	3b01      	subs	r3, #1
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	061b      	lsls	r3, r3, #24
 8005912:	491b      	ldr	r1, [pc, #108]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005914:	4313      	orrs	r3, r2
 8005916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <HAL_RCC_OscConfig+0x478>)
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591e:	f7fd fa85 	bl	8002e2c <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005926:	f7fd fa81 	bl	8002e2c <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e05c      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x416>
 8005944:	e054      	b.n	80059f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005946:	4b10      	ldr	r3, [pc, #64]	; (8005988 <HAL_RCC_OscConfig+0x478>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fd fa6e 	bl	8002e2c <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005954:	f7fd fa6a 	bl	8002e2c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e045      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <HAL_RCC_OscConfig+0x470>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x444>
 8005972:	e03d      	b.n	80059f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d107      	bne.n	800598c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e038      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
 8005980:	40023800 	.word	0x40023800
 8005984:	40007000 	.word	0x40007000
 8005988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800598c:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <HAL_RCC_OscConfig+0x4ec>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d028      	beq.n	80059ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d121      	bne.n	80059ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d11a      	bne.n	80059ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059bc:	4013      	ands	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d111      	bne.n	80059ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	3b01      	subs	r3, #1
 80059d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d107      	bne.n	80059ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40023800 	.word	0x40023800

08005a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0cc      	b.n	8005bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a14:	4b68      	ldr	r3, [pc, #416]	; (8005bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d90c      	bls.n	8005a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a22:	4b65      	ldr	r3, [pc, #404]	; (8005bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2a:	4b63      	ldr	r3, [pc, #396]	; (8005bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d001      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0b8      	b.n	8005bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d020      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a54:	4b59      	ldr	r3, [pc, #356]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	4a58      	ldr	r2, [pc, #352]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a6c:	4b53      	ldr	r3, [pc, #332]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4a52      	ldr	r2, [pc, #328]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a78:	4b50      	ldr	r3, [pc, #320]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	494d      	ldr	r1, [pc, #308]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d044      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d107      	bne.n	8005aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9e:	4b47      	ldr	r3, [pc, #284]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d119      	bne.n	8005ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e07f      	b.n	8005bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d003      	beq.n	8005abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005abe:	4b3f      	ldr	r3, [pc, #252]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e06f      	b.n	8005bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ace:	4b3b      	ldr	r3, [pc, #236]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e067      	b.n	8005bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ade:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f023 0203 	bic.w	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4934      	ldr	r1, [pc, #208]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af0:	f7fd f99c 	bl	8002e2c <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af6:	e00a      	b.n	8005b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af8:	f7fd f998 	bl	8002e2c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e04f      	b.n	8005bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0e:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 020c 	and.w	r2, r3, #12
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d1eb      	bne.n	8005af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d20c      	bcs.n	8005b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2e:	4b22      	ldr	r3, [pc, #136]	; (8005bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b36:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e032      	b.n	8005bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b54:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4916      	ldr	r1, [pc, #88]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	490e      	ldr	r1, [pc, #56]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b86:	f000 f821 	bl	8005bcc <HAL_RCC_GetSysClockFreq>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	490a      	ldr	r1, [pc, #40]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b98:	5ccb      	ldrb	r3, [r1, r3]
 8005b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9e:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fd f8fc 	bl	8002da4 <HAL_InitTick>

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40023c00 	.word	0x40023c00
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	080458d0 	.word	0x080458d0
 8005bc4:	20000008 	.word	0x20000008
 8005bc8:	200001d0 	.word	0x200001d0

08005bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd0:	b090      	sub	sp, #64	; 0x40
 8005bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd8:	2300      	movs	r3, #0
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bdc:	2300      	movs	r3, #0
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005be4:	4b59      	ldr	r3, [pc, #356]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 030c 	and.w	r3, r3, #12
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d00d      	beq.n	8005c0c <HAL_RCC_GetSysClockFreq+0x40>
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	f200 80a1 	bhi.w	8005d38 <HAL_RCC_GetSysClockFreq+0x16c>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0x34>
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d003      	beq.n	8005c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bfe:	e09b      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c00:	4b53      	ldr	r3, [pc, #332]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c02:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c04:	e09b      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c06:	4b53      	ldr	r3, [pc, #332]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c0a:	e098      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c0c:	4b4f      	ldr	r3, [pc, #316]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c16:	4b4d      	ldr	r3, [pc, #308]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d028      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c22:	4b4a      	ldr	r3, [pc, #296]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	2200      	movs	r2, #0
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c34:	2100      	movs	r1, #0
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c38:	fb03 f201 	mul.w	r2, r3, r1
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	fb00 f303 	mul.w	r3, r0, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	4a43      	ldr	r2, [pc, #268]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c46:	fba0 1202 	umull	r1, r2, r0, r2
 8005c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c4c:	460a      	mov	r2, r1
 8005c4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c52:	4413      	add	r3, r2
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	2200      	movs	r2, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	61fa      	str	r2, [r7, #28]
 8005c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c66:	f7fa fb0b 	bl	8000280 <__aeabi_uldivmod>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4613      	mov	r3, r2
 8005c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c72:	e053      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c74:	4b35      	ldr	r3, [pc, #212]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	099b      	lsrs	r3, r3, #6
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	617a      	str	r2, [r7, #20]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c86:	f04f 0b00 	mov.w	fp, #0
 8005c8a:	4652      	mov	r2, sl
 8005c8c:	465b      	mov	r3, fp
 8005c8e:	f04f 0000 	mov.w	r0, #0
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	0159      	lsls	r1, r3, #5
 8005c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c9c:	0150      	lsls	r0, r2, #5
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	ebb2 080a 	subs.w	r8, r2, sl
 8005ca6:	eb63 090b 	sbc.w	r9, r3, fp
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cbe:	ebb2 0408 	subs.w	r4, r2, r8
 8005cc2:	eb63 0509 	sbc.w	r5, r3, r9
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	00eb      	lsls	r3, r5, #3
 8005cd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd4:	00e2      	lsls	r2, r4, #3
 8005cd6:	4614      	mov	r4, r2
 8005cd8:	461d      	mov	r5, r3
 8005cda:	eb14 030a 	adds.w	r3, r4, sl
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	eb45 030b 	adc.w	r3, r5, fp
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	028b      	lsls	r3, r1, #10
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	028a      	lsls	r2, r1, #10
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	2200      	movs	r2, #0
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	60fa      	str	r2, [r7, #12]
 8005d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d10:	f7fa fab6 	bl	8000280 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3740      	adds	r7, #64	; 0x40
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	017d7840 	.word	0x017d7840

08005d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e041      	b.n	8005dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb fb00 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 fcf0 	bl	800677c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d001      	beq.n	8005e10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e03c      	b.n	8005e8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <HAL_TIM_Base_Start+0xa0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_TIM_Base_Start+0x5c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2a:	d013      	beq.n	8005e54 <HAL_TIM_Base_Start+0x5c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_TIM_Base_Start+0xa4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_TIM_Base_Start+0x5c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a19      	ldr	r2, [pc, #100]	; (8005ea0 <HAL_TIM_Base_Start+0xa8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_TIM_Base_Start+0x5c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <HAL_TIM_Base_Start+0xac>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_TIM_Base_Start+0x5c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <HAL_TIM_Base_Start+0xb0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d111      	bne.n	8005e78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d010      	beq.n	8005e88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0201 	orr.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e76:	e007      	b.n	8005e88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40010000 	.word	0x40010000
 8005e9c:	40000400 	.word	0x40000400
 8005ea0:	40000800 	.word	0x40000800
 8005ea4:	40000c00 	.word	0x40000c00
 8005ea8:	40014000 	.word	0x40014000

08005eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d001      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e044      	b.n	8005f4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <HAL_TIM_Base_Start_IT+0xb0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x6c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d013      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x6c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1a      	ldr	r2, [pc, #104]	; (8005f60 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x6c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <HAL_TIM_Base_Start_IT+0xb8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x6c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <HAL_TIM_Base_Start_IT+0xbc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x6c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <HAL_TIM_Base_Start_IT+0xc0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d111      	bne.n	8005f3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d010      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	e007      	b.n	8005f4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40014000 	.word	0x40014000

08005f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e041      	b.n	8006006 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f839 	bl	800600e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f000 fbe4 	bl	800677c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <HAL_TIM_PWM_Start+0x24>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	e022      	b.n	800608e <HAL_TIM_PWM_Start+0x6a>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b04      	cmp	r3, #4
 800604c:	d109      	bne.n	8006062 <HAL_TIM_PWM_Start+0x3e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b01      	cmp	r3, #1
 8006058:	bf14      	ite	ne
 800605a:	2301      	movne	r3, #1
 800605c:	2300      	moveq	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	e015      	b.n	800608e <HAL_TIM_PWM_Start+0x6a>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d109      	bne.n	800607c <HAL_TIM_PWM_Start+0x58>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e008      	b.n	800608e <HAL_TIM_PWM_Start+0x6a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e068      	b.n	8006168 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_PWM_Start+0x82>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060a4:	e013      	b.n	80060ce <HAL_TIM_PWM_Start+0xaa>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Start+0x92>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060b4:	e00b      	b.n	80060ce <HAL_TIM_PWM_Start+0xaa>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_PWM_Start+0xa2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060c4:	e003      	b.n	80060ce <HAL_TIM_PWM_Start+0xaa>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2201      	movs	r2, #1
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fe87 	bl	8006dea <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a23      	ldr	r2, [pc, #140]	; (8006170 <HAL_TIM_PWM_Start+0x14c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d107      	bne.n	80060f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <HAL_TIM_PWM_Start+0x14c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d018      	beq.n	8006132 <HAL_TIM_PWM_Start+0x10e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006108:	d013      	beq.n	8006132 <HAL_TIM_PWM_Start+0x10e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a19      	ldr	r2, [pc, #100]	; (8006174 <HAL_TIM_PWM_Start+0x150>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00e      	beq.n	8006132 <HAL_TIM_PWM_Start+0x10e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a17      	ldr	r2, [pc, #92]	; (8006178 <HAL_TIM_PWM_Start+0x154>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_TIM_PWM_Start+0x10e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a16      	ldr	r2, [pc, #88]	; (800617c <HAL_TIM_PWM_Start+0x158>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_TIM_PWM_Start+0x10e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a14      	ldr	r2, [pc, #80]	; (8006180 <HAL_TIM_PWM_Start+0x15c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d111      	bne.n	8006156 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b06      	cmp	r3, #6
 8006142:	d010      	beq.n	8006166 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	e007      	b.n	8006166 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40010000 	.word	0x40010000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40014000 	.word	0x40014000

08006184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0202 	mvn.w	r2, #2
 80061b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fab9 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 faab 	bl	800672a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fabc 	bl	8006752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0204 	mvn.w	r2, #4
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa8f 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fa81 	bl	800672a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fa92 	bl	8006752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b08      	cmp	r3, #8
 8006240:	d122      	bne.n	8006288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d11b      	bne.n	8006288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0208 	mvn.w	r2, #8
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa65 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa57 	bl	800672a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa68 	bl	8006752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b10      	cmp	r3, #16
 8006294:	d122      	bne.n	80062dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0210 	mvn.w	r2, #16
 80062ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2208      	movs	r2, #8
 80062b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa3b 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 80062c8:	e005      	b.n	80062d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa2d 	bl	800672a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fa3e 	bl	8006752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10e      	bne.n	8006308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d107      	bne.n	8006308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0201 	mvn.w	r2, #1
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fa f9b4 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b80      	cmp	r3, #128	; 0x80
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fdf8 	bl	8006f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa03 	bl	8006766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b20      	cmp	r3, #32
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0220 	mvn.w	r2, #32
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fdc2 	bl	8006f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0ae      	b.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b0c      	cmp	r3, #12
 80063be:	f200 809f 	bhi.w	8006500 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	08006501 	.word	0x08006501
 80063d0:	08006501 	.word	0x08006501
 80063d4:	08006501 	.word	0x08006501
 80063d8:	0800643d 	.word	0x0800643d
 80063dc:	08006501 	.word	0x08006501
 80063e0:	08006501 	.word	0x08006501
 80063e4:	08006501 	.word	0x08006501
 80063e8:	0800647f 	.word	0x0800647f
 80063ec:	08006501 	.word	0x08006501
 80063f0:	08006501 	.word	0x08006501
 80063f4:	08006501 	.word	0x08006501
 80063f8:	080064bf 	.word	0x080064bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fa3a 	bl	800687c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0208 	orr.w	r2, r2, #8
 8006416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0204 	bic.w	r2, r2, #4
 8006426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6999      	ldr	r1, [r3, #24]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	619a      	str	r2, [r3, #24]
      break;
 800643a:	e064      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fa80 	bl	8006948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6999      	ldr	r1, [r3, #24]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	021a      	lsls	r2, r3, #8
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	619a      	str	r2, [r3, #24]
      break;
 800647c:	e043      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 facb 	bl	8006a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0208 	orr.w	r2, r2, #8
 8006498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0204 	bic.w	r2, r2, #4
 80064a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	61da      	str	r2, [r3, #28]
      break;
 80064bc:	e023      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fb15 	bl	8006af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69d9      	ldr	r1, [r3, #28]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	021a      	lsls	r2, r3, #8
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	61da      	str	r2, [r3, #28]
      break;
 80064fe:	e002      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
      break;
 8006504:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_TIM_ConfigClockSource+0x1c>
 8006530:	2302      	movs	r3, #2
 8006532:	e0b4      	b.n	800669e <HAL_TIM_ConfigClockSource+0x186>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656c:	d03e      	beq.n	80065ec <HAL_TIM_ConfigClockSource+0xd4>
 800656e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006572:	f200 8087 	bhi.w	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657a:	f000 8086 	beq.w	800668a <HAL_TIM_ConfigClockSource+0x172>
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	d87f      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 8006584:	2b70      	cmp	r3, #112	; 0x70
 8006586:	d01a      	beq.n	80065be <HAL_TIM_ConfigClockSource+0xa6>
 8006588:	2b70      	cmp	r3, #112	; 0x70
 800658a:	d87b      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 800658c:	2b60      	cmp	r3, #96	; 0x60
 800658e:	d050      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0x11a>
 8006590:	2b60      	cmp	r3, #96	; 0x60
 8006592:	d877      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 8006594:	2b50      	cmp	r3, #80	; 0x50
 8006596:	d03c      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0xfa>
 8006598:	2b50      	cmp	r3, #80	; 0x50
 800659a:	d873      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d058      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0x13a>
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d86f      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 80065a4:	2b30      	cmp	r3, #48	; 0x30
 80065a6:	d064      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x15a>
 80065a8:	2b30      	cmp	r3, #48	; 0x30
 80065aa:	d86b      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d060      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x15a>
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d867      	bhi.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d05c      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x15a>
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d05a      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x15a>
 80065bc:	e062      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6899      	ldr	r1, [r3, #8]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f000 fbec 	bl	8006daa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	609a      	str	r2, [r3, #8]
      break;
 80065ea:	e04f      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	6899      	ldr	r1, [r3, #8]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f000 fbd5 	bl	8006daa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800660e:	609a      	str	r2, [r3, #8]
      break;
 8006610:	e03c      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6859      	ldr	r1, [r3, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	461a      	mov	r2, r3
 8006620:	f000 fb49 	bl	8006cb6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2150      	movs	r1, #80	; 0x50
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fba2 	bl	8006d74 <TIM_ITRx_SetConfig>
      break;
 8006630:	e02c      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6859      	ldr	r1, [r3, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	461a      	mov	r2, r3
 8006640:	f000 fb68 	bl	8006d14 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2160      	movs	r1, #96	; 0x60
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fb92 	bl	8006d74 <TIM_ITRx_SetConfig>
      break;
 8006650:	e01c      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	461a      	mov	r2, r3
 8006660:	f000 fb29 	bl	8006cb6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2140      	movs	r1, #64	; 0x40
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fb82 	bl	8006d74 <TIM_ITRx_SetConfig>
      break;
 8006670:	e00c      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f000 fb79 	bl	8006d74 <TIM_ITRx_SetConfig>
      break;
 8006682:	e003      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	73fb      	strb	r3, [r7, #15]
      break;
 8006688:	e000      	b.n	800668c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800668a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_TIM_SlaveConfigSynchro+0x18>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e031      	b.n	8006722 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa5f 	bl	8006b94 <TIM_SlaveTimer_SetConfig>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e018      	b.n	8006722 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fe:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800670e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a34      	ldr	r2, [pc, #208]	; (8006860 <TIM_Base_SetConfig+0xe4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00f      	beq.n	80067b4 <TIM_Base_SetConfig+0x38>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679a:	d00b      	beq.n	80067b4 <TIM_Base_SetConfig+0x38>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a31      	ldr	r2, [pc, #196]	; (8006864 <TIM_Base_SetConfig+0xe8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <TIM_Base_SetConfig+0x38>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a30      	ldr	r2, [pc, #192]	; (8006868 <TIM_Base_SetConfig+0xec>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0x38>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a2f      	ldr	r2, [pc, #188]	; (800686c <TIM_Base_SetConfig+0xf0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a25      	ldr	r2, [pc, #148]	; (8006860 <TIM_Base_SetConfig+0xe4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d01b      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d4:	d017      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a22      	ldr	r2, [pc, #136]	; (8006864 <TIM_Base_SetConfig+0xe8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a21      	ldr	r2, [pc, #132]	; (8006868 <TIM_Base_SetConfig+0xec>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00f      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a20      	ldr	r2, [pc, #128]	; (800686c <TIM_Base_SetConfig+0xf0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00b      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a1f      	ldr	r2, [pc, #124]	; (8006870 <TIM_Base_SetConfig+0xf4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1e      	ldr	r2, [pc, #120]	; (8006874 <TIM_Base_SetConfig+0xf8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <TIM_Base_SetConfig+0xfc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d108      	bne.n	8006818 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a08      	ldr	r2, [pc, #32]	; (8006860 <TIM_Base_SetConfig+0xe4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d103      	bne.n	800684c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	615a      	str	r2, [r3, #20]
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40014000 	.word	0x40014000
 8006874:	40014400 	.word	0x40014400
 8006878:	40014800 	.word	0x40014800

0800687c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f023 0201 	bic.w	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0303 	bic.w	r3, r3, #3
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 0302 	bic.w	r3, r3, #2
 80068c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <TIM_OC1_SetConfig+0xc8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d10c      	bne.n	80068f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0308 	bic.w	r3, r3, #8
 80068de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f023 0304 	bic.w	r3, r3, #4
 80068f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a13      	ldr	r2, [pc, #76]	; (8006944 <TIM_OC1_SetConfig+0xc8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d111      	bne.n	800691e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40010000 	.word	0x40010000

08006948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f023 0210 	bic.w	r2, r3, #16
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 0320 	bic.w	r3, r3, #32
 8006992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <TIM_OC2_SetConfig+0xd4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d10d      	bne.n	80069c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <TIM_OC2_SetConfig+0xd4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d113      	bne.n	80069f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40010000 	.word	0x40010000

08006a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0303 	bic.w	r3, r3, #3
 8006a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <TIM_OC3_SetConfig+0xd0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d10d      	bne.n	8006a9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a14      	ldr	r2, [pc, #80]	; (8006af0 <TIM_OC3_SetConfig+0xd0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d113      	bne.n	8006aca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	621a      	str	r2, [r3, #32]
}
 8006ae4:	bf00      	nop
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40010000 	.word	0x40010000

08006af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	031b      	lsls	r3, r3, #12
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <TIM_OC4_SetConfig+0x9c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d109      	bne.n	8006b68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	019b      	lsls	r3, r3, #6
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000

08006b94 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f023 0307 	bic.w	r3, r3, #7
 8006bc2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b70      	cmp	r3, #112	; 0x70
 8006bdc:	d01a      	beq.n	8006c14 <TIM_SlaveTimer_SetConfig+0x80>
 8006bde:	2b70      	cmp	r3, #112	; 0x70
 8006be0:	d860      	bhi.n	8006ca4 <TIM_SlaveTimer_SetConfig+0x110>
 8006be2:	2b60      	cmp	r3, #96	; 0x60
 8006be4:	d054      	beq.n	8006c90 <TIM_SlaveTimer_SetConfig+0xfc>
 8006be6:	2b60      	cmp	r3, #96	; 0x60
 8006be8:	d85c      	bhi.n	8006ca4 <TIM_SlaveTimer_SetConfig+0x110>
 8006bea:	2b50      	cmp	r3, #80	; 0x50
 8006bec:	d046      	beq.n	8006c7c <TIM_SlaveTimer_SetConfig+0xe8>
 8006bee:	2b50      	cmp	r3, #80	; 0x50
 8006bf0:	d858      	bhi.n	8006ca4 <TIM_SlaveTimer_SetConfig+0x110>
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d019      	beq.n	8006c2a <TIM_SlaveTimer_SetConfig+0x96>
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d854      	bhi.n	8006ca4 <TIM_SlaveTimer_SetConfig+0x110>
 8006bfa:	2b30      	cmp	r3, #48	; 0x30
 8006bfc:	d055      	beq.n	8006caa <TIM_SlaveTimer_SetConfig+0x116>
 8006bfe:	2b30      	cmp	r3, #48	; 0x30
 8006c00:	d850      	bhi.n	8006ca4 <TIM_SlaveTimer_SetConfig+0x110>
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d051      	beq.n	8006caa <TIM_SlaveTimer_SetConfig+0x116>
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d84c      	bhi.n	8006ca4 <TIM_SlaveTimer_SetConfig+0x110>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d04d      	beq.n	8006caa <TIM_SlaveTimer_SetConfig+0x116>
 8006c0e:	2b10      	cmp	r3, #16
 8006c10:	d04b      	beq.n	8006caa <TIM_SlaveTimer_SetConfig+0x116>
 8006c12:	e047      	b.n	8006ca4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68d9      	ldr	r1, [r3, #12]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f000 f8c1 	bl	8006daa <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006c28:	e040      	b.n	8006cac <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	d101      	bne.n	8006c36 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e03b      	b.n	8006cae <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6a1a      	ldr	r2, [r3, #32]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c5c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	621a      	str	r2, [r3, #32]
      break;
 8006c7a:	e017      	b.n	8006cac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	6899      	ldr	r1, [r3, #8]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f000 f814 	bl	8006cb6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006c8e:	e00d      	b.n	8006cac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	6899      	ldr	r1, [r3, #8]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f000 f839 	bl	8006d14 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006ca2:	e003      	b.n	8006cac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca8:	e000      	b.n	8006cac <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006caa:	bf00      	nop
  }

  return status;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b087      	sub	sp, #28
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f023 0201 	bic.w	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f023 030a 	bic.w	r3, r3, #10
 8006cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f023 0210 	bic.w	r2, r3, #16
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	031b      	lsls	r3, r3, #12
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	621a      	str	r2, [r3, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	f043 0307 	orr.w	r3, r3, #7
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	609a      	str	r2, [r3, #8]
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	021a      	lsls	r2, r3, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	609a      	str	r2, [r3, #8]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b087      	sub	sp, #28
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a1a      	ldr	r2, [r3, #32]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	401a      	ands	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e22:	431a      	orrs	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	621a      	str	r2, [r3, #32]
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e050      	b.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1c      	ldr	r2, [pc, #112]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d018      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e98:	d013      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a18      	ldr	r2, [pc, #96]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a16      	ldr	r2, [pc, #88]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10c      	bne.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40010000 	.word	0x40010000
 8006f00:	40000400 	.word	0x40000400
 8006f04:	40000800 	.word	0x40000800
 8006f08:	40000c00 	.word	0x40000c00
 8006f0c:	40014000 	.word	0x40014000

08006f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f38:	b084      	sub	sp, #16
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	f107 001c 	add.w	r0, r7, #28
 8006f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d122      	bne.n	8006f96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d105      	bne.n	8006f8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f9c0 	bl	8007310 <USB_CoreReset>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]
 8006f94:	e01a      	b.n	8006fcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f9b4 	bl	8007310 <USB_CoreReset>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8006fbe:	e005      	b.n	8006fcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d10b      	bne.n	8006fea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f043 0206 	orr.w	r2, r3, #6
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ff6:	b004      	add	sp, #16
 8006ff8:	4770      	bx	lr

08006ffa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f043 0201 	orr.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f023 0201 	bic.w	r2, r3, #1
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d115      	bne.n	800708c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800706c:	2001      	movs	r0, #1
 800706e:	f7fb fee9 	bl	8002e44 <HAL_Delay>
      ms++;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f93a 	bl	80072f2 <USB_GetMode>
 800707e:	4603      	mov	r3, r0
 8007080:	2b01      	cmp	r3, #1
 8007082:	d01e      	beq.n	80070c2 <USB_SetCurrentMode+0x84>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b31      	cmp	r3, #49	; 0x31
 8007088:	d9f0      	bls.n	800706c <USB_SetCurrentMode+0x2e>
 800708a:	e01a      	b.n	80070c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d115      	bne.n	80070be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800709e:	2001      	movs	r0, #1
 80070a0:	f7fb fed0 	bl	8002e44 <HAL_Delay>
      ms++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f921 	bl	80072f2 <USB_GetMode>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <USB_SetCurrentMode+0x84>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b31      	cmp	r3, #49	; 0x31
 80070ba:	d9f0      	bls.n	800709e <USB_SetCurrentMode+0x60>
 80070bc:	e001      	b.n	80070c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e005      	b.n	80070ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b32      	cmp	r3, #50	; 0x32
 80070c6:	d101      	bne.n	80070cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3301      	adds	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a13      	ldr	r2, [pc, #76]	; (800713c <USB_FlushTxFifo+0x64>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d901      	bls.n	80070f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e01b      	b.n	8007130 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	daf2      	bge.n	80070e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	019b      	lsls	r3, r3, #6
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4a08      	ldr	r2, [pc, #32]	; (800713c <USB_FlushTxFifo+0x64>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e006      	b.n	8007130 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b20      	cmp	r3, #32
 800712c:	d0f0      	beq.n	8007110 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	00030d40 	.word	0x00030d40

08007140 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4a11      	ldr	r2, [pc, #68]	; (800719c <USB_FlushRxFifo+0x5c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d901      	bls.n	800715e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e018      	b.n	8007190 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	daf2      	bge.n	800714c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2210      	movs	r2, #16
 800716e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <USB_FlushRxFifo+0x5c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e006      	b.n	8007190 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2b10      	cmp	r3, #16
 800718c:	d0f0      	beq.n	8007170 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	00030d40 	.word	0x00030d40

080071a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	; 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4611      	mov	r1, r2
 80071ac:	461a      	mov	r2, r3
 80071ae:	460b      	mov	r3, r1
 80071b0:	71fb      	strb	r3, [r7, #7]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d123      	bne.n	800720e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071c6:	88bb      	ldrh	r3, [r7, #4]
 80071c8:	3303      	adds	r3, #3
 80071ca:	089b      	lsrs	r3, r3, #2
 80071cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071ce:	2300      	movs	r3, #0
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	e018      	b.n	8007206 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	031a      	lsls	r2, r3, #12
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e0:	461a      	mov	r2, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	3301      	adds	r3, #1
 80071ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	3301      	adds	r3, #1
 80071f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	3301      	adds	r3, #1
 80071f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	3301      	adds	r3, #1
 80071fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	3301      	adds	r3, #1
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	429a      	cmp	r2, r3
 800720c:	d3e2      	bcc.n	80071d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3724      	adds	r7, #36	; 0x24
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800721c:	b480      	push	{r7}
 800721e:	b08b      	sub	sp, #44	; 0x2c
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4613      	mov	r3, r2
 8007228:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	089b      	lsrs	r3, r3, #2
 8007236:	b29b      	uxth	r3, r3
 8007238:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007242:	2300      	movs	r3, #0
 8007244:	623b      	str	r3, [r7, #32]
 8007246:	e014      	b.n	8007272 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	601a      	str	r2, [r3, #0]
    pDest++;
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	3301      	adds	r3, #1
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	3301      	adds	r3, #1
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	3301      	adds	r3, #1
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	3301      	adds	r3, #1
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	3301      	adds	r3, #1
 8007270:	623b      	str	r3, [r7, #32]
 8007272:	6a3a      	ldr	r2, [r7, #32]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	429a      	cmp	r2, r3
 8007278:	d3e6      	bcc.n	8007248 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800727a:	8bfb      	ldrh	r3, [r7, #30]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01e      	beq.n	80072be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728a:	461a      	mov	r2, r3
 800728c:	f107 0310 	add.w	r3, r7, #16
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	fa22 f303 	lsr.w	r3, r2, r3
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	701a      	strb	r2, [r3, #0]
      i++;
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	3301      	adds	r3, #1
 80072aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	3301      	adds	r3, #1
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80072b2:	8bfb      	ldrh	r3, [r7, #30]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072b8:	8bfb      	ldrh	r3, [r7, #30]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1ea      	bne.n	8007294 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	372c      	adds	r7, #44	; 0x2c
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4013      	ands	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072e4:	68fb      	ldr	r3, [r7, #12]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f003 0301 	and.w	r3, r3, #1
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3301      	adds	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a13      	ldr	r2, [pc, #76]	; (8007374 <USB_CoreReset+0x64>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d901      	bls.n	800732e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e01b      	b.n	8007366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	daf2      	bge.n	800731c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f043 0201 	orr.w	r2, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3301      	adds	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4a09      	ldr	r2, [pc, #36]	; (8007374 <USB_CoreReset+0x64>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d901      	bls.n	8007358 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e006      	b.n	8007366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b01      	cmp	r3, #1
 8007362:	d0f0      	beq.n	8007346 <USB_CoreReset+0x36>

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	00030d40 	.word	0x00030d40

08007378 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007378:	b084      	sub	sp, #16
 800737a:	b580      	push	{r7, lr}
 800737c:	b086      	sub	sp, #24
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007398:	461a      	mov	r2, r3
 800739a:	2300      	movs	r3, #0
 800739c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d018      	beq.n	8007400 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d10a      	bne.n	80073ea <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073e2:	f043 0304 	orr.w	r3, r3, #4
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	e014      	b.n	8007414 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073f8:	f023 0304 	bic.w	r3, r3, #4
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	e009      	b.n	8007414 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800740e:	f023 0304 	bic.w	r3, r3, #4
 8007412:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007414:	2110      	movs	r1, #16
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff fe5e 	bl	80070d8 <USB_FlushTxFifo>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fe8a 	bl	8007140 <USB_FlushRxFifo>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	e015      	b.n	8007468 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007448:	461a      	mov	r2, r3
 800744a:	f04f 33ff 	mov.w	r3, #4294967295
 800744e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745c:	461a      	mov	r2, r3
 800745e:	2300      	movs	r3, #0
 8007460:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3301      	adds	r3, #1
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	429a      	cmp	r2, r3
 800746e:	d3e5      	bcc.n	800743c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f04f 32ff 	mov.w	r2, #4294967295
 800747c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007490:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a13      	ldr	r2, [pc, #76]	; (80074e4 <USB_HostInit+0x16c>)
 8007496:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <USB_HostInit+0x170>)
 800749c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80074a0:	e009      	b.n	80074b6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2280      	movs	r2, #128	; 0x80
 80074a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a10      	ldr	r2, [pc, #64]	; (80074ec <USB_HostInit+0x174>)
 80074ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a0f      	ldr	r2, [pc, #60]	; (80074f0 <USB_HostInit+0x178>)
 80074b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f043 0210 	orr.w	r2, r3, #16
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <USB_HostInit+0x17c>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074e0:	b004      	add	sp, #16
 80074e2:	4770      	bx	lr
 80074e4:	01000200 	.word	0x01000200
 80074e8:	00e00300 	.word	0x00e00300
 80074ec:	00600080 	.word	0x00600080
 80074f0:	004000e0 	.word	0x004000e0
 80074f4:	a3200008 	.word	0xa3200008

080074f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	68f9      	ldr	r1, [r7, #12]
 800752c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007530:	4313      	orrs	r3, r2
 8007532:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d107      	bne.n	800754a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007540:	461a      	mov	r2, r3
 8007542:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007546:	6053      	str	r3, [r2, #4]
 8007548:	e009      	b.n	800755e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d106      	bne.n	800755e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007556:	461a      	mov	r2, r3
 8007558:	f241 7370 	movw	r3, #6000	; 0x1770
 800755c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800758c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800759c:	2064      	movs	r0, #100	; 0x64
 800759e:	f7fb fc51 	bl	8002e44 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80075b0:	200a      	movs	r0, #10
 80075b2:	f7fb fc47 	bl	8002e44 <HAL_Delay>

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80075e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d109      	bne.n	8007604 <USB_DriveVbus+0x44>
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d106      	bne.n	8007604 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007602:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800760a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760e:	d109      	bne.n	8007624 <USB_DriveVbus+0x64>
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800761e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007622:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	0c5b      	lsrs	r3, r3, #17
 8007650:	f003 0303 	and.w	r3, r3, #3
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	b29b      	uxth	r3, r3
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	4608      	mov	r0, r1
 800768e:	4611      	mov	r1, r2
 8007690:	461a      	mov	r2, r3
 8007692:	4603      	mov	r3, r0
 8007694:	70fb      	strb	r3, [r7, #3]
 8007696:	460b      	mov	r3, r1
 8007698:	70bb      	strb	r3, [r7, #2]
 800769a:	4613      	mov	r3, r2
 800769c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b2:	461a      	mov	r2, r3
 80076b4:	f04f 33ff 	mov.w	r3, #4294967295
 80076b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80076ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d87e      	bhi.n	80077c0 <USB_HC_Init+0x13c>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <USB_HC_Init+0x44>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076d9 	.word	0x080076d9
 80076cc:	08007783 	.word	0x08007783
 80076d0:	080076d9 	.word	0x080076d9
 80076d4:	08007745 	.word	0x08007745
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e4:	461a      	mov	r2, r3
 80076e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80076ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80076ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	da10      	bge.n	8007716 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	440a      	add	r2, r1
 800770a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800770e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007712:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007714:	e057      	b.n	80077c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d051      	beq.n	80077c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	4413      	add	r3, r2
 800772a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	440a      	add	r2, r1
 8007738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800773c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007740:	60d3      	str	r3, [r2, #12]
      break;
 8007742:	e040      	b.n	80077c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007750:	461a      	mov	r2, r3
 8007752:	f240 639d 	movw	r3, #1693	; 0x69d
 8007756:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007758:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800775c:	2b00      	cmp	r3, #0
 800775e:	da34      	bge.n	80077ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	440a      	add	r2, r1
 8007776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800777a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800777e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007780:	e023      	b.n	80077ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	4413      	add	r3, r2
 800778a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800778e:	461a      	mov	r2, r3
 8007790:	f240 2325 	movw	r3, #549	; 0x225
 8007794:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007796:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800779a:	2b00      	cmp	r3, #0
 800779c:	da17      	bge.n	80077ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80077bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80077be:	e006      	b.n	80077ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	77fb      	strb	r3, [r7, #31]
      break;
 80077c4:	e004      	b.n	80077d0 <USB_HC_Init+0x14c>
      break;
 80077c6:	bf00      	nop
 80077c8:	e002      	b.n	80077d0 <USB_HC_Init+0x14c>
      break;
 80077ca:	bf00      	nop
 80077cc:	e000      	b.n	80077d0 <USB_HC_Init+0x14c>
      break;
 80077ce:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	0151      	lsls	r1, r2, #5
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	440a      	add	r2, r1
 80077e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ea:	f043 0302 	orr.w	r3, r3, #2
 80077ee:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	2101      	movs	r1, #1
 8007800:	fa01 f303 	lsl.w	r3, r1, r3
 8007804:	6939      	ldr	r1, [r7, #16]
 8007806:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800780a:	4313      	orrs	r3, r2
 800780c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800781a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800781e:	2b00      	cmp	r3, #0
 8007820:	da03      	bge.n	800782a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e001      	b.n	800782e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff feff 	bl	8007632 <USB_GetHostSpeed>
 8007834:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007836:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800783a:	2b02      	cmp	r3, #2
 800783c:	d106      	bne.n	800784c <USB_HC_Init+0x1c8>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d003      	beq.n	800784c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	e001      	b.n	8007850 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007850:	787b      	ldrb	r3, [r7, #1]
 8007852:	059b      	lsls	r3, r3, #22
 8007854:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007858:	78bb      	ldrb	r3, [r7, #2]
 800785a:	02db      	lsls	r3, r3, #11
 800785c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007860:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007862:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007866:	049b      	lsls	r3, r3, #18
 8007868:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800786c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800786e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007870:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007874:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	0159      	lsls	r1, r3, #5
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	440b      	add	r3, r1
 8007882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007886:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800788c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800788e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007892:	2b03      	cmp	r3, #3
 8007894:	d003      	beq.n	800789e <USB_HC_Init+0x21a>
 8007896:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800789a:	2b01      	cmp	r3, #1
 800789c:	d10f      	bne.n	80078be <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	0151      	lsls	r1, r2, #5
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	440a      	add	r2, r1
 80078b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80078be:	7ffb      	ldrb	r3, [r7, #31]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3720      	adds	r7, #32
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	; 0x30
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80078e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d02d      	beq.n	800794e <USB_HC_StartXfer+0x86>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d129      	bne.n	800794e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d117      	bne.n	8007930 <USB_HC_StartXfer+0x68>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	79db      	ldrb	r3, [r3, #7]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <USB_HC_StartXfer+0x48>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	79db      	ldrb	r3, [r3, #7]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d10f      	bne.n	8007930 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	440a      	add	r2, r1
 8007926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800792a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10b      	bne.n	800794e <USB_HC_StartXfer+0x86>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d107      	bne.n	800794e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	4619      	mov	r1, r3
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fa0f 	bl	8007d68 <USB_DoPing>
      return HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	e0f8      	b.n	8007b40 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d018      	beq.n	8007988 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	8912      	ldrh	r2, [r2, #8]
 800795e:	4413      	add	r3, r2
 8007960:	3b01      	subs	r3, #1
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	8912      	ldrh	r2, [r2, #8]
 8007966:	fbb3 f3f2 	udiv	r3, r3, r2
 800796a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800796c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800796e:	8b7b      	ldrh	r3, [r7, #26]
 8007970:	429a      	cmp	r2, r3
 8007972:	d90b      	bls.n	800798c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007974:	8b7b      	ldrh	r3, [r7, #26]
 8007976:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	8912      	ldrh	r2, [r2, #8]
 800797e:	fb03 f202 	mul.w	r2, r3, r2
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	611a      	str	r2, [r3, #16]
 8007986:	e001      	b.n	800798c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007988:	2301      	movs	r3, #1
 800798a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	78db      	ldrb	r3, [r3, #3]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	8912      	ldrh	r2, [r2, #8]
 800799a:	fb03 f202 	mul.w	r2, r3, r2
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	611a      	str	r2, [r3, #16]
 80079a2:	e003      	b.n	80079ac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	695a      	ldr	r2, [r3, #20]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079b6:	04d9      	lsls	r1, r3, #19
 80079b8:	4b63      	ldr	r3, [pc, #396]	; (8007b48 <USB_HC_StartXfer+0x280>)
 80079ba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079bc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	7a9b      	ldrb	r3, [r3, #10]
 80079c2:	075b      	lsls	r3, r3, #29
 80079c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079c8:	69f9      	ldr	r1, [r7, #28]
 80079ca:	0148      	lsls	r0, r1, #5
 80079cc:	6a39      	ldr	r1, [r7, #32]
 80079ce:	4401      	add	r1, r0
 80079d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079d4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079d6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	68d9      	ldr	r1, [r3, #12]
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ee:	460a      	mov	r2, r1
 80079f0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bf0c      	ite	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	2300      	movne	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	6a3a      	ldr	r2, [r7, #32]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a28:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	7e7b      	ldrb	r3, [r7, #25]
 8007a3a:	075b      	lsls	r3, r3, #29
 8007a3c:	69f9      	ldr	r1, [r7, #28]
 8007a3e:	0148      	lsls	r0, r1, #5
 8007a40:	6a39      	ldr	r1, [r7, #32]
 8007a42:	4401      	add	r1, r0
 8007a44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a62:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	78db      	ldrb	r3, [r3, #3]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a72:	613b      	str	r3, [r7, #16]
 8007a74:	e003      	b.n	8007a7e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a7c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a84:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a92:	461a      	mov	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e04e      	b.n	8007b40 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	78db      	ldrb	r3, [r3, #3]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d149      	bne.n	8007b3e <USB_HC_StartXfer+0x276>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d045      	beq.n	8007b3e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	79db      	ldrb	r3, [r3, #7]
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d830      	bhi.n	8007b1c <USB_HC_StartXfer+0x254>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USB_HC_StartXfer+0x1f8>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad1 	.word	0x08007ad1
 8007ac4:	08007af5 	.word	0x08007af5
 8007ac8:	08007ad1 	.word	0x08007ad1
 8007acc:	08007af5 	.word	0x08007af5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	3303      	adds	r3, #3
 8007ad6:	089b      	lsrs	r3, r3, #2
 8007ad8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007ada:	8afa      	ldrh	r2, [r7, #22]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d91c      	bls.n	8007b20 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	f043 0220 	orr.w	r2, r3, #32
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007af2:	e015      	b.n	8007b20 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	3303      	adds	r3, #3
 8007afa:	089b      	lsrs	r3, r3, #2
 8007afc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007afe:	8afa      	ldrh	r2, [r7, #22]
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d90a      	bls.n	8007b24 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b1a:	e003      	b.n	8007b24 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007b1c:	bf00      	nop
 8007b1e:	e002      	b.n	8007b26 <USB_HC_StartXfer+0x25e>
        break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <USB_HC_StartXfer+0x25e>
        break;
 8007b24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	68d9      	ldr	r1, [r3, #12]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	785a      	ldrb	r2, [r3, #1]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2000      	movs	r0, #0
 8007b36:	9000      	str	r0, [sp, #0]
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f7ff fb31 	bl	80071a0 <USB_WritePacket>
  }

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3728      	adds	r7, #40	; 0x28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	1ff80000 	.word	0x1ff80000

08007b4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	b29b      	uxth	r3, r3
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b089      	sub	sp, #36	; 0x24
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	0c9b      	lsrs	r3, r3, #18
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	0fdb      	lsrs	r3, r3, #31
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d104      	bne.n	8007bc8 <USB_HC_Halt+0x5a>
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e0c8      	b.n	8007d5a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <USB_HC_Halt+0x66>
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d163      	bne.n	8007c9c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bf2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 0320 	and.w	r3, r3, #32
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f040 80ab 	bne.w	8007d58 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d133      	bne.n	8007c76 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c4c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c5a:	d81d      	bhi.n	8007c98 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c72:	d0ec      	beq.n	8007c4e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c74:	e070      	b.n	8007d58 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c96:	e05f      	b.n	8007d58 <USB_HC_Halt+0x1ea>
            break;
 8007c98:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c9a:	e05d      	b.n	8007d58 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d133      	bne.n	8007d34 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ce6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	0151      	lsls	r1, r2, #5
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	440a      	add	r2, r1
 8007d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d0a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d18:	d81d      	bhi.n	8007d56 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d30:	d0ec      	beq.n	8007d0c <USB_HC_Halt+0x19e>
 8007d32:	e011      	b.n	8007d58 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	0151      	lsls	r1, r2, #5
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	440a      	add	r2, r1
 8007d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	e000      	b.n	8007d58 <USB_HC_Halt+0x1ea>
          break;
 8007d56:	bf00      	nop
    }
  }

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3724      	adds	r7, #36	; 0x24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
	...

08007d68 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	04da      	lsls	r2, r3, #19
 8007d84:	4b15      	ldr	r3, [pc, #84]	; (8007ddc <USB_DoPing+0x74>)
 8007d86:	4013      	ands	r3, r2
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	0151      	lsls	r1, r2, #5
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	440a      	add	r2, r1
 8007d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d98:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007db0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007db8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	1ff80000 	.word	0x1ff80000

08007de0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff f911 	bl	800701c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dfa:	2110      	movs	r1, #16
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff f96b 	bl	80070d8 <USB_FlushTxFifo>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff f997 	bl	8007140 <USB_FlushRxFifo>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	e01f      	b.n	8007e62 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e56:	461a      	mov	r2, r3
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	61bb      	str	r3, [r7, #24]
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	d9dc      	bls.n	8007e22 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61bb      	str	r3, [r7, #24]
 8007e6c:	e034      	b.n	8007ed8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e84:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e94:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eb4:	d80c      	bhi.n	8007ed0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ecc:	d0ec      	beq.n	8007ea8 <USB_StopHost+0xc8>
 8007ece:	e000      	b.n	8007ed2 <USB_StopHost+0xf2>
        break;
 8007ed0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	61bb      	str	r3, [r7, #24]
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b0f      	cmp	r3, #15
 8007edc:	d9c7      	bls.n	8007e6e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff f880 	bl	8006ffa <USB_EnableGlobalInt>

  return ret;
 8007efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b08b      	sub	sp, #44	; 0x2c
 8007f08:	af04      	add	r7, sp, #16
 8007f0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f16:	7919      	ldrb	r1, [r3, #4]
 8007f18:	23ff      	movs	r3, #255	; 0xff
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 ff75 	bl	8008e0c <USBH_FindInterface>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
 8007f28:	2bff      	cmp	r3, #255	; 0xff
 8007f2a:	d002      	beq.n	8007f32 <USBH_HID_InterfaceInit+0x2e>
 8007f2c:	7dbb      	ldrb	r3, [r7, #22]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d901      	bls.n	8007f36 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f32:	2302      	movs	r3, #2
 8007f34:	e108      	b.n	8008148 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8007f36:	7dbb      	ldrb	r3, [r7, #22]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 ff4a 	bl	8008dd4 <USBH_SelectInterface>
 8007f40:	4603      	mov	r3, r0
 8007f42:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8007f44:	7d7b      	ldrb	r3, [r7, #21]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e0fc      	b.n	8008148 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007f54:	2034      	movs	r0, #52	; 0x34
 8007f56:	f002 fdd7 	bl	800ab08 <malloc>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e0ea      	b.n	8008148 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8007f72:	2234      	movs	r2, #52	; 0x34
 8007f74:	2100      	movs	r1, #0
 8007f76:	6938      	ldr	r0, [r7, #16]
 8007f78:	f002 fde4 	bl	800ab44 <memset>

  HID_Handle->state = HID_ERROR;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2207      	movs	r2, #7
 8007f80:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8007f82:	7dbb      	ldrb	r3, [r7, #22]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	211a      	movs	r1, #26
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d103      	bne.n	8007fa0 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	4a6d      	ldr	r2, [pc, #436]	; (8008150 <USBH_HID_InterfaceInit+0x24c>)
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f9e:	e010      	b.n	8007fc2 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8007fa0:	7dbb      	ldrb	r3, [r7, #22]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	211a      	movs	r1, #26
 8007fa6:	fb01 f303 	mul.w	r3, r1, r3
 8007faa:	4413      	add	r3, r2
 8007fac:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d103      	bne.n	8007fbe <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	4a66      	ldr	r2, [pc, #408]	; (8008154 <USBH_HID_InterfaceInit+0x250>)
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30
 8007fbc:	e001      	b.n	8007fc2 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e0c2      	b.n	8008148 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fce:	7dbb      	ldrb	r3, [r7, #22]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	211a      	movs	r1, #26
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fde:	781a      	ldrb	r2, [r3, #0]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fe4:	7dbb      	ldrb	r3, [r7, #22]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	211a      	movs	r1, #26
 8007fea:	fb01 f303 	mul.w	r3, r1, r3
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ff4:	881a      	ldrh	r2, [r3, #0]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007ffa:	7dbb      	ldrb	r3, [r7, #22]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	211a      	movs	r1, #26
 8008000:	fb01 f303 	mul.w	r3, r1, r3
 8008004:	4413      	add	r3, r2
 8008006:	f203 3352 	addw	r3, r3, #850	; 0x352
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b29a      	uxth	r2, r3
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	8b9b      	ldrh	r3, [r3, #28]
 8008016:	2b09      	cmp	r3, #9
 8008018:	d802      	bhi.n	8008020 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	220a      	movs	r2, #10
 800801e:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8008020:	7dbb      	ldrb	r3, [r7, #22]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	211a      	movs	r1, #26
 8008026:	fb01 f303 	mul.w	r3, r1, r3
 800802a:	4413      	add	r3, r2
 800802c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b02      	cmp	r3, #2
 8008034:	bf28      	it	cs
 8008036:	2302      	movcs	r3, #2
 8008038:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
 800803e:	e07d      	b.n	800813c <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8008040:	7dbb      	ldrb	r3, [r7, #22]
 8008042:	7df9      	ldrb	r1, [r7, #23]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	3101      	adds	r1, #1
 8008048:	00c9      	lsls	r1, r1, #3
 800804a:	201a      	movs	r0, #26
 800804c:	fb00 f303 	mul.w	r3, r0, r3
 8008050:	440b      	add	r3, r1
 8008052:	4413      	add	r3, r2
 8008054:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b25b      	sxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	da35      	bge.n	80080cc <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8008060:	7dbb      	ldrb	r3, [r7, #22]
 8008062:	7df9      	ldrb	r1, [r7, #23]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	3101      	adds	r1, #1
 8008068:	00c9      	lsls	r1, r1, #3
 800806a:	201a      	movs	r0, #26
 800806c:	fb00 f303 	mul.w	r3, r0, r3
 8008070:	440b      	add	r3, r1
 8008072:	4413      	add	r3, r2
 8008074:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008078:	781a      	ldrb	r2, [r3, #0]
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	791b      	ldrb	r3, [r3, #4]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f002 f9b8 	bl	800a3fa <USBH_AllocPipe>
 800808a:	4603      	mov	r3, r0
 800808c:	461a      	mov	r2, r3
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	7859      	ldrb	r1, [r3, #1]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	7918      	ldrb	r0, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	8b12      	ldrh	r2, [r2, #24]
 80080aa:	9202      	str	r2, [sp, #8]
 80080ac:	2203      	movs	r2, #3
 80080ae:	9201      	str	r2, [sp, #4]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	4623      	mov	r3, r4
 80080b4:	4602      	mov	r2, r0
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f002 f970 	bl	800a39c <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2200      	movs	r2, #0
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f002 fc71 	bl	800a9ac <USBH_LL_SetToggle>
 80080ca:	e034      	b.n	8008136 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80080cc:	7dbb      	ldrb	r3, [r7, #22]
 80080ce:	7df9      	ldrb	r1, [r7, #23]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	3101      	adds	r1, #1
 80080d4:	00c9      	lsls	r1, r1, #3
 80080d6:	201a      	movs	r0, #26
 80080d8:	fb00 f303 	mul.w	r3, r0, r3
 80080dc:	440b      	add	r3, r1
 80080de:	4413      	add	r3, r2
 80080e0:	f203 3346 	addw	r3, r3, #838	; 0x346
 80080e4:	781a      	ldrb	r2, [r3, #0]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	78db      	ldrb	r3, [r3, #3]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f002 f982 	bl	800a3fa <USBH_AllocPipe>
 80080f6:	4603      	mov	r3, r0
 80080f8:	461a      	mov	r2, r3
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	7819      	ldrb	r1, [r3, #0]
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	78d8      	ldrb	r0, [r3, #3]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	8b12      	ldrh	r2, [r2, #24]
 8008116:	9202      	str	r2, [sp, #8]
 8008118:	2203      	movs	r2, #3
 800811a:	9201      	str	r2, [sp, #4]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	4623      	mov	r3, r4
 8008120:	4602      	mov	r2, r0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f002 f93a 	bl	800a39c <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2200      	movs	r2, #0
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f002 fc3b 	bl	800a9ac <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	3301      	adds	r3, #1
 800813a:	75fb      	strb	r3, [r7, #23]
 800813c:	7dfa      	ldrb	r2, [r7, #23]
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	429a      	cmp	r2, r3
 8008142:	f4ff af7d 	bcc.w	8008040 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	bd90      	pop	{r4, r7, pc}
 8008150:	08008855 	.word	0x08008855
 8008154:	08008a9d 	.word	0x08008a9d

08008158 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00e      	beq.n	8008190 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f002 f92e 	bl	800a3da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f002 f959 	bl	800a43c <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00e      	beq.n	80081b6 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f002 f91b 	bl	800a3da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f002 f946 	bl	800a43c <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f002 fca4 	bl	800ab18 <free>
    phost->pActiveClass->pData = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081d6:	2200      	movs	r2, #0
 80081d8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	795b      	ldrb	r3, [r3, #5]
 8008202:	2b05      	cmp	r3, #5
 8008204:	d860      	bhi.n	80082c8 <USBH_HID_ClassRequest+0xe4>
 8008206:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBH_HID_ClassRequest+0x28>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	08008225 	.word	0x08008225
 8008210:	080082c9 	.word	0x080082c9
 8008214:	0800823f 	.word	0x0800823f
 8008218:	08008225 	.word	0x08008225
 800821c:	08008269 	.word	0x08008269
 8008220:	08008293 	.word	0x08008293
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	331c      	adds	r3, #28
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f000 f9cd 	bl	80085d0 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2202      	movs	r2, #2
 800823a:	715a      	strb	r2, [r3, #5]

      break;
 800823c:	e04b      	b.n	80082d6 <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f930 	bl	80084aa <USBH_HID_GetHIDReportDescriptor>
 800824a:	4603      	mov	r3, r0
 800824c:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d103      	bne.n	800825c <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2204      	movs	r2, #4
 8008258:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800825a:	e037      	b.n	80082cc <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b03      	cmp	r3, #3
 8008260:	d134      	bne.n	80082cc <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8008262:	2302      	movs	r3, #2
 8008264:	73fb      	strb	r3, [r7, #15]
      break;
 8008266:	e031      	b.n	80082cc <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8008268:	2200      	movs	r2, #0
 800826a:	2100      	movs	r1, #0
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f935 	bl	80084dc <USBH_HID_SetIdle>
 8008272:	4603      	mov	r3, r0
 8008274:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2205      	movs	r2, #5
 8008280:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8008282:	e025      	b.n	80082d0 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d122      	bne.n	80082d0 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2205      	movs	r2, #5
 800828e:	715a      	strb	r2, [r3, #5]
      break;
 8008290:	e01e      	b.n	80082d0 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8008292:	2100      	movs	r1, #0
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f975 	bl	8008584 <USBH_HID_SetProtocol>
 800829a:	4603      	mov	r3, r0
 800829c:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10b      	bne.n	80082bc <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2201      	movs	r2, #1
 80082a8:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082b0:	2102      	movs	r1, #2
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
        status = USBH_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 80082ba:	e00b      	b.n	80082d4 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d108      	bne.n	80082d4 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 80082c2:	2302      	movs	r3, #2
 80082c4:	73fb      	strb	r3, [r7, #15]
      break;
 80082c6:	e005      	b.n	80082d4 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 80082c8:	bf00      	nop
 80082ca:	e004      	b.n	80082d6 <USBH_HID_ClassRequest+0xf2>
      break;
 80082cc:	bf00      	nop
 80082ce:	e002      	b.n	80082d6 <USBH_HID_ClassRequest+0xf2>
      break;
 80082d0:	bf00      	nop
 80082d2:	e000      	b.n	80082d6 <USBH_HID_ClassRequest+0xf2>
      break;
 80082d4:	bf00      	nop
  }

  return status;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	789b      	ldrb	r3, [r3, #2]
 80082fa:	2b06      	cmp	r3, #6
 80082fc:	f200 80a9 	bhi.w	8008452 <USBH_HID_Process+0x172>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBH_HID_Process+0x28>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008325 	.word	0x08008325
 800830c:	08008335 	.word	0x08008335
 8008310:	08008453 	.word	0x08008453
 8008314:	08008453 	.word	0x08008453
 8008318:	080083a5 	.word	0x080083a5
 800831c:	0800838f 	.word	0x0800838f
 8008320:	080083d3 	.word	0x080083d3
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2201      	movs	r2, #1
 8008330:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008332:	e093      	b.n	800845c <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	8b1b      	ldrh	r3, [r3, #24]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	4613      	mov	r3, r2
 8008342:	2200      	movs	r2, #0
 8008344:	2101      	movs	r1, #1
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f8f0 	bl	800852c <USBH_HID_GetReport>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2205      	movs	r2, #5
 800835a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800835c:	e07e      	b.n	800845c <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d105      	bne.n	8008370 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2201      	movs	r2, #1
 8008368:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]
      break;
 800836e:	e075      	b.n	800845c <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8008370:	7dfb      	ldrb	r3, [r7, #23]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d105      	bne.n	8008382 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2205      	movs	r2, #5
 800837a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	75fb      	strb	r3, [r7, #23]
      break;
 8008380:	e06c      	b.n	800845c <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2207      	movs	r2, #7
 8008386:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008388:	2302      	movs	r3, #2
 800838a:	75fb      	strb	r3, [r7, #23]
      break;
 800838c:	e066      	b.n	800845c <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d05c      	beq.n	8008456 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2204      	movs	r2, #4
 80083a0:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083a2:	e058      	b.n	8008456 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 ffd3 	bl	800a35e <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2206      	movs	r2, #6
 80083bc:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 80083d0:	e044      	b.n	800845c <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	785b      	ldrb	r3, [r3, #1]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f002 fabd 	bl	800a958 <USBH_LL_GetURBState>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d120      	bne.n	8008426 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f002 fa22 	bl	800a834 <USBH_LL_GetLastXferSize>
 80083f0:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d12e      	bne.n	800845a <USBH_HID_Process+0x17a>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d02b      	beq.n	800845a <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f103 0008 	add.w	r0, r3, #8
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6959      	ldr	r1, [r3, #20]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	8b1b      	ldrh	r3, [r3, #24]
 8008410:	461a      	mov	r2, r3
 8008412:	f000 f9ca 	bl	80087aa <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7f8 fa50 	bl	80008c4 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8008424:	e019      	b.n	800845a <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f002 fa93 	bl	800a958 <USBH_LL_GetURBState>
 8008432:	4603      	mov	r3, r0
 8008434:	2b05      	cmp	r3, #5
 8008436:	d110      	bne.n	800845a <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	7e9b      	ldrb	r3, [r3, #26]
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 fab1 	bl	80099a6 <USBH_ClrFeature>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d107      	bne.n	800845a <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2204      	movs	r2, #4
 800844e:	709a      	strb	r2, [r3, #2]
      break;
 8008450:	e003      	b.n	800845a <USBH_HID_Process+0x17a>

    default:
      break;
 8008452:	bf00      	nop
 8008454:	e002      	b.n	800845c <USBH_HID_Process+0x17c>
      break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <USBH_HID_Process+0x17c>
      break;
 800845a:	bf00      	nop
  }

  return status;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop

08008468 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	789b      	ldrb	r3, [r3, #2]
 800847e:	2b06      	cmp	r3, #6
 8008480:	d10c      	bne.n	800849c <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	8b92      	ldrh	r2, [r2, #28]
 8008492:	4293      	cmp	r3, r2
 8008494:	d302      	bcc.n	800849c <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2204      	movs	r2, #4
 800849a:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af02      	add	r7, sp, #8
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80084bc:	887b      	ldrh	r3, [r7, #2]
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80084c6:	2101      	movs	r1, #1
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 f9cc 	bl	8009866 <USBH_GetDescriptor>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
 80084e8:	4613      	mov	r3, r2
 80084ea:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2221      	movs	r2, #33	; 0x21
 80084f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	220a      	movs	r2, #10
 80084f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	b29a      	uxth	r2, r3
 8008500:	78bb      	ldrb	r3, [r7, #2]
 8008502:	b29b      	uxth	r3, r3
 8008504:	4313      	orrs	r3, r2
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008518:	2200      	movs	r2, #0
 800851a:	2100      	movs	r1, #0
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fd0f 	bl	8009f40 <USBH_CtlReq>
 8008522:	4603      	mov	r3, r0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	72fb      	strb	r3, [r7, #11]
 800853a:	4613      	mov	r3, r2
 800853c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	22a1      	movs	r2, #161	; 0xa1
 8008542:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	b29b      	uxth	r3, r3
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	b29a      	uxth	r2, r3
 8008552:	7abb      	ldrb	r3, [r7, #10]
 8008554:	b29b      	uxth	r3, r3
 8008556:	4313      	orrs	r3, r2
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8008564:	7e3b      	ldrb	r3, [r7, #24]
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800856c:	7e3b      	ldrb	r3, [r7, #24]
 800856e:	b29b      	uxth	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f001 fce3 	bl	8009f40 <USBH_CtlReq>
 800857a:	4603      	mov	r3, r0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2221      	movs	r2, #33	; 0x21
 8008594:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	220b      	movs	r2, #11
 800859a:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	825a      	strh	r2, [r3, #18]
 80085a8:	e002      	b.n	80085b0 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80085bc:	2200      	movs	r2, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fcbd 	bl	8009f40 <USBH_CtlReq>
 80085c6:	4603      	mov	r3, r0

}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	3302      	adds	r3, #2
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	3303      	adds	r3, #3
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4313      	orrs	r3, r2
 80085f4:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 80085f6:	897b      	ldrh	r3, [r7, #10]
 80085f8:	2b09      	cmp	r3, #9
 80085fa:	d943      	bls.n	8008684 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 80085fc:	2309      	movs	r3, #9
 80085fe:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8008600:	e03c      	b.n	800867c <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008602:	f107 0308 	add.w	r3, r7, #8
 8008606:	4619      	mov	r1, r3
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f001 fc7e 	bl	8009f0a <USBH_GetNextDesc>
 800860e:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	2b21      	cmp	r3, #33	; 0x21
 8008616:	d131      	bne.n	800867c <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	785a      	ldrb	r2, [r3, #1]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3302      	adds	r3, #2
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3303      	adds	r3, #3
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	021b      	lsls	r3, r3, #8
 800863a:	b29b      	uxth	r3, r3
 800863c:	4313      	orrs	r3, r2
 800863e:	b29a      	uxth	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	791a      	ldrb	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	795a      	ldrb	r2, [r3, #5]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	799a      	ldrb	r2, [r3, #6]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3307      	adds	r3, #7
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b29a      	uxth	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3308      	adds	r3, #8
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	b29b      	uxth	r3, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	811a      	strh	r2, [r3, #8]
        break;
 8008678:	bf00      	nop
      }
    }
  }
}
 800867a:	e003      	b.n	8008684 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 800867c:	893b      	ldrh	r3, [r7, #8]
 800867e:	897a      	ldrh	r2, [r7, #10]
 8008680:	429a      	cmp	r2, r3
 8008682:	d8be      	bhi.n	8008602 <USBH_HID_ParseHIDDesc+0x32>
}
 8008684:	bf00      	nop
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8008694:	23ff      	movs	r3, #255	; 0xff
 8008696:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b0b      	cmp	r3, #11
 80086a0:	d117      	bne.n	80086d2 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80086a8:	4619      	mov	r1, r3
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	231a      	movs	r3, #26
 80086ae:	fb01 f303 	mul.w	r3, r1, r3
 80086b2:	4413      	add	r3, r2
 80086b4:	f203 3349 	addw	r3, r3, #841	; 0x349
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d102      	bne.n	80086c8 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 80086c2:	2302      	movs	r3, #2
 80086c4:	73fb      	strb	r3, [r7, #15]
 80086c6:	e004      	b.n	80086d2 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d101      	bne.n	80086d2 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 80086ce:	2301      	movs	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	88fa      	ldrh	r2, [r7, #6]
 8008704:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	601a      	str	r2, [r3, #0]
}
 800870c:	bf00      	nop
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	7a9b      	ldrb	r3, [r3, #10]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d131      	bne.n	8008796 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8008738:	2300      	movs	r3, #0
 800873a:	82fb      	strh	r3, [r7, #22]
 800873c:	e027      	b.n	800878e <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	88da      	ldrh	r2, [r3, #6]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	889b      	ldrh	r3, [r3, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d019      	beq.n	800877e <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	88d2      	ldrh	r2, [r2, #6]
 8008752:	441a      	add	r2, r3
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	1c59      	adds	r1, r3, #1
 8008758:	6139      	str	r1, [r7, #16]
 800875a:	7812      	ldrb	r2, [r2, #0]
 800875c:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	88db      	ldrh	r3, [r3, #6]
 8008762:	3301      	adds	r3, #1
 8008764:	b29a      	uxth	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	88da      	ldrh	r2, [r3, #6]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	891b      	ldrh	r3, [r3, #8]
 8008772:	429a      	cmp	r2, r3
 8008774:	d108      	bne.n	8008788 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	80da      	strh	r2, [r3, #6]
 800877c:	e004      	b.n	8008788 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	729a      	strb	r2, [r3, #10]
        return i;
 8008784:	8afb      	ldrh	r3, [r7, #22]
 8008786:	e00a      	b.n	800879e <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8008788:	8afb      	ldrh	r3, [r7, #22]
 800878a:	3301      	adds	r3, #1
 800878c:	82fb      	strh	r3, [r7, #22]
 800878e:	8afa      	ldrh	r2, [r7, #22]
 8008790:	88fb      	ldrh	r3, [r7, #6]
 8008792:	429a      	cmp	r2, r3
 8008794:	d3d3      	bcc.n	800873e <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800879c:	88fb      	ldrh	r3, [r7, #6]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b087      	sub	sp, #28
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	4613      	mov	r3, r2
 80087b6:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	7a9b      	ldrb	r3, [r3, #10]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d13c      	bne.n	800883e <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80087ca:	2300      	movs	r3, #0
 80087cc:	82fb      	strh	r3, [r7, #22]
 80087ce:	e032      	b.n	8008836 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	889b      	ldrh	r3, [r3, #4]
 80087d4:	3301      	adds	r3, #1
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	88d2      	ldrh	r2, [r2, #6]
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00a      	beq.n	80087f4 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	889b      	ldrh	r3, [r3, #4]
 80087e2:	3301      	adds	r3, #1
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d108      	bne.n	80087fe <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	88db      	ldrh	r3, [r3, #6]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	729a      	strb	r2, [r3, #10]
        return i;
 80087fa:	8afb      	ldrh	r3, [r7, #22]
 80087fc:	e023      	b.n	8008846 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	613a      	str	r2, [r7, #16]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	6812      	ldr	r2, [r2, #0]
 8008808:	68f9      	ldr	r1, [r7, #12]
 800880a:	8889      	ldrh	r1, [r1, #4]
 800880c:	440a      	add	r2, r1
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	7013      	strb	r3, [r2, #0]
        f->head++;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	889b      	ldrh	r3, [r3, #4]
 8008816:	3301      	adds	r3, #1
 8008818:	b29a      	uxth	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	889a      	ldrh	r2, [r3, #4]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	891b      	ldrh	r3, [r3, #8]
 8008826:	429a      	cmp	r2, r3
 8008828:	d102      	bne.n	8008830 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8008830:	8afb      	ldrh	r3, [r7, #22]
 8008832:	3301      	adds	r3, #1
 8008834:	82fb      	strh	r3, [r7, #22]
 8008836:	8afa      	ldrh	r2, [r7, #22]
 8008838:	88fb      	ldrh	r3, [r7, #6]
 800883a:	429a      	cmp	r2, r3
 800883c:	d3c8      	bcc.n	80087d0 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8008844:	88fb      	ldrh	r3, [r7, #6]
}
 8008846:	4618      	mov	r0, r3
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8008866:	4b22      	ldr	r3, [pc, #136]	; (80088f0 <USBH_HID_KeybdInit+0x9c>)
 8008868:	2200      	movs	r2, #0
 800886a:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800886c:	4b20      	ldr	r3, [pc, #128]	; (80088f0 <USBH_HID_KeybdInit+0x9c>)
 800886e:	2200      	movs	r2, #0
 8008870:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8008872:	4b1f      	ldr	r3, [pc, #124]	; (80088f0 <USBH_HID_KeybdInit+0x9c>)
 8008874:	2200      	movs	r2, #0
 8008876:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8008878:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <USBH_HID_KeybdInit+0x9c>)
 800887a:	2200      	movs	r2, #0
 800887c:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800887e:	4b1c      	ldr	r3, [pc, #112]	; (80088f0 <USBH_HID_KeybdInit+0x9c>)
 8008880:	2200      	movs	r2, #0
 8008882:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8008884:	4b1a      	ldr	r3, [pc, #104]	; (80088f0 <USBH_HID_KeybdInit+0x9c>)
 8008886:	2200      	movs	r2, #0
 8008888:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800888a:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <USBH_HID_KeybdInit+0x9c>)
 800888c:	2200      	movs	r2, #0
 800888e:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8008890:	4b17      	ldr	r3, [pc, #92]	; (80088f0 <USBH_HID_KeybdInit+0x9c>)
 8008892:	2200      	movs	r2, #0
 8008894:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	e00c      	b.n	80088b6 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800889c:	4a15      	ldr	r2, [pc, #84]	; (80088f4 <USBH_HID_KeybdInit+0xa0>)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2100      	movs	r1, #0
 80088a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 80088a6:	4a14      	ldr	r2, [pc, #80]	; (80088f8 <USBH_HID_KeybdInit+0xa4>)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2100      	movs	r1, #0
 80088ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d9ef      	bls.n	800889c <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	8b1b      	ldrh	r3, [r3, #24]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d902      	bls.n	80088ca <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2208      	movs	r2, #8
 80088c8:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	4a0a      	ldr	r2, [pc, #40]	; (80088f8 <USBH_HID_KeybdInit+0xa4>)
 80088ce:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f103 0008 	add.w	r0, r3, #8
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088dc:	2250      	movs	r2, #80	; 0x50
 80088de:	4619      	mov	r1, r3
 80088e0:	f7ff fefe 	bl	80086e0 <USBH_HID_FifoInit>

  return USBH_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20013b18 	.word	0x20013b18
 80088f4:	20013b30 	.word	0x20013b30
 80088f8:	20013b28 	.word	0x20013b28

080088fc <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f80d 	bl	8008924 <USBH_HID_KeybdDecode>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8008910:	4b03      	ldr	r3, [pc, #12]	; (8008920 <USBH_HID_GetKeybdInfo+0x24>)
 8008912:	e000      	b.n	8008916 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8008914:	2300      	movs	r3, #0
  }
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20013b18 	.word	0x20013b18

08008924 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	8b1b      	ldrh	r3, [r3, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 800893e:	2302      	movs	r3, #2
 8008940:	e066      	b.n	8008a10 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f103 0008 	add.w	r0, r3, #8
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	8b1b      	ldrh	r3, [r3, #24]
 800894c:	461a      	mov	r2, r3
 800894e:	4932      	ldr	r1, [pc, #200]	; (8008a18 <USBH_HID_KeybdDecode+0xf4>)
 8008950:	f7ff fee2 	bl	8008718 <USBH_HID_FifoRead>
 8008954:	4603      	mov	r3, r0
 8008956:	461a      	mov	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	8b1b      	ldrh	r3, [r3, #24]
 800895c:	429a      	cmp	r2, r3
 800895e:	d156      	bne.n	8008a0e <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8008960:	2100      	movs	r1, #0
 8008962:	482e      	ldr	r0, [pc, #184]	; (8008a1c <USBH_HID_KeybdDecode+0xf8>)
 8008964:	f000 f8e4 	bl	8008b30 <HID_ReadItem>
 8008968:	4603      	mov	r3, r0
 800896a:	b2da      	uxtb	r2, r3
 800896c:	4b2c      	ldr	r3, [pc, #176]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 800896e:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8008970:	2100      	movs	r1, #0
 8008972:	482c      	ldr	r0, [pc, #176]	; (8008a24 <USBH_HID_KeybdDecode+0x100>)
 8008974:	f000 f8dc 	bl	8008b30 <HID_ReadItem>
 8008978:	4603      	mov	r3, r0
 800897a:	b2da      	uxtb	r2, r3
 800897c:	4b28      	ldr	r3, [pc, #160]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 800897e:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8008980:	2100      	movs	r1, #0
 8008982:	4829      	ldr	r0, [pc, #164]	; (8008a28 <USBH_HID_KeybdDecode+0x104>)
 8008984:	f000 f8d4 	bl	8008b30 <HID_ReadItem>
 8008988:	4603      	mov	r3, r0
 800898a:	b2da      	uxtb	r2, r3
 800898c:	4b24      	ldr	r3, [pc, #144]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 800898e:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8008990:	2100      	movs	r1, #0
 8008992:	4826      	ldr	r0, [pc, #152]	; (8008a2c <USBH_HID_KeybdDecode+0x108>)
 8008994:	f000 f8cc 	bl	8008b30 <HID_ReadItem>
 8008998:	4603      	mov	r3, r0
 800899a:	b2da      	uxtb	r2, r3
 800899c:	4b20      	ldr	r3, [pc, #128]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 800899e:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 80089a0:	2100      	movs	r1, #0
 80089a2:	4823      	ldr	r0, [pc, #140]	; (8008a30 <USBH_HID_KeybdDecode+0x10c>)
 80089a4:	f000 f8c4 	bl	8008b30 <HID_ReadItem>
 80089a8:	4603      	mov	r3, r0
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	4b1c      	ldr	r3, [pc, #112]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 80089ae:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 80089b0:	2100      	movs	r1, #0
 80089b2:	4820      	ldr	r0, [pc, #128]	; (8008a34 <USBH_HID_KeybdDecode+0x110>)
 80089b4:	f000 f8bc 	bl	8008b30 <HID_ReadItem>
 80089b8:	4603      	mov	r3, r0
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 80089be:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 80089c0:	2100      	movs	r1, #0
 80089c2:	481d      	ldr	r0, [pc, #116]	; (8008a38 <USBH_HID_KeybdDecode+0x114>)
 80089c4:	f000 f8b4 	bl	8008b30 <HID_ReadItem>
 80089c8:	4603      	mov	r3, r0
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 80089ce:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 80089d0:	2100      	movs	r1, #0
 80089d2:	481a      	ldr	r0, [pc, #104]	; (8008a3c <USBH_HID_KeybdDecode+0x118>)
 80089d4:	f000 f8ac 	bl	8008b30 <HID_ReadItem>
 80089d8:	4603      	mov	r3, r0
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 80089de:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	e00e      	b.n	8008a04 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	4619      	mov	r1, r3
 80089ea:	4815      	ldr	r0, [pc, #84]	; (8008a40 <USBH_HID_KeybdDecode+0x11c>)
 80089ec:	f000 f8a0 	bl	8008b30 <HID_ReadItem>
 80089f0:	4602      	mov	r2, r0
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	b2d1      	uxtb	r1, r2
 80089f6:	4a0a      	ldr	r2, [pc, #40]	; (8008a20 <USBH_HID_KeybdDecode+0xfc>)
 80089f8:	4413      	add	r3, r2
 80089fa:	460a      	mov	r2, r1
 80089fc:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	3301      	adds	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d9ed      	bls.n	80089e6 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e000      	b.n	8008a10 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 8008a0e:	2302      	movs	r3, #2
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20013b30 	.word	0x20013b30
 8008a1c:	08046054 	.word	0x08046054
 8008a20:	20013b18 	.word	0x20013b18
 8008a24:	08046074 	.word	0x08046074
 8008a28:	08046094 	.word	0x08046094
 8008a2c:	080460b4 	.word	0x080460b4
 8008a30:	080460d4 	.word	0x080460d4
 8008a34:	080460f4 	.word	0x080460f4
 8008a38:	08046114 	.word	0x08046114
 8008a3c:	08046134 	.word	0x08046134
 8008a40:	08046154 	.word	0x08046154

08008a44 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	789b      	ldrb	r3, [r3, #2]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d103      	bne.n	8008a5c <USBH_HID_GetASCIICode+0x18>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	799b      	ldrb	r3, [r3, #6]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	7a5b      	ldrb	r3, [r3, #9]
 8008a60:	461a      	mov	r2, r3
 8008a62:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <USBH_HID_GetASCIICode+0x4c>)
 8008a64:	5c9b      	ldrb	r3, [r3, r2]
 8008a66:	461a      	mov	r2, r3
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <USBH_HID_GetASCIICode+0x50>)
 8008a6a:	5c9b      	ldrb	r3, [r3, r2]
 8008a6c:	73fb      	strb	r3, [r7, #15]
 8008a6e:	e008      	b.n	8008a82 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7a5b      	ldrb	r3, [r3, #9]
 8008a74:	461a      	mov	r2, r3
 8008a76:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <USBH_HID_GetASCIICode+0x4c>)
 8008a78:	5c9b      	ldrb	r3, [r3, r2]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <USBH_HID_GetASCIICode+0x54>)
 8008a7e:	5c9b      	ldrb	r3, [r3, r2]
 8008a80:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	0804627c 	.word	0x0804627c
 8008a94:	080461f8 	.word	0x080461f8
 8008a98:	08046174 	.word	0x08046174

08008a9c <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8008aae:	4b1d      	ldr	r3, [pc, #116]	; (8008b24 <USBH_HID_MouseInit+0x88>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8008ab4:	4b1b      	ldr	r3, [pc, #108]	; (8008b24 <USBH_HID_MouseInit+0x88>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8008aba:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <USBH_HID_MouseInit+0x88>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8008ac0:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <USBH_HID_MouseInit+0x88>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8008ac6:	4b17      	ldr	r3, [pc, #92]	; (8008b24 <USBH_HID_MouseInit+0x88>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8008acc:	2300      	movs	r3, #0
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	e00c      	b.n	8008aec <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8008ad2:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <USBH_HID_MouseInit+0x8c>)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8008adc:	4a13      	ldr	r2, [pc, #76]	; (8008b2c <USBH_HID_MouseInit+0x90>)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d9ef      	bls.n	8008ad2 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	8b1b      	ldrh	r3, [r3, #24]
 8008af6:	2b08      	cmp	r3, #8
 8008af8:	d902      	bls.n	8008b00 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2208      	movs	r2, #8
 8008afe:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4a0a      	ldr	r2, [pc, #40]	; (8008b2c <USBH_HID_MouseInit+0x90>)
 8008b04:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f103 0008 	add.w	r0, r3, #8
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b12:	2250      	movs	r2, #80	; 0x50
 8008b14:	4619      	mov	r1, r3
 8008b16:	f7ff fde3 	bl	80086e0 <USBH_HID_FifoInit>

  return USBH_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20013b38 	.word	0x20013b38
 8008b28:	20013b40 	.word	0x20013b40
 8008b2c:	20013b48 	.word	0x20013b48

08008b30 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b089      	sub	sp, #36	; 0x24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	7a1b      	ldrb	r3, [r3, #8]
 8008b4e:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7a5b      	ldrb	r3, [r3, #9]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01a      	beq.n	8008b8e <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	7a5b      	ldrb	r3, [r3, #9]
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d301      	bcc.n	8008b66 <HID_ReadItem+0x36>
    {
      return (0U);
 8008b62:	2300      	movs	r3, #0
 8008b64:	e078      	b.n	8008c58 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8008b66:	78fb      	ldrb	r3, [r7, #3]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	6852      	ldr	r2, [r2, #4]
 8008b6c:	fb02 f303 	mul.w	r3, r2, r3
 8008b70:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8008b72:	7cfb      	ldrb	r3, [r7, #19]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	08db      	lsrs	r3, r3, #3
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	4413      	add	r3, r2
 8008b82:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8008b8e:	2300      	movs	r3, #0
 8008b90:	61bb      	str	r3, [r7, #24]
 8008b92:	e00a      	b.n	8008baa <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	61bb      	str	r3, [r7, #24]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <HID_ReadItem+0x90>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	08db      	lsrs	r3, r3, #3
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	e002      	b.n	8008bc6 <HID_ReadItem+0x96>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d8e3      	bhi.n	8008b94 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8008bcc:	7cfb      	ldrb	r3, [r7, #19]
 8008bce:	69fa      	ldr	r2, [r7, #28]
 8008bd0:	40da      	lsrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8008bda:	fa01 f303 	lsl.w	r3, r1, r3
 8008bde:	43db      	mvns	r3, r3
 8008be0:	4013      	ands	r3, r2
 8008be2:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d304      	bcc.n	8008bf8 <HID_ReadItem+0xc8>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d901      	bls.n	8008bfc <HID_ReadItem+0xcc>
  {
    return (0U);
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e02d      	b.n	8008c58 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	7a9b      	ldrb	r3, [r3, #10]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01e      	beq.n	8008c42 <HID_ReadItem+0x112>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d014      	beq.n	8008c42 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	425b      	negs	r3, r3
 8008c24:	69fa      	ldr	r2, [r7, #28]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	e010      	b.n	8008c58 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	fb02 f303 	mul.w	r3, r2, r3
 8008c40:	e00a      	b.n	8008c58 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HID_ReadItem+0x11e>
    {
      return (val);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	e004      	b.n	8008c58 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3724      	adds	r7, #36	; 0x24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e029      	b.n	8008cd0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	79fa      	ldrb	r2, [r7, #7]
 8008c80:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f81f 	bl	8008cd8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f001 fcff 	bl	800a6cc <USBH_LL_Init>

  return USBH_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e009      	b.n	8008cfe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	33e0      	adds	r3, #224	; 0xe0
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b0f      	cmp	r3, #15
 8008d02:	d9f2      	bls.n	8008cea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d04:	2300      	movs	r3, #0
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	e009      	b.n	8008d1e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d24:	d3f1      	bcc.n	8008d0a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2240      	movs	r2, #64	; 0x40
 8008d4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d016      	beq.n	8008dc2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10e      	bne.n	8008dbc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008da4:	1c59      	adds	r1, r3, #1
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	33de      	adds	r3, #222	; 0xde
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
 8008dba:	e004      	b.n	8008dc6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e001      	b.n	8008dc6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008dea:	78fa      	ldrb	r2, [r7, #3]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d204      	bcs.n	8008dfa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008df8:	e001      	b.n	8008dfe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	4608      	mov	r0, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	70fb      	strb	r3, [r7, #3]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70bb      	strb	r3, [r7, #2]
 8008e22:	4613      	mov	r3, r2
 8008e24:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e34:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e36:	e025      	b.n	8008e84 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	221a      	movs	r2, #26
 8008e3c:	fb02 f303 	mul.w	r3, r2, r3
 8008e40:	3308      	adds	r3, #8
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	4413      	add	r3, r2
 8008e46:	3302      	adds	r3, #2
 8008e48:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	795b      	ldrb	r3, [r3, #5]
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d002      	beq.n	8008e5a <USBH_FindInterface+0x4e>
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	2bff      	cmp	r3, #255	; 0xff
 8008e58:	d111      	bne.n	8008e7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e5e:	78ba      	ldrb	r2, [r7, #2]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d002      	beq.n	8008e6a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e64:	78bb      	ldrb	r3, [r7, #2]
 8008e66:	2bff      	cmp	r3, #255	; 0xff
 8008e68:	d109      	bne.n	8008e7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e6e:	787a      	ldrb	r2, [r7, #1]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d002      	beq.n	8008e7a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e74:	787b      	ldrb	r3, [r7, #1]
 8008e76:	2bff      	cmp	r3, #255	; 0xff
 8008e78:	d101      	bne.n	8008e7e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	e006      	b.n	8008e8c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	3301      	adds	r3, #1
 8008e82:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d9d6      	bls.n	8008e38 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008e8a:	23ff      	movs	r3, #255	; 0xff
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 fc4f 	bl	800a744 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 fd68 	bl	800a97e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af04      	add	r7, sp, #16
 8008ebe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d102      	bne.n	8008eda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b0b      	cmp	r3, #11
 8008ee2:	f200 81be 	bhi.w	8009262 <USBH_Process+0x3aa>
 8008ee6:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <USBH_Process+0x34>)
 8008ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eec:	08008f1d 	.word	0x08008f1d
 8008ef0:	08008f4f 	.word	0x08008f4f
 8008ef4:	08008fb7 	.word	0x08008fb7
 8008ef8:	080091fd 	.word	0x080091fd
 8008efc:	08009263 	.word	0x08009263
 8008f00:	0800905b 	.word	0x0800905b
 8008f04:	080091a3 	.word	0x080091a3
 8008f08:	08009091 	.word	0x08009091
 8008f0c:	080090b1 	.word	0x080090b1
 8008f10:	080090d1 	.word	0x080090d1
 8008f14:	08009115 	.word	0x08009115
 8008f18:	080091e5 	.word	0x080091e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 819e 	beq.w	8009266 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008f30:	20c8      	movs	r0, #200	; 0xc8
 8008f32:	f001 fd6b 	bl	800aa0c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 fc61 	bl	800a7fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f4c:	e18b      	b.n	8009266 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d107      	bne.n	8008f68 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f66:	e18d      	b.n	8009284 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f72:	d914      	bls.n	8008f9e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d903      	bls.n	8008f96 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	220d      	movs	r2, #13
 8008f92:	701a      	strb	r2, [r3, #0]
      break;
 8008f94:	e176      	b.n	8009284 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
      break;
 8008f9c:	e172      	b.n	8009284 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008fa4:	f103 020a 	add.w	r2, r3, #10
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008fae:	200a      	movs	r0, #10
 8008fb0:	f001 fd2c 	bl	800aa0c <USBH_Delay>
      break;
 8008fb4:	e166      	b.n	8009284 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d005      	beq.n	8008fcc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fc6:	2104      	movs	r1, #4
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008fcc:	2064      	movs	r0, #100	; 0x64
 8008fce:	f001 fd1d 	bl	800aa0c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 fbec 	bl	800a7b0 <USBH_LL_GetSpeed>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2205      	movs	r2, #5
 8008fe6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008fe8:	2100      	movs	r1, #0
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 fa05 	bl	800a3fa <USBH_AllocPipe>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ff8:	2180      	movs	r1, #128	; 0x80
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 f9fd 	bl	800a3fa <USBH_AllocPipe>
 8009000:	4603      	mov	r3, r0
 8009002:	461a      	mov	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	7919      	ldrb	r1, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800901c:	b292      	uxth	r2, r2
 800901e:	9202      	str	r2, [sp, #8]
 8009020:	2200      	movs	r2, #0
 8009022:	9201      	str	r2, [sp, #4]
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	4603      	mov	r3, r0
 8009028:	2280      	movs	r2, #128	; 0x80
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 f9b6 	bl	800a39c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7959      	ldrb	r1, [r3, #5]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009044:	b292      	uxth	r2, r2
 8009046:	9202      	str	r2, [sp, #8]
 8009048:	2200      	movs	r2, #0
 800904a:	9201      	str	r2, [sp, #4]
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	4603      	mov	r3, r0
 8009050:	2200      	movs	r2, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 f9a2 	bl	800a39c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009058:	e114      	b.n	8009284 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f918 	bl	8009290 <USBH_HandleEnum>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	f040 80fe 	bne.w	800926a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800907c:	2b01      	cmp	r3, #1
 800907e:	d103      	bne.n	8009088 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2208      	movs	r2, #8
 8009084:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009086:	e0f0      	b.n	800926a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2207      	movs	r2, #7
 800908c:	701a      	strb	r2, [r3, #0]
      break;
 800908e:	e0ec      	b.n	800926a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 80e9 	beq.w	800926e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090a2:	2101      	movs	r1, #1
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2208      	movs	r2, #8
 80090ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80090ae:	e0de      	b.n	800926e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fc2c 	bl	8009918 <USBH_SetCfg>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 80d5 	bne.w	8009272 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2209      	movs	r2, #9
 80090cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090ce:	e0d0      	b.n	8009272 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d016      	beq.n	800910c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80090de:	2101      	movs	r1, #1
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc3c 	bl	800995e <USBH_SetFeature>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d103      	bne.n	80090fa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	220a      	movs	r2, #10
 80090f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090f8:	e0bd      	b.n	8009276 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b03      	cmp	r3, #3
 8009100:	f040 80b9 	bne.w	8009276 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220a      	movs	r2, #10
 8009108:	701a      	strb	r2, [r3, #0]
      break;
 800910a:	e0b4      	b.n	8009276 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	220a      	movs	r2, #10
 8009110:	701a      	strb	r2, [r3, #0]
      break;
 8009112:	e0b0      	b.n	8009276 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80ad 	beq.w	800927a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
 800912c:	e016      	b.n	800915c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800912e:	7bfa      	ldrb	r2, [r7, #15]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	32de      	adds	r2, #222	; 0xde
 8009134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009138:	791a      	ldrb	r2, [r3, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009140:	429a      	cmp	r2, r3
 8009142:	d108      	bne.n	8009156 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009144:	7bfa      	ldrb	r2, [r7, #15]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	32de      	adds	r2, #222	; 0xde
 800914a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009154:	e005      	b.n	8009162 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	3301      	adds	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0e5      	beq.n	800912e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009168:	2b00      	cmp	r3, #0
 800916a:	d016      	beq.n	800919a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	4798      	blx	r3
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d109      	bne.n	8009192 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2206      	movs	r2, #6
 8009182:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800918a:	2103      	movs	r1, #3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009190:	e073      	b.n	800927a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	220d      	movs	r2, #13
 8009196:	701a      	strb	r2, [r3, #0]
      break;
 8009198:	e06f      	b.n	800927a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	220d      	movs	r2, #13
 800919e:	701a      	strb	r2, [r3, #0]
      break;
 80091a0:	e06b      	b.n	800927a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d017      	beq.n	80091dc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	4798      	blx	r3
 80091b8:	4603      	mov	r3, r0
 80091ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d103      	bne.n	80091cc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	220b      	movs	r2, #11
 80091c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091ca:	e058      	b.n	800927e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d154      	bne.n	800927e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	220d      	movs	r2, #13
 80091d8:	701a      	strb	r2, [r3, #0]
      break;
 80091da:	e050      	b.n	800927e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	220d      	movs	r2, #13
 80091e0:	701a      	strb	r2, [r3, #0]
      break;
 80091e2:	e04c      	b.n	800927e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d049      	beq.n	8009282 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	4798      	blx	r3
      }
      break;
 80091fa:	e042      	b.n	8009282 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fd67 	bl	8008cd8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d009      	beq.n	8009228 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009238:	2105      	movs	r1, #5
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b01      	cmp	r3, #1
 8009248:	d107      	bne.n	800925a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff fe20 	bl	8008e98 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009258:	e014      	b.n	8009284 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fa72 	bl	800a744 <USBH_LL_Start>
      break;
 8009260:	e010      	b.n	8009284 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009262:	bf00      	nop
 8009264:	e00e      	b.n	8009284 <USBH_Process+0x3cc>
      break;
 8009266:	bf00      	nop
 8009268:	e00c      	b.n	8009284 <USBH_Process+0x3cc>
      break;
 800926a:	bf00      	nop
 800926c:	e00a      	b.n	8009284 <USBH_Process+0x3cc>
    break;
 800926e:	bf00      	nop
 8009270:	e008      	b.n	8009284 <USBH_Process+0x3cc>
      break;
 8009272:	bf00      	nop
 8009274:	e006      	b.n	8009284 <USBH_Process+0x3cc>
      break;
 8009276:	bf00      	nop
 8009278:	e004      	b.n	8009284 <USBH_Process+0x3cc>
      break;
 800927a:	bf00      	nop
 800927c:	e002      	b.n	8009284 <USBH_Process+0x3cc>
      break;
 800927e:	bf00      	nop
 8009280:	e000      	b.n	8009284 <USBH_Process+0x3cc>
      break;
 8009282:	bf00      	nop
  }
  return USBH_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop

08009290 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af04      	add	r7, sp, #16
 8009296:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009298:	2301      	movs	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800929c:	2301      	movs	r3, #1
 800929e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	2b07      	cmp	r3, #7
 80092a6:	f200 81c1 	bhi.w	800962c <USBH_HandleEnum+0x39c>
 80092aa:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <USBH_HandleEnum+0x20>)
 80092ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b0:	080092d1 	.word	0x080092d1
 80092b4:	0800938f 	.word	0x0800938f
 80092b8:	080093f9 	.word	0x080093f9
 80092bc:	08009487 	.word	0x08009487
 80092c0:	080094f1 	.word	0x080094f1
 80092c4:	08009561 	.word	0x08009561
 80092c8:	080095a7 	.word	0x080095a7
 80092cc:	080095ed 	.word	0x080095ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80092d0:	2108      	movs	r1, #8
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa50 	bl	8009778 <USBH_Get_DevDesc>
 80092d8:	4603      	mov	r3, r0
 80092da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d130      	bne.n	8009344 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7919      	ldrb	r1, [r3, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009306:	b292      	uxth	r2, r2
 8009308:	9202      	str	r2, [sp, #8]
 800930a:	2200      	movs	r2, #0
 800930c:	9201      	str	r2, [sp, #4]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4603      	mov	r3, r0
 8009312:	2280      	movs	r2, #128	; 0x80
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 f841 	bl	800a39c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7959      	ldrb	r1, [r3, #5]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800932e:	b292      	uxth	r2, r2
 8009330:	9202      	str	r2, [sp, #8]
 8009332:	2200      	movs	r2, #0
 8009334:	9201      	str	r2, [sp, #4]
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	4603      	mov	r3, r0
 800933a:	2200      	movs	r2, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 f82d 	bl	800a39c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009342:	e175      	b.n	8009630 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b03      	cmp	r3, #3
 8009348:	f040 8172 	bne.w	8009630 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009352:	3301      	adds	r3, #1
 8009354:	b2da      	uxtb	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009362:	2b03      	cmp	r3, #3
 8009364:	d903      	bls.n	800936e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	220d      	movs	r2, #13
 800936a:	701a      	strb	r2, [r3, #0]
      break;
 800936c:	e160      	b.n	8009630 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	795b      	ldrb	r3, [r3, #5]
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f001 f861 	bl	800a43c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f001 f85b 	bl	800a43c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	701a      	strb	r2, [r3, #0]
      break;
 800938c:	e150      	b.n	8009630 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800938e:	2112      	movs	r1, #18
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f9f1 	bl	8009778 <USBH_Get_DevDesc>
 8009396:	4603      	mov	r3, r0
 8009398:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d103      	bne.n	80093a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093a6:	e145      	b.n	8009634 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	f040 8142 	bne.w	8009634 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093b6:	3301      	adds	r3, #1
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d903      	bls.n	80093d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	220d      	movs	r2, #13
 80093ce:	701a      	strb	r2, [r3, #0]
      break;
 80093d0:	e130      	b.n	8009634 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	795b      	ldrb	r3, [r3, #5]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f82f 	bl	800a43c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	791b      	ldrb	r3, [r3, #4]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 f829 	bl	800a43c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	701a      	strb	r2, [r3, #0]
      break;
 80093f6:	e11d      	b.n	8009634 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80093f8:	2101      	movs	r1, #1
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa68 	bl	80098d0 <USBH_SetAddress>
 8009400:	4603      	mov	r3, r0
 8009402:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d132      	bne.n	8009470 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800940a:	2002      	movs	r0, #2
 800940c:	f001 fafe 	bl	800aa0c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2203      	movs	r2, #3
 800941c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	7919      	ldrb	r1, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009432:	b292      	uxth	r2, r2
 8009434:	9202      	str	r2, [sp, #8]
 8009436:	2200      	movs	r2, #0
 8009438:	9201      	str	r2, [sp, #4]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	4603      	mov	r3, r0
 800943e:	2280      	movs	r2, #128	; 0x80
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 ffab 	bl	800a39c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	7959      	ldrb	r1, [r3, #5]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800945a:	b292      	uxth	r2, r2
 800945c:	9202      	str	r2, [sp, #8]
 800945e:	2200      	movs	r2, #0
 8009460:	9201      	str	r2, [sp, #4]
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	4603      	mov	r3, r0
 8009466:	2200      	movs	r2, #0
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 ff97 	bl	800a39c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800946e:	e0e3      	b.n	8009638 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	2b03      	cmp	r3, #3
 8009474:	f040 80e0 	bne.w	8009638 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	220d      	movs	r2, #13
 800947c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	705a      	strb	r2, [r3, #1]
      break;
 8009484:	e0d8      	b.n	8009638 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009486:	2109      	movs	r1, #9
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f99d 	bl	80097c8 <USBH_Get_CfgDesc>
 800948e:	4603      	mov	r3, r0
 8009490:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2204      	movs	r2, #4
 800949c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800949e:	e0cd      	b.n	800963c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	f040 80ca 	bne.w	800963c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094ae:	3301      	adds	r3, #1
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d903      	bls.n	80094ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	220d      	movs	r2, #13
 80094c6:	701a      	strb	r2, [r3, #0]
      break;
 80094c8:	e0b8      	b.n	800963c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	795b      	ldrb	r3, [r3, #5]
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 ffb3 	bl	800a43c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	791b      	ldrb	r3, [r3, #4]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 ffad 	bl	800a43c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	701a      	strb	r2, [r3, #0]
      break;
 80094ee:	e0a5      	b.n	800963c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f965 	bl	80097c8 <USBH_Get_CfgDesc>
 80094fe:	4603      	mov	r3, r0
 8009500:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009502:	7bbb      	ldrb	r3, [r7, #14]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d103      	bne.n	8009510 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2205      	movs	r2, #5
 800950c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800950e:	e097      	b.n	8009640 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	2b03      	cmp	r3, #3
 8009514:	f040 8094 	bne.w	8009640 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800951e:	3301      	adds	r3, #1
 8009520:	b2da      	uxtb	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800952e:	2b03      	cmp	r3, #3
 8009530:	d903      	bls.n	800953a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	220d      	movs	r2, #13
 8009536:	701a      	strb	r2, [r3, #0]
      break;
 8009538:	e082      	b.n	8009640 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	795b      	ldrb	r3, [r3, #5]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 ff7b 	bl	800a43c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	791b      	ldrb	r3, [r3, #4]
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 ff75 	bl	800a43c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
      break;
 800955e:	e06f      	b.n	8009640 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009566:	2b00      	cmp	r3, #0
 8009568:	d019      	beq.n	800959e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009576:	23ff      	movs	r3, #255	; 0xff
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f949 	bl	8009810 <USBH_Get_StringDesc>
 800957e:	4603      	mov	r3, r0
 8009580:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d103      	bne.n	8009590 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2206      	movs	r2, #6
 800958c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800958e:	e059      	b.n	8009644 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b03      	cmp	r3, #3
 8009594:	d156      	bne.n	8009644 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2206      	movs	r2, #6
 800959a:	705a      	strb	r2, [r3, #1]
      break;
 800959c:	e052      	b.n	8009644 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2206      	movs	r2, #6
 80095a2:	705a      	strb	r2, [r3, #1]
      break;
 80095a4:	e04e      	b.n	8009644 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d019      	beq.n	80095e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095bc:	23ff      	movs	r3, #255	; 0xff
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f926 	bl	8009810 <USBH_Get_StringDesc>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2207      	movs	r2, #7
 80095d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095d4:	e038      	b.n	8009648 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d135      	bne.n	8009648 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2207      	movs	r2, #7
 80095e0:	705a      	strb	r2, [r3, #1]
      break;
 80095e2:	e031      	b.n	8009648 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2207      	movs	r2, #7
 80095e8:	705a      	strb	r2, [r3, #1]
      break;
 80095ea:	e02d      	b.n	8009648 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d017      	beq.n	8009626 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009602:	23ff      	movs	r3, #255	; 0xff
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f903 	bl	8009810 <USBH_Get_StringDesc>
 800960a:	4603      	mov	r3, r0
 800960c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009618:	e018      	b.n	800964c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b03      	cmp	r3, #3
 800961e:	d115      	bne.n	800964c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
      break;
 8009624:	e012      	b.n	800964c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
      break;
 800962a:	e00f      	b.n	800964c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800962c:	bf00      	nop
 800962e:	e00e      	b.n	800964e <USBH_HandleEnum+0x3be>
      break;
 8009630:	bf00      	nop
 8009632:	e00c      	b.n	800964e <USBH_HandleEnum+0x3be>
      break;
 8009634:	bf00      	nop
 8009636:	e00a      	b.n	800964e <USBH_HandleEnum+0x3be>
      break;
 8009638:	bf00      	nop
 800963a:	e008      	b.n	800964e <USBH_HandleEnum+0x3be>
      break;
 800963c:	bf00      	nop
 800963e:	e006      	b.n	800964e <USBH_HandleEnum+0x3be>
      break;
 8009640:	bf00      	nop
 8009642:	e004      	b.n	800964e <USBH_HandleEnum+0x3be>
      break;
 8009644:	bf00      	nop
 8009646:	e002      	b.n	800964e <USBH_HandleEnum+0x3be>
      break;
 8009648:	bf00      	nop
 800964a:	e000      	b.n	800964e <USBH_HandleEnum+0x3be>
      break;
 800964c:	bf00      	nop
  }
  return Status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f804 	bl	800969a <USBH_HandleSof>
}
 8009692:	bf00      	nop
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b0b      	cmp	r3, #11
 80096aa:	d10a      	bne.n	80096c2 <USBH_HandleSof+0x28>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
  }
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80096da:	bf00      	nop
}
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80096f6:	bf00      	nop
}
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009702:	b480      	push	{r7}
 8009704:	b083      	sub	sp, #12
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 f812 	bl	800a77a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	791b      	ldrb	r3, [r3, #4]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fe6d 	bl	800a43c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	795b      	ldrb	r3, [r3, #5]
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fe67 	bl	800a43c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af02      	add	r7, sp, #8
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	b29b      	uxth	r3, r3
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	4613      	mov	r3, r2
 8009792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009796:	2100      	movs	r1, #0
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f864 	bl	8009866 <USBH_GetDescriptor>
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10a      	bne.n	80097be <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80097b4:	78fa      	ldrb	r2, [r7, #3]
 80097b6:	b292      	uxth	r2, r2
 80097b8:	4619      	mov	r1, r3
 80097ba:	f000 f918 	bl	80099ee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80097be:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	331c      	adds	r3, #28
 80097d8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80097da:	887b      	ldrh	r3, [r7, #2]
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097e4:	2100      	movs	r1, #0
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f83d 	bl	8009866 <USBH_GetDescriptor>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d107      	bne.n	8009806 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80097f6:	887b      	ldrh	r3, [r7, #2]
 80097f8:	461a      	mov	r2, r3
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f987 	bl	8009b10 <USBH_ParseCfgDesc>
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af02      	add	r7, sp, #8
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	607a      	str	r2, [r7, #4]
 800981a:	461a      	mov	r2, r3
 800981c:	460b      	mov	r3, r1
 800981e:	72fb      	strb	r3, [r7, #11]
 8009820:	4613      	mov	r3, r2
 8009822:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	b29b      	uxth	r3, r3
 8009828:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800982c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009834:	893b      	ldrh	r3, [r7, #8]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	460b      	mov	r3, r1
 800983a:	2100      	movs	r1, #0
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f812 	bl	8009866 <USBH_GetDescriptor>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d107      	bne.n	800985c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009852:	893a      	ldrh	r2, [r7, #8]
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fb24 	bl	8009ea4 <USBH_ParseStringDesc>
  }

  return status;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	607b      	str	r3, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	72fb      	strb	r3, [r7, #11]
 8009874:	4613      	mov	r3, r2
 8009876:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	789b      	ldrb	r3, [r3, #2]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d11c      	bne.n	80098ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009886:	b2da      	uxtb	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2206      	movs	r2, #6
 8009890:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	893a      	ldrh	r2, [r7, #8]
 8009896:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009898:	893b      	ldrh	r3, [r7, #8]
 800989a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800989e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098a2:	d104      	bne.n	80098ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f240 4209 	movw	r2, #1033	; 0x409
 80098aa:	829a      	strh	r2, [r3, #20]
 80098ac:	e002      	b.n	80098b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8b3a      	ldrh	r2, [r7, #24]
 80098b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80098ba:	8b3b      	ldrh	r3, [r7, #24]
 80098bc:	461a      	mov	r2, r3
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 fb3d 	bl	8009f40 <USBH_CtlReq>
 80098c6:	4603      	mov	r3, r0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	789b      	ldrb	r3, [r3, #2]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d10f      	bne.n	8009904 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2205      	movs	r2, #5
 80098ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009904:	2200      	movs	r2, #0
 8009906:	2100      	movs	r1, #0
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fb19 	bl	8009f40 <USBH_CtlReq>
 800990e:	4603      	mov	r3, r0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	789b      	ldrb	r3, [r3, #2]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d10e      	bne.n	800994a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2209      	movs	r2, #9
 8009936:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	887a      	ldrh	r2, [r7, #2]
 800993c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800994a:	2200      	movs	r2, #0
 800994c:	2100      	movs	r1, #0
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 faf6 	bl	8009f40 <USBH_CtlReq>
 8009954:	4603      	mov	r3, r0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	789b      	ldrb	r3, [r3, #2]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d10f      	bne.n	8009992 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2203      	movs	r2, #3
 800997c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	b29a      	uxth	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009992:	2200      	movs	r2, #0
 8009994:	2100      	movs	r1, #0
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fad2 	bl	8009f40 <USBH_CtlReq>
 800999c:	4603      	mov	r3, r0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	789b      	ldrb	r3, [r3, #2]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d10f      	bne.n	80099da <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80099da:	2200      	movs	r2, #0
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 faae 	bl	8009f40 <USBH_CtlReq>
 80099e4:	4603      	mov	r3, r0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b085      	sub	sp, #20
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	60f8      	str	r0, [r7, #12]
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	4613      	mov	r3, r2
 80099fa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	781a      	ldrb	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	785a      	ldrb	r2, [r3, #1]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	3302      	adds	r3, #2
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	3303      	adds	r3, #3
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	021b      	lsls	r3, r3, #8
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	4313      	orrs	r3, r2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	791a      	ldrb	r2, [r3, #4]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	795a      	ldrb	r2, [r3, #5]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	799a      	ldrb	r2, [r3, #6]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	79da      	ldrb	r2, [r3, #7]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	79db      	ldrb	r3, [r3, #7]
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	dc11      	bgt.n	8009a74 <USBH_ParseDevDesc+0x86>
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	db16      	blt.n	8009a82 <USBH_ParseDevDesc+0x94>
 8009a54:	3b08      	subs	r3, #8
 8009a56:	2201      	movs	r2, #1
 8009a58:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	bf14      	ite	ne
 8009a68:	2301      	movne	r3, #1
 8009a6a:	2300      	moveq	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <USBH_ParseDevDesc+0x8a>
 8009a72:	e006      	b.n	8009a82 <USBH_ParseDevDesc+0x94>
 8009a74:	2b40      	cmp	r3, #64	; 0x40
 8009a76:	d104      	bne.n	8009a82 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	79da      	ldrb	r2, [r3, #7]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	71da      	strb	r2, [r3, #7]
      break;
 8009a80:	e003      	b.n	8009a8a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2240      	movs	r2, #64	; 0x40
 8009a86:	71da      	strb	r2, [r3, #7]
      break;
 8009a88:	bf00      	nop
  }

  if (length > 8U)
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	2b08      	cmp	r3, #8
 8009a8e:	d939      	bls.n	8009b04 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	3308      	adds	r3, #8
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3309      	adds	r3, #9
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	330a      	adds	r3, #10
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	330b      	adds	r3, #11
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	330c      	adds	r3, #12
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	330d      	adds	r3, #13
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	4313      	orrs	r3, r2
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	7b9a      	ldrb	r2, [r3, #14]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	7bda      	ldrb	r2, [r3, #15]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	7c1a      	ldrb	r2, [r3, #16]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	7c5a      	ldrb	r2, [r3, #17]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	745a      	strb	r2, [r3, #17]
  }
}
 8009b04:	bf00      	nop
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08c      	sub	sp, #48	; 0x30
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009b24:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	781a      	ldrb	r2, [r3, #0]
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	785a      	ldrb	r2, [r3, #1]
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	3302      	adds	r3, #2
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	3303      	adds	r3, #3
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	4313      	orrs	r3, r2
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6c:	bf28      	it	cs
 8009b6e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	791a      	ldrb	r2, [r3, #4]
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	795a      	ldrb	r2, [r3, #5]
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	799a      	ldrb	r2, [r3, #6]
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	79da      	ldrb	r2, [r3, #7]
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	7a1a      	ldrb	r2, [r3, #8]
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b09      	cmp	r3, #9
 8009ba6:	d002      	beq.n	8009bae <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	2209      	movs	r2, #9
 8009bac:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	2b09      	cmp	r3, #9
 8009bb2:	f240 809d 	bls.w	8009cf0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009bb6:	2309      	movs	r3, #9
 8009bb8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009bbe:	e081      	b.n	8009cc4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009bc0:	f107 0316 	add.w	r3, r7, #22
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc8:	f000 f99f 	bl	8009f0a <USBH_GetNextDesc>
 8009bcc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d176      	bne.n	8009cc4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b09      	cmp	r3, #9
 8009bdc:	d002      	beq.n	8009be4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	2209      	movs	r2, #9
 8009be2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009be8:	221a      	movs	r2, #26
 8009bea:	fb02 f303 	mul.w	r3, r2, r3
 8009bee:	3308      	adds	r3, #8
 8009bf0:	6a3a      	ldr	r2, [r7, #32]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	3302      	adds	r3, #2
 8009bf6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bfa:	69f8      	ldr	r0, [r7, #28]
 8009bfc:	f000 f87e 	bl	8009cfc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c0a:	e043      	b.n	8009c94 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c0c:	f107 0316 	add.w	r3, r7, #22
 8009c10:	4619      	mov	r1, r3
 8009c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c14:	f000 f979 	bl	8009f0a <USBH_GetNextDesc>
 8009c18:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1c:	785b      	ldrb	r3, [r3, #1]
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	d138      	bne.n	8009c94 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	795b      	ldrb	r3, [r3, #5]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d10f      	bne.n	8009c4a <USBH_ParseCfgDesc+0x13a>
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	799b      	ldrb	r3, [r3, #6]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d10b      	bne.n	8009c4a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	79db      	ldrb	r3, [r3, #7]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10f      	bne.n	8009c5a <USBH_ParseCfgDesc+0x14a>
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b09      	cmp	r3, #9
 8009c40:	d00b      	beq.n	8009c5a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	2209      	movs	r2, #9
 8009c46:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c48:	e007      	b.n	8009c5a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2b07      	cmp	r3, #7
 8009c50:	d004      	beq.n	8009c5c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	2207      	movs	r2, #7
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	e000      	b.n	8009c5c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c5a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009c64:	3201      	adds	r2, #1
 8009c66:	00d2      	lsls	r2, r2, #3
 8009c68:	211a      	movs	r1, #26
 8009c6a:	fb01 f303 	mul.w	r3, r1, r3
 8009c6e:	4413      	add	r3, r2
 8009c70:	3308      	adds	r3, #8
 8009c72:	6a3a      	ldr	r2, [r7, #32]
 8009c74:	4413      	add	r3, r2
 8009c76:	3304      	adds	r3, #4
 8009c78:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c7c:	69b9      	ldr	r1, [r7, #24]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f86b 	bl	8009d5a <USBH_ParseEPDesc>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c8e:	3301      	adds	r3, #1
 8009c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	791b      	ldrb	r3, [r3, #4]
 8009c98:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d204      	bcs.n	8009caa <USBH_ParseCfgDesc+0x19a>
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	885a      	ldrh	r2, [r3, #2]
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d8b0      	bhi.n	8009c0c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	791b      	ldrb	r3, [r3, #4]
 8009cae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d201      	bcs.n	8009cba <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e01c      	b.n	8009cf4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d805      	bhi.n	8009cd8 <USBH_ParseCfgDesc+0x1c8>
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	885a      	ldrh	r2, [r3, #2]
 8009cd0:	8afb      	ldrh	r3, [r7, #22]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	f63f af74 	bhi.w	8009bc0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	791b      	ldrb	r3, [r3, #4]
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	bf28      	it	cs
 8009ce0:	2302      	movcs	r3, #2
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d201      	bcs.n	8009cf0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e001      	b.n	8009cf4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3730      	adds	r7, #48	; 0x30
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	781a      	ldrb	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	785a      	ldrb	r2, [r3, #1]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	789a      	ldrb	r2, [r3, #2]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	78da      	ldrb	r2, [r3, #3]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	791a      	ldrb	r2, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	795a      	ldrb	r2, [r3, #5]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	799a      	ldrb	r2, [r3, #6]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	79da      	ldrb	r2, [r3, #7]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	7a1a      	ldrb	r2, [r3, #8]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	721a      	strb	r2, [r3, #8]
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b087      	sub	sp, #28
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	781a      	ldrb	r2, [r3, #0]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	785a      	ldrb	r2, [r3, #1]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	789a      	ldrb	r2, [r3, #2]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	78da      	ldrb	r2, [r3, #3]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3305      	adds	r3, #5
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	021b      	lsls	r3, r3, #8
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	799a      	ldrb	r2, [r3, #6]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	889b      	ldrh	r3, [r3, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d102      	bne.n	8009dbc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009db6:	2303      	movs	r3, #3
 8009db8:	75fb      	strb	r3, [r7, #23]
 8009dba:	e033      	b.n	8009e24 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	889b      	ldrh	r3, [r3, #4]
 8009dc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009dc4:	f023 0307 	bic.w	r3, r3, #7
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	889b      	ldrh	r3, [r3, #4]
 8009dd2:	b21a      	sxth	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	b299      	uxth	r1, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3305      	adds	r3, #5
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	021b      	lsls	r3, r3, #8
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	430b      	orrs	r3, r1
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d110      	bne.n	8009e16 <USBH_ParseEPDesc+0xbc>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3304      	adds	r3, #4
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b299      	uxth	r1, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3305      	adds	r3, #5
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	021b      	lsls	r3, r3, #8
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	b21b      	sxth	r3, r3
 8009e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e12:	b21b      	sxth	r3, r3
 8009e14:	e001      	b.n	8009e1a <USBH_ParseEPDesc+0xc0>
 8009e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	b21b      	sxth	r3, r3
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d116      	bne.n	8009e5c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	78db      	ldrb	r3, [r3, #3]
 8009e32:	f003 0303 	and.w	r3, r3, #3
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d005      	beq.n	8009e46 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	78db      	ldrb	r3, [r3, #3]
 8009e3e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d127      	bne.n	8009e96 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	799b      	ldrb	r3, [r3, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <USBH_ParseEPDesc+0xfc>
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	799b      	ldrb	r3, [r3, #6]
 8009e52:	2b10      	cmp	r3, #16
 8009e54:	d91f      	bls.n	8009e96 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009e56:	2303      	movs	r3, #3
 8009e58:	75fb      	strb	r3, [r7, #23]
 8009e5a:	e01c      	b.n	8009e96 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	78db      	ldrb	r3, [r3, #3]
 8009e60:	f003 0303 	and.w	r3, r3, #3
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d10a      	bne.n	8009e7e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	799b      	ldrb	r3, [r3, #6]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <USBH_ParseEPDesc+0x11e>
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	799b      	ldrb	r3, [r3, #6]
 8009e74:	2b10      	cmp	r3, #16
 8009e76:	d90e      	bls.n	8009e96 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	75fb      	strb	r3, [r7, #23]
 8009e7c:	e00b      	b.n	8009e96 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	78db      	ldrb	r3, [r3, #3]
 8009e82:	f003 0303 	and.w	r3, r3, #3
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d105      	bne.n	8009e96 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	799b      	ldrb	r3, [r3, #6]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009e92:	2303      	movs	r3, #3
 8009e94:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	371c      	adds	r7, #28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d120      	bne.n	8009efe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	1e9a      	subs	r2, r3, #2
 8009ec2:	88fb      	ldrh	r3, [r7, #6]
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	bf28      	it	cs
 8009ec8:	4613      	movcs	r3, r2
 8009eca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3302      	adds	r3, #2
 8009ed0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	82fb      	strh	r3, [r7, #22]
 8009ed6:	e00b      	b.n	8009ef0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009ed8:	8afb      	ldrh	r3, [r7, #22]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	4413      	add	r3, r2
 8009ede:	781a      	ldrb	r2, [r3, #0]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009eea:	8afb      	ldrh	r3, [r7, #22]
 8009eec:	3302      	adds	r3, #2
 8009eee:	82fb      	strh	r3, [r7, #22]
 8009ef0:	8afa      	ldrh	r2, [r7, #22]
 8009ef2:	8abb      	ldrh	r3, [r7, #20]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d3ef      	bcc.n	8009ed8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2200      	movs	r2, #0
 8009efc:	701a      	strb	r2, [r3, #0]
  }
}
 8009efe:	bf00      	nop
 8009f00:	371c      	adds	r7, #28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	881a      	ldrh	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	4413      	add	r3, r2
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4413      	add	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009f32:	68fb      	ldr	r3, [r7, #12]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	789b      	ldrb	r3, [r3, #2]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d002      	beq.n	8009f60 <USBH_CtlReq+0x20>
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d00f      	beq.n	8009f7e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009f5e:	e027      	b.n	8009fb0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	88fa      	ldrh	r2, [r7, #6]
 8009f6a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2202      	movs	r2, #2
 8009f76:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f7c:	e018      	b.n	8009fb0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 f81c 	bl	8009fbc <USBH_HandleControl>
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <USBH_CtlReq+0x54>
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d106      	bne.n	8009fa2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2201      	movs	r2, #1
 8009f98:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	761a      	strb	r2, [r3, #24]
      break;
 8009fa0:	e005      	b.n	8009fae <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d102      	bne.n	8009fae <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2201      	movs	r2, #1
 8009fac:	709a      	strb	r2, [r3, #2]
      break;
 8009fae:	bf00      	nop
  }
  return status;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	7e1b      	ldrb	r3, [r3, #24]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	2b0a      	cmp	r3, #10
 8009fd4:	f200 8156 	bhi.w	800a284 <USBH_HandleControl+0x2c8>
 8009fd8:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <USBH_HandleControl+0x24>)
 8009fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fde:	bf00      	nop
 8009fe0:	0800a00d 	.word	0x0800a00d
 8009fe4:	0800a027 	.word	0x0800a027
 8009fe8:	0800a091 	.word	0x0800a091
 8009fec:	0800a0b7 	.word	0x0800a0b7
 8009ff0:	0800a0ef 	.word	0x0800a0ef
 8009ff4:	0800a119 	.word	0x0800a119
 8009ff8:	0800a16b 	.word	0x0800a16b
 8009ffc:	0800a18d 	.word	0x0800a18d
 800a000:	0800a1c9 	.word	0x0800a1c9
 800a004:	0800a1ef 	.word	0x0800a1ef
 800a008:	0800a22d 	.word	0x0800a22d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f103 0110 	add.w	r1, r3, #16
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	795b      	ldrb	r3, [r3, #5]
 800a016:	461a      	mov	r2, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f943 	bl	800a2a4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2202      	movs	r2, #2
 800a022:	761a      	strb	r2, [r3, #24]
      break;
 800a024:	e139      	b.n	800a29a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	795b      	ldrb	r3, [r3, #5]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fc93 	bl	800a958 <USBH_LL_GetURBState>
 800a032:	4603      	mov	r3, r0
 800a034:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d11e      	bne.n	800a07a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	7c1b      	ldrb	r3, [r3, #16]
 800a040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a044:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	8adb      	ldrh	r3, [r3, #22]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00a      	beq.n	800a064 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a04e:	7b7b      	ldrb	r3, [r7, #13]
 800a050:	2b80      	cmp	r3, #128	; 0x80
 800a052:	d103      	bne.n	800a05c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2203      	movs	r2, #3
 800a058:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a05a:	e115      	b.n	800a288 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2205      	movs	r2, #5
 800a060:	761a      	strb	r2, [r3, #24]
      break;
 800a062:	e111      	b.n	800a288 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a064:	7b7b      	ldrb	r3, [r7, #13]
 800a066:	2b80      	cmp	r3, #128	; 0x80
 800a068:	d103      	bne.n	800a072 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2209      	movs	r2, #9
 800a06e:	761a      	strb	r2, [r3, #24]
      break;
 800a070:	e10a      	b.n	800a288 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2207      	movs	r2, #7
 800a076:	761a      	strb	r2, [r3, #24]
      break;
 800a078:	e106      	b.n	800a288 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d003      	beq.n	800a088 <USBH_HandleControl+0xcc>
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	2b02      	cmp	r3, #2
 800a084:	f040 8100 	bne.w	800a288 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	220b      	movs	r2, #11
 800a08c:	761a      	strb	r2, [r3, #24]
      break;
 800a08e:	e0fb      	b.n	800a288 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a096:	b29a      	uxth	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6899      	ldr	r1, [r3, #8]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	899a      	ldrh	r2, [r3, #12]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	791b      	ldrb	r3, [r3, #4]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f93a 	bl	800a322 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2204      	movs	r2, #4
 800a0b2:	761a      	strb	r2, [r3, #24]
      break;
 800a0b4:	e0f1      	b.n	800a29a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	791b      	ldrb	r3, [r3, #4]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fc4b 	bl	800a958 <USBH_LL_GetURBState>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a0c6:	7bbb      	ldrb	r3, [r7, #14]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d102      	bne.n	800a0d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2209      	movs	r2, #9
 800a0d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b05      	cmp	r3, #5
 800a0d6:	d102      	bne.n	800a0de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0dc:	e0d6      	b.n	800a28c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a0de:	7bbb      	ldrb	r3, [r7, #14]
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	f040 80d3 	bne.w	800a28c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	220b      	movs	r2, #11
 800a0ea:	761a      	strb	r2, [r3, #24]
      break;
 800a0ec:	e0ce      	b.n	800a28c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6899      	ldr	r1, [r3, #8]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	899a      	ldrh	r2, [r3, #12]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	795b      	ldrb	r3, [r3, #5]
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	9000      	str	r0, [sp, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f8ea 	bl	800a2d8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2206      	movs	r2, #6
 800a114:	761a      	strb	r2, [r3, #24]
      break;
 800a116:	e0c0      	b.n	800a29a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	795b      	ldrb	r3, [r3, #5]
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fc1a 	bl	800a958 <USBH_LL_GetURBState>
 800a124:	4603      	mov	r3, r0
 800a126:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d103      	bne.n	800a136 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2207      	movs	r2, #7
 800a132:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a134:	e0ac      	b.n	800a290 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a136:	7bbb      	ldrb	r3, [r7, #14]
 800a138:	2b05      	cmp	r3, #5
 800a13a:	d105      	bne.n	800a148 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	220c      	movs	r2, #12
 800a140:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a142:	2303      	movs	r3, #3
 800a144:	73fb      	strb	r3, [r7, #15]
      break;
 800a146:	e0a3      	b.n	800a290 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d103      	bne.n	800a156 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2205      	movs	r2, #5
 800a152:	761a      	strb	r2, [r3, #24]
      break;
 800a154:	e09c      	b.n	800a290 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	2b04      	cmp	r3, #4
 800a15a:	f040 8099 	bne.w	800a290 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	220b      	movs	r2, #11
 800a162:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a164:	2302      	movs	r3, #2
 800a166:	73fb      	strb	r3, [r7, #15]
      break;
 800a168:	e092      	b.n	800a290 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	791b      	ldrb	r3, [r3, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	2100      	movs	r1, #0
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f8d5 	bl	800a322 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a17e:	b29a      	uxth	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2208      	movs	r2, #8
 800a188:	761a      	strb	r2, [r3, #24]

      break;
 800a18a:	e086      	b.n	800a29a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	791b      	ldrb	r3, [r3, #4]
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fbe0 	bl	800a958 <USBH_LL_GetURBState>
 800a198:	4603      	mov	r3, r0
 800a19a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a19c:	7bbb      	ldrb	r3, [r7, #14]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d105      	bne.n	800a1ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	220d      	movs	r2, #13
 800a1a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1ac:	e072      	b.n	800a294 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	d103      	bne.n	800a1bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	220b      	movs	r2, #11
 800a1b8:	761a      	strb	r2, [r3, #24]
      break;
 800a1ba:	e06b      	b.n	800a294 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	2b05      	cmp	r3, #5
 800a1c0:	d168      	bne.n	800a294 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c6:	e065      	b.n	800a294 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	795b      	ldrb	r3, [r3, #5]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	9200      	str	r2, [sp, #0]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f87f 	bl	800a2d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	220a      	movs	r2, #10
 800a1ea:	761a      	strb	r2, [r3, #24]
      break;
 800a1ec:	e055      	b.n	800a29a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	795b      	ldrb	r3, [r3, #5]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fbaf 	bl	800a958 <USBH_LL_GetURBState>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a1fe:	7bbb      	ldrb	r3, [r7, #14]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d105      	bne.n	800a210 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	220d      	movs	r2, #13
 800a20c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a20e:	e043      	b.n	800a298 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d103      	bne.n	800a21e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2209      	movs	r2, #9
 800a21a:	761a      	strb	r2, [r3, #24]
      break;
 800a21c:	e03c      	b.n	800a298 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	2b04      	cmp	r3, #4
 800a222:	d139      	bne.n	800a298 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	220b      	movs	r2, #11
 800a228:	761a      	strb	r2, [r3, #24]
      break;
 800a22a:	e035      	b.n	800a298 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	7e5b      	ldrb	r3, [r3, #25]
 800a230:	3301      	adds	r3, #1
 800a232:	b2da      	uxtb	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	765a      	strb	r2, [r3, #25]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7e5b      	ldrb	r3, [r3, #25]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d806      	bhi.n	800a24e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a24c:	e025      	b.n	800a29a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a254:	2106      	movs	r1, #6
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	795b      	ldrb	r3, [r3, #5]
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f8e8 	bl	800a43c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	791b      	ldrb	r3, [r3, #4]
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f8e2 	bl	800a43c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a27e:	2302      	movs	r3, #2
 800a280:	73fb      	strb	r3, [r7, #15]
      break;
 800a282:	e00a      	b.n	800a29a <USBH_HandleControl+0x2de>

    default:
      break;
 800a284:	bf00      	nop
 800a286:	e008      	b.n	800a29a <USBH_HandleControl+0x2de>
      break;
 800a288:	bf00      	nop
 800a28a:	e006      	b.n	800a29a <USBH_HandleControl+0x2de>
      break;
 800a28c:	bf00      	nop
 800a28e:	e004      	b.n	800a29a <USBH_HandleControl+0x2de>
      break;
 800a290:	bf00      	nop
 800a292:	e002      	b.n	800a29a <USBH_HandleControl+0x2de>
      break;
 800a294:	bf00      	nop
 800a296:	e000      	b.n	800a29a <USBH_HandleControl+0x2de>
      break;
 800a298:	bf00      	nop
  }

  return status;
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af04      	add	r7, sp, #16
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2b2:	79f9      	ldrb	r1, [r7, #7]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	9303      	str	r3, [sp, #12]
 800a2b8:	2308      	movs	r3, #8
 800a2ba:	9302      	str	r3, [sp, #8]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fb14 	bl	800a8f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b088      	sub	sp, #32
 800a2dc:	af04      	add	r7, sp, #16
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	80fb      	strh	r3, [r7, #6]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d001      	beq.n	800a2fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2fc:	7979      	ldrb	r1, [r7, #5]
 800a2fe:	7e3b      	ldrb	r3, [r7, #24]
 800a300:	9303      	str	r3, [sp, #12]
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	9302      	str	r3, [sp, #8]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	2301      	movs	r3, #1
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	2300      	movs	r3, #0
 800a310:	2200      	movs	r2, #0
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 faef 	bl	800a8f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b088      	sub	sp, #32
 800a326:	af04      	add	r7, sp, #16
 800a328:	60f8      	str	r0, [r7, #12]
 800a32a:	60b9      	str	r1, [r7, #8]
 800a32c:	4611      	mov	r1, r2
 800a32e:	461a      	mov	r2, r3
 800a330:	460b      	mov	r3, r1
 800a332:	80fb      	strh	r3, [r7, #6]
 800a334:	4613      	mov	r3, r2
 800a336:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a338:	7979      	ldrb	r1, [r7, #5]
 800a33a:	2300      	movs	r3, #0
 800a33c:	9303      	str	r3, [sp, #12]
 800a33e:	88fb      	ldrh	r3, [r7, #6]
 800a340:	9302      	str	r3, [sp, #8]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	2301      	movs	r3, #1
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	2300      	movs	r3, #0
 800a34c:	2201      	movs	r2, #1
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 fad1 	bl	800a8f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a354:	2300      	movs	r3, #0

}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b088      	sub	sp, #32
 800a362:	af04      	add	r7, sp, #16
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	4611      	mov	r1, r2
 800a36a:	461a      	mov	r2, r3
 800a36c:	460b      	mov	r3, r1
 800a36e:	71fb      	strb	r3, [r7, #7]
 800a370:	4613      	mov	r3, r2
 800a372:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	b29b      	uxth	r3, r3
 800a378:	79b9      	ldrb	r1, [r7, #6]
 800a37a:	2200      	movs	r2, #0
 800a37c:	9203      	str	r2, [sp, #12]
 800a37e:	9302      	str	r3, [sp, #8]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	2301      	movs	r3, #1
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	2303      	movs	r3, #3
 800a38a:	2201      	movs	r2, #1
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 fab2 	bl	800a8f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af04      	add	r7, sp, #16
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	70fb      	strb	r3, [r7, #3]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	70bb      	strb	r3, [r7, #2]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a3b6:	7878      	ldrb	r0, [r7, #1]
 800a3b8:	78ba      	ldrb	r2, [r7, #2]
 800a3ba:	78f9      	ldrb	r1, [r7, #3]
 800a3bc:	8b3b      	ldrh	r3, [r7, #24]
 800a3be:	9302      	str	r3, [sp, #8]
 800a3c0:	7d3b      	ldrb	r3, [r7, #20]
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	7c3b      	ldrb	r3, [r7, #16]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa45 	bl	800a85a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa64 	bl	800a8b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b084      	sub	sp, #16
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	460b      	mov	r3, r1
 800a404:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f836 	bl	800a478 <USBH_GetFreePipe>
 800a40c:	4603      	mov	r3, r0
 800a40e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a410:	89fb      	ldrh	r3, [r7, #14]
 800a412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a416:	4293      	cmp	r3, r2
 800a418:	d00a      	beq.n	800a430 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a41a:	78fa      	ldrb	r2, [r7, #3]
 800a41c:	89fb      	ldrh	r3, [r7, #14]
 800a41e:	f003 030f 	and.w	r3, r3, #15
 800a422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	33e0      	adds	r3, #224	; 0xe0
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	440b      	add	r3, r1
 800a42e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a430:	89fb      	ldrh	r3, [r7, #14]
 800a432:	b2db      	uxtb	r3, r3
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	2b0f      	cmp	r3, #15
 800a44c:	d80d      	bhi.n	800a46a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a44e:	78fb      	ldrb	r3, [r7, #3]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	33e0      	adds	r3, #224	; 0xe0
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	78fb      	ldrb	r3, [r7, #3]
 800a45c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	33e0      	adds	r3, #224	; 0xe0
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	440b      	add	r3, r1
 800a468:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
 800a488:	e00f      	b.n	800a4aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	33e0      	adds	r3, #224	; 0xe0
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	e007      	b.n	800a4b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	73fb      	strb	r3, [r7, #15]
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	2b0f      	cmp	r3, #15
 800a4ae:	d9ec      	bls.n	800a48a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a4b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	490e      	ldr	r1, [pc, #56]	; (800a500 <MX_USB_HOST_Init+0x40>)
 800a4c8:	480e      	ldr	r0, [pc, #56]	; (800a504 <MX_USB_HOST_Init+0x44>)
 800a4ca:	f7fe fbcb 	bl	8008c64 <USBH_Init>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a4d4:	f7f6 ff28 	bl	8001328 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800a4d8:	490b      	ldr	r1, [pc, #44]	; (800a508 <MX_USB_HOST_Init+0x48>)
 800a4da:	480a      	ldr	r0, [pc, #40]	; (800a504 <MX_USB_HOST_Init+0x44>)
 800a4dc:	f7fe fc50 	bl	8008d80 <USBH_RegisterClass>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a4e6:	f7f6 ff1f 	bl	8001328 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a4ea:	4806      	ldr	r0, [pc, #24]	; (800a504 <MX_USB_HOST_Init+0x44>)
 800a4ec:	f7fe fcd4 	bl	8008e98 <USBH_Start>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a4f6:	f7f6 ff17 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a4fa:	bf00      	nop
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	0800a521 	.word	0x0800a521
 800a504:	20013b50 	.word	0x20013b50
 800a508:	200001d8 	.word	0x200001d8

0800a50c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a510:	4802      	ldr	r0, [pc, #8]	; (800a51c <MX_USB_HOST_Process+0x10>)
 800a512:	f7fe fcd1 	bl	8008eb8 <USBH_Process>
}
 800a516:	bf00      	nop
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20013b50 	.word	0x20013b50

0800a520 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	3b01      	subs	r3, #1
 800a530:	2b04      	cmp	r3, #4
 800a532:	d819      	bhi.n	800a568 <USBH_UserProcess+0x48>
 800a534:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <USBH_UserProcess+0x1c>)
 800a536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53a:	bf00      	nop
 800a53c:	0800a569 	.word	0x0800a569
 800a540:	0800a559 	.word	0x0800a559
 800a544:	0800a569 	.word	0x0800a569
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a551 	.word	0x0800a551
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a550:	4b09      	ldr	r3, [pc, #36]	; (800a578 <USBH_UserProcess+0x58>)
 800a552:	2203      	movs	r2, #3
 800a554:	701a      	strb	r2, [r3, #0]
  break;
 800a556:	e008      	b.n	800a56a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a558:	4b07      	ldr	r3, [pc, #28]	; (800a578 <USBH_UserProcess+0x58>)
 800a55a:	2202      	movs	r2, #2
 800a55c:	701a      	strb	r2, [r3, #0]
  break;
 800a55e:	e004      	b.n	800a56a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <USBH_UserProcess+0x58>)
 800a562:	2201      	movs	r2, #1
 800a564:	701a      	strb	r2, [r3, #0]
  break;
 800a566:	e000      	b.n	800a56a <USBH_UserProcess+0x4a>

  default:
  break;
 800a568:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	20013f28 	.word	0x20013f28

0800a57c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08a      	sub	sp, #40	; 0x28
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a584:	f107 0314 	add.w	r3, r7, #20
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	605a      	str	r2, [r3, #4]
 800a58e:	609a      	str	r2, [r3, #8]
 800a590:	60da      	str	r2, [r3, #12]
 800a592:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a59c:	d13a      	bne.n	800a614 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a59e:	2300      	movs	r3, #0
 800a5a0:	613b      	str	r3, [r7, #16]
 800a5a2:	4b1e      	ldr	r3, [pc, #120]	; (800a61c <HAL_HCD_MspInit+0xa0>)
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a6:	4a1d      	ldr	r2, [pc, #116]	; (800a61c <HAL_HCD_MspInit+0xa0>)
 800a5a8:	f043 0301 	orr.w	r3, r3, #1
 800a5ac:	6313      	str	r3, [r2, #48]	; 0x30
 800a5ae:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <HAL_HCD_MspInit+0xa0>)
 800a5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	613b      	str	r3, [r7, #16]
 800a5b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a5ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a5be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5cc:	230a      	movs	r3, #10
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5d0:	f107 0314 	add.w	r3, r7, #20
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4812      	ldr	r0, [pc, #72]	; (800a620 <HAL_HCD_MspInit+0xa4>)
 800a5d8:	f7f9 f9c0 	bl	800395c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5dc:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <HAL_HCD_MspInit+0xa0>)
 800a5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e0:	4a0e      	ldr	r2, [pc, #56]	; (800a61c <HAL_HCD_MspInit+0xa0>)
 800a5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e6:	6353      	str	r3, [r2, #52]	; 0x34
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <HAL_HCD_MspInit+0xa0>)
 800a5ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f0:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <HAL_HCD_MspInit+0xa0>)
 800a5f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5f6:	6453      	str	r3, [r2, #68]	; 0x44
 800a5f8:	4b08      	ldr	r3, [pc, #32]	; (800a61c <HAL_HCD_MspInit+0xa0>)
 800a5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a604:	2200      	movs	r2, #0
 800a606:	2100      	movs	r1, #0
 800a608:	2043      	movs	r0, #67	; 0x43
 800a60a:	f7f8 fd1a 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a60e:	2043      	movs	r0, #67	; 0x43
 800a610:	f7f8 fd33 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a614:	bf00      	nop
 800a616:	3728      	adds	r7, #40	; 0x28
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	40023800 	.word	0x40023800
 800a620:	40020000 	.word	0x40020000

0800a624 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff f81f 	bl	8009676 <USBH_LL_IncTimer>
}
 800a638:	bf00      	nop
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff f857 	bl	8009702 <USBH_LL_Connect>
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff f860 	bl	8009730 <USBH_LL_Disconnect>
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
 800a684:	4613      	mov	r3, r2
 800a686:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff f811 	bl	80096ca <USBH_LL_PortEnabled>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff f811 	bl	80096e6 <USBH_LL_PortDisabled>
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d12a      	bne.n	800a734 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a6de:	4a18      	ldr	r2, [pc, #96]	; (800a740 <USBH_LL_Init+0x74>)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a15      	ldr	r2, [pc, #84]	; (800a740 <USBH_LL_Init+0x74>)
 800a6ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a6ee:	4b14      	ldr	r3, [pc, #80]	; (800a740 <USBH_LL_Init+0x74>)
 800a6f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a6f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a6f6:	4b12      	ldr	r3, [pc, #72]	; (800a740 <USBH_LL_Init+0x74>)
 800a6f8:	2208      	movs	r2, #8
 800a6fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 800a6fc:	4b10      	ldr	r3, [pc, #64]	; (800a740 <USBH_LL_Init+0x74>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a702:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <USBH_LL_Init+0x74>)
 800a704:	2200      	movs	r2, #0
 800a706:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a708:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <USBH_LL_Init+0x74>)
 800a70a:	2202      	movs	r2, #2
 800a70c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a70e:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <USBH_LL_Init+0x74>)
 800a710:	2200      	movs	r2, #0
 800a712:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a714:	480a      	ldr	r0, [pc, #40]	; (800a740 <USBH_LL_Init+0x74>)
 800a716:	f7f9 faf1 	bl	8003cfc <HAL_HCD_Init>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a720:	f7f6 fe02 	bl	8001328 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a724:	4806      	ldr	r0, [pc, #24]	; (800a740 <USBH_LL_Init+0x74>)
 800a726:	f7f9 fed4 	bl	80044d2 <HAL_HCD_GetCurrentFrame>
 800a72a:	4603      	mov	r3, r0
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7fe ff92 	bl	8009658 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20013f2c 	.word	0x20013f2c

0800a744 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7f9 fe43 	bl	80043e6 <HAL_HCD_Start>
 800a760:	4603      	mov	r3, r0
 800a762:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a764:	7bfb      	ldrb	r3, [r7, #15]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 f95c 	bl	800aa24 <USBH_Get_USB_Status>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a770:	7bbb      	ldrb	r3, [r7, #14]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a790:	4618      	mov	r0, r3
 800a792:	f7f9 fe4b 	bl	800442c <HAL_HCD_Stop>
 800a796:	4603      	mov	r3, r0
 800a798:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 f941 	bl	800aa24 <USBH_Get_USB_Status>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7f9 fe93 	bl	80044ee <HAL_HCD_GetCurrentSpeed>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d00c      	beq.n	800a7e8 <USBH_LL_GetSpeed+0x38>
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d80d      	bhi.n	800a7ee <USBH_LL_GetSpeed+0x3e>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <USBH_LL_GetSpeed+0x2c>
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d003      	beq.n	800a7e2 <USBH_LL_GetSpeed+0x32>
 800a7da:	e008      	b.n	800a7ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e0:	e008      	b.n	800a7f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e6:	e005      	b.n	800a7f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ec:	e002      	b.n	800a7f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f2:	bf00      	nop
  }
  return  speed;
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a814:	4618      	mov	r0, r3
 800a816:	f7f9 fe26 	bl	8004466 <HAL_HCD_ResetPort>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	4618      	mov	r0, r3
 800a822:	f000 f8ff 	bl	800aa24 <USBH_Get_USB_Status>
 800a826:	4603      	mov	r3, r0
 800a828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a846:	78fa      	ldrb	r2, [r7, #3]
 800a848:	4611      	mov	r1, r2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f9 fe2d 	bl	80044aa <HAL_HCD_HC_GetXferCount>
 800a850:	4603      	mov	r3, r0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a85a:	b590      	push	{r4, r7, lr}
 800a85c:	b089      	sub	sp, #36	; 0x24
 800a85e:	af04      	add	r7, sp, #16
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	4608      	mov	r0, r1
 800a864:	4611      	mov	r1, r2
 800a866:	461a      	mov	r2, r3
 800a868:	4603      	mov	r3, r0
 800a86a:	70fb      	strb	r3, [r7, #3]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70bb      	strb	r3, [r7, #2]
 800a870:	4613      	mov	r3, r2
 800a872:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a882:	787c      	ldrb	r4, [r7, #1]
 800a884:	78ba      	ldrb	r2, [r7, #2]
 800a886:	78f9      	ldrb	r1, [r7, #3]
 800a888:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a88a:	9302      	str	r3, [sp, #8]
 800a88c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4623      	mov	r3, r4
 800a89a:	f7f9 fa91 	bl	8003dc0 <HAL_HCD_HC_Init>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 f8bd 	bl	800aa24 <USBH_Get_USB_Status>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd90      	pop	{r4, r7, pc}

0800a8b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8d2:	78fa      	ldrb	r2, [r7, #3]
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f9 fb01 	bl	8003ede <HAL_HCD_HC_Halt>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 f89e 	bl	800aa24 <USBH_Get_USB_Status>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a8f6:	b590      	push	{r4, r7, lr}
 800a8f8:	b089      	sub	sp, #36	; 0x24
 800a8fa:	af04      	add	r7, sp, #16
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	4608      	mov	r0, r1
 800a900:	4611      	mov	r1, r2
 800a902:	461a      	mov	r2, r3
 800a904:	4603      	mov	r3, r0
 800a906:	70fb      	strb	r3, [r7, #3]
 800a908:	460b      	mov	r3, r1
 800a90a:	70bb      	strb	r3, [r7, #2]
 800a90c:	4613      	mov	r3, r2
 800a90e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a91e:	787c      	ldrb	r4, [r7, #1]
 800a920:	78ba      	ldrb	r2, [r7, #2]
 800a922:	78f9      	ldrb	r1, [r7, #3]
 800a924:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a928:	9303      	str	r3, [sp, #12]
 800a92a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a92c:	9302      	str	r3, [sp, #8]
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	4623      	mov	r3, r4
 800a93a:	f7f9 faf3 	bl	8003f24 <HAL_HCD_HC_SubmitRequest>
 800a93e:	4603      	mov	r3, r0
 800a940:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	4618      	mov	r0, r3
 800a946:	f000 f86d 	bl	800aa24 <USBH_Get_USB_Status>
 800a94a:	4603      	mov	r3, r0
 800a94c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	bd90      	pop	{r4, r7, pc}

0800a958 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a96a:	78fa      	ldrb	r2, [r7, #3]
 800a96c:	4611      	mov	r1, r2
 800a96e:	4618      	mov	r0, r3
 800a970:	f7f9 fd87 	bl	8004482 <HAL_HCD_HC_GetURBState>
 800a974:	4603      	mov	r3, r0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a990:	2b01      	cmp	r3, #1
 800a992:	d103      	bne.n	800a99c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f870 	bl	800aa7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a99c:	20c8      	movs	r0, #200	; 0xc8
 800a99e:	f7f8 fa51 	bl	8002e44 <HAL_Delay>
  return USBH_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	212c      	movs	r1, #44	; 0x2c
 800a9ca:	fb01 f303 	mul.w	r3, r1, r3
 800a9ce:	4413      	add	r3, r2
 800a9d0:	333b      	adds	r3, #59	; 0x3b
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d009      	beq.n	800a9ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	212c      	movs	r1, #44	; 0x2c
 800a9de:	fb01 f303 	mul.w	r3, r1, r3
 800a9e2:	4413      	add	r3, r2
 800a9e4:	3354      	adds	r3, #84	; 0x54
 800a9e6:	78ba      	ldrb	r2, [r7, #2]
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	e008      	b.n	800a9fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	212c      	movs	r1, #44	; 0x2c
 800a9f2:	fb01 f303 	mul.w	r3, r1, r3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	3355      	adds	r3, #85	; 0x55
 800a9fa:	78ba      	ldrb	r2, [r7, #2]
 800a9fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7f8 fa15 	bl	8002e44 <HAL_Delay>
}
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
	...

0800aa24 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa32:	79fb      	ldrb	r3, [r7, #7]
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d817      	bhi.n	800aa68 <USBH_Get_USB_Status+0x44>
 800aa38:	a201      	add	r2, pc, #4	; (adr r2, 800aa40 <USBH_Get_USB_Status+0x1c>)
 800aa3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3e:	bf00      	nop
 800aa40:	0800aa51 	.word	0x0800aa51
 800aa44:	0800aa57 	.word	0x0800aa57
 800aa48:	0800aa5d 	.word	0x0800aa5d
 800aa4c:	0800aa63 	.word	0x0800aa63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73fb      	strb	r3, [r7, #15]
    break;
 800aa54:	e00b      	b.n	800aa6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800aa56:	2302      	movs	r3, #2
 800aa58:	73fb      	strb	r3, [r7, #15]
    break;
 800aa5a:	e008      	b.n	800aa6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa60:	e005      	b.n	800aa6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800aa62:	2302      	movs	r3, #2
 800aa64:	73fb      	strb	r3, [r7, #15]
    break;
 800aa66:	e002      	b.n	800aa6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aa68:	2302      	movs	r3, #2
 800aa6a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa6c:	bf00      	nop
  }
  return usb_status;
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	e001      	b.n	800aa9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800aa96:	2301      	movs	r3, #1
 800aa98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aaa2:	4803      	ldr	r0, [pc, #12]	; (800aab0 <MX_DriverVbusFS+0x34>)
 800aaa4:	f7f9 f8de 	bl	8003c64 <HAL_GPIO_WritePin>
}
 800aaa8:	bf00      	nop
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	40020000 	.word	0x40020000

0800aab4 <__errno>:
 800aab4:	4b01      	ldr	r3, [pc, #4]	; (800aabc <__errno+0x8>)
 800aab6:	6818      	ldr	r0, [r3, #0]
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	200001f8 	.word	0x200001f8

0800aac0 <__libc_init_array>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	4d0d      	ldr	r5, [pc, #52]	; (800aaf8 <__libc_init_array+0x38>)
 800aac4:	4c0d      	ldr	r4, [pc, #52]	; (800aafc <__libc_init_array+0x3c>)
 800aac6:	1b64      	subs	r4, r4, r5
 800aac8:	10a4      	asrs	r4, r4, #2
 800aaca:	2600      	movs	r6, #0
 800aacc:	42a6      	cmp	r6, r4
 800aace:	d109      	bne.n	800aae4 <__libc_init_array+0x24>
 800aad0:	4d0b      	ldr	r5, [pc, #44]	; (800ab00 <__libc_init_array+0x40>)
 800aad2:	4c0c      	ldr	r4, [pc, #48]	; (800ab04 <__libc_init_array+0x44>)
 800aad4:	f001 fa6a 	bl	800bfac <_init>
 800aad8:	1b64      	subs	r4, r4, r5
 800aada:	10a4      	asrs	r4, r4, #2
 800aadc:	2600      	movs	r6, #0
 800aade:	42a6      	cmp	r6, r4
 800aae0:	d105      	bne.n	800aaee <__libc_init_array+0x2e>
 800aae2:	bd70      	pop	{r4, r5, r6, pc}
 800aae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae8:	4798      	blx	r3
 800aaea:	3601      	adds	r6, #1
 800aaec:	e7ee      	b.n	800aacc <__libc_init_array+0xc>
 800aaee:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf2:	4798      	blx	r3
 800aaf4:	3601      	adds	r6, #1
 800aaf6:	e7f2      	b.n	800aade <__libc_init_array+0x1e>
 800aaf8:	080464b4 	.word	0x080464b4
 800aafc:	080464b4 	.word	0x080464b4
 800ab00:	080464b4 	.word	0x080464b4
 800ab04:	080464b8 	.word	0x080464b8

0800ab08 <malloc>:
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <malloc+0xc>)
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	f000 b88d 	b.w	800ac2c <_malloc_r>
 800ab12:	bf00      	nop
 800ab14:	200001f8 	.word	0x200001f8

0800ab18 <free>:
 800ab18:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <free+0xc>)
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	f000 b819 	b.w	800ab54 <_free_r>
 800ab22:	bf00      	nop
 800ab24:	200001f8 	.word	0x200001f8

0800ab28 <memcpy>:
 800ab28:	440a      	add	r2, r1
 800ab2a:	4291      	cmp	r1, r2
 800ab2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab30:	d100      	bne.n	800ab34 <memcpy+0xc>
 800ab32:	4770      	bx	lr
 800ab34:	b510      	push	{r4, lr}
 800ab36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab3e:	4291      	cmp	r1, r2
 800ab40:	d1f9      	bne.n	800ab36 <memcpy+0xe>
 800ab42:	bd10      	pop	{r4, pc}

0800ab44 <memset>:
 800ab44:	4402      	add	r2, r0
 800ab46:	4603      	mov	r3, r0
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d100      	bne.n	800ab4e <memset+0xa>
 800ab4c:	4770      	bx	lr
 800ab4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab52:	e7f9      	b.n	800ab48 <memset+0x4>

0800ab54 <_free_r>:
 800ab54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab56:	2900      	cmp	r1, #0
 800ab58:	d044      	beq.n	800abe4 <_free_r+0x90>
 800ab5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab5e:	9001      	str	r0, [sp, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f1a1 0404 	sub.w	r4, r1, #4
 800ab66:	bfb8      	it	lt
 800ab68:	18e4      	addlt	r4, r4, r3
 800ab6a:	f000 f99f 	bl	800aeac <__malloc_lock>
 800ab6e:	4a1e      	ldr	r2, [pc, #120]	; (800abe8 <_free_r+0x94>)
 800ab70:	9801      	ldr	r0, [sp, #4]
 800ab72:	6813      	ldr	r3, [r2, #0]
 800ab74:	b933      	cbnz	r3, 800ab84 <_free_r+0x30>
 800ab76:	6063      	str	r3, [r4, #4]
 800ab78:	6014      	str	r4, [r2, #0]
 800ab7a:	b003      	add	sp, #12
 800ab7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab80:	f000 b99a 	b.w	800aeb8 <__malloc_unlock>
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	d908      	bls.n	800ab9a <_free_r+0x46>
 800ab88:	6825      	ldr	r5, [r4, #0]
 800ab8a:	1961      	adds	r1, r4, r5
 800ab8c:	428b      	cmp	r3, r1
 800ab8e:	bf01      	itttt	eq
 800ab90:	6819      	ldreq	r1, [r3, #0]
 800ab92:	685b      	ldreq	r3, [r3, #4]
 800ab94:	1949      	addeq	r1, r1, r5
 800ab96:	6021      	streq	r1, [r4, #0]
 800ab98:	e7ed      	b.n	800ab76 <_free_r+0x22>
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	b10b      	cbz	r3, 800aba4 <_free_r+0x50>
 800aba0:	42a3      	cmp	r3, r4
 800aba2:	d9fa      	bls.n	800ab9a <_free_r+0x46>
 800aba4:	6811      	ldr	r1, [r2, #0]
 800aba6:	1855      	adds	r5, r2, r1
 800aba8:	42a5      	cmp	r5, r4
 800abaa:	d10b      	bne.n	800abc4 <_free_r+0x70>
 800abac:	6824      	ldr	r4, [r4, #0]
 800abae:	4421      	add	r1, r4
 800abb0:	1854      	adds	r4, r2, r1
 800abb2:	42a3      	cmp	r3, r4
 800abb4:	6011      	str	r1, [r2, #0]
 800abb6:	d1e0      	bne.n	800ab7a <_free_r+0x26>
 800abb8:	681c      	ldr	r4, [r3, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	6053      	str	r3, [r2, #4]
 800abbe:	4421      	add	r1, r4
 800abc0:	6011      	str	r1, [r2, #0]
 800abc2:	e7da      	b.n	800ab7a <_free_r+0x26>
 800abc4:	d902      	bls.n	800abcc <_free_r+0x78>
 800abc6:	230c      	movs	r3, #12
 800abc8:	6003      	str	r3, [r0, #0]
 800abca:	e7d6      	b.n	800ab7a <_free_r+0x26>
 800abcc:	6825      	ldr	r5, [r4, #0]
 800abce:	1961      	adds	r1, r4, r5
 800abd0:	428b      	cmp	r3, r1
 800abd2:	bf04      	itt	eq
 800abd4:	6819      	ldreq	r1, [r3, #0]
 800abd6:	685b      	ldreq	r3, [r3, #4]
 800abd8:	6063      	str	r3, [r4, #4]
 800abda:	bf04      	itt	eq
 800abdc:	1949      	addeq	r1, r1, r5
 800abde:	6021      	streq	r1, [r4, #0]
 800abe0:	6054      	str	r4, [r2, #4]
 800abe2:	e7ca      	b.n	800ab7a <_free_r+0x26>
 800abe4:	b003      	add	sp, #12
 800abe6:	bd30      	pop	{r4, r5, pc}
 800abe8:	20014230 	.word	0x20014230

0800abec <sbrk_aligned>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	4e0e      	ldr	r6, [pc, #56]	; (800ac28 <sbrk_aligned+0x3c>)
 800abf0:	460c      	mov	r4, r1
 800abf2:	6831      	ldr	r1, [r6, #0]
 800abf4:	4605      	mov	r5, r0
 800abf6:	b911      	cbnz	r1, 800abfe <sbrk_aligned+0x12>
 800abf8:	f000 f8f8 	bl	800adec <_sbrk_r>
 800abfc:	6030      	str	r0, [r6, #0]
 800abfe:	4621      	mov	r1, r4
 800ac00:	4628      	mov	r0, r5
 800ac02:	f000 f8f3 	bl	800adec <_sbrk_r>
 800ac06:	1c43      	adds	r3, r0, #1
 800ac08:	d00a      	beq.n	800ac20 <sbrk_aligned+0x34>
 800ac0a:	1cc4      	adds	r4, r0, #3
 800ac0c:	f024 0403 	bic.w	r4, r4, #3
 800ac10:	42a0      	cmp	r0, r4
 800ac12:	d007      	beq.n	800ac24 <sbrk_aligned+0x38>
 800ac14:	1a21      	subs	r1, r4, r0
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 f8e8 	bl	800adec <_sbrk_r>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	d101      	bne.n	800ac24 <sbrk_aligned+0x38>
 800ac20:	f04f 34ff 	mov.w	r4, #4294967295
 800ac24:	4620      	mov	r0, r4
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	20014234 	.word	0x20014234

0800ac2c <_malloc_r>:
 800ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac30:	1ccd      	adds	r5, r1, #3
 800ac32:	f025 0503 	bic.w	r5, r5, #3
 800ac36:	3508      	adds	r5, #8
 800ac38:	2d0c      	cmp	r5, #12
 800ac3a:	bf38      	it	cc
 800ac3c:	250c      	movcc	r5, #12
 800ac3e:	2d00      	cmp	r5, #0
 800ac40:	4607      	mov	r7, r0
 800ac42:	db01      	blt.n	800ac48 <_malloc_r+0x1c>
 800ac44:	42a9      	cmp	r1, r5
 800ac46:	d905      	bls.n	800ac54 <_malloc_r+0x28>
 800ac48:	230c      	movs	r3, #12
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	4630      	mov	r0, r6
 800ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac54:	4e2e      	ldr	r6, [pc, #184]	; (800ad10 <_malloc_r+0xe4>)
 800ac56:	f000 f929 	bl	800aeac <__malloc_lock>
 800ac5a:	6833      	ldr	r3, [r6, #0]
 800ac5c:	461c      	mov	r4, r3
 800ac5e:	bb34      	cbnz	r4, 800acae <_malloc_r+0x82>
 800ac60:	4629      	mov	r1, r5
 800ac62:	4638      	mov	r0, r7
 800ac64:	f7ff ffc2 	bl	800abec <sbrk_aligned>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	d14d      	bne.n	800ad0a <_malloc_r+0xde>
 800ac6e:	6834      	ldr	r4, [r6, #0]
 800ac70:	4626      	mov	r6, r4
 800ac72:	2e00      	cmp	r6, #0
 800ac74:	d140      	bne.n	800acf8 <_malloc_r+0xcc>
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	4631      	mov	r1, r6
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	eb04 0803 	add.w	r8, r4, r3
 800ac80:	f000 f8b4 	bl	800adec <_sbrk_r>
 800ac84:	4580      	cmp	r8, r0
 800ac86:	d13a      	bne.n	800acfe <_malloc_r+0xd2>
 800ac88:	6821      	ldr	r1, [r4, #0]
 800ac8a:	3503      	adds	r5, #3
 800ac8c:	1a6d      	subs	r5, r5, r1
 800ac8e:	f025 0503 	bic.w	r5, r5, #3
 800ac92:	3508      	adds	r5, #8
 800ac94:	2d0c      	cmp	r5, #12
 800ac96:	bf38      	it	cc
 800ac98:	250c      	movcc	r5, #12
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4638      	mov	r0, r7
 800ac9e:	f7ff ffa5 	bl	800abec <sbrk_aligned>
 800aca2:	3001      	adds	r0, #1
 800aca4:	d02b      	beq.n	800acfe <_malloc_r+0xd2>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	442b      	add	r3, r5
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	e00e      	b.n	800accc <_malloc_r+0xa0>
 800acae:	6822      	ldr	r2, [r4, #0]
 800acb0:	1b52      	subs	r2, r2, r5
 800acb2:	d41e      	bmi.n	800acf2 <_malloc_r+0xc6>
 800acb4:	2a0b      	cmp	r2, #11
 800acb6:	d916      	bls.n	800ace6 <_malloc_r+0xba>
 800acb8:	1961      	adds	r1, r4, r5
 800acba:	42a3      	cmp	r3, r4
 800acbc:	6025      	str	r5, [r4, #0]
 800acbe:	bf18      	it	ne
 800acc0:	6059      	strne	r1, [r3, #4]
 800acc2:	6863      	ldr	r3, [r4, #4]
 800acc4:	bf08      	it	eq
 800acc6:	6031      	streq	r1, [r6, #0]
 800acc8:	5162      	str	r2, [r4, r5]
 800acca:	604b      	str	r3, [r1, #4]
 800accc:	4638      	mov	r0, r7
 800acce:	f104 060b 	add.w	r6, r4, #11
 800acd2:	f000 f8f1 	bl	800aeb8 <__malloc_unlock>
 800acd6:	f026 0607 	bic.w	r6, r6, #7
 800acda:	1d23      	adds	r3, r4, #4
 800acdc:	1af2      	subs	r2, r6, r3
 800acde:	d0b6      	beq.n	800ac4e <_malloc_r+0x22>
 800ace0:	1b9b      	subs	r3, r3, r6
 800ace2:	50a3      	str	r3, [r4, r2]
 800ace4:	e7b3      	b.n	800ac4e <_malloc_r+0x22>
 800ace6:	6862      	ldr	r2, [r4, #4]
 800ace8:	42a3      	cmp	r3, r4
 800acea:	bf0c      	ite	eq
 800acec:	6032      	streq	r2, [r6, #0]
 800acee:	605a      	strne	r2, [r3, #4]
 800acf0:	e7ec      	b.n	800accc <_malloc_r+0xa0>
 800acf2:	4623      	mov	r3, r4
 800acf4:	6864      	ldr	r4, [r4, #4]
 800acf6:	e7b2      	b.n	800ac5e <_malloc_r+0x32>
 800acf8:	4634      	mov	r4, r6
 800acfa:	6876      	ldr	r6, [r6, #4]
 800acfc:	e7b9      	b.n	800ac72 <_malloc_r+0x46>
 800acfe:	230c      	movs	r3, #12
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	4638      	mov	r0, r7
 800ad04:	f000 f8d8 	bl	800aeb8 <__malloc_unlock>
 800ad08:	e7a1      	b.n	800ac4e <_malloc_r+0x22>
 800ad0a:	6025      	str	r5, [r4, #0]
 800ad0c:	e7de      	b.n	800accc <_malloc_r+0xa0>
 800ad0e:	bf00      	nop
 800ad10:	20014230 	.word	0x20014230

0800ad14 <srand>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <srand+0x44>)
 800ad18:	681d      	ldr	r5, [r3, #0]
 800ad1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	b9b3      	cbnz	r3, 800ad4e <srand+0x3a>
 800ad20:	2018      	movs	r0, #24
 800ad22:	f7ff fef1 	bl	800ab08 <malloc>
 800ad26:	4602      	mov	r2, r0
 800ad28:	63a8      	str	r0, [r5, #56]	; 0x38
 800ad2a:	b920      	cbnz	r0, 800ad36 <srand+0x22>
 800ad2c:	4b0b      	ldr	r3, [pc, #44]	; (800ad5c <srand+0x48>)
 800ad2e:	480c      	ldr	r0, [pc, #48]	; (800ad60 <srand+0x4c>)
 800ad30:	2142      	movs	r1, #66	; 0x42
 800ad32:	f000 f88b 	bl	800ae4c <__assert_func>
 800ad36:	490b      	ldr	r1, [pc, #44]	; (800ad64 <srand+0x50>)
 800ad38:	4b0b      	ldr	r3, [pc, #44]	; (800ad68 <srand+0x54>)
 800ad3a:	e9c0 1300 	strd	r1, r3, [r0]
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <srand+0x58>)
 800ad40:	6083      	str	r3, [r0, #8]
 800ad42:	230b      	movs	r3, #11
 800ad44:	8183      	strh	r3, [r0, #12]
 800ad46:	2100      	movs	r1, #0
 800ad48:	2001      	movs	r0, #1
 800ad4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ad4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ad50:	2200      	movs	r2, #0
 800ad52:	611c      	str	r4, [r3, #16]
 800ad54:	615a      	str	r2, [r3, #20]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	200001f8 	.word	0x200001f8
 800ad5c:	08046368 	.word	0x08046368
 800ad60:	0804637f 	.word	0x0804637f
 800ad64:	abcd330e 	.word	0xabcd330e
 800ad68:	e66d1234 	.word	0xe66d1234
 800ad6c:	0005deec 	.word	0x0005deec

0800ad70 <rand>:
 800ad70:	4b16      	ldr	r3, [pc, #88]	; (800adcc <rand+0x5c>)
 800ad72:	b510      	push	{r4, lr}
 800ad74:	681c      	ldr	r4, [r3, #0]
 800ad76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad78:	b9b3      	cbnz	r3, 800ada8 <rand+0x38>
 800ad7a:	2018      	movs	r0, #24
 800ad7c:	f7ff fec4 	bl	800ab08 <malloc>
 800ad80:	63a0      	str	r0, [r4, #56]	; 0x38
 800ad82:	b928      	cbnz	r0, 800ad90 <rand+0x20>
 800ad84:	4602      	mov	r2, r0
 800ad86:	4b12      	ldr	r3, [pc, #72]	; (800add0 <rand+0x60>)
 800ad88:	4812      	ldr	r0, [pc, #72]	; (800add4 <rand+0x64>)
 800ad8a:	214e      	movs	r1, #78	; 0x4e
 800ad8c:	f000 f85e 	bl	800ae4c <__assert_func>
 800ad90:	4a11      	ldr	r2, [pc, #68]	; (800add8 <rand+0x68>)
 800ad92:	4b12      	ldr	r3, [pc, #72]	; (800addc <rand+0x6c>)
 800ad94:	e9c0 2300 	strd	r2, r3, [r0]
 800ad98:	4b11      	ldr	r3, [pc, #68]	; (800ade0 <rand+0x70>)
 800ad9a:	6083      	str	r3, [r0, #8]
 800ad9c:	230b      	movs	r3, #11
 800ad9e:	8183      	strh	r3, [r0, #12]
 800ada0:	2201      	movs	r2, #1
 800ada2:	2300      	movs	r3, #0
 800ada4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ada8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800adaa:	4a0e      	ldr	r2, [pc, #56]	; (800ade4 <rand+0x74>)
 800adac:	6920      	ldr	r0, [r4, #16]
 800adae:	6963      	ldr	r3, [r4, #20]
 800adb0:	490d      	ldr	r1, [pc, #52]	; (800ade8 <rand+0x78>)
 800adb2:	4342      	muls	r2, r0
 800adb4:	fb01 2203 	mla	r2, r1, r3, r2
 800adb8:	fba0 0101 	umull	r0, r1, r0, r1
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	eb42 0001 	adc.w	r0, r2, r1
 800adc2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800adc6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800adca:	bd10      	pop	{r4, pc}
 800adcc:	200001f8 	.word	0x200001f8
 800add0:	08046368 	.word	0x08046368
 800add4:	0804637f 	.word	0x0804637f
 800add8:	abcd330e 	.word	0xabcd330e
 800addc:	e66d1234 	.word	0xe66d1234
 800ade0:	0005deec 	.word	0x0005deec
 800ade4:	5851f42d 	.word	0x5851f42d
 800ade8:	4c957f2d 	.word	0x4c957f2d

0800adec <_sbrk_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d06      	ldr	r5, [pc, #24]	; (800ae08 <_sbrk_r+0x1c>)
 800adf0:	2300      	movs	r3, #0
 800adf2:	4604      	mov	r4, r0
 800adf4:	4608      	mov	r0, r1
 800adf6:	602b      	str	r3, [r5, #0]
 800adf8:	f7f6 fcac 	bl	8001754 <_sbrk>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_sbrk_r+0x1a>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_sbrk_r+0x1a>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	20014238 	.word	0x20014238

0800ae0c <siprintf>:
 800ae0c:	b40e      	push	{r1, r2, r3}
 800ae0e:	b500      	push	{lr}
 800ae10:	b09c      	sub	sp, #112	; 0x70
 800ae12:	ab1d      	add	r3, sp, #116	; 0x74
 800ae14:	9002      	str	r0, [sp, #8]
 800ae16:	9006      	str	r0, [sp, #24]
 800ae18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae1c:	4809      	ldr	r0, [pc, #36]	; (800ae44 <siprintf+0x38>)
 800ae1e:	9107      	str	r1, [sp, #28]
 800ae20:	9104      	str	r1, [sp, #16]
 800ae22:	4909      	ldr	r1, [pc, #36]	; (800ae48 <siprintf+0x3c>)
 800ae24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae28:	9105      	str	r1, [sp, #20]
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	a902      	add	r1, sp, #8
 800ae30:	f000 f8a4 	bl	800af7c <_svfiprintf_r>
 800ae34:	9b02      	ldr	r3, [sp, #8]
 800ae36:	2200      	movs	r2, #0
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	b01c      	add	sp, #112	; 0x70
 800ae3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae40:	b003      	add	sp, #12
 800ae42:	4770      	bx	lr
 800ae44:	200001f8 	.word	0x200001f8
 800ae48:	ffff0208 	.word	0xffff0208

0800ae4c <__assert_func>:
 800ae4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae4e:	4614      	mov	r4, r2
 800ae50:	461a      	mov	r2, r3
 800ae52:	4b09      	ldr	r3, [pc, #36]	; (800ae78 <__assert_func+0x2c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4605      	mov	r5, r0
 800ae58:	68d8      	ldr	r0, [r3, #12]
 800ae5a:	b14c      	cbz	r4, 800ae70 <__assert_func+0x24>
 800ae5c:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <__assert_func+0x30>)
 800ae5e:	9100      	str	r1, [sp, #0]
 800ae60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae64:	4906      	ldr	r1, [pc, #24]	; (800ae80 <__assert_func+0x34>)
 800ae66:	462b      	mov	r3, r5
 800ae68:	f000 f80e 	bl	800ae88 <fiprintf>
 800ae6c:	f000 fd34 	bl	800b8d8 <abort>
 800ae70:	4b04      	ldr	r3, [pc, #16]	; (800ae84 <__assert_func+0x38>)
 800ae72:	461c      	mov	r4, r3
 800ae74:	e7f3      	b.n	800ae5e <__assert_func+0x12>
 800ae76:	bf00      	nop
 800ae78:	200001f8 	.word	0x200001f8
 800ae7c:	080463da 	.word	0x080463da
 800ae80:	080463e7 	.word	0x080463e7
 800ae84:	08046415 	.word	0x08046415

0800ae88 <fiprintf>:
 800ae88:	b40e      	push	{r1, r2, r3}
 800ae8a:	b503      	push	{r0, r1, lr}
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	ab03      	add	r3, sp, #12
 800ae90:	4805      	ldr	r0, [pc, #20]	; (800aea8 <fiprintf+0x20>)
 800ae92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae96:	6800      	ldr	r0, [r0, #0]
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	f000 f999 	bl	800b1d0 <_vfiprintf_r>
 800ae9e:	b002      	add	sp, #8
 800aea0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea4:	b003      	add	sp, #12
 800aea6:	4770      	bx	lr
 800aea8:	200001f8 	.word	0x200001f8

0800aeac <__malloc_lock>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__malloc_lock+0x8>)
 800aeae:	f000 bed3 	b.w	800bc58 <__retarget_lock_acquire_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	2001423c 	.word	0x2001423c

0800aeb8 <__malloc_unlock>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__malloc_unlock+0x8>)
 800aeba:	f000 bece 	b.w	800bc5a <__retarget_lock_release_recursive>
 800aebe:	bf00      	nop
 800aec0:	2001423c 	.word	0x2001423c

0800aec4 <__ssputs_r>:
 800aec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec8:	688e      	ldr	r6, [r1, #8]
 800aeca:	429e      	cmp	r6, r3
 800aecc:	4682      	mov	sl, r0
 800aece:	460c      	mov	r4, r1
 800aed0:	4690      	mov	r8, r2
 800aed2:	461f      	mov	r7, r3
 800aed4:	d838      	bhi.n	800af48 <__ssputs_r+0x84>
 800aed6:	898a      	ldrh	r2, [r1, #12]
 800aed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aedc:	d032      	beq.n	800af44 <__ssputs_r+0x80>
 800aede:	6825      	ldr	r5, [r4, #0]
 800aee0:	6909      	ldr	r1, [r1, #16]
 800aee2:	eba5 0901 	sub.w	r9, r5, r1
 800aee6:	6965      	ldr	r5, [r4, #20]
 800aee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aef0:	3301      	adds	r3, #1
 800aef2:	444b      	add	r3, r9
 800aef4:	106d      	asrs	r5, r5, #1
 800aef6:	429d      	cmp	r5, r3
 800aef8:	bf38      	it	cc
 800aefa:	461d      	movcc	r5, r3
 800aefc:	0553      	lsls	r3, r2, #21
 800aefe:	d531      	bpl.n	800af64 <__ssputs_r+0xa0>
 800af00:	4629      	mov	r1, r5
 800af02:	f7ff fe93 	bl	800ac2c <_malloc_r>
 800af06:	4606      	mov	r6, r0
 800af08:	b950      	cbnz	r0, 800af20 <__ssputs_r+0x5c>
 800af0a:	230c      	movs	r3, #12
 800af0c:	f8ca 3000 	str.w	r3, [sl]
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	f04f 30ff 	mov.w	r0, #4294967295
 800af1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af20:	6921      	ldr	r1, [r4, #16]
 800af22:	464a      	mov	r2, r9
 800af24:	f7ff fe00 	bl	800ab28 <memcpy>
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	6126      	str	r6, [r4, #16]
 800af36:	6165      	str	r5, [r4, #20]
 800af38:	444e      	add	r6, r9
 800af3a:	eba5 0509 	sub.w	r5, r5, r9
 800af3e:	6026      	str	r6, [r4, #0]
 800af40:	60a5      	str	r5, [r4, #8]
 800af42:	463e      	mov	r6, r7
 800af44:	42be      	cmp	r6, r7
 800af46:	d900      	bls.n	800af4a <__ssputs_r+0x86>
 800af48:	463e      	mov	r6, r7
 800af4a:	6820      	ldr	r0, [r4, #0]
 800af4c:	4632      	mov	r2, r6
 800af4e:	4641      	mov	r1, r8
 800af50:	f000 feea 	bl	800bd28 <memmove>
 800af54:	68a3      	ldr	r3, [r4, #8]
 800af56:	1b9b      	subs	r3, r3, r6
 800af58:	60a3      	str	r3, [r4, #8]
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	4433      	add	r3, r6
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	2000      	movs	r0, #0
 800af62:	e7db      	b.n	800af1c <__ssputs_r+0x58>
 800af64:	462a      	mov	r2, r5
 800af66:	f000 fef9 	bl	800bd5c <_realloc_r>
 800af6a:	4606      	mov	r6, r0
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d1e1      	bne.n	800af34 <__ssputs_r+0x70>
 800af70:	6921      	ldr	r1, [r4, #16]
 800af72:	4650      	mov	r0, sl
 800af74:	f7ff fdee 	bl	800ab54 <_free_r>
 800af78:	e7c7      	b.n	800af0a <__ssputs_r+0x46>
	...

0800af7c <_svfiprintf_r>:
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	4698      	mov	r8, r3
 800af82:	898b      	ldrh	r3, [r1, #12]
 800af84:	061b      	lsls	r3, r3, #24
 800af86:	b09d      	sub	sp, #116	; 0x74
 800af88:	4607      	mov	r7, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	4614      	mov	r4, r2
 800af8e:	d50e      	bpl.n	800afae <_svfiprintf_r+0x32>
 800af90:	690b      	ldr	r3, [r1, #16]
 800af92:	b963      	cbnz	r3, 800afae <_svfiprintf_r+0x32>
 800af94:	2140      	movs	r1, #64	; 0x40
 800af96:	f7ff fe49 	bl	800ac2c <_malloc_r>
 800af9a:	6028      	str	r0, [r5, #0]
 800af9c:	6128      	str	r0, [r5, #16]
 800af9e:	b920      	cbnz	r0, 800afaa <_svfiprintf_r+0x2e>
 800afa0:	230c      	movs	r3, #12
 800afa2:	603b      	str	r3, [r7, #0]
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	e0d1      	b.n	800b14e <_svfiprintf_r+0x1d2>
 800afaa:	2340      	movs	r3, #64	; 0x40
 800afac:	616b      	str	r3, [r5, #20]
 800afae:	2300      	movs	r3, #0
 800afb0:	9309      	str	r3, [sp, #36]	; 0x24
 800afb2:	2320      	movs	r3, #32
 800afb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800afbc:	2330      	movs	r3, #48	; 0x30
 800afbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b168 <_svfiprintf_r+0x1ec>
 800afc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afc6:	f04f 0901 	mov.w	r9, #1
 800afca:	4623      	mov	r3, r4
 800afcc:	469a      	mov	sl, r3
 800afce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afd2:	b10a      	cbz	r2, 800afd8 <_svfiprintf_r+0x5c>
 800afd4:	2a25      	cmp	r2, #37	; 0x25
 800afd6:	d1f9      	bne.n	800afcc <_svfiprintf_r+0x50>
 800afd8:	ebba 0b04 	subs.w	fp, sl, r4
 800afdc:	d00b      	beq.n	800aff6 <_svfiprintf_r+0x7a>
 800afde:	465b      	mov	r3, fp
 800afe0:	4622      	mov	r2, r4
 800afe2:	4629      	mov	r1, r5
 800afe4:	4638      	mov	r0, r7
 800afe6:	f7ff ff6d 	bl	800aec4 <__ssputs_r>
 800afea:	3001      	adds	r0, #1
 800afec:	f000 80aa 	beq.w	800b144 <_svfiprintf_r+0x1c8>
 800aff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aff2:	445a      	add	r2, fp
 800aff4:	9209      	str	r2, [sp, #36]	; 0x24
 800aff6:	f89a 3000 	ldrb.w	r3, [sl]
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 80a2 	beq.w	800b144 <_svfiprintf_r+0x1c8>
 800b000:	2300      	movs	r3, #0
 800b002:	f04f 32ff 	mov.w	r2, #4294967295
 800b006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b00a:	f10a 0a01 	add.w	sl, sl, #1
 800b00e:	9304      	str	r3, [sp, #16]
 800b010:	9307      	str	r3, [sp, #28]
 800b012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b016:	931a      	str	r3, [sp, #104]	; 0x68
 800b018:	4654      	mov	r4, sl
 800b01a:	2205      	movs	r2, #5
 800b01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b020:	4851      	ldr	r0, [pc, #324]	; (800b168 <_svfiprintf_r+0x1ec>)
 800b022:	f7f5 f8dd 	bl	80001e0 <memchr>
 800b026:	9a04      	ldr	r2, [sp, #16]
 800b028:	b9d8      	cbnz	r0, 800b062 <_svfiprintf_r+0xe6>
 800b02a:	06d0      	lsls	r0, r2, #27
 800b02c:	bf44      	itt	mi
 800b02e:	2320      	movmi	r3, #32
 800b030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b034:	0711      	lsls	r1, r2, #28
 800b036:	bf44      	itt	mi
 800b038:	232b      	movmi	r3, #43	; 0x2b
 800b03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b03e:	f89a 3000 	ldrb.w	r3, [sl]
 800b042:	2b2a      	cmp	r3, #42	; 0x2a
 800b044:	d015      	beq.n	800b072 <_svfiprintf_r+0xf6>
 800b046:	9a07      	ldr	r2, [sp, #28]
 800b048:	4654      	mov	r4, sl
 800b04a:	2000      	movs	r0, #0
 800b04c:	f04f 0c0a 	mov.w	ip, #10
 800b050:	4621      	mov	r1, r4
 800b052:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b056:	3b30      	subs	r3, #48	; 0x30
 800b058:	2b09      	cmp	r3, #9
 800b05a:	d94e      	bls.n	800b0fa <_svfiprintf_r+0x17e>
 800b05c:	b1b0      	cbz	r0, 800b08c <_svfiprintf_r+0x110>
 800b05e:	9207      	str	r2, [sp, #28]
 800b060:	e014      	b.n	800b08c <_svfiprintf_r+0x110>
 800b062:	eba0 0308 	sub.w	r3, r0, r8
 800b066:	fa09 f303 	lsl.w	r3, r9, r3
 800b06a:	4313      	orrs	r3, r2
 800b06c:	9304      	str	r3, [sp, #16]
 800b06e:	46a2      	mov	sl, r4
 800b070:	e7d2      	b.n	800b018 <_svfiprintf_r+0x9c>
 800b072:	9b03      	ldr	r3, [sp, #12]
 800b074:	1d19      	adds	r1, r3, #4
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	9103      	str	r1, [sp, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bfbb      	ittet	lt
 800b07e:	425b      	neglt	r3, r3
 800b080:	f042 0202 	orrlt.w	r2, r2, #2
 800b084:	9307      	strge	r3, [sp, #28]
 800b086:	9307      	strlt	r3, [sp, #28]
 800b088:	bfb8      	it	lt
 800b08a:	9204      	strlt	r2, [sp, #16]
 800b08c:	7823      	ldrb	r3, [r4, #0]
 800b08e:	2b2e      	cmp	r3, #46	; 0x2e
 800b090:	d10c      	bne.n	800b0ac <_svfiprintf_r+0x130>
 800b092:	7863      	ldrb	r3, [r4, #1]
 800b094:	2b2a      	cmp	r3, #42	; 0x2a
 800b096:	d135      	bne.n	800b104 <_svfiprintf_r+0x188>
 800b098:	9b03      	ldr	r3, [sp, #12]
 800b09a:	1d1a      	adds	r2, r3, #4
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	9203      	str	r2, [sp, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	bfb8      	it	lt
 800b0a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0a8:	3402      	adds	r4, #2
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b178 <_svfiprintf_r+0x1fc>
 800b0b0:	7821      	ldrb	r1, [r4, #0]
 800b0b2:	2203      	movs	r2, #3
 800b0b4:	4650      	mov	r0, sl
 800b0b6:	f7f5 f893 	bl	80001e0 <memchr>
 800b0ba:	b140      	cbz	r0, 800b0ce <_svfiprintf_r+0x152>
 800b0bc:	2340      	movs	r3, #64	; 0x40
 800b0be:	eba0 000a 	sub.w	r0, r0, sl
 800b0c2:	fa03 f000 	lsl.w	r0, r3, r0
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	4303      	orrs	r3, r0
 800b0ca:	3401      	adds	r4, #1
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d2:	4826      	ldr	r0, [pc, #152]	; (800b16c <_svfiprintf_r+0x1f0>)
 800b0d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0d8:	2206      	movs	r2, #6
 800b0da:	f7f5 f881 	bl	80001e0 <memchr>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d038      	beq.n	800b154 <_svfiprintf_r+0x1d8>
 800b0e2:	4b23      	ldr	r3, [pc, #140]	; (800b170 <_svfiprintf_r+0x1f4>)
 800b0e4:	bb1b      	cbnz	r3, 800b12e <_svfiprintf_r+0x1b2>
 800b0e6:	9b03      	ldr	r3, [sp, #12]
 800b0e8:	3307      	adds	r3, #7
 800b0ea:	f023 0307 	bic.w	r3, r3, #7
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	9303      	str	r3, [sp, #12]
 800b0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f4:	4433      	add	r3, r6
 800b0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f8:	e767      	b.n	800afca <_svfiprintf_r+0x4e>
 800b0fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0fe:	460c      	mov	r4, r1
 800b100:	2001      	movs	r0, #1
 800b102:	e7a5      	b.n	800b050 <_svfiprintf_r+0xd4>
 800b104:	2300      	movs	r3, #0
 800b106:	3401      	adds	r4, #1
 800b108:	9305      	str	r3, [sp, #20]
 800b10a:	4619      	mov	r1, r3
 800b10c:	f04f 0c0a 	mov.w	ip, #10
 800b110:	4620      	mov	r0, r4
 800b112:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b116:	3a30      	subs	r2, #48	; 0x30
 800b118:	2a09      	cmp	r2, #9
 800b11a:	d903      	bls.n	800b124 <_svfiprintf_r+0x1a8>
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0c5      	beq.n	800b0ac <_svfiprintf_r+0x130>
 800b120:	9105      	str	r1, [sp, #20]
 800b122:	e7c3      	b.n	800b0ac <_svfiprintf_r+0x130>
 800b124:	fb0c 2101 	mla	r1, ip, r1, r2
 800b128:	4604      	mov	r4, r0
 800b12a:	2301      	movs	r3, #1
 800b12c:	e7f0      	b.n	800b110 <_svfiprintf_r+0x194>
 800b12e:	ab03      	add	r3, sp, #12
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	462a      	mov	r2, r5
 800b134:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <_svfiprintf_r+0x1f8>)
 800b136:	a904      	add	r1, sp, #16
 800b138:	4638      	mov	r0, r7
 800b13a:	f3af 8000 	nop.w
 800b13e:	1c42      	adds	r2, r0, #1
 800b140:	4606      	mov	r6, r0
 800b142:	d1d6      	bne.n	800b0f2 <_svfiprintf_r+0x176>
 800b144:	89ab      	ldrh	r3, [r5, #12]
 800b146:	065b      	lsls	r3, r3, #25
 800b148:	f53f af2c 	bmi.w	800afa4 <_svfiprintf_r+0x28>
 800b14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b14e:	b01d      	add	sp, #116	; 0x74
 800b150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b154:	ab03      	add	r3, sp, #12
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	462a      	mov	r2, r5
 800b15a:	4b06      	ldr	r3, [pc, #24]	; (800b174 <_svfiprintf_r+0x1f8>)
 800b15c:	a904      	add	r1, sp, #16
 800b15e:	4638      	mov	r0, r7
 800b160:	f000 f9d4 	bl	800b50c <_printf_i>
 800b164:	e7eb      	b.n	800b13e <_svfiprintf_r+0x1c2>
 800b166:	bf00      	nop
 800b168:	08046416 	.word	0x08046416
 800b16c:	08046420 	.word	0x08046420
 800b170:	00000000 	.word	0x00000000
 800b174:	0800aec5 	.word	0x0800aec5
 800b178:	0804641c 	.word	0x0804641c

0800b17c <__sfputc_r>:
 800b17c:	6893      	ldr	r3, [r2, #8]
 800b17e:	3b01      	subs	r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	b410      	push	{r4}
 800b184:	6093      	str	r3, [r2, #8]
 800b186:	da08      	bge.n	800b19a <__sfputc_r+0x1e>
 800b188:	6994      	ldr	r4, [r2, #24]
 800b18a:	42a3      	cmp	r3, r4
 800b18c:	db01      	blt.n	800b192 <__sfputc_r+0x16>
 800b18e:	290a      	cmp	r1, #10
 800b190:	d103      	bne.n	800b19a <__sfputc_r+0x1e>
 800b192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b196:	f000 badf 	b.w	800b758 <__swbuf_r>
 800b19a:	6813      	ldr	r3, [r2, #0]
 800b19c:	1c58      	adds	r0, r3, #1
 800b19e:	6010      	str	r0, [r2, #0]
 800b1a0:	7019      	strb	r1, [r3, #0]
 800b1a2:	4608      	mov	r0, r1
 800b1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <__sfputs_r>:
 800b1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	460f      	mov	r7, r1
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	18d5      	adds	r5, r2, r3
 800b1b4:	42ac      	cmp	r4, r5
 800b1b6:	d101      	bne.n	800b1bc <__sfputs_r+0x12>
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	e007      	b.n	800b1cc <__sfputs_r+0x22>
 800b1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c0:	463a      	mov	r2, r7
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f7ff ffda 	bl	800b17c <__sfputc_r>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	d1f3      	bne.n	800b1b4 <__sfputs_r+0xa>
 800b1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1d0 <_vfiprintf_r>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	460d      	mov	r5, r1
 800b1d6:	b09d      	sub	sp, #116	; 0x74
 800b1d8:	4614      	mov	r4, r2
 800b1da:	4698      	mov	r8, r3
 800b1dc:	4606      	mov	r6, r0
 800b1de:	b118      	cbz	r0, 800b1e8 <_vfiprintf_r+0x18>
 800b1e0:	6983      	ldr	r3, [r0, #24]
 800b1e2:	b90b      	cbnz	r3, 800b1e8 <_vfiprintf_r+0x18>
 800b1e4:	f000 fc9a 	bl	800bb1c <__sinit>
 800b1e8:	4b89      	ldr	r3, [pc, #548]	; (800b410 <_vfiprintf_r+0x240>)
 800b1ea:	429d      	cmp	r5, r3
 800b1ec:	d11b      	bne.n	800b226 <_vfiprintf_r+0x56>
 800b1ee:	6875      	ldr	r5, [r6, #4]
 800b1f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1f2:	07d9      	lsls	r1, r3, #31
 800b1f4:	d405      	bmi.n	800b202 <_vfiprintf_r+0x32>
 800b1f6:	89ab      	ldrh	r3, [r5, #12]
 800b1f8:	059a      	lsls	r2, r3, #22
 800b1fa:	d402      	bmi.n	800b202 <_vfiprintf_r+0x32>
 800b1fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1fe:	f000 fd2b 	bl	800bc58 <__retarget_lock_acquire_recursive>
 800b202:	89ab      	ldrh	r3, [r5, #12]
 800b204:	071b      	lsls	r3, r3, #28
 800b206:	d501      	bpl.n	800b20c <_vfiprintf_r+0x3c>
 800b208:	692b      	ldr	r3, [r5, #16]
 800b20a:	b9eb      	cbnz	r3, 800b248 <_vfiprintf_r+0x78>
 800b20c:	4629      	mov	r1, r5
 800b20e:	4630      	mov	r0, r6
 800b210:	f000 faf4 	bl	800b7fc <__swsetup_r>
 800b214:	b1c0      	cbz	r0, 800b248 <_vfiprintf_r+0x78>
 800b216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b218:	07dc      	lsls	r4, r3, #31
 800b21a:	d50e      	bpl.n	800b23a <_vfiprintf_r+0x6a>
 800b21c:	f04f 30ff 	mov.w	r0, #4294967295
 800b220:	b01d      	add	sp, #116	; 0x74
 800b222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b226:	4b7b      	ldr	r3, [pc, #492]	; (800b414 <_vfiprintf_r+0x244>)
 800b228:	429d      	cmp	r5, r3
 800b22a:	d101      	bne.n	800b230 <_vfiprintf_r+0x60>
 800b22c:	68b5      	ldr	r5, [r6, #8]
 800b22e:	e7df      	b.n	800b1f0 <_vfiprintf_r+0x20>
 800b230:	4b79      	ldr	r3, [pc, #484]	; (800b418 <_vfiprintf_r+0x248>)
 800b232:	429d      	cmp	r5, r3
 800b234:	bf08      	it	eq
 800b236:	68f5      	ldreq	r5, [r6, #12]
 800b238:	e7da      	b.n	800b1f0 <_vfiprintf_r+0x20>
 800b23a:	89ab      	ldrh	r3, [r5, #12]
 800b23c:	0598      	lsls	r0, r3, #22
 800b23e:	d4ed      	bmi.n	800b21c <_vfiprintf_r+0x4c>
 800b240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b242:	f000 fd0a 	bl	800bc5a <__retarget_lock_release_recursive>
 800b246:	e7e9      	b.n	800b21c <_vfiprintf_r+0x4c>
 800b248:	2300      	movs	r3, #0
 800b24a:	9309      	str	r3, [sp, #36]	; 0x24
 800b24c:	2320      	movs	r3, #32
 800b24e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b252:	f8cd 800c 	str.w	r8, [sp, #12]
 800b256:	2330      	movs	r3, #48	; 0x30
 800b258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b41c <_vfiprintf_r+0x24c>
 800b25c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b260:	f04f 0901 	mov.w	r9, #1
 800b264:	4623      	mov	r3, r4
 800b266:	469a      	mov	sl, r3
 800b268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b26c:	b10a      	cbz	r2, 800b272 <_vfiprintf_r+0xa2>
 800b26e:	2a25      	cmp	r2, #37	; 0x25
 800b270:	d1f9      	bne.n	800b266 <_vfiprintf_r+0x96>
 800b272:	ebba 0b04 	subs.w	fp, sl, r4
 800b276:	d00b      	beq.n	800b290 <_vfiprintf_r+0xc0>
 800b278:	465b      	mov	r3, fp
 800b27a:	4622      	mov	r2, r4
 800b27c:	4629      	mov	r1, r5
 800b27e:	4630      	mov	r0, r6
 800b280:	f7ff ff93 	bl	800b1aa <__sfputs_r>
 800b284:	3001      	adds	r0, #1
 800b286:	f000 80aa 	beq.w	800b3de <_vfiprintf_r+0x20e>
 800b28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b28c:	445a      	add	r2, fp
 800b28e:	9209      	str	r2, [sp, #36]	; 0x24
 800b290:	f89a 3000 	ldrb.w	r3, [sl]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 80a2 	beq.w	800b3de <_vfiprintf_r+0x20e>
 800b29a:	2300      	movs	r3, #0
 800b29c:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a4:	f10a 0a01 	add.w	sl, sl, #1
 800b2a8:	9304      	str	r3, [sp, #16]
 800b2aa:	9307      	str	r3, [sp, #28]
 800b2ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b2b2:	4654      	mov	r4, sl
 800b2b4:	2205      	movs	r2, #5
 800b2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ba:	4858      	ldr	r0, [pc, #352]	; (800b41c <_vfiprintf_r+0x24c>)
 800b2bc:	f7f4 ff90 	bl	80001e0 <memchr>
 800b2c0:	9a04      	ldr	r2, [sp, #16]
 800b2c2:	b9d8      	cbnz	r0, 800b2fc <_vfiprintf_r+0x12c>
 800b2c4:	06d1      	lsls	r1, r2, #27
 800b2c6:	bf44      	itt	mi
 800b2c8:	2320      	movmi	r3, #32
 800b2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ce:	0713      	lsls	r3, r2, #28
 800b2d0:	bf44      	itt	mi
 800b2d2:	232b      	movmi	r3, #43	; 0x2b
 800b2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b2de:	d015      	beq.n	800b30c <_vfiprintf_r+0x13c>
 800b2e0:	9a07      	ldr	r2, [sp, #28]
 800b2e2:	4654      	mov	r4, sl
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	f04f 0c0a 	mov.w	ip, #10
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f0:	3b30      	subs	r3, #48	; 0x30
 800b2f2:	2b09      	cmp	r3, #9
 800b2f4:	d94e      	bls.n	800b394 <_vfiprintf_r+0x1c4>
 800b2f6:	b1b0      	cbz	r0, 800b326 <_vfiprintf_r+0x156>
 800b2f8:	9207      	str	r2, [sp, #28]
 800b2fa:	e014      	b.n	800b326 <_vfiprintf_r+0x156>
 800b2fc:	eba0 0308 	sub.w	r3, r0, r8
 800b300:	fa09 f303 	lsl.w	r3, r9, r3
 800b304:	4313      	orrs	r3, r2
 800b306:	9304      	str	r3, [sp, #16]
 800b308:	46a2      	mov	sl, r4
 800b30a:	e7d2      	b.n	800b2b2 <_vfiprintf_r+0xe2>
 800b30c:	9b03      	ldr	r3, [sp, #12]
 800b30e:	1d19      	adds	r1, r3, #4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	9103      	str	r1, [sp, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	bfbb      	ittet	lt
 800b318:	425b      	neglt	r3, r3
 800b31a:	f042 0202 	orrlt.w	r2, r2, #2
 800b31e:	9307      	strge	r3, [sp, #28]
 800b320:	9307      	strlt	r3, [sp, #28]
 800b322:	bfb8      	it	lt
 800b324:	9204      	strlt	r2, [sp, #16]
 800b326:	7823      	ldrb	r3, [r4, #0]
 800b328:	2b2e      	cmp	r3, #46	; 0x2e
 800b32a:	d10c      	bne.n	800b346 <_vfiprintf_r+0x176>
 800b32c:	7863      	ldrb	r3, [r4, #1]
 800b32e:	2b2a      	cmp	r3, #42	; 0x2a
 800b330:	d135      	bne.n	800b39e <_vfiprintf_r+0x1ce>
 800b332:	9b03      	ldr	r3, [sp, #12]
 800b334:	1d1a      	adds	r2, r3, #4
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	9203      	str	r2, [sp, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	bfb8      	it	lt
 800b33e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b342:	3402      	adds	r4, #2
 800b344:	9305      	str	r3, [sp, #20]
 800b346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b42c <_vfiprintf_r+0x25c>
 800b34a:	7821      	ldrb	r1, [r4, #0]
 800b34c:	2203      	movs	r2, #3
 800b34e:	4650      	mov	r0, sl
 800b350:	f7f4 ff46 	bl	80001e0 <memchr>
 800b354:	b140      	cbz	r0, 800b368 <_vfiprintf_r+0x198>
 800b356:	2340      	movs	r3, #64	; 0x40
 800b358:	eba0 000a 	sub.w	r0, r0, sl
 800b35c:	fa03 f000 	lsl.w	r0, r3, r0
 800b360:	9b04      	ldr	r3, [sp, #16]
 800b362:	4303      	orrs	r3, r0
 800b364:	3401      	adds	r4, #1
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36c:	482c      	ldr	r0, [pc, #176]	; (800b420 <_vfiprintf_r+0x250>)
 800b36e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b372:	2206      	movs	r2, #6
 800b374:	f7f4 ff34 	bl	80001e0 <memchr>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d03f      	beq.n	800b3fc <_vfiprintf_r+0x22c>
 800b37c:	4b29      	ldr	r3, [pc, #164]	; (800b424 <_vfiprintf_r+0x254>)
 800b37e:	bb1b      	cbnz	r3, 800b3c8 <_vfiprintf_r+0x1f8>
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	3307      	adds	r3, #7
 800b384:	f023 0307 	bic.w	r3, r3, #7
 800b388:	3308      	adds	r3, #8
 800b38a:	9303      	str	r3, [sp, #12]
 800b38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b38e:	443b      	add	r3, r7
 800b390:	9309      	str	r3, [sp, #36]	; 0x24
 800b392:	e767      	b.n	800b264 <_vfiprintf_r+0x94>
 800b394:	fb0c 3202 	mla	r2, ip, r2, r3
 800b398:	460c      	mov	r4, r1
 800b39a:	2001      	movs	r0, #1
 800b39c:	e7a5      	b.n	800b2ea <_vfiprintf_r+0x11a>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	3401      	adds	r4, #1
 800b3a2:	9305      	str	r3, [sp, #20]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	f04f 0c0a 	mov.w	ip, #10
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b0:	3a30      	subs	r2, #48	; 0x30
 800b3b2:	2a09      	cmp	r2, #9
 800b3b4:	d903      	bls.n	800b3be <_vfiprintf_r+0x1ee>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0c5      	beq.n	800b346 <_vfiprintf_r+0x176>
 800b3ba:	9105      	str	r1, [sp, #20]
 800b3bc:	e7c3      	b.n	800b346 <_vfiprintf_r+0x176>
 800b3be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e7f0      	b.n	800b3aa <_vfiprintf_r+0x1da>
 800b3c8:	ab03      	add	r3, sp, #12
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4b16      	ldr	r3, [pc, #88]	; (800b428 <_vfiprintf_r+0x258>)
 800b3d0:	a904      	add	r1, sp, #16
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f3af 8000 	nop.w
 800b3d8:	4607      	mov	r7, r0
 800b3da:	1c78      	adds	r0, r7, #1
 800b3dc:	d1d6      	bne.n	800b38c <_vfiprintf_r+0x1bc>
 800b3de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3e0:	07d9      	lsls	r1, r3, #31
 800b3e2:	d405      	bmi.n	800b3f0 <_vfiprintf_r+0x220>
 800b3e4:	89ab      	ldrh	r3, [r5, #12]
 800b3e6:	059a      	lsls	r2, r3, #22
 800b3e8:	d402      	bmi.n	800b3f0 <_vfiprintf_r+0x220>
 800b3ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ec:	f000 fc35 	bl	800bc5a <__retarget_lock_release_recursive>
 800b3f0:	89ab      	ldrh	r3, [r5, #12]
 800b3f2:	065b      	lsls	r3, r3, #25
 800b3f4:	f53f af12 	bmi.w	800b21c <_vfiprintf_r+0x4c>
 800b3f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3fa:	e711      	b.n	800b220 <_vfiprintf_r+0x50>
 800b3fc:	ab03      	add	r3, sp, #12
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	462a      	mov	r2, r5
 800b402:	4b09      	ldr	r3, [pc, #36]	; (800b428 <_vfiprintf_r+0x258>)
 800b404:	a904      	add	r1, sp, #16
 800b406:	4630      	mov	r0, r6
 800b408:	f000 f880 	bl	800b50c <_printf_i>
 800b40c:	e7e4      	b.n	800b3d8 <_vfiprintf_r+0x208>
 800b40e:	bf00      	nop
 800b410:	0804646c 	.word	0x0804646c
 800b414:	0804648c 	.word	0x0804648c
 800b418:	0804644c 	.word	0x0804644c
 800b41c:	08046416 	.word	0x08046416
 800b420:	08046420 	.word	0x08046420
 800b424:	00000000 	.word	0x00000000
 800b428:	0800b1ab 	.word	0x0800b1ab
 800b42c:	0804641c 	.word	0x0804641c

0800b430 <_printf_common>:
 800b430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b434:	4616      	mov	r6, r2
 800b436:	4699      	mov	r9, r3
 800b438:	688a      	ldr	r2, [r1, #8]
 800b43a:	690b      	ldr	r3, [r1, #16]
 800b43c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b440:	4293      	cmp	r3, r2
 800b442:	bfb8      	it	lt
 800b444:	4613      	movlt	r3, r2
 800b446:	6033      	str	r3, [r6, #0]
 800b448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b44c:	4607      	mov	r7, r0
 800b44e:	460c      	mov	r4, r1
 800b450:	b10a      	cbz	r2, 800b456 <_printf_common+0x26>
 800b452:	3301      	adds	r3, #1
 800b454:	6033      	str	r3, [r6, #0]
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	0699      	lsls	r1, r3, #26
 800b45a:	bf42      	ittt	mi
 800b45c:	6833      	ldrmi	r3, [r6, #0]
 800b45e:	3302      	addmi	r3, #2
 800b460:	6033      	strmi	r3, [r6, #0]
 800b462:	6825      	ldr	r5, [r4, #0]
 800b464:	f015 0506 	ands.w	r5, r5, #6
 800b468:	d106      	bne.n	800b478 <_printf_common+0x48>
 800b46a:	f104 0a19 	add.w	sl, r4, #25
 800b46e:	68e3      	ldr	r3, [r4, #12]
 800b470:	6832      	ldr	r2, [r6, #0]
 800b472:	1a9b      	subs	r3, r3, r2
 800b474:	42ab      	cmp	r3, r5
 800b476:	dc26      	bgt.n	800b4c6 <_printf_common+0x96>
 800b478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b47c:	1e13      	subs	r3, r2, #0
 800b47e:	6822      	ldr	r2, [r4, #0]
 800b480:	bf18      	it	ne
 800b482:	2301      	movne	r3, #1
 800b484:	0692      	lsls	r2, r2, #26
 800b486:	d42b      	bmi.n	800b4e0 <_printf_common+0xb0>
 800b488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b48c:	4649      	mov	r1, r9
 800b48e:	4638      	mov	r0, r7
 800b490:	47c0      	blx	r8
 800b492:	3001      	adds	r0, #1
 800b494:	d01e      	beq.n	800b4d4 <_printf_common+0xa4>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	68e5      	ldr	r5, [r4, #12]
 800b49a:	6832      	ldr	r2, [r6, #0]
 800b49c:	f003 0306 	and.w	r3, r3, #6
 800b4a0:	2b04      	cmp	r3, #4
 800b4a2:	bf08      	it	eq
 800b4a4:	1aad      	subeq	r5, r5, r2
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	6922      	ldr	r2, [r4, #16]
 800b4aa:	bf0c      	ite	eq
 800b4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4b0:	2500      	movne	r5, #0
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	bfc4      	itt	gt
 800b4b6:	1a9b      	subgt	r3, r3, r2
 800b4b8:	18ed      	addgt	r5, r5, r3
 800b4ba:	2600      	movs	r6, #0
 800b4bc:	341a      	adds	r4, #26
 800b4be:	42b5      	cmp	r5, r6
 800b4c0:	d11a      	bne.n	800b4f8 <_printf_common+0xc8>
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	e008      	b.n	800b4d8 <_printf_common+0xa8>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	4652      	mov	r2, sl
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	4638      	mov	r0, r7
 800b4ce:	47c0      	blx	r8
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d103      	bne.n	800b4dc <_printf_common+0xac>
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4dc:	3501      	adds	r5, #1
 800b4de:	e7c6      	b.n	800b46e <_printf_common+0x3e>
 800b4e0:	18e1      	adds	r1, r4, r3
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	2030      	movs	r0, #48	; 0x30
 800b4e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4ea:	4422      	add	r2, r4
 800b4ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4f4:	3302      	adds	r3, #2
 800b4f6:	e7c7      	b.n	800b488 <_printf_common+0x58>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	4638      	mov	r0, r7
 800b500:	47c0      	blx	r8
 800b502:	3001      	adds	r0, #1
 800b504:	d0e6      	beq.n	800b4d4 <_printf_common+0xa4>
 800b506:	3601      	adds	r6, #1
 800b508:	e7d9      	b.n	800b4be <_printf_common+0x8e>
	...

0800b50c <_printf_i>:
 800b50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b510:	7e0f      	ldrb	r7, [r1, #24]
 800b512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b514:	2f78      	cmp	r7, #120	; 0x78
 800b516:	4691      	mov	r9, r2
 800b518:	4680      	mov	r8, r0
 800b51a:	460c      	mov	r4, r1
 800b51c:	469a      	mov	sl, r3
 800b51e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b522:	d807      	bhi.n	800b534 <_printf_i+0x28>
 800b524:	2f62      	cmp	r7, #98	; 0x62
 800b526:	d80a      	bhi.n	800b53e <_printf_i+0x32>
 800b528:	2f00      	cmp	r7, #0
 800b52a:	f000 80d8 	beq.w	800b6de <_printf_i+0x1d2>
 800b52e:	2f58      	cmp	r7, #88	; 0x58
 800b530:	f000 80a3 	beq.w	800b67a <_printf_i+0x16e>
 800b534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b53c:	e03a      	b.n	800b5b4 <_printf_i+0xa8>
 800b53e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b542:	2b15      	cmp	r3, #21
 800b544:	d8f6      	bhi.n	800b534 <_printf_i+0x28>
 800b546:	a101      	add	r1, pc, #4	; (adr r1, 800b54c <_printf_i+0x40>)
 800b548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b54c:	0800b5a5 	.word	0x0800b5a5
 800b550:	0800b5b9 	.word	0x0800b5b9
 800b554:	0800b535 	.word	0x0800b535
 800b558:	0800b535 	.word	0x0800b535
 800b55c:	0800b535 	.word	0x0800b535
 800b560:	0800b535 	.word	0x0800b535
 800b564:	0800b5b9 	.word	0x0800b5b9
 800b568:	0800b535 	.word	0x0800b535
 800b56c:	0800b535 	.word	0x0800b535
 800b570:	0800b535 	.word	0x0800b535
 800b574:	0800b535 	.word	0x0800b535
 800b578:	0800b6c5 	.word	0x0800b6c5
 800b57c:	0800b5e9 	.word	0x0800b5e9
 800b580:	0800b6a7 	.word	0x0800b6a7
 800b584:	0800b535 	.word	0x0800b535
 800b588:	0800b535 	.word	0x0800b535
 800b58c:	0800b6e7 	.word	0x0800b6e7
 800b590:	0800b535 	.word	0x0800b535
 800b594:	0800b5e9 	.word	0x0800b5e9
 800b598:	0800b535 	.word	0x0800b535
 800b59c:	0800b535 	.word	0x0800b535
 800b5a0:	0800b6af 	.word	0x0800b6af
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	1d1a      	adds	r2, r3, #4
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	602a      	str	r2, [r5, #0]
 800b5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e0a3      	b.n	800b700 <_printf_i+0x1f4>
 800b5b8:	6820      	ldr	r0, [r4, #0]
 800b5ba:	6829      	ldr	r1, [r5, #0]
 800b5bc:	0606      	lsls	r6, r0, #24
 800b5be:	f101 0304 	add.w	r3, r1, #4
 800b5c2:	d50a      	bpl.n	800b5da <_printf_i+0xce>
 800b5c4:	680e      	ldr	r6, [r1, #0]
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	2e00      	cmp	r6, #0
 800b5ca:	da03      	bge.n	800b5d4 <_printf_i+0xc8>
 800b5cc:	232d      	movs	r3, #45	; 0x2d
 800b5ce:	4276      	negs	r6, r6
 800b5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5d4:	485e      	ldr	r0, [pc, #376]	; (800b750 <_printf_i+0x244>)
 800b5d6:	230a      	movs	r3, #10
 800b5d8:	e019      	b.n	800b60e <_printf_i+0x102>
 800b5da:	680e      	ldr	r6, [r1, #0]
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5e2:	bf18      	it	ne
 800b5e4:	b236      	sxthne	r6, r6
 800b5e6:	e7ef      	b.n	800b5c8 <_printf_i+0xbc>
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	6820      	ldr	r0, [r4, #0]
 800b5ec:	1d19      	adds	r1, r3, #4
 800b5ee:	6029      	str	r1, [r5, #0]
 800b5f0:	0601      	lsls	r1, r0, #24
 800b5f2:	d501      	bpl.n	800b5f8 <_printf_i+0xec>
 800b5f4:	681e      	ldr	r6, [r3, #0]
 800b5f6:	e002      	b.n	800b5fe <_printf_i+0xf2>
 800b5f8:	0646      	lsls	r6, r0, #25
 800b5fa:	d5fb      	bpl.n	800b5f4 <_printf_i+0xe8>
 800b5fc:	881e      	ldrh	r6, [r3, #0]
 800b5fe:	4854      	ldr	r0, [pc, #336]	; (800b750 <_printf_i+0x244>)
 800b600:	2f6f      	cmp	r7, #111	; 0x6f
 800b602:	bf0c      	ite	eq
 800b604:	2308      	moveq	r3, #8
 800b606:	230a      	movne	r3, #10
 800b608:	2100      	movs	r1, #0
 800b60a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b60e:	6865      	ldr	r5, [r4, #4]
 800b610:	60a5      	str	r5, [r4, #8]
 800b612:	2d00      	cmp	r5, #0
 800b614:	bfa2      	ittt	ge
 800b616:	6821      	ldrge	r1, [r4, #0]
 800b618:	f021 0104 	bicge.w	r1, r1, #4
 800b61c:	6021      	strge	r1, [r4, #0]
 800b61e:	b90e      	cbnz	r6, 800b624 <_printf_i+0x118>
 800b620:	2d00      	cmp	r5, #0
 800b622:	d04d      	beq.n	800b6c0 <_printf_i+0x1b4>
 800b624:	4615      	mov	r5, r2
 800b626:	fbb6 f1f3 	udiv	r1, r6, r3
 800b62a:	fb03 6711 	mls	r7, r3, r1, r6
 800b62e:	5dc7      	ldrb	r7, [r0, r7]
 800b630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b634:	4637      	mov	r7, r6
 800b636:	42bb      	cmp	r3, r7
 800b638:	460e      	mov	r6, r1
 800b63a:	d9f4      	bls.n	800b626 <_printf_i+0x11a>
 800b63c:	2b08      	cmp	r3, #8
 800b63e:	d10b      	bne.n	800b658 <_printf_i+0x14c>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	07de      	lsls	r6, r3, #31
 800b644:	d508      	bpl.n	800b658 <_printf_i+0x14c>
 800b646:	6923      	ldr	r3, [r4, #16]
 800b648:	6861      	ldr	r1, [r4, #4]
 800b64a:	4299      	cmp	r1, r3
 800b64c:	bfde      	ittt	le
 800b64e:	2330      	movle	r3, #48	; 0x30
 800b650:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b654:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b658:	1b52      	subs	r2, r2, r5
 800b65a:	6122      	str	r2, [r4, #16]
 800b65c:	f8cd a000 	str.w	sl, [sp]
 800b660:	464b      	mov	r3, r9
 800b662:	aa03      	add	r2, sp, #12
 800b664:	4621      	mov	r1, r4
 800b666:	4640      	mov	r0, r8
 800b668:	f7ff fee2 	bl	800b430 <_printf_common>
 800b66c:	3001      	adds	r0, #1
 800b66e:	d14c      	bne.n	800b70a <_printf_i+0x1fe>
 800b670:	f04f 30ff 	mov.w	r0, #4294967295
 800b674:	b004      	add	sp, #16
 800b676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67a:	4835      	ldr	r0, [pc, #212]	; (800b750 <_printf_i+0x244>)
 800b67c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b680:	6829      	ldr	r1, [r5, #0]
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	f851 6b04 	ldr.w	r6, [r1], #4
 800b688:	6029      	str	r1, [r5, #0]
 800b68a:	061d      	lsls	r5, r3, #24
 800b68c:	d514      	bpl.n	800b6b8 <_printf_i+0x1ac>
 800b68e:	07df      	lsls	r7, r3, #31
 800b690:	bf44      	itt	mi
 800b692:	f043 0320 	orrmi.w	r3, r3, #32
 800b696:	6023      	strmi	r3, [r4, #0]
 800b698:	b91e      	cbnz	r6, 800b6a2 <_printf_i+0x196>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	f023 0320 	bic.w	r3, r3, #32
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	2310      	movs	r3, #16
 800b6a4:	e7b0      	b.n	800b608 <_printf_i+0xfc>
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	f043 0320 	orr.w	r3, r3, #32
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	2378      	movs	r3, #120	; 0x78
 800b6b0:	4828      	ldr	r0, [pc, #160]	; (800b754 <_printf_i+0x248>)
 800b6b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6b6:	e7e3      	b.n	800b680 <_printf_i+0x174>
 800b6b8:	0659      	lsls	r1, r3, #25
 800b6ba:	bf48      	it	mi
 800b6bc:	b2b6      	uxthmi	r6, r6
 800b6be:	e7e6      	b.n	800b68e <_printf_i+0x182>
 800b6c0:	4615      	mov	r5, r2
 800b6c2:	e7bb      	b.n	800b63c <_printf_i+0x130>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	6826      	ldr	r6, [r4, #0]
 800b6c8:	6961      	ldr	r1, [r4, #20]
 800b6ca:	1d18      	adds	r0, r3, #4
 800b6cc:	6028      	str	r0, [r5, #0]
 800b6ce:	0635      	lsls	r5, r6, #24
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	d501      	bpl.n	800b6d8 <_printf_i+0x1cc>
 800b6d4:	6019      	str	r1, [r3, #0]
 800b6d6:	e002      	b.n	800b6de <_printf_i+0x1d2>
 800b6d8:	0670      	lsls	r0, r6, #25
 800b6da:	d5fb      	bpl.n	800b6d4 <_printf_i+0x1c8>
 800b6dc:	8019      	strh	r1, [r3, #0]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	6123      	str	r3, [r4, #16]
 800b6e2:	4615      	mov	r5, r2
 800b6e4:	e7ba      	b.n	800b65c <_printf_i+0x150>
 800b6e6:	682b      	ldr	r3, [r5, #0]
 800b6e8:	1d1a      	adds	r2, r3, #4
 800b6ea:	602a      	str	r2, [r5, #0]
 800b6ec:	681d      	ldr	r5, [r3, #0]
 800b6ee:	6862      	ldr	r2, [r4, #4]
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f7f4 fd74 	bl	80001e0 <memchr>
 800b6f8:	b108      	cbz	r0, 800b6fe <_printf_i+0x1f2>
 800b6fa:	1b40      	subs	r0, r0, r5
 800b6fc:	6060      	str	r0, [r4, #4]
 800b6fe:	6863      	ldr	r3, [r4, #4]
 800b700:	6123      	str	r3, [r4, #16]
 800b702:	2300      	movs	r3, #0
 800b704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b708:	e7a8      	b.n	800b65c <_printf_i+0x150>
 800b70a:	6923      	ldr	r3, [r4, #16]
 800b70c:	462a      	mov	r2, r5
 800b70e:	4649      	mov	r1, r9
 800b710:	4640      	mov	r0, r8
 800b712:	47d0      	blx	sl
 800b714:	3001      	adds	r0, #1
 800b716:	d0ab      	beq.n	800b670 <_printf_i+0x164>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	079b      	lsls	r3, r3, #30
 800b71c:	d413      	bmi.n	800b746 <_printf_i+0x23a>
 800b71e:	68e0      	ldr	r0, [r4, #12]
 800b720:	9b03      	ldr	r3, [sp, #12]
 800b722:	4298      	cmp	r0, r3
 800b724:	bfb8      	it	lt
 800b726:	4618      	movlt	r0, r3
 800b728:	e7a4      	b.n	800b674 <_printf_i+0x168>
 800b72a:	2301      	movs	r3, #1
 800b72c:	4632      	mov	r2, r6
 800b72e:	4649      	mov	r1, r9
 800b730:	4640      	mov	r0, r8
 800b732:	47d0      	blx	sl
 800b734:	3001      	adds	r0, #1
 800b736:	d09b      	beq.n	800b670 <_printf_i+0x164>
 800b738:	3501      	adds	r5, #1
 800b73a:	68e3      	ldr	r3, [r4, #12]
 800b73c:	9903      	ldr	r1, [sp, #12]
 800b73e:	1a5b      	subs	r3, r3, r1
 800b740:	42ab      	cmp	r3, r5
 800b742:	dcf2      	bgt.n	800b72a <_printf_i+0x21e>
 800b744:	e7eb      	b.n	800b71e <_printf_i+0x212>
 800b746:	2500      	movs	r5, #0
 800b748:	f104 0619 	add.w	r6, r4, #25
 800b74c:	e7f5      	b.n	800b73a <_printf_i+0x22e>
 800b74e:	bf00      	nop
 800b750:	08046427 	.word	0x08046427
 800b754:	08046438 	.word	0x08046438

0800b758 <__swbuf_r>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	460e      	mov	r6, r1
 800b75c:	4614      	mov	r4, r2
 800b75e:	4605      	mov	r5, r0
 800b760:	b118      	cbz	r0, 800b76a <__swbuf_r+0x12>
 800b762:	6983      	ldr	r3, [r0, #24]
 800b764:	b90b      	cbnz	r3, 800b76a <__swbuf_r+0x12>
 800b766:	f000 f9d9 	bl	800bb1c <__sinit>
 800b76a:	4b21      	ldr	r3, [pc, #132]	; (800b7f0 <__swbuf_r+0x98>)
 800b76c:	429c      	cmp	r4, r3
 800b76e:	d12b      	bne.n	800b7c8 <__swbuf_r+0x70>
 800b770:	686c      	ldr	r4, [r5, #4]
 800b772:	69a3      	ldr	r3, [r4, #24]
 800b774:	60a3      	str	r3, [r4, #8]
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	071a      	lsls	r2, r3, #28
 800b77a:	d52f      	bpl.n	800b7dc <__swbuf_r+0x84>
 800b77c:	6923      	ldr	r3, [r4, #16]
 800b77e:	b36b      	cbz	r3, 800b7dc <__swbuf_r+0x84>
 800b780:	6923      	ldr	r3, [r4, #16]
 800b782:	6820      	ldr	r0, [r4, #0]
 800b784:	1ac0      	subs	r0, r0, r3
 800b786:	6963      	ldr	r3, [r4, #20]
 800b788:	b2f6      	uxtb	r6, r6
 800b78a:	4283      	cmp	r3, r0
 800b78c:	4637      	mov	r7, r6
 800b78e:	dc04      	bgt.n	800b79a <__swbuf_r+0x42>
 800b790:	4621      	mov	r1, r4
 800b792:	4628      	mov	r0, r5
 800b794:	f000 f92e 	bl	800b9f4 <_fflush_r>
 800b798:	bb30      	cbnz	r0, 800b7e8 <__swbuf_r+0x90>
 800b79a:	68a3      	ldr	r3, [r4, #8]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	60a3      	str	r3, [r4, #8]
 800b7a0:	6823      	ldr	r3, [r4, #0]
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	6022      	str	r2, [r4, #0]
 800b7a6:	701e      	strb	r6, [r3, #0]
 800b7a8:	6963      	ldr	r3, [r4, #20]
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	4283      	cmp	r3, r0
 800b7ae:	d004      	beq.n	800b7ba <__swbuf_r+0x62>
 800b7b0:	89a3      	ldrh	r3, [r4, #12]
 800b7b2:	07db      	lsls	r3, r3, #31
 800b7b4:	d506      	bpl.n	800b7c4 <__swbuf_r+0x6c>
 800b7b6:	2e0a      	cmp	r6, #10
 800b7b8:	d104      	bne.n	800b7c4 <__swbuf_r+0x6c>
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f000 f919 	bl	800b9f4 <_fflush_r>
 800b7c2:	b988      	cbnz	r0, 800b7e8 <__swbuf_r+0x90>
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <__swbuf_r+0x9c>)
 800b7ca:	429c      	cmp	r4, r3
 800b7cc:	d101      	bne.n	800b7d2 <__swbuf_r+0x7a>
 800b7ce:	68ac      	ldr	r4, [r5, #8]
 800b7d0:	e7cf      	b.n	800b772 <__swbuf_r+0x1a>
 800b7d2:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <__swbuf_r+0xa0>)
 800b7d4:	429c      	cmp	r4, r3
 800b7d6:	bf08      	it	eq
 800b7d8:	68ec      	ldreq	r4, [r5, #12]
 800b7da:	e7ca      	b.n	800b772 <__swbuf_r+0x1a>
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f000 f80c 	bl	800b7fc <__swsetup_r>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d0cb      	beq.n	800b780 <__swbuf_r+0x28>
 800b7e8:	f04f 37ff 	mov.w	r7, #4294967295
 800b7ec:	e7ea      	b.n	800b7c4 <__swbuf_r+0x6c>
 800b7ee:	bf00      	nop
 800b7f0:	0804646c 	.word	0x0804646c
 800b7f4:	0804648c 	.word	0x0804648c
 800b7f8:	0804644c 	.word	0x0804644c

0800b7fc <__swsetup_r>:
 800b7fc:	4b32      	ldr	r3, [pc, #200]	; (800b8c8 <__swsetup_r+0xcc>)
 800b7fe:	b570      	push	{r4, r5, r6, lr}
 800b800:	681d      	ldr	r5, [r3, #0]
 800b802:	4606      	mov	r6, r0
 800b804:	460c      	mov	r4, r1
 800b806:	b125      	cbz	r5, 800b812 <__swsetup_r+0x16>
 800b808:	69ab      	ldr	r3, [r5, #24]
 800b80a:	b913      	cbnz	r3, 800b812 <__swsetup_r+0x16>
 800b80c:	4628      	mov	r0, r5
 800b80e:	f000 f985 	bl	800bb1c <__sinit>
 800b812:	4b2e      	ldr	r3, [pc, #184]	; (800b8cc <__swsetup_r+0xd0>)
 800b814:	429c      	cmp	r4, r3
 800b816:	d10f      	bne.n	800b838 <__swsetup_r+0x3c>
 800b818:	686c      	ldr	r4, [r5, #4]
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b820:	0719      	lsls	r1, r3, #28
 800b822:	d42c      	bmi.n	800b87e <__swsetup_r+0x82>
 800b824:	06dd      	lsls	r5, r3, #27
 800b826:	d411      	bmi.n	800b84c <__swsetup_r+0x50>
 800b828:	2309      	movs	r3, #9
 800b82a:	6033      	str	r3, [r6, #0]
 800b82c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	f04f 30ff 	mov.w	r0, #4294967295
 800b836:	e03e      	b.n	800b8b6 <__swsetup_r+0xba>
 800b838:	4b25      	ldr	r3, [pc, #148]	; (800b8d0 <__swsetup_r+0xd4>)
 800b83a:	429c      	cmp	r4, r3
 800b83c:	d101      	bne.n	800b842 <__swsetup_r+0x46>
 800b83e:	68ac      	ldr	r4, [r5, #8]
 800b840:	e7eb      	b.n	800b81a <__swsetup_r+0x1e>
 800b842:	4b24      	ldr	r3, [pc, #144]	; (800b8d4 <__swsetup_r+0xd8>)
 800b844:	429c      	cmp	r4, r3
 800b846:	bf08      	it	eq
 800b848:	68ec      	ldreq	r4, [r5, #12]
 800b84a:	e7e6      	b.n	800b81a <__swsetup_r+0x1e>
 800b84c:	0758      	lsls	r0, r3, #29
 800b84e:	d512      	bpl.n	800b876 <__swsetup_r+0x7a>
 800b850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b852:	b141      	cbz	r1, 800b866 <__swsetup_r+0x6a>
 800b854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b858:	4299      	cmp	r1, r3
 800b85a:	d002      	beq.n	800b862 <__swsetup_r+0x66>
 800b85c:	4630      	mov	r0, r6
 800b85e:	f7ff f979 	bl	800ab54 <_free_r>
 800b862:	2300      	movs	r3, #0
 800b864:	6363      	str	r3, [r4, #52]	; 0x34
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b86c:	81a3      	strh	r3, [r4, #12]
 800b86e:	2300      	movs	r3, #0
 800b870:	6063      	str	r3, [r4, #4]
 800b872:	6923      	ldr	r3, [r4, #16]
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	f043 0308 	orr.w	r3, r3, #8
 800b87c:	81a3      	strh	r3, [r4, #12]
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	b94b      	cbnz	r3, 800b896 <__swsetup_r+0x9a>
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b88c:	d003      	beq.n	800b896 <__swsetup_r+0x9a>
 800b88e:	4621      	mov	r1, r4
 800b890:	4630      	mov	r0, r6
 800b892:	f000 fa09 	bl	800bca8 <__smakebuf_r>
 800b896:	89a0      	ldrh	r0, [r4, #12]
 800b898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b89c:	f010 0301 	ands.w	r3, r0, #1
 800b8a0:	d00a      	beq.n	800b8b8 <__swsetup_r+0xbc>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60a3      	str	r3, [r4, #8]
 800b8a6:	6963      	ldr	r3, [r4, #20]
 800b8a8:	425b      	negs	r3, r3
 800b8aa:	61a3      	str	r3, [r4, #24]
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	b943      	cbnz	r3, 800b8c2 <__swsetup_r+0xc6>
 800b8b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8b4:	d1ba      	bne.n	800b82c <__swsetup_r+0x30>
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
 800b8b8:	0781      	lsls	r1, r0, #30
 800b8ba:	bf58      	it	pl
 800b8bc:	6963      	ldrpl	r3, [r4, #20]
 800b8be:	60a3      	str	r3, [r4, #8]
 800b8c0:	e7f4      	b.n	800b8ac <__swsetup_r+0xb0>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e7f7      	b.n	800b8b6 <__swsetup_r+0xba>
 800b8c6:	bf00      	nop
 800b8c8:	200001f8 	.word	0x200001f8
 800b8cc:	0804646c 	.word	0x0804646c
 800b8d0:	0804648c 	.word	0x0804648c
 800b8d4:	0804644c 	.word	0x0804644c

0800b8d8 <abort>:
 800b8d8:	b508      	push	{r3, lr}
 800b8da:	2006      	movs	r0, #6
 800b8dc:	f000 fa96 	bl	800be0c <raise>
 800b8e0:	2001      	movs	r0, #1
 800b8e2:	f7f5 febf 	bl	8001664 <_exit>
	...

0800b8e8 <__sflush_r>:
 800b8e8:	898a      	ldrh	r2, [r1, #12]
 800b8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	0710      	lsls	r0, r2, #28
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	d458      	bmi.n	800b9a8 <__sflush_r+0xc0>
 800b8f6:	684b      	ldr	r3, [r1, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	dc05      	bgt.n	800b908 <__sflush_r+0x20>
 800b8fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dc02      	bgt.n	800b908 <__sflush_r+0x20>
 800b902:	2000      	movs	r0, #0
 800b904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b90a:	2e00      	cmp	r6, #0
 800b90c:	d0f9      	beq.n	800b902 <__sflush_r+0x1a>
 800b90e:	2300      	movs	r3, #0
 800b910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b914:	682f      	ldr	r7, [r5, #0]
 800b916:	602b      	str	r3, [r5, #0]
 800b918:	d032      	beq.n	800b980 <__sflush_r+0x98>
 800b91a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	075a      	lsls	r2, r3, #29
 800b920:	d505      	bpl.n	800b92e <__sflush_r+0x46>
 800b922:	6863      	ldr	r3, [r4, #4]
 800b924:	1ac0      	subs	r0, r0, r3
 800b926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b928:	b10b      	cbz	r3, 800b92e <__sflush_r+0x46>
 800b92a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b92c:	1ac0      	subs	r0, r0, r3
 800b92e:	2300      	movs	r3, #0
 800b930:	4602      	mov	r2, r0
 800b932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b934:	6a21      	ldr	r1, [r4, #32]
 800b936:	4628      	mov	r0, r5
 800b938:	47b0      	blx	r6
 800b93a:	1c43      	adds	r3, r0, #1
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	d106      	bne.n	800b94e <__sflush_r+0x66>
 800b940:	6829      	ldr	r1, [r5, #0]
 800b942:	291d      	cmp	r1, #29
 800b944:	d82c      	bhi.n	800b9a0 <__sflush_r+0xb8>
 800b946:	4a2a      	ldr	r2, [pc, #168]	; (800b9f0 <__sflush_r+0x108>)
 800b948:	40ca      	lsrs	r2, r1
 800b94a:	07d6      	lsls	r6, r2, #31
 800b94c:	d528      	bpl.n	800b9a0 <__sflush_r+0xb8>
 800b94e:	2200      	movs	r2, #0
 800b950:	6062      	str	r2, [r4, #4]
 800b952:	04d9      	lsls	r1, r3, #19
 800b954:	6922      	ldr	r2, [r4, #16]
 800b956:	6022      	str	r2, [r4, #0]
 800b958:	d504      	bpl.n	800b964 <__sflush_r+0x7c>
 800b95a:	1c42      	adds	r2, r0, #1
 800b95c:	d101      	bne.n	800b962 <__sflush_r+0x7a>
 800b95e:	682b      	ldr	r3, [r5, #0]
 800b960:	b903      	cbnz	r3, 800b964 <__sflush_r+0x7c>
 800b962:	6560      	str	r0, [r4, #84]	; 0x54
 800b964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b966:	602f      	str	r7, [r5, #0]
 800b968:	2900      	cmp	r1, #0
 800b96a:	d0ca      	beq.n	800b902 <__sflush_r+0x1a>
 800b96c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b970:	4299      	cmp	r1, r3
 800b972:	d002      	beq.n	800b97a <__sflush_r+0x92>
 800b974:	4628      	mov	r0, r5
 800b976:	f7ff f8ed 	bl	800ab54 <_free_r>
 800b97a:	2000      	movs	r0, #0
 800b97c:	6360      	str	r0, [r4, #52]	; 0x34
 800b97e:	e7c1      	b.n	800b904 <__sflush_r+0x1c>
 800b980:	6a21      	ldr	r1, [r4, #32]
 800b982:	2301      	movs	r3, #1
 800b984:	4628      	mov	r0, r5
 800b986:	47b0      	blx	r6
 800b988:	1c41      	adds	r1, r0, #1
 800b98a:	d1c7      	bne.n	800b91c <__sflush_r+0x34>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d0c4      	beq.n	800b91c <__sflush_r+0x34>
 800b992:	2b1d      	cmp	r3, #29
 800b994:	d001      	beq.n	800b99a <__sflush_r+0xb2>
 800b996:	2b16      	cmp	r3, #22
 800b998:	d101      	bne.n	800b99e <__sflush_r+0xb6>
 800b99a:	602f      	str	r7, [r5, #0]
 800b99c:	e7b1      	b.n	800b902 <__sflush_r+0x1a>
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	e7ad      	b.n	800b904 <__sflush_r+0x1c>
 800b9a8:	690f      	ldr	r7, [r1, #16]
 800b9aa:	2f00      	cmp	r7, #0
 800b9ac:	d0a9      	beq.n	800b902 <__sflush_r+0x1a>
 800b9ae:	0793      	lsls	r3, r2, #30
 800b9b0:	680e      	ldr	r6, [r1, #0]
 800b9b2:	bf08      	it	eq
 800b9b4:	694b      	ldreq	r3, [r1, #20]
 800b9b6:	600f      	str	r7, [r1, #0]
 800b9b8:	bf18      	it	ne
 800b9ba:	2300      	movne	r3, #0
 800b9bc:	eba6 0807 	sub.w	r8, r6, r7
 800b9c0:	608b      	str	r3, [r1, #8]
 800b9c2:	f1b8 0f00 	cmp.w	r8, #0
 800b9c6:	dd9c      	ble.n	800b902 <__sflush_r+0x1a>
 800b9c8:	6a21      	ldr	r1, [r4, #32]
 800b9ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9cc:	4643      	mov	r3, r8
 800b9ce:	463a      	mov	r2, r7
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	47b0      	blx	r6
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	dc06      	bgt.n	800b9e6 <__sflush_r+0xfe>
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9de:	81a3      	strh	r3, [r4, #12]
 800b9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e4:	e78e      	b.n	800b904 <__sflush_r+0x1c>
 800b9e6:	4407      	add	r7, r0
 800b9e8:	eba8 0800 	sub.w	r8, r8, r0
 800b9ec:	e7e9      	b.n	800b9c2 <__sflush_r+0xda>
 800b9ee:	bf00      	nop
 800b9f0:	20400001 	.word	0x20400001

0800b9f4 <_fflush_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	690b      	ldr	r3, [r1, #16]
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	b913      	cbnz	r3, 800ba04 <_fflush_r+0x10>
 800b9fe:	2500      	movs	r5, #0
 800ba00:	4628      	mov	r0, r5
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	b118      	cbz	r0, 800ba0e <_fflush_r+0x1a>
 800ba06:	6983      	ldr	r3, [r0, #24]
 800ba08:	b90b      	cbnz	r3, 800ba0e <_fflush_r+0x1a>
 800ba0a:	f000 f887 	bl	800bb1c <__sinit>
 800ba0e:	4b14      	ldr	r3, [pc, #80]	; (800ba60 <_fflush_r+0x6c>)
 800ba10:	429c      	cmp	r4, r3
 800ba12:	d11b      	bne.n	800ba4c <_fflush_r+0x58>
 800ba14:	686c      	ldr	r4, [r5, #4]
 800ba16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d0ef      	beq.n	800b9fe <_fflush_r+0xa>
 800ba1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba20:	07d0      	lsls	r0, r2, #31
 800ba22:	d404      	bmi.n	800ba2e <_fflush_r+0x3a>
 800ba24:	0599      	lsls	r1, r3, #22
 800ba26:	d402      	bmi.n	800ba2e <_fflush_r+0x3a>
 800ba28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba2a:	f000 f915 	bl	800bc58 <__retarget_lock_acquire_recursive>
 800ba2e:	4628      	mov	r0, r5
 800ba30:	4621      	mov	r1, r4
 800ba32:	f7ff ff59 	bl	800b8e8 <__sflush_r>
 800ba36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba38:	07da      	lsls	r2, r3, #31
 800ba3a:	4605      	mov	r5, r0
 800ba3c:	d4e0      	bmi.n	800ba00 <_fflush_r+0xc>
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	059b      	lsls	r3, r3, #22
 800ba42:	d4dd      	bmi.n	800ba00 <_fflush_r+0xc>
 800ba44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba46:	f000 f908 	bl	800bc5a <__retarget_lock_release_recursive>
 800ba4a:	e7d9      	b.n	800ba00 <_fflush_r+0xc>
 800ba4c:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <_fflush_r+0x70>)
 800ba4e:	429c      	cmp	r4, r3
 800ba50:	d101      	bne.n	800ba56 <_fflush_r+0x62>
 800ba52:	68ac      	ldr	r4, [r5, #8]
 800ba54:	e7df      	b.n	800ba16 <_fflush_r+0x22>
 800ba56:	4b04      	ldr	r3, [pc, #16]	; (800ba68 <_fflush_r+0x74>)
 800ba58:	429c      	cmp	r4, r3
 800ba5a:	bf08      	it	eq
 800ba5c:	68ec      	ldreq	r4, [r5, #12]
 800ba5e:	e7da      	b.n	800ba16 <_fflush_r+0x22>
 800ba60:	0804646c 	.word	0x0804646c
 800ba64:	0804648c 	.word	0x0804648c
 800ba68:	0804644c 	.word	0x0804644c

0800ba6c <std>:
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	b510      	push	{r4, lr}
 800ba70:	4604      	mov	r4, r0
 800ba72:	e9c0 3300 	strd	r3, r3, [r0]
 800ba76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba7a:	6083      	str	r3, [r0, #8]
 800ba7c:	8181      	strh	r1, [r0, #12]
 800ba7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ba80:	81c2      	strh	r2, [r0, #14]
 800ba82:	6183      	str	r3, [r0, #24]
 800ba84:	4619      	mov	r1, r3
 800ba86:	2208      	movs	r2, #8
 800ba88:	305c      	adds	r0, #92	; 0x5c
 800ba8a:	f7ff f85b 	bl	800ab44 <memset>
 800ba8e:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <std+0x38>)
 800ba90:	6263      	str	r3, [r4, #36]	; 0x24
 800ba92:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <std+0x3c>)
 800ba94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba96:	4b05      	ldr	r3, [pc, #20]	; (800baac <std+0x40>)
 800ba98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba9a:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <std+0x44>)
 800ba9c:	6224      	str	r4, [r4, #32]
 800ba9e:	6323      	str	r3, [r4, #48]	; 0x30
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	bf00      	nop
 800baa4:	0800be45 	.word	0x0800be45
 800baa8:	0800be67 	.word	0x0800be67
 800baac:	0800be9f 	.word	0x0800be9f
 800bab0:	0800bec3 	.word	0x0800bec3

0800bab4 <_cleanup_r>:
 800bab4:	4901      	ldr	r1, [pc, #4]	; (800babc <_cleanup_r+0x8>)
 800bab6:	f000 b8af 	b.w	800bc18 <_fwalk_reent>
 800baba:	bf00      	nop
 800babc:	0800b9f5 	.word	0x0800b9f5

0800bac0 <__sfmoreglue>:
 800bac0:	b570      	push	{r4, r5, r6, lr}
 800bac2:	2268      	movs	r2, #104	; 0x68
 800bac4:	1e4d      	subs	r5, r1, #1
 800bac6:	4355      	muls	r5, r2
 800bac8:	460e      	mov	r6, r1
 800baca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bace:	f7ff f8ad 	bl	800ac2c <_malloc_r>
 800bad2:	4604      	mov	r4, r0
 800bad4:	b140      	cbz	r0, 800bae8 <__sfmoreglue+0x28>
 800bad6:	2100      	movs	r1, #0
 800bad8:	e9c0 1600 	strd	r1, r6, [r0]
 800badc:	300c      	adds	r0, #12
 800bade:	60a0      	str	r0, [r4, #8]
 800bae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bae4:	f7ff f82e 	bl	800ab44 <memset>
 800bae8:	4620      	mov	r0, r4
 800baea:	bd70      	pop	{r4, r5, r6, pc}

0800baec <__sfp_lock_acquire>:
 800baec:	4801      	ldr	r0, [pc, #4]	; (800baf4 <__sfp_lock_acquire+0x8>)
 800baee:	f000 b8b3 	b.w	800bc58 <__retarget_lock_acquire_recursive>
 800baf2:	bf00      	nop
 800baf4:	2001423d 	.word	0x2001423d

0800baf8 <__sfp_lock_release>:
 800baf8:	4801      	ldr	r0, [pc, #4]	; (800bb00 <__sfp_lock_release+0x8>)
 800bafa:	f000 b8ae 	b.w	800bc5a <__retarget_lock_release_recursive>
 800bafe:	bf00      	nop
 800bb00:	2001423d 	.word	0x2001423d

0800bb04 <__sinit_lock_acquire>:
 800bb04:	4801      	ldr	r0, [pc, #4]	; (800bb0c <__sinit_lock_acquire+0x8>)
 800bb06:	f000 b8a7 	b.w	800bc58 <__retarget_lock_acquire_recursive>
 800bb0a:	bf00      	nop
 800bb0c:	2001423e 	.word	0x2001423e

0800bb10 <__sinit_lock_release>:
 800bb10:	4801      	ldr	r0, [pc, #4]	; (800bb18 <__sinit_lock_release+0x8>)
 800bb12:	f000 b8a2 	b.w	800bc5a <__retarget_lock_release_recursive>
 800bb16:	bf00      	nop
 800bb18:	2001423e 	.word	0x2001423e

0800bb1c <__sinit>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	4604      	mov	r4, r0
 800bb20:	f7ff fff0 	bl	800bb04 <__sinit_lock_acquire>
 800bb24:	69a3      	ldr	r3, [r4, #24]
 800bb26:	b11b      	cbz	r3, 800bb30 <__sinit+0x14>
 800bb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb2c:	f7ff bff0 	b.w	800bb10 <__sinit_lock_release>
 800bb30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb34:	6523      	str	r3, [r4, #80]	; 0x50
 800bb36:	4b13      	ldr	r3, [pc, #76]	; (800bb84 <__sinit+0x68>)
 800bb38:	4a13      	ldr	r2, [pc, #76]	; (800bb88 <__sinit+0x6c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb3e:	42a3      	cmp	r3, r4
 800bb40:	bf04      	itt	eq
 800bb42:	2301      	moveq	r3, #1
 800bb44:	61a3      	streq	r3, [r4, #24]
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 f820 	bl	800bb8c <__sfp>
 800bb4c:	6060      	str	r0, [r4, #4]
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f000 f81c 	bl	800bb8c <__sfp>
 800bb54:	60a0      	str	r0, [r4, #8]
 800bb56:	4620      	mov	r0, r4
 800bb58:	f000 f818 	bl	800bb8c <__sfp>
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	60e0      	str	r0, [r4, #12]
 800bb60:	2104      	movs	r1, #4
 800bb62:	6860      	ldr	r0, [r4, #4]
 800bb64:	f7ff ff82 	bl	800ba6c <std>
 800bb68:	68a0      	ldr	r0, [r4, #8]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	2109      	movs	r1, #9
 800bb6e:	f7ff ff7d 	bl	800ba6c <std>
 800bb72:	68e0      	ldr	r0, [r4, #12]
 800bb74:	2202      	movs	r2, #2
 800bb76:	2112      	movs	r1, #18
 800bb78:	f7ff ff78 	bl	800ba6c <std>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	61a3      	str	r3, [r4, #24]
 800bb80:	e7d2      	b.n	800bb28 <__sinit+0xc>
 800bb82:	bf00      	nop
 800bb84:	08046364 	.word	0x08046364
 800bb88:	0800bab5 	.word	0x0800bab5

0800bb8c <__sfp>:
 800bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8e:	4607      	mov	r7, r0
 800bb90:	f7ff ffac 	bl	800baec <__sfp_lock_acquire>
 800bb94:	4b1e      	ldr	r3, [pc, #120]	; (800bc10 <__sfp+0x84>)
 800bb96:	681e      	ldr	r6, [r3, #0]
 800bb98:	69b3      	ldr	r3, [r6, #24]
 800bb9a:	b913      	cbnz	r3, 800bba2 <__sfp+0x16>
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7ff ffbd 	bl	800bb1c <__sinit>
 800bba2:	3648      	adds	r6, #72	; 0x48
 800bba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	d503      	bpl.n	800bbb4 <__sfp+0x28>
 800bbac:	6833      	ldr	r3, [r6, #0]
 800bbae:	b30b      	cbz	r3, 800bbf4 <__sfp+0x68>
 800bbb0:	6836      	ldr	r6, [r6, #0]
 800bbb2:	e7f7      	b.n	800bba4 <__sfp+0x18>
 800bbb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbb8:	b9d5      	cbnz	r5, 800bbf0 <__sfp+0x64>
 800bbba:	4b16      	ldr	r3, [pc, #88]	; (800bc14 <__sfp+0x88>)
 800bbbc:	60e3      	str	r3, [r4, #12]
 800bbbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbc2:	6665      	str	r5, [r4, #100]	; 0x64
 800bbc4:	f000 f847 	bl	800bc56 <__retarget_lock_init_recursive>
 800bbc8:	f7ff ff96 	bl	800baf8 <__sfp_lock_release>
 800bbcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbd4:	6025      	str	r5, [r4, #0]
 800bbd6:	61a5      	str	r5, [r4, #24]
 800bbd8:	2208      	movs	r2, #8
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbe0:	f7fe ffb0 	bl	800ab44 <memset>
 800bbe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbec:	4620      	mov	r0, r4
 800bbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbf0:	3468      	adds	r4, #104	; 0x68
 800bbf2:	e7d9      	b.n	800bba8 <__sfp+0x1c>
 800bbf4:	2104      	movs	r1, #4
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	f7ff ff62 	bl	800bac0 <__sfmoreglue>
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	6030      	str	r0, [r6, #0]
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d1d5      	bne.n	800bbb0 <__sfp+0x24>
 800bc04:	f7ff ff78 	bl	800baf8 <__sfp_lock_release>
 800bc08:	230c      	movs	r3, #12
 800bc0a:	603b      	str	r3, [r7, #0]
 800bc0c:	e7ee      	b.n	800bbec <__sfp+0x60>
 800bc0e:	bf00      	nop
 800bc10:	08046364 	.word	0x08046364
 800bc14:	ffff0001 	.word	0xffff0001

0800bc18 <_fwalk_reent>:
 800bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	4688      	mov	r8, r1
 800bc20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc24:	2700      	movs	r7, #0
 800bc26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc2a:	f1b9 0901 	subs.w	r9, r9, #1
 800bc2e:	d505      	bpl.n	800bc3c <_fwalk_reent+0x24>
 800bc30:	6824      	ldr	r4, [r4, #0]
 800bc32:	2c00      	cmp	r4, #0
 800bc34:	d1f7      	bne.n	800bc26 <_fwalk_reent+0xe>
 800bc36:	4638      	mov	r0, r7
 800bc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3c:	89ab      	ldrh	r3, [r5, #12]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d907      	bls.n	800bc52 <_fwalk_reent+0x3a>
 800bc42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc46:	3301      	adds	r3, #1
 800bc48:	d003      	beq.n	800bc52 <_fwalk_reent+0x3a>
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	47c0      	blx	r8
 800bc50:	4307      	orrs	r7, r0
 800bc52:	3568      	adds	r5, #104	; 0x68
 800bc54:	e7e9      	b.n	800bc2a <_fwalk_reent+0x12>

0800bc56 <__retarget_lock_init_recursive>:
 800bc56:	4770      	bx	lr

0800bc58 <__retarget_lock_acquire_recursive>:
 800bc58:	4770      	bx	lr

0800bc5a <__retarget_lock_release_recursive>:
 800bc5a:	4770      	bx	lr

0800bc5c <__swhatbuf_r>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	460e      	mov	r6, r1
 800bc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc64:	2900      	cmp	r1, #0
 800bc66:	b096      	sub	sp, #88	; 0x58
 800bc68:	4614      	mov	r4, r2
 800bc6a:	461d      	mov	r5, r3
 800bc6c:	da08      	bge.n	800bc80 <__swhatbuf_r+0x24>
 800bc6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	602a      	str	r2, [r5, #0]
 800bc76:	061a      	lsls	r2, r3, #24
 800bc78:	d410      	bmi.n	800bc9c <__swhatbuf_r+0x40>
 800bc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc7e:	e00e      	b.n	800bc9e <__swhatbuf_r+0x42>
 800bc80:	466a      	mov	r2, sp
 800bc82:	f000 f945 	bl	800bf10 <_fstat_r>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	dbf1      	blt.n	800bc6e <__swhatbuf_r+0x12>
 800bc8a:	9a01      	ldr	r2, [sp, #4]
 800bc8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc94:	425a      	negs	r2, r3
 800bc96:	415a      	adcs	r2, r3
 800bc98:	602a      	str	r2, [r5, #0]
 800bc9a:	e7ee      	b.n	800bc7a <__swhatbuf_r+0x1e>
 800bc9c:	2340      	movs	r3, #64	; 0x40
 800bc9e:	2000      	movs	r0, #0
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	b016      	add	sp, #88	; 0x58
 800bca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bca8 <__smakebuf_r>:
 800bca8:	898b      	ldrh	r3, [r1, #12]
 800bcaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcac:	079d      	lsls	r5, r3, #30
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	d507      	bpl.n	800bcc4 <__smakebuf_r+0x1c>
 800bcb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	6163      	str	r3, [r4, #20]
 800bcc0:	b002      	add	sp, #8
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	ab01      	add	r3, sp, #4
 800bcc6:	466a      	mov	r2, sp
 800bcc8:	f7ff ffc8 	bl	800bc5c <__swhatbuf_r>
 800bccc:	9900      	ldr	r1, [sp, #0]
 800bcce:	4605      	mov	r5, r0
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7fe ffab 	bl	800ac2c <_malloc_r>
 800bcd6:	b948      	cbnz	r0, 800bcec <__smakebuf_r+0x44>
 800bcd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcdc:	059a      	lsls	r2, r3, #22
 800bcde:	d4ef      	bmi.n	800bcc0 <__smakebuf_r+0x18>
 800bce0:	f023 0303 	bic.w	r3, r3, #3
 800bce4:	f043 0302 	orr.w	r3, r3, #2
 800bce8:	81a3      	strh	r3, [r4, #12]
 800bcea:	e7e3      	b.n	800bcb4 <__smakebuf_r+0xc>
 800bcec:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <__smakebuf_r+0x7c>)
 800bcee:	62b3      	str	r3, [r6, #40]	; 0x28
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	6020      	str	r0, [r4, #0]
 800bcf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcf8:	81a3      	strh	r3, [r4, #12]
 800bcfa:	9b00      	ldr	r3, [sp, #0]
 800bcfc:	6163      	str	r3, [r4, #20]
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	6120      	str	r0, [r4, #16]
 800bd02:	b15b      	cbz	r3, 800bd1c <__smakebuf_r+0x74>
 800bd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f000 f913 	bl	800bf34 <_isatty_r>
 800bd0e:	b128      	cbz	r0, 800bd1c <__smakebuf_r+0x74>
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	f023 0303 	bic.w	r3, r3, #3
 800bd16:	f043 0301 	orr.w	r3, r3, #1
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	89a0      	ldrh	r0, [r4, #12]
 800bd1e:	4305      	orrs	r5, r0
 800bd20:	81a5      	strh	r5, [r4, #12]
 800bd22:	e7cd      	b.n	800bcc0 <__smakebuf_r+0x18>
 800bd24:	0800bab5 	.word	0x0800bab5

0800bd28 <memmove>:
 800bd28:	4288      	cmp	r0, r1
 800bd2a:	b510      	push	{r4, lr}
 800bd2c:	eb01 0402 	add.w	r4, r1, r2
 800bd30:	d902      	bls.n	800bd38 <memmove+0x10>
 800bd32:	4284      	cmp	r4, r0
 800bd34:	4623      	mov	r3, r4
 800bd36:	d807      	bhi.n	800bd48 <memmove+0x20>
 800bd38:	1e43      	subs	r3, r0, #1
 800bd3a:	42a1      	cmp	r1, r4
 800bd3c:	d008      	beq.n	800bd50 <memmove+0x28>
 800bd3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd46:	e7f8      	b.n	800bd3a <memmove+0x12>
 800bd48:	4402      	add	r2, r0
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	428a      	cmp	r2, r1
 800bd4e:	d100      	bne.n	800bd52 <memmove+0x2a>
 800bd50:	bd10      	pop	{r4, pc}
 800bd52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd5a:	e7f7      	b.n	800bd4c <memmove+0x24>

0800bd5c <_realloc_r>:
 800bd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd60:	4680      	mov	r8, r0
 800bd62:	4614      	mov	r4, r2
 800bd64:	460e      	mov	r6, r1
 800bd66:	b921      	cbnz	r1, 800bd72 <_realloc_r+0x16>
 800bd68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	f7fe bf5d 	b.w	800ac2c <_malloc_r>
 800bd72:	b92a      	cbnz	r2, 800bd80 <_realloc_r+0x24>
 800bd74:	f7fe feee 	bl	800ab54 <_free_r>
 800bd78:	4625      	mov	r5, r4
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd80:	f000 f8fa 	bl	800bf78 <_malloc_usable_size_r>
 800bd84:	4284      	cmp	r4, r0
 800bd86:	4607      	mov	r7, r0
 800bd88:	d802      	bhi.n	800bd90 <_realloc_r+0x34>
 800bd8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd8e:	d812      	bhi.n	800bdb6 <_realloc_r+0x5a>
 800bd90:	4621      	mov	r1, r4
 800bd92:	4640      	mov	r0, r8
 800bd94:	f7fe ff4a 	bl	800ac2c <_malloc_r>
 800bd98:	4605      	mov	r5, r0
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d0ed      	beq.n	800bd7a <_realloc_r+0x1e>
 800bd9e:	42bc      	cmp	r4, r7
 800bda0:	4622      	mov	r2, r4
 800bda2:	4631      	mov	r1, r6
 800bda4:	bf28      	it	cs
 800bda6:	463a      	movcs	r2, r7
 800bda8:	f7fe febe 	bl	800ab28 <memcpy>
 800bdac:	4631      	mov	r1, r6
 800bdae:	4640      	mov	r0, r8
 800bdb0:	f7fe fed0 	bl	800ab54 <_free_r>
 800bdb4:	e7e1      	b.n	800bd7a <_realloc_r+0x1e>
 800bdb6:	4635      	mov	r5, r6
 800bdb8:	e7df      	b.n	800bd7a <_realloc_r+0x1e>

0800bdba <_raise_r>:
 800bdba:	291f      	cmp	r1, #31
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	460d      	mov	r5, r1
 800bdc2:	d904      	bls.n	800bdce <_raise_r+0x14>
 800bdc4:	2316      	movs	r3, #22
 800bdc6:	6003      	str	r3, [r0, #0]
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	bd38      	pop	{r3, r4, r5, pc}
 800bdce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdd0:	b112      	cbz	r2, 800bdd8 <_raise_r+0x1e>
 800bdd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdd6:	b94b      	cbnz	r3, 800bdec <_raise_r+0x32>
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f000 f831 	bl	800be40 <_getpid_r>
 800bdde:	462a      	mov	r2, r5
 800bde0:	4601      	mov	r1, r0
 800bde2:	4620      	mov	r0, r4
 800bde4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bde8:	f000 b818 	b.w	800be1c <_kill_r>
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d00a      	beq.n	800be06 <_raise_r+0x4c>
 800bdf0:	1c59      	adds	r1, r3, #1
 800bdf2:	d103      	bne.n	800bdfc <_raise_r+0x42>
 800bdf4:	2316      	movs	r3, #22
 800bdf6:	6003      	str	r3, [r0, #0]
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	e7e7      	b.n	800bdcc <_raise_r+0x12>
 800bdfc:	2400      	movs	r4, #0
 800bdfe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be02:	4628      	mov	r0, r5
 800be04:	4798      	blx	r3
 800be06:	2000      	movs	r0, #0
 800be08:	e7e0      	b.n	800bdcc <_raise_r+0x12>
	...

0800be0c <raise>:
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <raise+0xc>)
 800be0e:	4601      	mov	r1, r0
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	f7ff bfd2 	b.w	800bdba <_raise_r>
 800be16:	bf00      	nop
 800be18:	200001f8 	.word	0x200001f8

0800be1c <_kill_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d07      	ldr	r5, [pc, #28]	; (800be3c <_kill_r+0x20>)
 800be20:	2300      	movs	r3, #0
 800be22:	4604      	mov	r4, r0
 800be24:	4608      	mov	r0, r1
 800be26:	4611      	mov	r1, r2
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	f7f5 fc0b 	bl	8001644 <_kill>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d102      	bne.n	800be38 <_kill_r+0x1c>
 800be32:	682b      	ldr	r3, [r5, #0]
 800be34:	b103      	cbz	r3, 800be38 <_kill_r+0x1c>
 800be36:	6023      	str	r3, [r4, #0]
 800be38:	bd38      	pop	{r3, r4, r5, pc}
 800be3a:	bf00      	nop
 800be3c:	20014238 	.word	0x20014238

0800be40 <_getpid_r>:
 800be40:	f7f5 bbf8 	b.w	8001634 <_getpid>

0800be44 <__sread>:
 800be44:	b510      	push	{r4, lr}
 800be46:	460c      	mov	r4, r1
 800be48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be4c:	f000 f89c 	bl	800bf88 <_read_r>
 800be50:	2800      	cmp	r0, #0
 800be52:	bfab      	itete	ge
 800be54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be56:	89a3      	ldrhlt	r3, [r4, #12]
 800be58:	181b      	addge	r3, r3, r0
 800be5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be5e:	bfac      	ite	ge
 800be60:	6563      	strge	r3, [r4, #84]	; 0x54
 800be62:	81a3      	strhlt	r3, [r4, #12]
 800be64:	bd10      	pop	{r4, pc}

0800be66 <__swrite>:
 800be66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6a:	461f      	mov	r7, r3
 800be6c:	898b      	ldrh	r3, [r1, #12]
 800be6e:	05db      	lsls	r3, r3, #23
 800be70:	4605      	mov	r5, r0
 800be72:	460c      	mov	r4, r1
 800be74:	4616      	mov	r6, r2
 800be76:	d505      	bpl.n	800be84 <__swrite+0x1e>
 800be78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be7c:	2302      	movs	r3, #2
 800be7e:	2200      	movs	r2, #0
 800be80:	f000 f868 	bl	800bf54 <_lseek_r>
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be8e:	81a3      	strh	r3, [r4, #12]
 800be90:	4632      	mov	r2, r6
 800be92:	463b      	mov	r3, r7
 800be94:	4628      	mov	r0, r5
 800be96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be9a:	f000 b817 	b.w	800becc <_write_r>

0800be9e <__sseek>:
 800be9e:	b510      	push	{r4, lr}
 800bea0:	460c      	mov	r4, r1
 800bea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea6:	f000 f855 	bl	800bf54 <_lseek_r>
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	bf15      	itete	ne
 800beb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800beb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800beb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800beba:	81a3      	strheq	r3, [r4, #12]
 800bebc:	bf18      	it	ne
 800bebe:	81a3      	strhne	r3, [r4, #12]
 800bec0:	bd10      	pop	{r4, pc}

0800bec2 <__sclose>:
 800bec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec6:	f000 b813 	b.w	800bef0 <_close_r>
	...

0800becc <_write_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d07      	ldr	r5, [pc, #28]	; (800beec <_write_r+0x20>)
 800bed0:	4604      	mov	r4, r0
 800bed2:	4608      	mov	r0, r1
 800bed4:	4611      	mov	r1, r2
 800bed6:	2200      	movs	r2, #0
 800bed8:	602a      	str	r2, [r5, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	f7f5 fbe9 	bl	80016b2 <_write>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d102      	bne.n	800beea <_write_r+0x1e>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	b103      	cbz	r3, 800beea <_write_r+0x1e>
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	20014238 	.word	0x20014238

0800bef0 <_close_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4d06      	ldr	r5, [pc, #24]	; (800bf0c <_close_r+0x1c>)
 800bef4:	2300      	movs	r3, #0
 800bef6:	4604      	mov	r4, r0
 800bef8:	4608      	mov	r0, r1
 800befa:	602b      	str	r3, [r5, #0]
 800befc:	f7f5 fbf5 	bl	80016ea <_close>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_close_r+0x1a>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_close_r+0x1a>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	20014238 	.word	0x20014238

0800bf10 <_fstat_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d07      	ldr	r5, [pc, #28]	; (800bf30 <_fstat_r+0x20>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	f7f5 fbf0 	bl	8001702 <_fstat>
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	d102      	bne.n	800bf2c <_fstat_r+0x1c>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	b103      	cbz	r3, 800bf2c <_fstat_r+0x1c>
 800bf2a:	6023      	str	r3, [r4, #0]
 800bf2c:	bd38      	pop	{r3, r4, r5, pc}
 800bf2e:	bf00      	nop
 800bf30:	20014238 	.word	0x20014238

0800bf34 <_isatty_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4d06      	ldr	r5, [pc, #24]	; (800bf50 <_isatty_r+0x1c>)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	602b      	str	r3, [r5, #0]
 800bf40:	f7f5 fbef 	bl	8001722 <_isatty>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_isatty_r+0x1a>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_isatty_r+0x1a>
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	20014238 	.word	0x20014238

0800bf54 <_lseek_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d07      	ldr	r5, [pc, #28]	; (800bf74 <_lseek_r+0x20>)
 800bf58:	4604      	mov	r4, r0
 800bf5a:	4608      	mov	r0, r1
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	2200      	movs	r2, #0
 800bf60:	602a      	str	r2, [r5, #0]
 800bf62:	461a      	mov	r2, r3
 800bf64:	f7f5 fbe8 	bl	8001738 <_lseek>
 800bf68:	1c43      	adds	r3, r0, #1
 800bf6a:	d102      	bne.n	800bf72 <_lseek_r+0x1e>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	b103      	cbz	r3, 800bf72 <_lseek_r+0x1e>
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	20014238 	.word	0x20014238

0800bf78 <_malloc_usable_size_r>:
 800bf78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf7c:	1f18      	subs	r0, r3, #4
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bfbc      	itt	lt
 800bf82:	580b      	ldrlt	r3, [r1, r0]
 800bf84:	18c0      	addlt	r0, r0, r3
 800bf86:	4770      	bx	lr

0800bf88 <_read_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	4d07      	ldr	r5, [pc, #28]	; (800bfa8 <_read_r+0x20>)
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	4608      	mov	r0, r1
 800bf90:	4611      	mov	r1, r2
 800bf92:	2200      	movs	r2, #0
 800bf94:	602a      	str	r2, [r5, #0]
 800bf96:	461a      	mov	r2, r3
 800bf98:	f7f5 fb6e 	bl	8001678 <_read>
 800bf9c:	1c43      	adds	r3, r0, #1
 800bf9e:	d102      	bne.n	800bfa6 <_read_r+0x1e>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	b103      	cbz	r3, 800bfa6 <_read_r+0x1e>
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	20014238 	.word	0x20014238

0800bfac <_init>:
 800bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfae:	bf00      	nop
 800bfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb2:	bc08      	pop	{r3}
 800bfb4:	469e      	mov	lr, r3
 800bfb6:	4770      	bx	lr

0800bfb8 <_fini>:
 800bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfba:	bf00      	nop
 800bfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfbe:	bc08      	pop	{r3}
 800bfc0:	469e      	mov	lr, r3
 800bfc2:	4770      	bx	lr
