
F411_VGA256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e234  0800bd1c  0800bd1c  0001bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f50  08019f50  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  08019f50  08019f50  00029f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f58  08019f58  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f58  08019f58  00029f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f5c  08019f5c  00029f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08019f60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006078  2000009c  08019ffc  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006114  08019ffc  00036114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190cf  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041de  00000000  00000000  0004919b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0004d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0004e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b576  00000000  00000000  0004f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d81  00000000  00000000  0006ad36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094927  00000000  00000000  00083ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001183de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005928  00000000  00000000  00118430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd04 	.word	0x0800bd04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	0800bd04 	.word	0x0800bd04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <VGA_update>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void VGA_update(){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	vga_voff[0] = VOFFSET;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <VGA_update+0x44>)
 800058c:	881a      	ldrh	r2, [r3, #0]
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <VGA_update+0x48>)
 8000590:	801a      	strh	r2, [r3, #0]
	for(int i=1;i<8;i++)
 8000592:	2301      	movs	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	e00d      	b.n	80005b4 <VGA_update+0x30>
	   vga_voff[i]=vga_voff[i-1]+VGA_LBUFFERSIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <VGA_update+0x48>)
 800059e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a2:	33c8      	adds	r3, #200	; 0xc8
 80005a4:	b299      	uxth	r1, r3
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <VGA_update+0x48>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=1;i<8;i++)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3301      	adds	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b07      	cmp	r3, #7
 80005b8:	ddee      	ble.n	8000598 <VGA_update+0x14>
}
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	200001f0 	.word	0x200001f0
 80005cc:	200001f8 	.word	0x200001f8

080005d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_9){
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e0:	d10f      	bne.n	8000602 <HAL_GPIO_EXTI_Callback+0x32>
		if(VOFFSET>0)VOFFSET-=1;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d005      	beq.n	80005f6 <HAL_GPIO_EXTI_Callback+0x26>
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 80005f4:	801a      	strh	r2, [r3, #0]
		vga_stop=1;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_GPIO_EXTI_Callback+0x88>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	801a      	strh	r2, [r3, #0]
		VGA_update();
 80005fc:	f7ff ffc2 	bl	8000584 <VGA_update>
 8000600:	e012      	b.n	8000628 <HAL_GPIO_EXTI_Callback+0x58>
	}
	else if(GPIO_Pin==GPIO_PIN_10){
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000608:	d10e      	bne.n	8000628 <HAL_GPIO_EXTI_Callback+0x58>
		if(VOFFSET<(VGA_LBUFFERSIZE-VGA_WIDTH))VOFFSET+=1;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2b27      	cmp	r3, #39	; 0x27
 8000610:	d805      	bhi.n	800061e <HAL_GPIO_EXTI_Callback+0x4e>
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	b29a      	uxth	r2, r3
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 800061c:	801a      	strh	r2, [r3, #0]
		vga_stop=1;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_GPIO_EXTI_Callback+0x88>)
 8000620:	2201      	movs	r2, #1
 8000622:	801a      	strh	r2, [r3, #0]
		VGA_update();
 8000624:	f7ff ffae 	bl	8000584 <VGA_update>
	}
	   sprintf(msg,"%d ",VOFFSET);
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	490b      	ldr	r1, [pc, #44]	; (800065c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <HAL_GPIO_EXTI_Callback+0x90>)
 8000632:	f00a fa97 	bl	800ab64 <siprintf>
	   SetCursor(3,50);
 8000636:	2132      	movs	r1, #50	; 0x32
 8000638:	2003      	movs	r0, #3
 800063a:	f001 ff87 	bl	800254c <SetCursor>
	   WriteString(msg,Font_7x10,VGA_WHITE);
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <HAL_GPIO_EXTI_Callback+0x94>)
 8000640:	23ff      	movs	r3, #255	; 0xff
 8000642:	ca06      	ldmia	r2, {r1, r2}
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <HAL_GPIO_EXTI_Callback+0x90>)
 8000646:	f001 ff5b 	bl	8002500 <WriteString>

}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200001f0 	.word	0x200001f0
 8000658:	200001f2 	.word	0x200001f2
 800065c:	0800bd1c 	.word	0x0800bd1c
 8000660:	20000224 	.word	0x20000224
 8000664:	20000008 	.word	0x20000008

08000668 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
     if(htim==&htim9){
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d11f      	bne.n	80006b8 <HAL_TIM_PeriodElapsedCallback+0x50>
		line=-14;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800067a:	f64f 72f2 	movw	r2, #65522	; 0xfff2
 800067e:	801a      	strh	r2, [r3, #0]
		if(firstTrig){
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d017      	beq.n	80006b8 <HAL_TIM_PeriodElapsedCallback+0x50>
			if(
            HAL_DMA_Start_IT(&hdma_tim1_up,(uint32_t)VGA_obuffer,GPIOB_ODR,VGA_FULL)
 8000688:	4910      	ldr	r1, [pc, #64]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000692:	4810      	ldr	r0, [pc, #64]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000694:	f002 fc66 	bl	8002f64 <HAL_DMA_Start_IT>
 8000698:	4603      	mov	r3, r0
			if(
 800069a:	2b00      	cmp	r3, #0
 800069c:	d009      	beq.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			!= HAL_OK){
				while(1){
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006a4:	f003 f9a3 	bl	80039ee <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f002 fa76 	bl	8002b9c <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80006b0:	e7f5      	b.n	800069e <HAL_TIM_PeriodElapsedCallback+0x36>
				}
			}
			firstTrig=0;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000100 	.word	0x20000100
 80006c4:	200001f4 	.word	0x200001f4
 80006c8:	20000000 	.word	0x20000000
 80006cc:	200008a4 	.word	0x200008a4
 80006d0:	20000208 	.word	0x20000208
 80006d4:	20000190 	.word	0x20000190
 80006d8:	40020800 	.word	0x40020800

080006dc <DMA_HalfCpltCallback>:

static void DMA_HalfCpltCallback(DMA_HandleTypeDef *hdma){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
     //fill in line1
	if((line<0)||(line>=VGA_VBUFFER)){
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 80006e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db04      	blt.n	80006f8 <DMA_HalfCpltCallback+0x1c>
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 80006f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f4:	2b77      	cmp	r3, #119	; 0x77
 80006f6:	dd06      	ble.n	8000706 <DMA_HalfCpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 80006f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80006fc:	2100      	movs	r1, #0
 80006fe:	4820      	ldr	r0, [pc, #128]	; (8000780 <DMA_HalfCpltCallback+0xa4>)
 8000700:	f00a f8cc 	bl	800a89c <memset>
 8000704:	e01d      	b.n	8000742 <DMA_HalfCpltCallback+0x66>
	}else{
		for(int i=0;i<4;i++)
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e017      	b.n	800073c <DMA_HalfCpltCallback+0x60>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 800070c:	4a1d      	ldr	r2, [pc, #116]	; (8000784 <DMA_HalfCpltCallback+0xa8>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000714:	461a      	mov	r2, r3
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <DMA_HalfCpltCallback+0xa4>)
 8000718:	18d0      	adds	r0, r2, r3
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 800071c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000720:	461a      	mov	r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	015b      	lsls	r3, r3, #5
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <DMA_HalfCpltCallback+0xac>)
 800072c:	4413      	add	r3, r2
 800072e:	22a0      	movs	r2, #160	; 0xa0
 8000730:	4619      	mov	r1, r3
 8000732:	f00a f8a5 	bl	800a880 <memcpy>
		for(int i=0;i<4;i++)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b03      	cmp	r3, #3
 8000740:	dde4      	ble.n	800070c <DMA_HalfCpltCallback+0x30>
	}
	line++;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 8000744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000748:	b29b      	uxth	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	b29b      	uxth	r3, r3
 800074e:	b21a      	sxth	r2, r3
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 8000752:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <DMA_HalfCpltCallback+0xb0>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00a      	beq.n	8000772 <DMA_HalfCpltCallback+0x96>
		HAL_DMA_Abort_IT(&hdma_tim1_up);
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <DMA_HalfCpltCallback+0xb4>)
 800075e:	f002 fcc9 	bl	80030f4 <HAL_DMA_Abort_IT>
		firstTrig=1;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <DMA_HalfCpltCallback+0xb8>)
 8000764:	2201      	movs	r2, #1
 8000766:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <DMA_HalfCpltCallback+0xb0>)
 800076a:	2200      	movs	r2, #0
 800076c:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800076e:	f7ff ff09 	bl	8000584 <VGA_update>
	}
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001f4 	.word	0x200001f4
 8000780:	200008a4 	.word	0x200008a4
 8000784:	200001f8 	.word	0x200001f8
 8000788:	20000ee4 	.word	0x20000ee4
 800078c:	200001f2 	.word	0x200001f2
 8000790:	20000190 	.word	0x20000190
 8000794:	20000000 	.word	0x20000000

08000798 <DMA_CpltCallback>:

static void DMA_CpltCallback(DMA_HandleTypeDef *hdma){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    //fill in line2 (later half)
	if((line<0)||(line>=VGA_VBUFFER)){
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <DMA_CpltCallback+0xa0>)
 80007a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db04      	blt.n	80007b4 <DMA_CpltCallback+0x1c>
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <DMA_CpltCallback+0xa0>)
 80007ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b0:	2b77      	cmp	r3, #119	; 0x77
 80007b2:	dd06      	ble.n	80007c2 <DMA_CpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 80007b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80007b8:	2100      	movs	r1, #0
 80007ba:	4820      	ldr	r0, [pc, #128]	; (800083c <DMA_CpltCallback+0xa4>)
 80007bc:	f00a f86e 	bl	800a89c <memset>
 80007c0:	e01d      	b.n	80007fe <DMA_CpltCallback+0x66>
	}else{
		for(int i=4;i<8;i++)
 80007c2:	2304      	movs	r3, #4
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e017      	b.n	80007f8 <DMA_CpltCallback+0x60>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <DMA_CpltCallback+0xa8>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <DMA_CpltCallback+0xa4>)
 80007d4:	18d0      	adds	r0, r2, r3
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <DMA_CpltCallback+0xa0>)
 80007d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007dc:	461a      	mov	r2, r3
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	015b      	lsls	r3, r3, #5
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <DMA_CpltCallback+0xac>)
 80007e8:	4413      	add	r3, r2
 80007ea:	22a0      	movs	r2, #160	; 0xa0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f00a f847 	bl	800a880 <memcpy>
		for(int i=4;i<8;i++)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b07      	cmp	r3, #7
 80007fc:	dde4      	ble.n	80007c8 <DMA_CpltCallback+0x30>
	}
	line++;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <DMA_CpltCallback+0xa0>)
 8000800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000804:	b29b      	uxth	r3, r3
 8000806:	3301      	adds	r3, #1
 8000808:	b29b      	uxth	r3, r3
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <DMA_CpltCallback+0xa0>)
 800080e:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <DMA_CpltCallback+0xb0>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00a      	beq.n	800082e <DMA_CpltCallback+0x96>
		HAL_DMA_Abort_IT(&hdma_tim1_up);
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <DMA_CpltCallback+0xb4>)
 800081a:	f002 fc6b 	bl	80030f4 <HAL_DMA_Abort_IT>
		firstTrig=1;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <DMA_CpltCallback+0xb8>)
 8000820:	2201      	movs	r2, #1
 8000822:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <DMA_CpltCallback+0xb0>)
 8000826:	2200      	movs	r2, #0
 8000828:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800082a:	f7ff feab 	bl	8000584 <VGA_update>
	}
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001f4 	.word	0x200001f4
 800083c:	200008a4 	.word	0x200008a4
 8000840:	200001f8 	.word	0x200001f8
 8000844:	20000ee4 	.word	0x20000ee4
 8000848:	200001f2 	.word	0x200001f2
 800084c:	20000190 	.word	0x20000190
 8000850:	20000000 	.word	0x20000000

08000854 <USBH_HID_EventCallback>:

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD){
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f007 fdc1 	bl	80083e4 <USBH_HID_GetDeviceType>
 8000862:	4603      	mov	r3, r0
 8000864:	2b02      	cmp	r3, #2
 8000866:	d129      	bne.n	80008bc <USBH_HID_EventCallback+0x68>
		HID_KEYBD_Info_TypeDef *Keyboard_Info;
		Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f007 fef3 	bl	8008654 <USBH_HID_GetKeybdInfo>
 800086e:	60f8      	str	r0, [r7, #12]
		uint8_t key = USBH_HID_GetASCIICode(Keyboard_Info);
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f007 ff93 	bl	800879c <USBH_HID_GetASCIICode>
 8000876:	4603      	mov	r3, r0
 8000878:	72fb      	strb	r3, [r7, #11]
		if(key==0)return;
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d01a      	beq.n	80008b6 <USBH_HID_EventCallback+0x62>
		if(((kBin+1)&0xf)==kBout)return;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <USBH_HID_EventCallback+0x70>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	f003 020f 	and.w	r2, r3, #15
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <USBH_HID_EventCallback+0x74>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d013      	beq.n	80008ba <USBH_HID_EventCallback+0x66>
		kBuffer[kBin]=key;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <USBH_HID_EventCallback+0x70>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <USBH_HID_EventCallback+0x78>)
 8000898:	7afa      	ldrb	r2, [r7, #11]
 800089a:	54ca      	strb	r2, [r1, r3]
		kBin=(kBin+1)&0xf;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <USBH_HID_EventCallback+0x70>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <USBH_HID_EventCallback+0x70>)
 80008a8:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80008aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ae:	4808      	ldr	r0, [pc, #32]	; (80008d0 <USBH_HID_EventCallback+0x7c>)
 80008b0:	f003 f89d 	bl	80039ee <HAL_GPIO_TogglePin>
 80008b4:	e002      	b.n	80008bc <USBH_HID_EventCallback+0x68>
		if(key==0)return;
 80008b6:	bf00      	nop
 80008b8:	e000      	b.n	80008bc <USBH_HID_EventCallback+0x68>
		if(((kBin+1)&0xf)==kBout)return;
 80008ba:	bf00      	nop
	}
}
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000021c 	.word	0x2000021c
 80008c8:	20000220 	.word	0x20000220
 80008cc:	2000020c 	.word	0x2000020c
 80008d0:	40020800 	.word	0x40020800

080008d4 <getch>:

extern uint8_t getch(char *ch){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	for(int i=0;i<10;i++){
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e007      	b.n	80008f2 <getch+0x1e>
	   MX_USB_HOST_Process();
 80008e2:	f009 fcbf 	bl	800a264 <MX_USB_HOST_Process>
	   HAL_Delay(2);
 80008e6:	2002      	movs	r0, #2
 80008e8:	f002 f958 	bl	8002b9c <HAL_Delay>
	for(int i=0;i<10;i++){
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b09      	cmp	r3, #9
 80008f6:	ddf4      	ble.n	80008e2 <getch+0xe>
	}
	if(kBin==kBout) return 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <getch+0x58>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <getch+0x5c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d101      	bne.n	8000908 <getch+0x34>
 8000904:	2300      	movs	r3, #0
 8000906:	e00d      	b.n	8000924 <getch+0x50>
	*ch = kBuffer[kBout];
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <getch+0x5c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <getch+0x60>)
 800090e:	5cd2      	ldrb	r2, [r2, r3]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	701a      	strb	r2, [r3, #0]
	kBout = (kBout+1)&0xf;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <getch+0x5c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <getch+0x5c>)
 8000920:	6013      	str	r3, [r2, #0]
	return 1;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000021c 	.word	0x2000021c
 8000930:	20000220 	.word	0x20000220
 8000934:	2000020c 	.word	0x2000020c

08000938 <tetrisDelay>:

extern void tetrisDelay(int ms){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4618      	mov	r0, r3
 8000944:	f002 f92a 	bl	8002b9c <HAL_Delay>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b093      	sub	sp, #76	; 0x4c
 8000954:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f002 f8af 	bl	8002ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 fa75 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 fbfd 	bl	800115c <MX_GPIO_Init>
  MX_DMA_Init();
 8000962:	f000 fbdb 	bl	800111c <MX_DMA_Init>
  MX_TIM10_Init();
 8000966:	f000 fb8b 	bl	8001080 <MX_TIM10_Init>
  MX_TIM9_Init();
 800096a:	f000 fb25 	bl	8000fb8 <MX_TIM9_Init>
  MX_TIM1_Init();
 800096e:	f000 fad3 	bl	8000f18 <MX_TIM1_Init>
  MX_USB_HOST_Init();
 8000972:	f009 fc51 	bl	800a218 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Abort(&hdma_tim1_up);
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <main+0x74>)
 8000978:	f002 fb4c 	bl	8003014 <HAL_DMA_Abort>
  if(
  	  HAL_DMA_RegisterCallback(&hdma_tim1_up,HAL_DMA_XFER_HALFCPLT_CB_ID,DMA_HalfCpltCallback)
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <main+0x78>)
 800097e:	2101      	movs	r1, #1
 8000980:	4810      	ldr	r0, [pc, #64]	; (80009c4 <main+0x74>)
 8000982:	f002 fd63 	bl	800344c <HAL_DMA_RegisterCallback>
 8000986:	4603      	mov	r3, r0
  if(
 8000988:	2b00      	cmp	r3, #0
 800098a:	d009      	beq.n	80009a0 <main+0x50>
  	  !=HAL_OK){
  	  while(1){
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	480e      	ldr	r0, [pc, #56]	; (80009cc <main+0x7c>)
 8000992:	f003 f82c 	bl	80039ee <HAL_GPIO_TogglePin>
  		  HAL_Delay(500);
 8000996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099a:	f002 f8ff 	bl	8002b9c <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800099e:	e7f5      	b.n	800098c <main+0x3c>
  	  }
  }
  if(
        HAL_DMA_RegisterCallback(&hdma_tim1_up,HAL_DMA_XFER_CPLT_CB_ID,DMA_CpltCallback)
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <main+0x80>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4807      	ldr	r0, [pc, #28]	; (80009c4 <main+0x74>)
 80009a6:	f002 fd51 	bl	800344c <HAL_DMA_RegisterCallback>
 80009aa:	4603      	mov	r3, r0
  if(
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d011      	beq.n	80009d4 <main+0x84>
        !=HAL_OK){
  	  while(1){
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80009b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <main+0x7c>)
 80009b6:	f003 f81a 	bl	80039ee <HAL_GPIO_TogglePin>
  		  HAL_Delay(250);
 80009ba:	20fa      	movs	r0, #250	; 0xfa
 80009bc:	f002 f8ee 	bl	8002b9c <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80009c0:	e7f6      	b.n	80009b0 <main+0x60>
 80009c2:	bf00      	nop
 80009c4:	20000190 	.word	0x20000190
 80009c8:	080006dd 	.word	0x080006dd
 80009cc:	40020800 	.word	0x40020800
 80009d0:	08000799 	.word	0x08000799
  	  }
  }
  VGA_update();
 80009d4:	f7ff fdd6 	bl	8000584 <VGA_update>
  GPIOB_ODR = (uint32_t)&(GPIOB->ODR);
 80009d8:	4bbd      	ldr	r3, [pc, #756]	; (8000cd0 <main+0x380>)
 80009da:	4abe      	ldr	r2, [pc, #760]	; (8000cd4 <main+0x384>)
 80009dc:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim9);
 80009de:	48be      	ldr	r0, [pc, #760]	; (8000cd8 <main+0x388>)
 80009e0:	f005 f910 	bl	8005c04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 80009e4:	2100      	movs	r1, #0
 80009e6:	48bc      	ldr	r0, [pc, #752]	; (8000cd8 <main+0x388>)
 80009e8:	f005 f9c8 	bl	8005d7c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 80009ec:	48bb      	ldr	r0, [pc, #748]	; (8000cdc <main+0x38c>)
 80009ee:	f005 f909 	bl	8005c04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);
 80009f2:	2100      	movs	r1, #0
 80009f4:	48b9      	ldr	r0, [pc, #740]	; (8000cdc <main+0x38c>)
 80009f6:	f005 f9c1 	bl	8005d7c <HAL_TIM_PWM_Start>


  __HAL_DMA_ENABLE_IT(&hdma_tim1_up,DMA_IT_TC);
 80009fa:	4bb9      	ldr	r3, [pc, #740]	; (8000ce0 <main+0x390>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4bb7      	ldr	r3, [pc, #732]	; (8000ce0 <main+0x390>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 0210 	orr.w	r2, r2, #16
 8000a08:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up,DMA_IT_HT);
 8000a0a:	4bb5      	ldr	r3, [pc, #724]	; (8000ce0 <main+0x390>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4bb3      	ldr	r3, [pc, #716]	; (8000ce0 <main+0x390>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f042 0208 	orr.w	r2, r2, #8
 8000a18:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000a1a:	4bb2      	ldr	r3, [pc, #712]	; (8000ce4 <main+0x394>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	4bb0      	ldr	r3, [pc, #704]	; (8000ce4 <main+0x394>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a28:	60da      	str	r2, [r3, #12]

  HAL_TIM_Base_Start(&htim1);
 8000a2a:	48ae      	ldr	r0, [pc, #696]	; (8000ce4 <main+0x394>)
 8000a2c:	f005 f890 	bl	8005b50 <HAL_TIM_Base_Start>

  HAL_Delay(100);
 8000a30:	2064      	movs	r0, #100	; 0x64
 8000a32:	f002 f8b3 	bl	8002b9c <HAL_Delay>
  vga_stop=1;
 8000a36:	4bac      	ldr	r3, [pc, #688]	; (8000ce8 <main+0x398>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	801a      	strh	r2, [r3, #0]

  ClearScreen(VGA_BLACK);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f001 fb75 	bl	800212c <ClearScreen>
  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000a42:	23ff      	movs	r3, #255	; 0xff
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2373      	movs	r3, #115	; 0x73
 8000a48:	229f      	movs	r2, #159	; 0x9f
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f001 fe3f 	bl	80026d0 <DrawRectangle>
  char msg[32]="Testing";
 8000a52:	4aa6      	ldr	r2, [pc, #664]	; (8000cec <main+0x39c>)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
  SetCursor(3,3);
 8000a70:	2103      	movs	r1, #3
 8000a72:	2003      	movs	r0, #3
 8000a74:	f001 fd6a 	bl	800254c <SetCursor>
  WriteString(msg,Font_7x10,VGA_GREEN);
 8000a78:	4a9d      	ldr	r2, [pc, #628]	; (8000cf0 <main+0x3a0>)
 8000a7a:	1d38      	adds	r0, r7, #4
 8000a7c:	231c      	movs	r3, #28
 8000a7e:	ca06      	ldmia	r2, {r1, r2}
 8000a80:	f001 fd3e 	bl	8002500 <WriteString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int r,x,y,w,h,z=0,c;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1)
  {
	  char cc;
//	  MX_USB_HOST_Process();
//	  continue;
	  r = rand()%50;
 8000a88:	f00a f81e 	bl	800aac8 <rand>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a99      	ldr	r2, [pc, #612]	; (8000cf4 <main+0x3a4>)
 8000a90:	fb82 1203 	smull	r1, r2, r2, r3
 8000a94:	1111      	asrs	r1, r2, #4
 8000a96:	17da      	asrs	r2, r3, #31
 8000a98:	1a8a      	subs	r2, r1, r2
 8000a9a:	2132      	movs	r1, #50	; 0x32
 8000a9c:	fb01 f202 	mul.w	r2, r1, r2
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000aa4:	f00a f810 	bl	800aac8 <rand>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	4b93      	ldr	r3, [pc, #588]	; (8000cf8 <main+0x3a8>)
 8000aac:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab0:	1199      	asrs	r1, r3, #6
 8000ab2:	17d3      	asrs	r3, r2, #31
 8000ab4:	1ac9      	subs	r1, r1, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	440b      	add	r3, r1
 8000abc:	015b      	lsls	r3, r3, #5
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000ac2:	f00a f801 	bl	800aac8 <rand>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a8c      	ldr	r2, [pc, #560]	; (8000cfc <main+0x3ac>)
 8000aca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ace:	441a      	add	r2, r3
 8000ad0:	1191      	asrs	r1, r2, #6
 8000ad2:	17da      	asrs	r2, r3, #31
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	2174      	movs	r1, #116	; 0x74
 8000ad8:	fb01 f202 	mul.w	r2, r1, r2
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000ae0:	f009 fff2 	bl	800aac8 <rand>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	425a      	negs	r2, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	bf58      	it	pl
 8000aee:	4253      	negpl	r3, r2
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawCircle(x,y,r,c);
 8000af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af4:	b218      	sxth	r0, r3
 8000af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af8:	b219      	sxth	r1, r3
 8000afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f001 fd53 	bl	80025ac <DrawCircle>
	  r = rand()%50;
 8000b06:	f009 ffdf 	bl	800aac8 <rand>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a79      	ldr	r2, [pc, #484]	; (8000cf4 <main+0x3a4>)
 8000b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b12:	1111      	asrs	r1, r2, #4
 8000b14:	17da      	asrs	r2, r3, #31
 8000b16:	1a8a      	subs	r2, r1, r2
 8000b18:	2132      	movs	r1, #50	; 0x32
 8000b1a:	fb01 f202 	mul.w	r2, r1, r2
 8000b1e:	1a9b      	subs	r3, r3, r2
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000b22:	f009 ffd1 	bl	800aac8 <rand>
 8000b26:	4602      	mov	r2, r0
 8000b28:	4b73      	ldr	r3, [pc, #460]	; (8000cf8 <main+0x3a8>)
 8000b2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000b2e:	1199      	asrs	r1, r3, #6
 8000b30:	17d3      	asrs	r3, r2, #31
 8000b32:	1ac9      	subs	r1, r1, r3
 8000b34:	460b      	mov	r3, r1
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	015b      	lsls	r3, r3, #5
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000b40:	f009 ffc2 	bl	800aac8 <rand>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4a6d      	ldr	r2, [pc, #436]	; (8000cfc <main+0x3ac>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	441a      	add	r2, r3
 8000b4e:	1191      	asrs	r1, r2, #6
 8000b50:	17da      	asrs	r2, r3, #31
 8000b52:	1a8a      	subs	r2, r1, r2
 8000b54:	2174      	movs	r1, #116	; 0x74
 8000b56:	fb01 f202 	mul.w	r2, r1, r2
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000b5e:	f009 ffb3 	bl	800aac8 <rand>
 8000b62:	4603      	mov	r3, r0
 8000b64:	425a      	negs	r2, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	bf58      	it	pl
 8000b6c:	4253      	negpl	r3, r2
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillCircle(x,y,r,c);
 8000b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b72:	b218      	sxth	r0, r3
 8000b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b76:	b219      	sxth	r1, r3
 8000b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f001 fe2f 	bl	80027e2 <FillCircle>
	  x = rand()%VGA_WIDTH;
 8000b84:	f009 ffa0 	bl	800aac8 <rand>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b5b      	ldr	r3, [pc, #364]	; (8000cf8 <main+0x3a8>)
 8000b8c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b90:	1199      	asrs	r1, r3, #6
 8000b92:	17d3      	asrs	r3, r2, #31
 8000b94:	1ac9      	subs	r1, r1, r3
 8000b96:	460b      	mov	r3, r1
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000ba2:	f009 ff91 	bl	800aac8 <rand>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a54      	ldr	r2, [pc, #336]	; (8000cfc <main+0x3ac>)
 8000baa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bae:	441a      	add	r2, r3
 8000bb0:	1191      	asrs	r1, r2, #6
 8000bb2:	17da      	asrs	r2, r3, #31
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	2174      	movs	r1, #116	; 0x74
 8000bb8:	fb01 f202 	mul.w	r2, r1, r2
 8000bbc:	1a9b      	subs	r3, r3, r2
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%50;
 8000bc0:	f009 ff82 	bl	800aac8 <rand>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a4b      	ldr	r2, [pc, #300]	; (8000cf4 <main+0x3a4>)
 8000bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bcc:	1111      	asrs	r1, r2, #4
 8000bce:	17da      	asrs	r2, r3, #31
 8000bd0:	1a8a      	subs	r2, r1, r2
 8000bd2:	2132      	movs	r1, #50	; 0x32
 8000bd4:	fb01 f202 	mul.w	r2, r1, r2
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%50;
 8000bdc:	f009 ff74 	bl	800aac8 <rand>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <main+0x3a4>)
 8000be4:	fb82 1203 	smull	r1, r2, r2, r3
 8000be8:	1111      	asrs	r1, r2, #4
 8000bea:	17da      	asrs	r2, r3, #31
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	2132      	movs	r1, #50	; 0x32
 8000bf0:	fb01 f202 	mul.w	r2, r1, r2
 8000bf4:	1a9b      	subs	r3, r3, r2
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000bf8:	f009 ff66 	bl	800aac8 <rand>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	425a      	negs	r2, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	bf58      	it	pl
 8000c06:	4253      	negpl	r3, r2
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawRectangle(x,y,x+w,y+h,c);
 8000c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0c:	b218      	sxth	r0, r3
 8000c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c10:	b219      	sxth	r1, r3
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b21c      	sxth	r4, r3
 8000c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	4613      	mov	r3, r2
 8000c36:	4622      	mov	r2, r4
 8000c38:	f001 fd4a 	bl	80026d0 <DrawRectangle>
	  x = rand()%VGA_WIDTH;
 8000c3c:	f009 ff44 	bl	800aac8 <rand>
 8000c40:	4602      	mov	r2, r0
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <main+0x3a8>)
 8000c44:	fb83 1302 	smull	r1, r3, r3, r2
 8000c48:	1199      	asrs	r1, r3, #6
 8000c4a:	17d3      	asrs	r3, r2, #31
 8000c4c:	1ac9      	subs	r1, r1, r3
 8000c4e:	460b      	mov	r3, r1
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	015b      	lsls	r3, r3, #5
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000c5a:	f009 ff35 	bl	800aac8 <rand>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <main+0x3ac>)
 8000c62:	fb82 1203 	smull	r1, r2, r2, r3
 8000c66:	441a      	add	r2, r3
 8000c68:	1191      	asrs	r1, r2, #6
 8000c6a:	17da      	asrs	r2, r3, #31
 8000c6c:	1a8a      	subs	r2, r1, r2
 8000c6e:	2174      	movs	r1, #116	; 0x74
 8000c70:	fb01 f202 	mul.w	r2, r1, r2
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%50;
 8000c78:	f009 ff26 	bl	800aac8 <rand>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <main+0x3a4>)
 8000c80:	fb82 1203 	smull	r1, r2, r2, r3
 8000c84:	1111      	asrs	r1, r2, #4
 8000c86:	17da      	asrs	r2, r3, #31
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	2132      	movs	r1, #50	; 0x32
 8000c8c:	fb01 f202 	mul.w	r2, r1, r2
 8000c90:	1a9b      	subs	r3, r3, r2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%50;
 8000c94:	f009 ff18 	bl	800aac8 <rand>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a16      	ldr	r2, [pc, #88]	; (8000cf4 <main+0x3a4>)
 8000c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca0:	1111      	asrs	r1, r2, #4
 8000ca2:	17da      	asrs	r2, r3, #31
 8000ca4:	1a8a      	subs	r2, r1, r2
 8000ca6:	2132      	movs	r1, #50	; 0x32
 8000ca8:	fb01 f202 	mul.w	r2, r1, r2
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000cb0:	f009 ff0a 	bl	800aac8 <rand>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	425a      	negs	r2, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	bf58      	it	pl
 8000cbe:	4253      	negpl	r3, r2
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillRectangle(x,y,w,h,c);
 8000cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc4:	b218      	sxth	r0, r3
 8000cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc8:	b219      	sxth	r1, r3
 8000cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	e017      	b.n	8000d00 <main+0x3b0>
 8000cd0:	20000208 	.word	0x20000208
 8000cd4:	40020414 	.word	0x40020414
 8000cd8:	20000100 	.word	0x20000100
 8000cdc:	20000148 	.word	0x20000148
 8000ce0:	20000190 	.word	0x20000190
 8000ce4:	200000b8 	.word	0x200000b8
 8000ce8:	200001f2 	.word	0x200001f2
 8000cec:	0800bd34 	.word	0x0800bd34
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	51eb851f 	.word	0x51eb851f
 8000cf8:	66666667 	.word	0x66666667
 8000cfc:	8d3dcb09 	.word	0x8d3dcb09
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	b21c      	sxth	r4, r3
 8000d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	f001 fd27 	bl	800275e <FillRectangle>

	  if(getch(&cc)){
 8000d10:	1cfb      	adds	r3, r7, #3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fdde 	bl	80008d4 <getch>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d018      	beq.n	8000d50 <main+0x400>
		FillRectangle(VGA_WIDTH-100,0,VGA_WIDTH-1,20,VGA_BLACK);
 8000d1e:	2300      	movs	r3, #0
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2314      	movs	r3, #20
 8000d24:	229f      	movs	r2, #159	; 0x9f
 8000d26:	2100      	movs	r1, #0
 8000d28:	203c      	movs	r0, #60	; 0x3c
 8000d2a:	f001 fd18 	bl	800275e <FillRectangle>
		sprintf(msg,"KEY:%d:%c",cc,cc);
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	461a      	mov	r2, r3
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	1d38      	adds	r0, r7, #4
 8000d36:	493b      	ldr	r1, [pc, #236]	; (8000e24 <main+0x4d4>)
 8000d38:	f009 ff14 	bl	800ab64 <siprintf>
		SetCursor(VGA_WIDTH-100,5);
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	203c      	movs	r0, #60	; 0x3c
 8000d40:	f001 fc04 	bl	800254c <SetCursor>
		WriteString(msg,Font_7x10,VGA_GREEN);
 8000d44:	4a38      	ldr	r2, [pc, #224]	; (8000e28 <main+0x4d8>)
 8000d46:	1d38      	adds	r0, r7, #4
 8000d48:	231c      	movs	r3, #28
 8000d4a:	ca06      	ldmia	r2, {r1, r2}
 8000d4c:	f001 fbd8 	bl	8002500 <WriteString>
	  }
	  z=z+1;
 8000d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d52:	3301      	adds	r3, #1
 8000d54:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(z>=100){
 8000d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d58:	2b63      	cmp	r3, #99	; 0x63
 8000d5a:	dd5c      	ble.n	8000e16 <main+0x4c6>
		  /////////
		  ClearScreen(VGA_BLACK);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f001 f9e5 	bl	800212c <ClearScreen>
		  ShowImage((uint8_t *)color,160,120,0,0);
 8000d62:	2300      	movs	r3, #0
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2300      	movs	r3, #0
 8000d68:	2278      	movs	r2, #120	; 0x78
 8000d6a:	21a0      	movs	r1, #160	; 0xa0
 8000d6c:	482f      	ldr	r0, [pc, #188]	; (8000e2c <main+0x4dc>)
 8000d6e:	f001 fe2f 	bl	80029d0 <ShowImage>
		  HAL_Delay(5000);
 8000d72:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d76:	f001 ff11 	bl	8002b9c <HAL_Delay>
		  ShowImage((uint8_t *)flower,160,101,0,0);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2265      	movs	r2, #101	; 0x65
 8000d82:	21a0      	movs	r1, #160	; 0xa0
 8000d84:	482a      	ldr	r0, [pc, #168]	; (8000e30 <main+0x4e0>)
 8000d86:	f001 fe23 	bl	80029d0 <ShowImage>
		  HAL_Delay(5000);
 8000d8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d8e:	f001 ff05 	bl	8002b9c <HAL_Delay>
		  ShowImage((uint8_t *)rgb,160,120,0,0);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	2278      	movs	r2, #120	; 0x78
 8000d9a:	21a0      	movs	r1, #160	; 0xa0
 8000d9c:	4825      	ldr	r0, [pc, #148]	; (8000e34 <main+0x4e4>)
 8000d9e:	f001 fe17 	bl	80029d0 <ShowImage>
		  HAL_Delay(5000);
 8000da2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000da6:	f001 fef9 	bl	8002b9c <HAL_Delay>

		  tetris();
 8000daa:	f000 fcd5 	bl	8001758 <tetris>
		  //////////
		  z=0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ClearScreen(VGA_BLACK);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f001 f9ba 	bl	800212c <ClearScreen>
		  HAL_Delay(100);
 8000db8:	2064      	movs	r0, #100	; 0x64
 8000dba:	f001 feef 	bl	8002b9c <HAL_Delay>
		  vga_stop=1;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <main+0x4e8>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	801a      	strh	r2, [r3, #0]
		  sprintf(msg,"Testing");
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	491d      	ldr	r1, [pc, #116]	; (8000e3c <main+0x4ec>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f009 fecb 	bl	800ab64 <siprintf>
		  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000dce:	23ff      	movs	r3, #255	; 0xff
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2373      	movs	r3, #115	; 0x73
 8000dd4:	229f      	movs	r2, #159	; 0x9f
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f001 fc79 	bl	80026d0 <DrawRectangle>
		  SetCursor(3,3);
 8000dde:	2103      	movs	r1, #3
 8000de0:	2003      	movs	r0, #3
 8000de2:	f001 fbb3 	bl	800254c <SetCursor>
		  WriteString(msg,Font_7x10,VGA_GREEN);
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <main+0x4d8>)
 8000de8:	1d38      	adds	r0, r7, #4
 8000dea:	231c      	movs	r3, #28
 8000dec:	ca06      	ldmia	r2, {r1, r2}
 8000dee:	f001 fb87 	bl	8002500 <WriteString>
		  sprintf(msg,"%d ",VOFFSET);
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <main+0x4f0>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4912      	ldr	r1, [pc, #72]	; (8000e44 <main+0x4f4>)
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f009 feb1 	bl	800ab64 <siprintf>
		  SetCursor(3,50);
 8000e02:	2132      	movs	r1, #50	; 0x32
 8000e04:	2003      	movs	r0, #3
 8000e06:	f001 fba1 	bl	800254c <SetCursor>
		  WriteString(msg,Font_7x10,VGA_WHITE);
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <main+0x4d8>)
 8000e0c:	1d38      	adds	r0, r7, #4
 8000e0e:	23ff      	movs	r3, #255	; 0xff
 8000e10:	ca06      	ldmia	r2, {r1, r2}
 8000e12:	f001 fb75 	bl	8002500 <WriteString>
	  }
	  HAL_Delay(100);
 8000e16:	2064      	movs	r0, #100	; 0x64
 8000e18:	f001 fec0 	bl	8002b9c <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e1c:	f009 fa22 	bl	800a264 <MX_USB_HOST_Process>
  {
 8000e20:	e632      	b.n	8000a88 <main+0x138>
 8000e22:	bf00      	nop
 8000e24:	0800bd20 	.word	0x0800bd20
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	0800fc8c 	.word	0x0800fc8c
 8000e30:	0800bd6c 	.word	0x0800bd6c
 8000e34:	0801478c 	.word	0x0801478c
 8000e38:	200001f2 	.word	0x200001f2
 8000e3c:	0800bd2c 	.word	0x0800bd2c
 8000e40:	200001f0 	.word	0x200001f0
 8000e44:	0800bd1c 	.word	0x0800bd1c

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f009 fd20 	bl	800a89c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000eb8:	2319      	movs	r3, #25
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ebc:	23c0      	movs	r3, #192	; 0xc0
 8000ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 f9cb 	bl	8005268 <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed8:	f000 f9ea 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 fc2d 	bl	8005758 <HAL_RCC_ClockConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f04:	f000 f9d4 	bl	80012b0 <Error_Handler>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3750      	adds	r7, #80	; 0x50
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <MX_TIM1_Init+0x9c>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4-1;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f5e:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f60:	f004 fda6 	bl	8005ab0 <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000f6a:	f000 f9a1 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f7c:	f005 f978 	bl	8006270 <HAL_TIM_ConfigClockSource>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000f86:	f000 f993 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_TIM1_Init+0x98>)
 8000f98:	f005 fdf8 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000fa2:	f000 f985 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000b8 	.word	0x200000b8
 8000fb4:	40010000 	.word	0x40010000

08000fb8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	; 0x30
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_TIM9_Init+0xc0>)
 8000fe2:	4a26      	ldr	r2, [pc, #152]	; (800107c <MX_TIM9_Init+0xc4>)
 8000fe4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_TIM9_Init+0xc0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_TIM9_Init+0xc0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 525-2;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_TIM9_Init+0xc0>)
 8000ff4:	f240 220b 	movw	r2, #523	; 0x20b
 8000ff8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_TIM9_Init+0xc0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM9_Init+0xc0>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001006:	481c      	ldr	r0, [pc, #112]	; (8001078 <MX_TIM9_Init+0xc0>)
 8001008:	f004 fd52 	bl	8005ab0 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8001012:	f000 f94d 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <MX_TIM9_Init+0xc0>)
 8001018:	f004 fe56 	bl	8005cc8 <HAL_TIM_PWM_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8001022:	f000 f945 	bl	80012b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001026:	2307      	movs	r3, #7
 8001028:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800102a:	2320      	movs	r3, #32
 800102c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_TIM9_Init+0xc0>)
 8001036:	f005 f9e2 	bl	80063fe <HAL_TIM_SlaveConfigSynchro>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8001040:	f000 f936 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001044:	2360      	movs	r3, #96	; 0x60
 8001046:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001050:	2304      	movs	r3, #4
 8001052:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <MX_TIM9_Init+0xc0>)
 800105c:	f005 f846 	bl	80060ec <HAL_TIM_PWM_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM9_Init+0xb2>
  {
    Error_Handler();
 8001066:	f000 f923 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <MX_TIM9_Init+0xc0>)
 800106c:	f000 f9de 	bl	800142c <HAL_TIM_MspPostInit>

}
 8001070:	bf00      	nop
 8001072:	3730      	adds	r7, #48	; 0x30
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000100 	.word	0x20000100
 800107c:	40014000 	.word	0x40014000

08001080 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]
 8001096:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_TIM10_Init+0x94>)
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <MX_TIM10_Init+0x98>)
 800109c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4-1;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_TIM10_Init+0x94>)
 80010a0:	2203      	movs	r2, #3
 80010a2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_TIM10_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800-1;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_TIM10_Init+0x94>)
 80010ac:	f240 321f 	movw	r2, #799	; 0x31f
 80010b0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_TIM10_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_TIM10_Init+0x94>)
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <MX_TIM10_Init+0x94>)
 80010c0:	f004 fcf6 	bl	8005ab0 <HAL_TIM_Base_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80010ca:	f000 f8f1 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_TIM10_Init+0x94>)
 80010d0:	f004 fdfa 	bl	8005cc8 <HAL_TIM_PWM_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80010da:	f000 f8e9 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 96-1;
 80010e2:	235f      	movs	r3, #95	; 0x5f
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010ea:	2304      	movs	r3, #4
 80010ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <MX_TIM10_Init+0x94>)
 80010f6:	f004 fff9 	bl	80060ec <HAL_TIM_PWM_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001100:	f000 f8d6 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <MX_TIM10_Init+0x94>)
 8001106:	f000 f991 	bl	800142c <HAL_TIM_MspPostInit>

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000148 	.word	0x20000148
 8001118:	40014400 	.word	0x40014400

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_DMA_Init+0x3c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <MX_DMA_Init+0x3c>)
 800112c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_DMA_Init+0x3c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2044      	movs	r0, #68	; 0x44
 8001144:	f001 fe29 	bl	8002d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001148:	2044      	movs	r0, #68	; 0x44
 800114a:	f001 fe42 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <MX_GPIO_Init+0x144>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a49      	ldr	r2, [pc, #292]	; (80012a0 <MX_GPIO_Init+0x144>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <MX_GPIO_Init+0x144>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <MX_GPIO_Init+0x144>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a42      	ldr	r2, [pc, #264]	; (80012a0 <MX_GPIO_Init+0x144>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <MX_GPIO_Init+0x144>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <MX_GPIO_Init+0x144>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <MX_GPIO_Init+0x144>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <MX_GPIO_Init+0x144>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MX_GPIO_Init+0x144>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <MX_GPIO_Init+0x144>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <MX_GPIO_Init+0x144>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e8:	482e      	ldr	r0, [pc, #184]	; (80012a4 <MX_GPIO_Init+0x148>)
 80011ea:	f002 fbe7 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B0_Pin|B1_Pin|G0_Pin|G1_Pin
 80011ee:	2200      	movs	r2, #0
 80011f0:	21ff      	movs	r1, #255	; 0xff
 80011f2:	482d      	ldr	r0, [pc, #180]	; (80012a8 <MX_GPIO_Init+0x14c>)
 80011f4:	f002 fbe2 	bl	80039bc <HAL_GPIO_WritePin>
                          |G2_Pin|R0_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	482b      	ldr	r0, [pc, #172]	; (80012ac <MX_GPIO_Init+0x150>)
 8001200:	f002 fbdc 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4821      	ldr	r0, [pc, #132]	; (80012a4 <MX_GPIO_Init+0x148>)
 800121e:	f002 fa49 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin B1_Pin G0_Pin G1_Pin
                           G2_Pin R0_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|G0_Pin|G1_Pin
 8001222:	23ff      	movs	r3, #255	; 0xff
 8001224:	617b      	str	r3, [r7, #20]
                          |G2_Pin|R0_Pin|R1_Pin|R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	481b      	ldr	r0, [pc, #108]	; (80012a8 <MX_GPIO_Init+0x14c>)
 800123a:	f002 fa3b 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800123e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001244:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124a:	2301      	movs	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MX_GPIO_Init+0x14c>)
 8001256:	f002 fa2d 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <MX_GPIO_Init+0x150>)
 8001274:	f002 fa1e 	bl	80036b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2017      	movs	r0, #23
 800127e:	f001 fd8c 	bl	8002d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001282:	2017      	movs	r0, #23
 8001284:	f001 fda5 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2028      	movs	r0, #40	; 0x28
 800128e:	f001 fd84 	bl	8002d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001292:	2028      	movs	r0, #40	; 0x28
 8001294:	f001 fd9d 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020000 	.word	0x40020000

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_MspInit+0x4c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a3e      	ldr	r2, [pc, #248]	; (8001414 <HAL_TIM_Base_MspInit+0x108>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d146      	bne.n	80013ac <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800133a:	4b38      	ldr	r3, [pc, #224]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 800133c:	4a38      	ldr	r2, [pc, #224]	; (8001420 <HAL_TIM_Base_MspInit+0x114>)
 800133e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001340:	4b36      	ldr	r3, [pc, #216]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 8001342:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001346:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 800134a:	2240      	movs	r2, #64	; 0x40
 800134c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 8001356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001368:	4b2c      	ldr	r3, [pc, #176]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 800136a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 8001372:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001376:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800137e:	4827      	ldr	r0, [pc, #156]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 8001380:	f001 fd42 	bl	8002e08 <HAL_DMA_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800138a:	f7ff ff91 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 8001392:	621a      	str	r2, [r3, #32]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <HAL_TIM_Base_MspInit+0x110>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2018      	movs	r0, #24
 80013a0:	f001 fcfb 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013a4:	2018      	movs	r0, #24
 80013a6:	f001 fd14 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80013aa:	e02e      	b.n	800140a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM9)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_TIM_Base_MspInit+0x118>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d116      	bne.n	80013e4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2018      	movs	r0, #24
 80013d8:	f001 fcdf 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013dc:	2018      	movs	r0, #24
 80013de:	f001 fcf8 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 80013e2:	e012      	b.n	800140a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_TIM_Base_MspInit+0x11c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10d      	bne.n	800140a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_TIM_Base_MspInit+0x10c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40010000 	.word	0x40010000
 8001418:	40023800 	.word	0x40023800
 800141c:	20000190 	.word	0x20000190
 8001420:	40026488 	.word	0x40026488
 8001424:	40014000 	.word	0x40014000
 8001428:	40014400 	.word	0x40014400

0800142c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a24      	ldr	r2, [pc, #144]	; (80014dc <HAL_TIM_MspPostInit+0xb0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11e      	bne.n	800148c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_TIM_MspPostInit+0xb4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_TIM_MspPostInit+0xb4>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_TIM_MspPostInit+0xb4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800146a:	2304      	movs	r3, #4
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800147a:	2303      	movs	r3, #3
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4817      	ldr	r0, [pc, #92]	; (80014e4 <HAL_TIM_MspPostInit+0xb8>)
 8001486:	f002 f915 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800148a:	e023      	b.n	80014d4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_TIM_MspPostInit+0xbc>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11e      	bne.n	80014d4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_TIM_MspPostInit+0xb4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_TIM_MspPostInit+0xb4>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_TIM_MspPostInit+0xb4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80014c4:	2303      	movs	r3, #3
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <HAL_TIM_MspPostInit+0xc0>)
 80014d0:	f002 f8f0 	bl	80036b4 <HAL_GPIO_Init>
}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40014000 	.word	0x40014000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40014400 	.word	0x40014400
 80014ec:	40020400 	.word	0x40020400

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f001 fb0e 	bl	8002b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001548:	f44f 7000 	mov.w	r0, #512	; 0x200
 800154c:	f002 fa6a 	bl	8003a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800155a:	f004 fcbf 	bl	8005edc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001560:	f004 fcbc 	bl	8005edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200000b8 	.word	0x200000b8
 800156c:	20000100 	.word	0x20000100

08001570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001574:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001578:	f002 fa54 	bl	8003a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <OTG_FS_IRQHandler+0x10>)
 8001586:	f002 fccf 	bl	8003f28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20005e00 	.word	0x20005e00

08001594 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <DMA2_Stream5_IRQHandler+0x10>)
 800159a:	f001 fdcd 	bl	8003138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000190 	.word	0x20000190

080015a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	return 1;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_kill>:

int _kill(int pid, int sig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015c2:	f009 f923 	bl	800a80c <__errno>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2216      	movs	r2, #22
 80015ca:	601a      	str	r2, [r3, #0]
	return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_exit>:

void _exit (int status)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffe7 	bl	80015b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ea:	e7fe      	b.n	80015ea <_exit+0x12>

080015ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015fe:	f3af 8000 	nop.w
 8001602:	4601      	mov	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
	}

return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e009      	b.n	800164c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf1      	blt.n	8001638 <_write+0x12>
	}
	return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_close>:

int _close(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001686:	605a      	str	r2, [r3, #4]
	return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_isatty>:

int _isatty(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	return 1;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f009 f888 	bl	800a80c <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20020000 	.word	0x20020000
 8001728:	00000400 	.word	0x00000400
 800172c:	20000264 	.word	0x20000264
 8001730:	20006118 	.word	0x20006118

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <tetris>:
void drawPiece(int pieceNum,int pieceRotation,int locX,int locY,int color);
void drawBoard();
void checkRows();


void tetris(){
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af02      	add	r7, sp, #8
	int x,y;
	uint8_t ch;
	//Initial values
	srand(0);
 800175e:	2000      	movs	r0, #0
 8001760:	f009 f984 	bl	800aa6c <srand>
	fallDelay = NUMLEVEL;
 8001764:	4b96      	ldr	r3, [pc, #600]	; (80019c0 <tetris+0x268>)
 8001766:	220a      	movs	r2, #10
 8001768:	601a      	str	r2, [r3, #0]
	curDelay=0;
 800176a:	4b96      	ldr	r3, [pc, #600]	; (80019c4 <tetris+0x26c>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
	curX = WIDTH/2;
 8001770:	4b95      	ldr	r3, [pc, #596]	; (80019c8 <tetris+0x270>)
 8001772:	2206      	movs	r2, #6
 8001774:	601a      	str	r2, [r3, #0]
	curY = 0;
 8001776:	4b95      	ldr	r3, [pc, #596]	; (80019cc <tetris+0x274>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
	curR = 0;
 800177c:	4b94      	ldr	r3, [pc, #592]	; (80019d0 <tetris+0x278>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	curPiece = rand()%7;
 8001782:	f009 f9a1 	bl	800aac8 <rand>
 8001786:	4602      	mov	r2, r0
 8001788:	4b92      	ldr	r3, [pc, #584]	; (80019d4 <tetris+0x27c>)
 800178a:	fb83 1302 	smull	r1, r3, r3, r2
 800178e:	4413      	add	r3, r2
 8001790:	1099      	asrs	r1, r3, #2
 8001792:	17d3      	asrs	r3, r2, #31
 8001794:	1ac9      	subs	r1, r1, r3
 8001796:	460b      	mov	r3, r1
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	1a5b      	subs	r3, r3, r1
 800179c:	1ad1      	subs	r1, r2, r3
 800179e:	4b8e      	ldr	r3, [pc, #568]	; (80019d8 <tetris+0x280>)
 80017a0:	6019      	str	r1, [r3, #0]
	score=0;
 80017a2:	4b8e      	ldr	r3, [pc, #568]	; (80019dc <tetris+0x284>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	running = 1;
 80017a8:	4b8d      	ldr	r3, [pc, #564]	; (80019e0 <tetris+0x288>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
    //Initialize board
	for(y=0;y<HEIGHT;y++){
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	e017      	b.n	80017e4 <tetris+0x8c>
		for(x=0;x<WIDTH;x++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e00e      	b.n	80017d8 <tetris+0x80>
			tetrisBoard[y][x]=V_BGND;
 80017ba:	498a      	ldr	r1, [pc, #552]	; (80019e4 <tetris+0x28c>)
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	2200      	movs	r2, #0
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(x=0;x<WIDTH;x++){
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	dded      	ble.n	80017ba <tetris+0x62>
	for(y=0;y<HEIGHT;y++){
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b1d      	cmp	r3, #29
 80017e8:	dde4      	ble.n	80017b4 <tetris+0x5c>
		}
	}
	//Clear screen and draw borders
	ClearScreen(V_BGND);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 fc9e 	bl	800212c <ClearScreen>
	FillRectangle(BOARD_X,BOARD_Y,
 80017f0:	23ff      	movs	r3, #255	; 0xff
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2360      	movs	r3, #96	; 0x60
 80017f6:	2203      	movs	r2, #3
 80017f8:	2101      	movs	r1, #1
 80017fa:	2001      	movs	r0, #1
 80017fc:	f000 ffaf 	bl	800275e <FillRectangle>
			      BOARD_X+SIZE-1,BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);
	FillRectangle(BOARD_X+(WIDTH+1)*SIZE,BOARD_Y,
 8001800:	23ff      	movs	r3, #255	; 0xff
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2360      	movs	r3, #96	; 0x60
 8001806:	222d      	movs	r2, #45	; 0x2d
 8001808:	2101      	movs	r1, #1
 800180a:	202b      	movs	r0, #43	; 0x2b
 800180c:	f000 ffa7 	bl	800275e <FillRectangle>
			      BOARD_X+(WIDTH+2)*SIZE-1,BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);
	FillRectangle(BOARD_X+SIZE,BOARD_Y,
 8001810:	23ff      	movs	r3, #255	; 0xff
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2303      	movs	r3, #3
 8001816:	222a      	movs	r2, #42	; 0x2a
 8001818:	2101      	movs	r1, #1
 800181a:	2004      	movs	r0, #4
 800181c:	f000 ff9f 	bl	800275e <FillRectangle>
			      BOARD_X+(WIDTH+1)*SIZE-1,BOARD_Y+SIZE-1,V_BORD);
	FillRectangle(BOARD_X+SIZE,BOARD_Y+(HEIGHT+1)*SIZE,
 8001820:	23ff      	movs	r3, #255	; 0xff
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2360      	movs	r3, #96	; 0x60
 8001826:	222a      	movs	r2, #42	; 0x2a
 8001828:	215e      	movs	r1, #94	; 0x5e
 800182a:	2004      	movs	r0, #4
 800182c:	f000 ff97 	bl	800275e <FillRectangle>
			      BOARD_X+(WIDTH+1)*SIZE-1,
				  BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);

	//Main Game Loop
	while(running){
 8001830:	e1d1      	b.n	8001bd6 <tetris+0x47e>
		//Checking for key pressed and move current piece
		if(getch(&ch)){
 8001832:	1cfb      	adds	r3, r7, #3
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f84d 	bl	80008d4 <getch>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8105 	beq.w	8001a4c <tetris+0x2f4>
			switch(ch){
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	3b30      	subs	r3, #48	; 0x30
 8001846:	2b08      	cmp	r3, #8
 8001848:	f200 8109 	bhi.w	8001a5e <tetris+0x306>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <tetris+0xfc>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001879 	.word	0x08001879
 8001858:	08001a5f 	.word	0x08001a5f
 800185c:	080019ed 	.word	0x080019ed
 8001860:	08001a5f 	.word	0x08001a5f
 8001864:	080018ff 	.word	0x080018ff
 8001868:	08001a5f 	.word	0x08001a5f
 800186c:	08001961 	.word	0x08001961
 8001870:	08001a5f 	.word	0x08001a5f
 8001874:	08001881 	.word	0x08001881
			case '0': // Exit Tetris
				running = 0;
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <tetris+0x288>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
				continue;
 800187e:	e1aa      	b.n	8001bd6 <tetris+0x47e>
			case '8': // rotate
				if(rotateAble(curPiece,(curR+1)%4,curX,curY)){
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <tetris+0x280>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	4b52      	ldr	r3, [pc, #328]	; (80019d0 <tetris+0x278>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0103 	and.w	r1, r3, #3
 8001890:	f002 0303 	and.w	r3, r2, #3
 8001894:	bf58      	it	pl
 8001896:	4259      	negpl	r1, r3
 8001898:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <tetris+0x270>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <tetris+0x274>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f000 fa0a 	bl	8001cb8 <rotateAble>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80d2 	beq.w	8001a50 <tetris+0x2f8>
					//remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 80018ac:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <tetris+0x280>)
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <tetris+0x278>)
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <tetris+0x270>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b44      	ldr	r3, [pc, #272]	; (80019cc <tetris+0x274>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2400      	movs	r4, #0
 80018be:	9400      	str	r4, [sp, #0]
 80018c0:	f000 fafe 	bl	8001ec0 <drawPiece>
					//rotate piece and re-draw
					curR = (curR+1)%4;
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <tetris+0x278>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	425a      	negs	r2, r3
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	bf58      	it	pl
 80018d6:	4253      	negpl	r3, r2
 80018d8:	4a3d      	ldr	r2, [pc, #244]	; (80019d0 <tetris+0x278>)
 80018da:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <tetris+0x280>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <tetris+0x278>)
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <tetris+0x270>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <tetris+0x274>)
 80018ea:	681c      	ldr	r4, [r3, #0]
 80018ec:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <tetris+0x280>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4d3d      	ldr	r5, [pc, #244]	; (80019e8 <tetris+0x290>)
 80018f2:	5ceb      	ldrb	r3, [r5, r3]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4623      	mov	r3, r4
 80018f8:	f000 fae2 	bl	8001ec0 <drawPiece>
			    }
				break;
 80018fc:	e0a8      	b.n	8001a50 <tetris+0x2f8>
			case '4': // move left
				if(rotateAble(curPiece,curR,curX-1,curY)){
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <tetris+0x280>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <tetris+0x278>)
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <tetris+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1e5a      	subs	r2, r3, #1
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <tetris+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f000 f9d2 	bl	8001cb8 <rotateAble>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 809c 	beq.w	8001a54 <tetris+0x2fc>
				    //remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <tetris+0x280>)
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <tetris+0x278>)
 8001922:	6819      	ldr	r1, [r3, #0]
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <tetris+0x270>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <tetris+0x274>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2400      	movs	r4, #0
 800192e:	9400      	str	r4, [sp, #0]
 8001930:	f000 fac6 	bl	8001ec0 <drawPiece>
					//rotate piece and re-draw
					curX = curX-1;
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <tetris+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3b01      	subs	r3, #1
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <tetris+0x270>)
 800193c:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <tetris+0x280>)
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <tetris+0x278>)
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <tetris+0x270>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <tetris+0x274>)
 800194c:	681c      	ldr	r4, [r3, #0]
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <tetris+0x280>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4d25      	ldr	r5, [pc, #148]	; (80019e8 <tetris+0x290>)
 8001954:	5ceb      	ldrb	r3, [r5, r3]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4623      	mov	r3, r4
 800195a:	f000 fab1 	bl	8001ec0 <drawPiece>
				}
				break;
 800195e:	e079      	b.n	8001a54 <tetris+0x2fc>
			case '6': // move right
				if(rotateAble(curPiece,curR,curX+1,curY)){
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <tetris+0x280>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <tetris+0x278>)
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <tetris+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <tetris+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f000 f9a1 	bl	8001cb8 <rotateAble>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d06d      	beq.n	8001a58 <tetris+0x300>
				    //remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <tetris+0x280>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <tetris+0x278>)
 8001982:	6819      	ldr	r1, [r3, #0]
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <tetris+0x270>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <tetris+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2400      	movs	r4, #0
 800198e:	9400      	str	r4, [sp, #0]
 8001990:	f000 fa96 	bl	8001ec0 <drawPiece>
					//rotate piece and re-draw
					curX = curX+1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <tetris+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <tetris+0x270>)
 800199c:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <tetris+0x280>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <tetris+0x278>)
 80019a4:	6819      	ldr	r1, [r3, #0]
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <tetris+0x270>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <tetris+0x274>)
 80019ac:	681c      	ldr	r4, [r3, #0]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <tetris+0x280>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4d0d      	ldr	r5, [pc, #52]	; (80019e8 <tetris+0x290>)
 80019b4:	5ceb      	ldrb	r3, [r5, r3]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4623      	mov	r3, r4
 80019ba:	f000 fa81 	bl	8001ec0 <drawPiece>
				}
				break;
 80019be:	e04b      	b.n	8001a58 <tetris+0x300>
 80019c0:	20000884 	.word	0x20000884
 80019c4:	20000888 	.word	0x20000888
 80019c8:	2000088c 	.word	0x2000088c
 80019cc:	20000890 	.word	0x20000890
 80019d0:	20000894 	.word	0x20000894
 80019d4:	92492493 	.word	0x92492493
 80019d8:	20000898 	.word	0x20000898
 80019dc:	20000880 	.word	0x20000880
 80019e0:	2000089c 	.word	0x2000089c
 80019e4:	20000268 	.word	0x20000268
 80019e8:	0801937c 	.word	0x0801937c
			case '2': // move down
				if(rotateAble(curPiece,curR,curX,curY+1)){
 80019ec:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <tetris+0x494>)
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <tetris+0x498>)
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	4b7f      	ldr	r3, [pc, #508]	; (8001bf4 <tetris+0x49c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <tetris+0x4a0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	f000 f95b 	bl	8001cb8 <rotateAble>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d029      	beq.n	8001a5c <tetris+0x304>
					//remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <tetris+0x494>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <tetris+0x498>)
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <tetris+0x49c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b78      	ldr	r3, [pc, #480]	; (8001bf8 <tetris+0x4a0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2400      	movs	r4, #0
 8001a1a:	9400      	str	r4, [sp, #0]
 8001a1c:	f000 fa50 	bl	8001ec0 <drawPiece>
					//rotate piece and re-draw
					curY = curY+1;
 8001a20:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <tetris+0x4a0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a74      	ldr	r2, [pc, #464]	; (8001bf8 <tetris+0x4a0>)
 8001a28:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 8001a2a:	4b70      	ldr	r3, [pc, #448]	; (8001bec <tetris+0x494>)
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <tetris+0x498>)
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <tetris+0x49c>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <tetris+0x4a0>)
 8001a38:	681c      	ldr	r4, [r3, #0]
 8001a3a:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <tetris+0x494>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4d6f      	ldr	r5, [pc, #444]	; (8001bfc <tetris+0x4a4>)
 8001a40:	5ceb      	ldrb	r3, [r5, r3]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4623      	mov	r3, r4
 8001a46:	f000 fa3b 	bl	8001ec0 <drawPiece>
				}
				break;
 8001a4a:	e007      	b.n	8001a5c <tetris+0x304>
		}
		}
 8001a4c:	bf00      	nop
 8001a4e:	e006      	b.n	8001a5e <tetris+0x306>
				break;
 8001a50:	bf00      	nop
 8001a52:	e004      	b.n	8001a5e <tetris+0x306>
				break;
 8001a54:	bf00      	nop
 8001a56:	e002      	b.n	8001a5e <tetris+0x306>
				break;
 8001a58:	bf00      	nop
 8001a5a:	e000      	b.n	8001a5e <tetris+0x306>
				break;
 8001a5c:	bf00      	nop
		curDelay--;
 8001a5e:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <tetris+0x4a8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	4a66      	ldr	r2, [pc, #408]	; (8001c00 <tetris+0x4a8>)
 8001a66:	6013      	str	r3, [r2, #0]
		if(curDelay<0){
 8001a68:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <tetris+0x4a8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f280 80af 	bge.w	8001bd0 <tetris+0x478>
			Round++;
 8001a72:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <tetris+0x4ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a62      	ldr	r2, [pc, #392]	; (8001c04 <tetris+0x4ac>)
 8001a7a:	6013      	str	r3, [r2, #0]
			if(Round>UPSPEED){
 8001a7c:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <tetris+0x4ac>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	dd0b      	ble.n	8001a9c <tetris+0x344>
				Round = 0;
 8001a84:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <tetris+0x4ac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
				if(fallDelay>0)
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <tetris+0x4b0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	dd04      	ble.n	8001a9c <tetris+0x344>
					fallDelay--;
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <tetris+0x4b0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	4a5b      	ldr	r2, [pc, #364]	; (8001c08 <tetris+0x4b0>)
 8001a9a:	6013      	str	r3, [r2, #0]
			}
			curDelay=fallDelay;
 8001a9c:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <tetris+0x4b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <tetris+0x4a8>)
 8001aa2:	6013      	str	r3, [r2, #0]
		    // Check if current piece can move further down
		    if(moveAble(curPiece,curR,curX,curY)){
 8001aa4:	4b51      	ldr	r3, [pc, #324]	; (8001bec <tetris+0x494>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <tetris+0x498>)
 8001aaa:	6819      	ldr	r1, [r3, #0]
 8001aac:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <tetris+0x49c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <tetris+0x4a0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f000 f958 	bl	8001d68 <moveAble>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d021      	beq.n	8001b02 <tetris+0x3aa>
			    //remove old piece
		    	drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001abe:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <tetris+0x494>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <tetris+0x498>)
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <tetris+0x49c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <tetris+0x4a0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2400      	movs	r4, #0
 8001ad0:	9400      	str	r4, [sp, #0]
 8001ad2:	f000 f9f5 	bl	8001ec0 <drawPiece>
		    	//rotate piece and re-draw
		    	curY = curY+1;
 8001ad6:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <tetris+0x4a0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a46      	ldr	r2, [pc, #280]	; (8001bf8 <tetris+0x4a0>)
 8001ade:	6013      	str	r3, [r2, #0]
		    	drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 8001ae0:	4b42      	ldr	r3, [pc, #264]	; (8001bec <tetris+0x494>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <tetris+0x498>)
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <tetris+0x49c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <tetris+0x4a0>)
 8001aee:	681c      	ldr	r4, [r3, #0]
 8001af0:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <tetris+0x494>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4d41      	ldr	r5, [pc, #260]	; (8001bfc <tetris+0x4a4>)
 8001af6:	5ceb      	ldrb	r3, [r5, r3]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4623      	mov	r3, r4
 8001afc:	f000 f9e0 	bl	8001ec0 <drawPiece>
 8001b00:	e066      	b.n	8001bd0 <tetris+0x478>
		    }else{
		    	// struck here
		    	//Assign value to the board
		    	for(int i=0;i<4;i++){
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	e035      	b.n	8001b74 <tetris+0x41c>
		    		tetrisBoard[curY+piece[curPiece][curR][i*2+1]]
							   [curX+piece[curPiece][curR][i*2]] = pieceColor[curPiece];
 8001b08:	4b38      	ldr	r3, [pc, #224]	; (8001bec <tetris+0x494>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <tetris+0x4a4>)
 8001b0e:	5cd5      	ldrb	r5, [r2, r3]
		    		tetrisBoard[curY+piece[curPiece][curR][i*2+1]]
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <tetris+0x494>)
 8001b12:	6819      	ldr	r1, [r3, #0]
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <tetris+0x498>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	483b      	ldr	r0, [pc, #236]	; (8001c0c <tetris+0x4b4>)
 8001b20:	0089      	lsls	r1, r1, #2
 8001b22:	440a      	add	r2, r1
 8001b24:	00d2      	lsls	r2, r2, #3
 8001b26:	4402      	add	r2, r0
 8001b28:	4413      	add	r3, r2
 8001b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <tetris+0x4a0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	441a      	add	r2, r3
							   [curX+piece[curPiece][curR][i*2]] = pieceColor[curPiece];
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <tetris+0x494>)
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <tetris+0x498>)
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4c32      	ldr	r4, [pc, #200]	; (8001c0c <tetris+0x4b4>)
 8001b44:	0080      	lsls	r0, r0, #2
 8001b46:	4401      	add	r1, r0
 8001b48:	00c9      	lsls	r1, r1, #3
 8001b4a:	4421      	add	r1, r4
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <tetris+0x49c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4419      	add	r1, r3
 8001b5a:	462c      	mov	r4, r5
 8001b5c:	482c      	ldr	r0, [pc, #176]	; (8001c10 <tetris+0x4b8>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		    	for(int i=0;i<4;i++){
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3301      	adds	r3, #1
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	ddc6      	ble.n	8001b08 <tetris+0x3b0>
		        }
		    	score = score+4; // Add score of placing new piece in the board
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <tetris+0x4bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <tetris+0x4bc>)
 8001b82:	6013      	str	r3, [r2, #0]

		    	//Check for completed rows
		    	checkRows();
 8001b84:	f000 fa54 	bl	8002030 <checkRows>
		    	showScore();
 8001b88:	f000 f84a 	bl	8001c20 <showScore>
			    //Generate new piece
			    curPiece = rand()%7;
 8001b8c:	f008 ff9c 	bl	800aac8 <rand>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <tetris+0x4c0>)
 8001b94:	fb83 1302 	smull	r1, r3, r3, r2
 8001b98:	4413      	add	r3, r2
 8001b9a:	1099      	asrs	r1, r3, #2
 8001b9c:	17d3      	asrs	r3, r2, #31
 8001b9e:	1ac9      	subs	r1, r1, r3
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a5b      	subs	r3, r3, r1
 8001ba6:	1ad1      	subs	r1, r2, r3
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <tetris+0x494>)
 8001baa:	6019      	str	r1, [r3, #0]
			    curX = WIDTH/2;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <tetris+0x49c>)
 8001bae:	2206      	movs	r2, #6
 8001bb0:	601a      	str	r2, [r3, #0]
			    curY = 0;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <tetris+0x4a0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
			    curR = 0;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <tetris+0x498>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

			    if(pieceOverlapped()){
 8001bbe:	f000 f925 	bl	8001e0c <pieceOverlapped>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <tetris+0x478>
			    	// Can not place new piece
			    	running = 0;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <tetris+0x4c4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
			    	continue;
 8001bce:	e002      	b.n	8001bd6 <tetris+0x47e>
			    }
		    }
		}
		tetrisDelay(100); //Delay one unit
 8001bd0:	2064      	movs	r0, #100	; 0x64
 8001bd2:	f7fe feb1 	bl	8000938 <tetrisDelay>
	while(running){
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <tetris+0x4c4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f ae29 	bne.w	8001832 <tetris+0xda>
	}
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000898 	.word	0x20000898
 8001bf0:	20000894 	.word	0x20000894
 8001bf4:	2000088c 	.word	0x2000088c
 8001bf8:	20000890 	.word	0x20000890
 8001bfc:	0801937c 	.word	0x0801937c
 8001c00:	20000888 	.word	0x20000888
 8001c04:	200008a0 	.word	0x200008a0
 8001c08:	20000884 	.word	0x20000884
 8001c0c:	0801929c 	.word	0x0801929c
 8001c10:	20000268 	.word	0x20000268
 8001c14:	20000880 	.word	0x20000880
 8001c18:	92492493 	.word	0x92492493
 8001c1c:	2000089c 	.word	0x2000089c

08001c20 <showScore>:


void showScore(){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
	char msg[16];
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE);
 8001c26:	2104      	movs	r1, #4
 8001c28:	2030      	movs	r0, #48	; 0x30
 8001c2a:	f000 fc8f 	bl	800254c <SetCursor>
	WriteString(" SCORE",Font_7x10,VGA_CYAN);
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <showScore+0x80>)
 8001c30:	231f      	movs	r3, #31
 8001c32:	ca06      	ldmia	r2, {r1, r2}
 8001c34:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <showScore+0x84>)
 8001c36:	f000 fc63 	bl	8002500 <WriteString>
	sprintf(msg,"%6d",score);
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <showScore+0x88>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	463b      	mov	r3, r7
 8001c40:	491a      	ldr	r1, [pc, #104]	; (8001cac <showScore+0x8c>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f008 ff8e 	bl	800ab64 <siprintf>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE+12);
 8001c48:	2110      	movs	r1, #16
 8001c4a:	2030      	movs	r0, #48	; 0x30
 8001c4c:	f000 fc7e 	bl	800254c <SetCursor>
	WriteString(msg,Font_7x10,VGA_YELLOW);
 8001c50:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <showScore+0x80>)
 8001c52:	4638      	mov	r0, r7
 8001c54:	23fc      	movs	r3, #252	; 0xfc
 8001c56:	ca06      	ldmia	r2, {r1, r2}
 8001c58:	f000 fc52 	bl	8002500 <WriteString>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE+24);
 8001c5c:	211c      	movs	r1, #28
 8001c5e:	2030      	movs	r0, #48	; 0x30
 8001c60:	f000 fc74 	bl	800254c <SetCursor>
	WriteString(" LEVEL",Font_7x10,VGA_CYAN);
 8001c64:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <showScore+0x80>)
 8001c66:	231f      	movs	r3, #31
 8001c68:	ca06      	ldmia	r2, {r1, r2}
 8001c6a:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <showScore+0x90>)
 8001c6c:	f000 fc48 	bl	8002500 <WriteString>
	sprintf(msg,"%6d",NUMLEVEL-fallDelay+1);
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <showScore+0x94>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1c3 020b 	rsb	r2, r3, #11
 8001c78:	463b      	mov	r3, r7
 8001c7a:	490c      	ldr	r1, [pc, #48]	; (8001cac <showScore+0x8c>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f008 ff71 	bl	800ab64 <siprintf>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE+36);
 8001c82:	2128      	movs	r1, #40	; 0x28
 8001c84:	2030      	movs	r0, #48	; 0x30
 8001c86:	f000 fc61 	bl	800254c <SetCursor>
	WriteString(msg,Font_7x10,VGA_GREEN);
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <showScore+0x80>)
 8001c8c:	4638      	mov	r0, r7
 8001c8e:	231c      	movs	r3, #28
 8001c90:	ca06      	ldmia	r2, {r1, r2}
 8001c92:	f000 fc35 	bl	8002500 <WriteString>
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	0800bd54 	.word	0x0800bd54
 8001ca8:	20000880 	.word	0x20000880
 8001cac:	0800bd5c 	.word	0x0800bd5c
 8001cb0:	0800bd60 	.word	0x0800bd60
 8001cb4:	20000884 	.word	0x20000884

08001cb8 <rotateAble>:
int  rotateAble(int pieceNum,int pieceTargetRotation,int locX,int locY){
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
    for(int i=0;i<4;i++){
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e03f      	b.n	8001d4c <rotateAble+0x94>
    	int x = piece[pieceNum][pieceTargetRotation][i*2]+locX;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4823      	ldr	r0, [pc, #140]	; (8001d60 <rotateAble+0xa8>)
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	0091      	lsls	r1, r2, #2
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	440a      	add	r2, r1
 8001cda:	00d2      	lsls	r2, r2, #3
 8001cdc:	4402      	add	r2, r0
 8001cde:	4413      	add	r3, r2
 8001ce0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceTargetRotation][i*2+1]+locY;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	481b      	ldr	r0, [pc, #108]	; (8001d60 <rotateAble+0xa8>)
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	0091      	lsls	r1, r2, #2
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	440a      	add	r2, r1
 8001cfc:	00d2      	lsls	r2, r2, #3
 8001cfe:	4402      	add	r2, r0
 8001d00:	4413      	add	r3, r2
 8001d02:	f993 3000 	ldrsb.w	r3, [r3]
 8001d06:	461a      	mov	r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
    	if(x<0) return 0; // Out of board
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da01      	bge.n	8001d18 <rotateAble+0x60>
 8001d14:	2300      	movs	r3, #0
 8001d16:	e01d      	b.n	8001d54 <rotateAble+0x9c>
    	if((x>=WIDTH) || (y>=HEIGHT)) return 0; // Out of board
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	dc02      	bgt.n	8001d24 <rotateAble+0x6c>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b1d      	cmp	r3, #29
 8001d22:	dd01      	ble.n	8001d28 <rotateAble+0x70>
 8001d24:	2300      	movs	r3, #0
 8001d26:	e015      	b.n	8001d54 <rotateAble+0x9c>
    	if(tetrisBoard[y][x]!=V_BGND) return 0; // Overlapped other pieces
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <rotateAble+0xac>)
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <rotateAble+0x8e>
 8001d42:	2300      	movs	r3, #0
 8001d44:	e006      	b.n	8001d54 <rotateAble+0x9c>
    for(int i=0;i<4;i++){
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	ddbc      	ble.n	8001ccc <rotateAble+0x14>
    }
    return 1;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3724      	adds	r7, #36	; 0x24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	0801929c 	.word	0x0801929c
 8001d64:	20000268 	.word	0x20000268

08001d68 <moveAble>:

int  moveAble(int pieceNum,int pieceRotation,int locX,int locY){
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++){
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e038      	b.n	8001dee <moveAble+0x86>
    	int x = piece[pieceNum][pieceRotation][i*2]+locX;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4820      	ldr	r0, [pc, #128]	; (8001e04 <moveAble+0x9c>)
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	0091      	lsls	r1, r2, #2
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	440a      	add	r2, r1
 8001d8a:	00d2      	lsls	r2, r2, #3
 8001d8c:	4402      	add	r2, r0
 8001d8e:	4413      	add	r3, r2
 8001d90:	f993 3000 	ldrsb.w	r3, [r3]
 8001d94:	461a      	mov	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceRotation][i*2+1]+locY;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	3301      	adds	r3, #1
 8001da2:	4818      	ldr	r0, [pc, #96]	; (8001e04 <moveAble+0x9c>)
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	0091      	lsls	r1, r2, #2
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	440a      	add	r2, r1
 8001dac:	00d2      	lsls	r2, r2, #3
 8001dae:	4402      	add	r2, r0
 8001db0:	4413      	add	r3, r2
 8001db2:	f993 3000 	ldrsb.w	r3, [r3]
 8001db6:	461a      	mov	r2, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
    	//check if it is at the buttom
    	if(y>=(HEIGHT-1)) return 0;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b1c      	cmp	r3, #28
 8001dc2:	dd01      	ble.n	8001dc8 <moveAble+0x60>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e016      	b.n	8001df6 <moveAble+0x8e>
    	//check if there is another piece under the current one
    	if(tetrisBoard[y+1][x]!=V_BGND)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	490e      	ldr	r1, [pc, #56]	; (8001e08 <moveAble+0xa0>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <moveAble+0x80>
    		return 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e006      	b.n	8001df6 <moveAble+0x8e>
	for(int i=0;i<4;i++){
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	ddc3      	ble.n	8001d7c <moveAble+0x14>
	}
	return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	0801929c 	.word	0x0801929c
 8001e08:	20000268 	.word	0x20000268

08001e0c <pieceOverlapped>:

int  pieceOverlapped(){
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
	for(int i=0;i<4;i++){
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e03d      	b.n	8001e94 <pieceOverlapped+0x88>
    	int x = piece[curPiece][curR][i*2]+curX;
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <pieceOverlapped+0x9c>)
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <pieceOverlapped+0xa0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4822      	ldr	r0, [pc, #136]	; (8001eb0 <pieceOverlapped+0xa4>)
 8001e26:	0089      	lsls	r1, r1, #2
 8001e28:	440a      	add	r2, r1
 8001e2a:	00d2      	lsls	r2, r2, #3
 8001e2c:	4402      	add	r2, r0
 8001e2e:	4413      	add	r3, r2
 8001e30:	f993 3000 	ldrsb.w	r3, [r3]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <pieceOverlapped+0xa8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60bb      	str	r3, [r7, #8]
    	int y = piece[curPiece][curR][i*2+1]+curY;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <pieceOverlapped+0x9c>)
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <pieceOverlapped+0xa0>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <pieceOverlapped+0xa4>)
 8001e4e:	0089      	lsls	r1, r1, #2
 8001e50:	440a      	add	r2, r1
 8001e52:	00d2      	lsls	r2, r2, #3
 8001e54:	4402      	add	r2, r0
 8001e56:	4413      	add	r3, r2
 8001e58:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <pieceOverlapped+0xac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	607b      	str	r3, [r7, #4]
    	//check if there is another piece under the current one
    	if(y<0) continue;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0f      	blt.n	8001e8c <pieceOverlapped+0x80>
    	if(tetrisBoard[y+1][x]!=V_BGND)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	4912      	ldr	r1, [pc, #72]	; (8001ebc <pieceOverlapped+0xb0>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <pieceOverlapped+0x82>
    		return 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e007      	b.n	8001e9c <pieceOverlapped+0x90>
    	if(y<0) continue;
 8001e8c:	bf00      	nop
	for(int i=0;i<4;i++){
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	ddbe      	ble.n	8001e18 <pieceOverlapped+0xc>
	}
	return 0;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	20000898 	.word	0x20000898
 8001eac:	20000894 	.word	0x20000894
 8001eb0:	0801929c 	.word	0x0801929c
 8001eb4:	2000088c 	.word	0x2000088c
 8001eb8:	20000890 	.word	0x20000890
 8001ebc:	20000268 	.word	0x20000268

08001ec0 <drawPiece>:

void  drawPiece(int pieceNum,int pieceRotation,int locX,int locY,int color){
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b08b      	sub	sp, #44	; 0x2c
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++){
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e050      	b.n	8001f76 <drawPiece+0xb6>
    	int x = piece[pieceNum][pieceRotation][i*2]+locX;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	482b      	ldr	r0, [pc, #172]	; (8001f88 <drawPiece+0xc8>)
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	0091      	lsls	r1, r2, #2
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	440a      	add	r2, r1
 8001ee2:	00d2      	lsls	r2, r2, #3
 8001ee4:	4402      	add	r2, r0
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f993 3000 	ldrsb.w	r3, [r3]
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceRotation][i*2+1]+locY;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4823      	ldr	r0, [pc, #140]	; (8001f88 <drawPiece+0xc8>)
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	0091      	lsls	r1, r2, #2
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	440a      	add	r2, r1
 8001f04:	00d2      	lsls	r2, r2, #3
 8001f06:	4402      	add	r2, r0
 8001f08:	4413      	add	r3, r2
 8001f0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]
    	if(y>=0){
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db29      	blt.n	8001f70 <drawPiece+0xb0>
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	0052      	lsls	r2, r2, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b218      	sxth	r0, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	0052      	lsls	r2, r2, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b219      	sxth	r1, r3
    	    		      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,color);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	3302      	adds	r3, #2
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	0052      	lsls	r2, r2, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	b21a      	sxth	r2, r3
    	    		      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,color);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3302      	adds	r3, #2
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461c      	mov	r4, r3
 8001f5c:	0064      	lsls	r4, r4, #1
 8001f5e:	4423      	add	r3, r4
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b21c      	sxth	r4, r3
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	f000 fbf7 	bl	800275e <FillRectangle>
	for(int i=0;i<4;i++){
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3301      	adds	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	ddab      	ble.n	8001ed4 <drawPiece+0x14>
    	}
	}
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0801929c 	.word	0x0801929c

08001f8c <drawBoard>:

void drawBoard(){
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af02      	add	r7, sp, #8
	for(int y=0;y<HEIGHT;y++){
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	e040      	b.n	800201a <drawBoard+0x8e>
		for(int x=0;x<WIDTH;x++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	e037      	b.n	800200e <drawBoard+0x82>
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	0052      	lsls	r2, r2, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b218      	sxth	r0, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	0052      	lsls	r2, r2, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b219      	sxth	r1, r3
					      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3302      	adds	r3, #2
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	0052      	lsls	r2, r2, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b21c      	sxth	r4, r3
					      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3302      	adds	r3, #2
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	0052      	lsls	r2, r2, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21d      	sxth	r5, r3
					       tetrisBoard[y][x]);
 8001fe6:	4e11      	ldr	r6, [pc, #68]	; (800202c <drawBoard+0xa0>)
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	462b      	mov	r3, r5
 8002002:	4622      	mov	r2, r4
 8002004:	f000 fbab 	bl	800275e <FillRectangle>
		for(int x=0;x<WIDTH;x++){
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	ddc4      	ble.n	8001f9e <drawBoard+0x12>
	for(int y=0;y<HEIGHT;y++){
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b1d      	cmp	r3, #29
 800201e:	ddbb      	ble.n	8001f98 <drawBoard+0xc>
		}
	}
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800202a:	bf00      	nop
 800202c:	20000268 	.word	0x20000268

08002030 <checkRows>:

void checkRows(){
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
	int addedScore = 100;
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	617b      	str	r3, [r7, #20]
	int y,x,yy;
	int flag;

	for(y=HEIGHT-1;y>=0;y--){
 800203a:	231d      	movs	r3, #29
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e068      	b.n	8002112 <checkRows+0xe2>
		flag = 1;
 8002040:	2301      	movs	r3, #1
 8002042:	607b      	str	r3, [r7, #4]
		//check current row if all filled
		for(x=0;x<WIDTH;x++){
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e012      	b.n	8002070 <checkRows+0x40>
			if(tetrisBoard[y][x]==V_BGND){
 800204a:	4936      	ldr	r1, [pc, #216]	; (8002124 <checkRows+0xf4>)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <checkRows+0x3a>
				flag = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
				break;
 8002068:	e005      	b.n	8002076 <checkRows+0x46>
		for(x=0;x<WIDTH;x++){
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3301      	adds	r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	dde9      	ble.n	800204a <checkRows+0x1a>
			}
		}
		if(flag){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d047      	beq.n	800210c <checkRows+0xdc>
			score += addedScore;  //increase score
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <checkRows+0xf8>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	4413      	add	r3, r2
 8002084:	4a28      	ldr	r2, [pc, #160]	; (8002128 <checkRows+0xf8>)
 8002086:	6013      	str	r3, [r2, #0]
			addedScore *=2;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	617b      	str	r3, [r7, #20]
			//Bunch pieces down
			for(yy=y-1;yy>=0;yy--){
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	3b01      	subs	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	e022      	b.n	80020dc <checkRows+0xac>
			   for(x=0;x<WIDTH;x++){
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e019      	b.n	80020d0 <checkRows+0xa0>
				   tetrisBoard[yy+1][x] = tetrisBoard[yy][x];
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	4820      	ldr	r0, [pc, #128]	; (8002124 <checkRows+0xf4>)
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	460b      	mov	r3, r1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	440b      	add	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	68f9      	ldr	r1, [r7, #12]
 80020b0:	440b      	add	r3, r1
 80020b2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80020b6:	481b      	ldr	r0, [pc, #108]	; (8002124 <checkRows+0xf4>)
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			   for(x=0;x<WIDTH;x++){
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3301      	adds	r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	dde2      	ble.n	800209c <checkRows+0x6c>
			for(yy=y-1;yy>=0;yy--){
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3b01      	subs	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	dad9      	bge.n	8002096 <checkRows+0x66>
			   }
			}
			for(x=0;x<WIDTH;x++){
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	e007      	b.n	80020f8 <checkRows+0xc8>
				   tetrisBoard[0][x] = V_BGND;
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <checkRows+0xf4>)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2100      	movs	r1, #0
 80020ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<WIDTH;x++){
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3301      	adds	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	ddf4      	ble.n	80020e8 <checkRows+0xb8>
			}
			y = HEIGHT; // recheck from bottom
 80020fe:	231e      	movs	r3, #30
 8002100:	613b      	str	r3, [r7, #16]
			drawBoard();
 8002102:	f7ff ff43 	bl	8001f8c <drawBoard>
			tetrisDelay(200);
 8002106:	20c8      	movs	r0, #200	; 0xc8
 8002108:	f7fe fc16 	bl	8000938 <tetrisDelay>
	for(y=HEIGHT-1;y>=0;y--){
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	3b01      	subs	r3, #1
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	da93      	bge.n	8002040 <checkRows+0x10>
		}
	}
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000268 	.word	0x20000268
 8002128:	20000880 	.word	0x20000880

0800212c <ClearScreen>:

uint8_t VGA_obuffer[VGA_FULL];
uint8_t VGA_buffer[VGA_VBUFFER][VGA_LBUFFER];
VGA_t VGA;

void ClearScreen(VGA_COLOR color){
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	int i,j;
	for(j=0;j<VGA_VBUFFER;j++)
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	e016      	b.n	800216a <ClearScreen+0x3e>
		for(i=0;i<VGA_LBUFFER;i++){
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e00d      	b.n	800215e <ClearScreen+0x32>
			VGA_buffer[j][i]= color;
 8002142:	490f      	ldr	r1, [pc, #60]	; (8002180 <ClearScreen+0x54>)
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	015b      	lsls	r3, r3, #5
 800214e:	18ca      	adds	r2, r1, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	79fa      	ldrb	r2, [r7, #7]
 8002156:	701a      	strb	r2, [r3, #0]
		for(i=0;i<VGA_LBUFFER;i++){
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3301      	adds	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b9f      	cmp	r3, #159	; 0x9f
 8002162:	ddee      	ble.n	8002142 <ClearScreen+0x16>
	for(j=0;j<VGA_VBUFFER;j++)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	3301      	adds	r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b77      	cmp	r3, #119	; 0x77
 800216e:	dde5      	ble.n	800213c <ClearScreen+0x10>
	}
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000ee4 	.word	0x20000ee4

08002184 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, VGA_COLOR color) {
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
 800218e:	460b      	mov	r3, r1
 8002190:	80bb      	strh	r3, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (y <0)||
 8002196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800219a:	2b00      	cmp	r3, #0
 800219c:	db19      	blt.n	80021d2 <DrawPixel+0x4e>
 800219e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db15      	blt.n	80021d2 <DrawPixel+0x4e>
 80021a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021aa:	2b9f      	cmp	r3, #159	; 0x9f
 80021ac:	dc11      	bgt.n	80021d2 <DrawPixel+0x4e>
	    (x >= VGA_WIDTH) || (y >= VGA_HEIGHT)) {
 80021ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021b2:	2b73      	cmp	r3, #115	; 0x73
 80021b4:	dc0d      	bgt.n	80021d2 <DrawPixel+0x4e>
		/* Error */
		return;
	}
	/* Set color */
	VGA_buffer[y][x]=color;
 80021b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80021ba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80021be:	4808      	ldr	r0, [pc, #32]	; (80021e0 <DrawPixel+0x5c>)
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	015b      	lsls	r3, r3, #5
 80021c8:	4403      	add	r3, r0
 80021ca:	440b      	add	r3, r1
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e000      	b.n	80021d4 <DrawPixel+0x50>
		return;
 80021d2:	bf00      	nop
}
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000ee4 	.word	0x20000ee4

080021e4 <DrawLine>:

void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, VGA_COLOR c) {
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4604      	mov	r4, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4623      	mov	r3, r4
 80021f4:	80fb      	strh	r3, [r7, #6]
 80021f6:	4603      	mov	r3, r0
 80021f8:	80bb      	strh	r3, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	807b      	strh	r3, [r7, #2]
 80021fe:	4613      	mov	r3, r2
 8002200:	803b      	strh	r3, [r7, #0]
	}
	if (y1 >= VGA_HEIGHT) {
		y1 = VGA_HEIGHT - 1;
	}
*/
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8002202:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002206:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800220a:	429a      	cmp	r2, r3
 800220c:	da05      	bge.n	800221a <DrawLine+0x36>
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	b29b      	uxth	r3, r3
 8002216:	b21b      	sxth	r3, r3
 8002218:	e004      	b.n	8002224 <DrawLine+0x40>
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	b29b      	uxth	r3, r3
 8002222:	b21b      	sxth	r3, r3
 8002224:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8002226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800222a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800222e:	429a      	cmp	r2, r3
 8002230:	da05      	bge.n	800223e <DrawLine+0x5a>
 8002232:	883a      	ldrh	r2, [r7, #0]
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	b29b      	uxth	r3, r3
 800223a:	b21b      	sxth	r3, r3
 800223c:	e004      	b.n	8002248 <DrawLine+0x64>
 800223e:	88ba      	ldrh	r2, [r7, #4]
 8002240:	883b      	ldrh	r3, [r7, #0]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	b29b      	uxth	r3, r3
 8002246:	b21b      	sxth	r3, r3
 8002248:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 800224a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800224e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002252:	429a      	cmp	r2, r3
 8002254:	da01      	bge.n	800225a <DrawLine+0x76>
 8002256:	2301      	movs	r3, #1
 8002258:	e001      	b.n	800225e <DrawLine+0x7a>
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8002260:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002264:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002268:	429a      	cmp	r2, r3
 800226a:	da01      	bge.n	8002270 <DrawLine+0x8c>
 800226c:	2301      	movs	r3, #1
 800226e:	e001      	b.n	8002274 <DrawLine+0x90>
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
 8002274:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8002276:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800227a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800227e:	429a      	cmp	r2, r3
 8002280:	dd06      	ble.n	8002290 <DrawLine+0xac>
 8002282:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002286:	0fda      	lsrs	r2, r3, #31
 8002288:	4413      	add	r3, r2
 800228a:	105b      	asrs	r3, r3, #1
 800228c:	b21b      	sxth	r3, r3
 800228e:	e006      	b.n	800229e <DrawLine+0xba>
 8002290:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002294:	0fda      	lsrs	r2, r3, #31
 8002296:	4413      	add	r3, r2
 8002298:	105b      	asrs	r3, r3, #1
 800229a:	425b      	negs	r3, r3
 800229c:	b21b      	sxth	r3, r3
 800229e:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80022a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d130      	bne.n	800230a <DrawLine+0x126>
		if (y1 < y0) {
 80022a8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80022ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	da05      	bge.n	80022c0 <DrawLine+0xdc>
			tmp = y1;
 80022b4:	883b      	ldrh	r3, [r7, #0]
 80022b6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80022b8:	88bb      	ldrh	r3, [r7, #4]
 80022ba:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80022bc:	893b      	ldrh	r3, [r7, #8]
 80022be:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80022c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	da05      	bge.n	80022d8 <DrawLine+0xf4>
			tmp = x1;
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80022d4:	893b      	ldrh	r3, [r7, #8]
 80022d6:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80022d8:	88bb      	ldrh	r3, [r7, #4]
 80022da:	82bb      	strh	r3, [r7, #20]
 80022dc:	e00e      	b.n	80022fc <DrawLine+0x118>
			DrawPixel(x0, i, c);
 80022de:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80022e2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80022e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff4a 	bl	8002184 <DrawPixel>
		for (i = y0; i <= y1; i++) {
 80022f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	82bb      	strh	r3, [r7, #20]
 80022fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002300:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002304:	429a      	cmp	r2, r3
 8002306:	ddea      	ble.n	80022de <DrawLine+0xfa>
		}

		/* Return from function */
		return;
 8002308:	e06e      	b.n	80023e8 <DrawLine+0x204>
	}

	if (dy == 0) {
 800230a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d130      	bne.n	8002374 <DrawLine+0x190>
		if (y1 < y0) {
 8002312:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002316:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	da05      	bge.n	800232a <DrawLine+0x146>
			tmp = y1;
 800231e:	883b      	ldrh	r3, [r7, #0]
 8002320:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002322:	88bb      	ldrh	r3, [r7, #4]
 8002324:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002326:	893b      	ldrh	r3, [r7, #8]
 8002328:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800232a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002332:	429a      	cmp	r2, r3
 8002334:	da05      	bge.n	8002342 <DrawLine+0x15e>
			tmp = x1;
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800233e:	893b      	ldrh	r3, [r7, #8]
 8002340:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	82bb      	strh	r3, [r7, #20]
 8002346:	e00e      	b.n	8002366 <DrawLine+0x182>
			DrawPixel(i, y0, c);
 8002348:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800234c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002350:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff15 	bl	8002184 <DrawPixel>
		for (i = x0; i <= x1; i++) {
 800235a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800235e:	b29b      	uxth	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	b29b      	uxth	r3, r3
 8002364:	82bb      	strh	r3, [r7, #20]
 8002366:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800236a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800236e:	429a      	cmp	r2, r3
 8002370:	ddea      	ble.n	8002348 <DrawLine+0x164>
		}

		/* Return from function */
		return;
 8002372:	e039      	b.n	80023e8 <DrawLine+0x204>
	}

	while (1) {
		DrawPixel(x0, y0, c);
 8002374:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002378:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800237c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff feff 	bl	8002184 <DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002386:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800238a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800238e:	429a      	cmp	r2, r3
 8002390:	d105      	bne.n	800239e <DrawLine+0x1ba>
 8002392:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002396:	f9b7 3000 	ldrsh.w	r3, [r7]
 800239a:	429a      	cmp	r2, r3
 800239c:	d023      	beq.n	80023e6 <DrawLine+0x202>
			break;
		}
		e2 = err;
 800239e:	8afb      	ldrh	r3, [r7, #22]
 80023a0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80023a2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023aa:	425b      	negs	r3, r3
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dd09      	ble.n	80023c4 <DrawLine+0x1e0>
			err -= dy;
 80023b0:	8afa      	ldrh	r2, [r7, #22]
 80023b2:	8a3b      	ldrh	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	89fb      	ldrh	r3, [r7, #14]
 80023be:	4413      	add	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 80023c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dad1      	bge.n	8002374 <DrawLine+0x190>
			err += dx;
 80023d0:	8afa      	ldrh	r2, [r7, #22]
 80023d2:	8a7b      	ldrh	r3, [r7, #18]
 80023d4:	4413      	add	r3, r2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80023da:	88ba      	ldrh	r2, [r7, #4]
 80023dc:	89bb      	ldrh	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	80bb      	strh	r3, [r7, #4]
		DrawPixel(x0, y0, c);
 80023e4:	e7c6      	b.n	8002374 <DrawLine+0x190>
			break;
 80023e6:	bf00      	nop
		}
	}
}
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}
	...

080023f0 <WriteChar>:

char WriteChar(char ch, FontDef Font, VGA_COLOR color) {
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4604      	mov	r4, r0
 80023f8:	1d38      	adds	r0, r7, #4
 80023fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80023fe:	461a      	mov	r2, r3
 8002400:	4623      	mov	r3, r4
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	4613      	mov	r3, r2
 8002406:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b1f      	cmp	r3, #31
 800240c:	d902      	bls.n	8002414 <WriteChar+0x24>
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	2b7e      	cmp	r3, #126	; 0x7e
 8002412:	d901      	bls.n	8002418 <WriteChar+0x28>
        return 0;
 8002414:	2300      	movs	r3, #0
 8002416:	e06d      	b.n	80024f4 <WriteChar+0x104>

    // Check remaining space on current line
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8002418:	4b38      	ldr	r3, [pc, #224]	; (80024fc <WriteChar+0x10c>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	793b      	ldrb	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	2ba0      	cmp	r3, #160	; 0xa0
 8002424:	dc06      	bgt.n	8002434 <WriteChar+0x44>
        VGA_HEIGHT < (VGA.CurrentY + Font.FontHeight))
 8002426:	4b35      	ldr	r3, [pc, #212]	; (80024fc <WriteChar+0x10c>)
 8002428:	885b      	ldrh	r3, [r3, #2]
 800242a:	461a      	mov	r2, r3
 800242c:	797b      	ldrb	r3, [r7, #5]
 800242e:	4413      	add	r3, r2
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8002430:	2b74      	cmp	r3, #116	; 0x74
 8002432:	dd01      	ble.n	8002438 <WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002434:	2300      	movs	r3, #0
 8002436:	e05d      	b.n	80024f4 <WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	e04c      	b.n	80024d8 <WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	3b20      	subs	r3, #32
 8002444:	7979      	ldrb	r1, [r7, #5]
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4619      	mov	r1, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	440b      	add	r3, r1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	e034      	b.n	80024c8 <WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <WriteChar+0xa4>
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR) color);
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <WriteChar+0x10c>)
 8002470:	881a      	ldrh	r2, [r3, #0]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4413      	add	r3, r2
 8002478:	b29b      	uxth	r3, r3
 800247a:	b218      	sxth	r0, r3
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <WriteChar+0x10c>)
 800247e:	885a      	ldrh	r2, [r3, #2]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4413      	add	r3, r2
 8002486:	b29b      	uxth	r3, r3
 8002488:	b21b      	sxth	r3, r3
 800248a:	7bba      	ldrb	r2, [r7, #14]
 800248c:	4619      	mov	r1, r3
 800248e:	f7ff fe79 	bl	8002184 <DrawPixel>
 8002492:	e016      	b.n	80024c2 <WriteChar+0xd2>
            } else {
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR)!color);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <WriteChar+0x10c>)
 8002496:	881a      	ldrh	r2, [r3, #0]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4413      	add	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b218      	sxth	r0, r3
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <WriteChar+0x10c>)
 80024a4:	885a      	ldrh	r2, [r3, #2]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b219      	sxth	r1, r3
 80024b0:	7bbb      	ldrb	r3, [r7, #14]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	f7ff fe61 	bl	8002184 <DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	3301      	adds	r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	793b      	ldrb	r3, [r7, #4]
 80024ca:	461a      	mov	r2, r3
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d3c5      	bcc.n	800245e <WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	797b      	ldrb	r3, [r7, #5]
 80024da:	461a      	mov	r2, r3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4293      	cmp	r3, r2
 80024e0:	d3ad      	bcc.n	800243e <WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    VGA.CurrentX += Font.FontWidth;
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <WriteChar+0x10c>)
 80024e4:	881a      	ldrh	r2, [r3, #0]
 80024e6:	793b      	ldrb	r3, [r7, #4]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4b03      	ldr	r3, [pc, #12]	; (80024fc <WriteChar+0x10c>)
 80024f0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3724      	adds	r7, #36	; 0x24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd90      	pop	{r4, r7, pc}
 80024fc:	200059e4 	.word	0x200059e4

08002500 <WriteString>:

char WriteString(char* str, FontDef Font, VGA_COLOR color) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	1d38      	adds	r0, r7, #4
 800250a:	e880 0006 	stmia.w	r0, {r1, r2}
 800250e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002510:	e012      	b.n	8002538 <WriteString+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	7818      	ldrb	r0, [r3, #0]
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	1d3a      	adds	r2, r7, #4
 800251a:	ca06      	ldmia	r2, {r1, r2}
 800251c:	f7ff ff68 	bl	80023f0 <WriteChar>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d002      	beq.n	8002532 <WriteString+0x32>
            // Char could not be written
            return *str;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	e008      	b.n	8002544 <WriteString+0x44>
        }

        // Next char
        str++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3301      	adds	r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e8      	bne.n	8002512 <WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	781b      	ldrb	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <SetCursor>:

// Position the cursor
void SetCursor(int16_t x, int16_t y) {
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	80fb      	strh	r3, [r7, #6]
 8002558:	4613      	mov	r3, r2
 800255a:	80bb      	strh	r3, [r7, #4]
	if((x<0)||(x>=VGA_WIDTH))
 800255c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db03      	blt.n	800256c <SetCursor+0x20>
 8002564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002568:	2b9f      	cmp	r3, #159	; 0x9f
 800256a:	dd03      	ble.n	8002574 <SetCursor+0x28>
	    VGA.CurrentX = 0;
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <SetCursor+0x5c>)
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	e002      	b.n	800257a <SetCursor+0x2e>
	else
		VGA.CurrentX = x;
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <SetCursor+0x5c>)
 8002578:	801a      	strh	r2, [r3, #0]
	if((y<0)||(y>=VGA_HEIGHT))
 800257a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db03      	blt.n	800258a <SetCursor+0x3e>
 8002582:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002586:	2b73      	cmp	r3, #115	; 0x73
 8002588:	dd03      	ble.n	8002592 <SetCursor+0x46>
	    VGA.CurrentY = 0;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <SetCursor+0x5c>)
 800258c:	2200      	movs	r2, #0
 800258e:	805a      	strh	r2, [r3, #2]
 8002590:	e003      	b.n	800259a <SetCursor+0x4e>
	else
        VGA.CurrentY = y;
 8002592:	88ba      	ldrh	r2, [r7, #4]
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <SetCursor+0x5c>)
 8002596:	805a      	strh	r2, [r3, #2]
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	200059e4 	.word	0x200059e4

080025ac <DrawCircle>:
    }

    return;
}

void DrawCircle(int16_t par_x,int16_t par_y,int16_t par_r,VGA_COLOR par_color) {
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4604      	mov	r4, r0
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4623      	mov	r3, r4
 80025bc:	80fb      	strh	r3, [r7, #6]
 80025be:	4603      	mov	r3, r0
 80025c0:	80bb      	strh	r3, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	807b      	strh	r3, [r7, #2]
 80025c6:	4613      	mov	r3, r2
 80025c8:	707b      	strb	r3, [r7, #1]
  int32_t x = -par_r;
 80025ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025ce:	425b      	negs	r3, r3
 80025d0:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 80025d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025da:	f1c3 0301 	rsb	r3, r3, #1
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= VGA_WIDTH || par_y >= VGA_HEIGHT) {
 80025e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e6:	2b9f      	cmp	r3, #159	; 0x9f
 80025e8:	dc6e      	bgt.n	80026c8 <DrawCircle+0x11c>
 80025ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025ee:	2b73      	cmp	r3, #115	; 0x73
 80025f0:	dc6a      	bgt.n	80026c8 <DrawCircle+0x11c>
    return;
  }

    do {
      DrawPixel(par_x - x, par_y + y, par_color);
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	b218      	sxth	r0, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	b29a      	uxth	r2, r3
 8002602:	88bb      	ldrh	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	b21b      	sxth	r3, r3
 800260a:	787a      	ldrb	r2, [r7, #1]
 800260c:	4619      	mov	r1, r3
 800260e:	f7ff fdb9 	bl	8002184 <DrawPixel>
      DrawPixel(par_x + x, par_y + y, par_color);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	b29a      	uxth	r2, r3
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4413      	add	r3, r2
 800261a:	b29b      	uxth	r3, r3
 800261c:	b218      	sxth	r0, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	b29a      	uxth	r2, r3
 8002622:	88bb      	ldrh	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	b21b      	sxth	r3, r3
 800262a:	787a      	ldrb	r2, [r7, #1]
 800262c:	4619      	mov	r1, r3
 800262e:	f7ff fda9 	bl	8002184 <DrawPixel>
      DrawPixel(par_x + x, par_y - y, par_color);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	b29a      	uxth	r2, r3
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4413      	add	r3, r2
 800263a:	b29b      	uxth	r3, r3
 800263c:	b218      	sxth	r0, r3
 800263e:	88ba      	ldrh	r2, [r7, #4]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	b29b      	uxth	r3, r3
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	b29b      	uxth	r3, r3
 8002648:	b21b      	sxth	r3, r3
 800264a:	787a      	ldrb	r2, [r7, #1]
 800264c:	4619      	mov	r1, r3
 800264e:	f7ff fd99 	bl	8002184 <DrawPixel>
      DrawPixel(par_x - x, par_y - y, par_color);
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	b29b      	uxth	r3, r3
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	b29b      	uxth	r3, r3
 800265c:	b218      	sxth	r0, r3
 800265e:	88ba      	ldrh	r2, [r7, #4]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	b29b      	uxth	r3, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	b29b      	uxth	r3, r3
 8002668:	b21b      	sxth	r3, r3
 800266a:	787a      	ldrb	r2, [r7, #1]
 800266c:	4619      	mov	r1, r3
 800266e:	f7ff fd89 	bl	8002184 <DrawPixel>
        e2 = err;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	429a      	cmp	r2, r3
 800267c:	dc13      	bgt.n	80026a6 <DrawCircle+0xfa>
            y++;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	3301      	adds	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	3301      	adds	r3, #1
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4413      	add	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	425b      	negs	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d105      	bne.n	80026a6 <DrawCircle+0xfa>
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	429a      	cmp	r2, r3
 80026a0:	dc01      	bgt.n	80026a6 <DrawCircle+0xfa>
              e2 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dd08      	ble.n	80026c0 <DrawCircle+0x114>
          x++;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	3301      	adds	r3, #1
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4413      	add	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dd95      	ble.n	80025f2 <DrawCircle+0x46>

    return;
 80026c6:	e000      	b.n	80026ca <DrawCircle+0x11e>
    return;
 80026c8:	bf00      	nop
}
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}

080026d0 <DrawRectangle>:

void DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	4604      	mov	r4, r0
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4623      	mov	r3, r4
 80026e0:	80fb      	strh	r3, [r7, #6]
 80026e2:	4603      	mov	r3, r0
 80026e4:	80bb      	strh	r3, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	807b      	strh	r3, [r7, #2]
 80026ea:	4613      	mov	r3, r2
 80026ec:	803b      	strh	r3, [r7, #0]
  DrawLine(x1,y1,x2,y1,color);
 80026ee:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80026f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80026f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80026fe:	7e3b      	ldrb	r3, [r7, #24]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	4623      	mov	r3, r4
 8002704:	f7ff fd6e 	bl	80021e4 <DrawLine>
  DrawLine(x2,y1,x2,y2,color);
 8002708:	f9b7 4000 	ldrsh.w	r4, [r7]
 800270c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002710:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002714:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002718:	7e3b      	ldrb	r3, [r7, #24]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4623      	mov	r3, r4
 800271e:	f7ff fd61 	bl	80021e4 <DrawLine>
  DrawLine(x2,y2,x1,y2,color);
 8002722:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002726:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800272a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800272e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002732:	7e3b      	ldrb	r3, [r7, #24]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	4623      	mov	r3, r4
 8002738:	f7ff fd54 	bl	80021e4 <DrawLine>
  DrawLine(x1,y2,x1,y1,color);
 800273c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002740:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002744:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002748:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800274c:	7e3b      	ldrb	r3, [r7, #24]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4623      	mov	r3, r4
 8002752:	f7ff fd47 	bl	80021e4 <DrawLine>
  return;
 8002756:	bf00      	nop
}
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bd90      	pop	{r4, r7, pc}

0800275e <FillRectangle>:

void FillRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 800275e:	b590      	push	{r4, r7, lr}
 8002760:	b087      	sub	sp, #28
 8002762:	af02      	add	r7, sp, #8
 8002764:	4604      	mov	r4, r0
 8002766:	4608      	mov	r0, r1
 8002768:	4611      	mov	r1, r2
 800276a:	461a      	mov	r2, r3
 800276c:	4623      	mov	r3, r4
 800276e:	80fb      	strh	r3, [r7, #6]
 8002770:	4603      	mov	r3, r0
 8002772:	80bb      	strh	r3, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 800277c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002780:	2b9f      	cmp	r3, #159	; 0x9f
 8002782:	dc2a      	bgt.n	80027da <FillRectangle+0x7c>
 8002784:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002788:	2b73      	cmp	r3, #115	; 0x73
 800278a:	dc26      	bgt.n	80027da <FillRectangle+0x7c>
    if(x2 >= VGA_WIDTH) x2 = VGA_WIDTH-1;
 800278c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002790:	2b9f      	cmp	r3, #159	; 0x9f
 8002792:	dd01      	ble.n	8002798 <FillRectangle+0x3a>
 8002794:	239f      	movs	r3, #159	; 0x9f
 8002796:	807b      	strh	r3, [r7, #2]
    if(y2 >= VGA_HEIGHT) y2 = VGA_HEIGHT-1;
 8002798:	f9b7 3000 	ldrsh.w	r3, [r7]
 800279c:	2b73      	cmp	r3, #115	; 0x73
 800279e:	dd01      	ble.n	80027a4 <FillRectangle+0x46>
 80027a0:	2373      	movs	r3, #115	; 0x73
 80027a2:	803b      	strh	r3, [r7, #0]
    for(int yy = y1; yy <= y2; yy++) {
 80027a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e010      	b.n	80027ce <FillRectangle+0x70>
    	DrawLine(x1,yy,x2,yy,color);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	b219      	sxth	r1, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	b21c      	sxth	r4, r3
 80027b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80027b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80027bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4623      	mov	r3, r4
 80027c4:	f7ff fd0e 	bl	80021e4 <DrawLine>
    for(int yy = y1; yy <= y2; yy++) {
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3301      	adds	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	dde9      	ble.n	80027ac <FillRectangle+0x4e>
 80027d8:	e000      	b.n	80027dc <FillRectangle+0x7e>
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 80027da:	bf00      	nop
    }
}
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd90      	pop	{r4, r7, pc}

080027e2 <FillCircle>:

void FillCircle(int16_t x0, int16_t y0, int16_t r, VGA_COLOR c) {
 80027e2:	b590      	push	{r4, r7, lr}
 80027e4:	b089      	sub	sp, #36	; 0x24
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	4604      	mov	r4, r0
 80027ea:	4608      	mov	r0, r1
 80027ec:	4611      	mov	r1, r2
 80027ee:	461a      	mov	r2, r3
 80027f0:	4623      	mov	r3, r4
 80027f2:	80fb      	strh	r3, [r7, #6]
 80027f4:	4603      	mov	r3, r0
 80027f6:	80bb      	strh	r3, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
 80027fc:	4613      	mov	r3, r2
 80027fe:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	f1c3 0301 	rsb	r3, r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800280a:	2301      	movs	r3, #1
 800280c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	461a      	mov	r2, r3
 8002812:	03d2      	lsls	r2, r2, #15
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	b29b      	uxth	r3, r3
 800281a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	81fb      	strh	r3, [r7, #14]

    DrawPixel(x0, y0 + r, c);
 8002824:	88ba      	ldrh	r2, [r7, #4]
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	4413      	add	r3, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	b219      	sxth	r1, r3
 800282e:	787a      	ldrb	r2, [r7, #1]
 8002830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fca5 	bl	8002184 <DrawPixel>
    DrawPixel(x0, y0 - r, c);
 800283a:	88ba      	ldrh	r2, [r7, #4]
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	b29b      	uxth	r3, r3
 8002842:	b219      	sxth	r1, r3
 8002844:	787a      	ldrb	r2, [r7, #1]
 8002846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fc9a 	bl	8002184 <DrawPixel>
    DrawPixel(x0 + r, y0, c);
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	4413      	add	r3, r2
 8002856:	b29b      	uxth	r3, r3
 8002858:	b21b      	sxth	r3, r3
 800285a:	787a      	ldrb	r2, [r7, #1]
 800285c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fc8f 	bl	8002184 <DrawPixel>
    DrawPixel(x0 - r, y0, c);
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	b29b      	uxth	r3, r3
 800286e:	b21b      	sxth	r3, r3
 8002870:	787a      	ldrb	r2, [r7, #1]
 8002872:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fc84 	bl	8002184 <DrawPixel>
    DrawLine(x0 - r, y0, x0 + r, y0, c);
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	b29b      	uxth	r3, r3
 8002884:	b218      	sxth	r0, r3
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	4413      	add	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	b21a      	sxth	r2, r3
 8002890:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002894:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4623      	mov	r3, r4
 800289e:	f7ff fca1 	bl	80021e4 <DrawLine>

    while (x < y) {
 80028a2:	e089      	b.n	80029b8 <FillCircle+0x1d6>
        if (f >= 0) {
 80028a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0e      	blt.n	80028ca <FillCircle+0xe8>
            y--;
 80028ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80028b8:	8a7b      	ldrh	r3, [r7, #18]
 80028ba:	3302      	adds	r3, #2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80028c0:	8afa      	ldrh	r2, [r7, #22]
 80028c2:	8a7b      	ldrh	r3, [r7, #18]
 80028c4:	4413      	add	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80028ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80028d6:	8abb      	ldrh	r3, [r7, #20]
 80028d8:	3302      	adds	r3, #2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80028de:	8afa      	ldrh	r2, [r7, #22]
 80028e0:	8abb      	ldrh	r3, [r7, #20]
 80028e2:	4413      	add	r3, r2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80028e8:	88fa      	ldrh	r2, [r7, #6]
 80028ea:	8a3b      	ldrh	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	b218      	sxth	r0, r3
 80028f2:	88ba      	ldrh	r2, [r7, #4]
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	4413      	add	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b219      	sxth	r1, r3
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	8a3b      	ldrh	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	b21c      	sxth	r4, r3
 8002906:	88ba      	ldrh	r2, [r7, #4]
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	4413      	add	r3, r2
 800290c:	b29b      	uxth	r3, r3
 800290e:	b21a      	sxth	r2, r3
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	4622      	mov	r2, r4
 8002918:	f7ff fc64 	bl	80021e4 <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	8a3b      	ldrh	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	b218      	sxth	r0, r3
 8002926:	88ba      	ldrh	r2, [r7, #4]
 8002928:	89fb      	ldrh	r3, [r7, #14]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	b29b      	uxth	r3, r3
 800292e:	b219      	sxth	r1, r3
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	8a3b      	ldrh	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	b29b      	uxth	r3, r3
 8002938:	b21c      	sxth	r4, r3
 800293a:	88ba      	ldrh	r2, [r7, #4]
 800293c:	89fb      	ldrh	r3, [r7, #14]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	b29b      	uxth	r3, r3
 8002942:	b21a      	sxth	r2, r3
 8002944:	787b      	ldrb	r3, [r7, #1]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	4622      	mov	r2, r4
 800294c:	f7ff fc4a 	bl	80021e4 <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002950:	88fa      	ldrh	r2, [r7, #6]
 8002952:	89fb      	ldrh	r3, [r7, #14]
 8002954:	4413      	add	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	b218      	sxth	r0, r3
 800295a:	88ba      	ldrh	r2, [r7, #4]
 800295c:	8a3b      	ldrh	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	b29b      	uxth	r3, r3
 8002962:	b219      	sxth	r1, r3
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	89fb      	ldrh	r3, [r7, #14]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b29b      	uxth	r3, r3
 800296c:	b21c      	sxth	r4, r3
 800296e:	88ba      	ldrh	r2, [r7, #4]
 8002970:	8a3b      	ldrh	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	b21a      	sxth	r2, r3
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	4622      	mov	r2, r4
 8002980:	f7ff fc30 	bl	80021e4 <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	89fb      	ldrh	r3, [r7, #14]
 8002988:	4413      	add	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	b218      	sxth	r0, r3
 800298e:	88ba      	ldrh	r2, [r7, #4]
 8002990:	8a3b      	ldrh	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b29b      	uxth	r3, r3
 8002996:	b219      	sxth	r1, r3
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	89fb      	ldrh	r3, [r7, #14]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b21c      	sxth	r4, r3
 80029a2:	88ba      	ldrh	r2, [r7, #4]
 80029a4:	8a3b      	ldrh	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b21a      	sxth	r2, r3
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	4622      	mov	r2, r4
 80029b4:	f7ff fc16 	bl	80021e4 <DrawLine>
    while (x < y) {
 80029b8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	f6ff af6f 	blt.w	80028a4 <FillCircle+0xc2>
    }
}
 80029c6:	bf00      	nop
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}

080029d0 <ShowImage>:

void ShowImage(uint8_t *image,int16_t x,int16_t y,int16_t locX,int16_t locY){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
 80029e2:	460b      	mov	r3, r1
 80029e4:	813b      	strh	r3, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
    int16_t j,i;

    for(j=0;j<y;j++){
 80029ea:	2300      	movs	r3, #0
 80029ec:	82fb      	strh	r3, [r7, #22]
 80029ee:	e02e      	b.n	8002a4e <ShowImage+0x7e>
    	for(i=0;i<x;i++){
 80029f0:	2300      	movs	r3, #0
 80029f2:	82bb      	strh	r3, [r7, #20]
 80029f4:	e01f      	b.n	8002a36 <ShowImage+0x66>
    		DrawPixel(i+locX,j+locY,image[j*x+i]);
 80029f6:	8aba      	ldrh	r2, [r7, #20]
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	4413      	add	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b218      	sxth	r0, r3
 8002a00:	8afa      	ldrh	r2, [r7, #22]
 8002a02:	8c3b      	ldrh	r3, [r7, #32]
 8002a04:	4413      	add	r3, r2
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	b219      	sxth	r1, r3
 8002a0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a0e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a12:	fb03 f202 	mul.w	r2, r3, r2
 8002a16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f7ff fbad 	bl	8002184 <DrawPixel>
    	for(i=0;i<x;i++){
 8002a2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	82bb      	strh	r3, [r7, #20]
 8002a36:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002a3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	dbd9      	blt.n	80029f6 <ShowImage+0x26>
    for(j=0;j<y;j++){
 8002a42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	82fb      	strh	r3, [r7, #22]
 8002a4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	dbca      	blt.n	80029f0 <ShowImage+0x20>
    	}
    }
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a68:	480d      	ldr	r0, [pc, #52]	; (8002aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a6a:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a70:	e002      	b.n	8002a78 <LoopCopyDataInit>

08002a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a76:	3304      	adds	r3, #4

08002a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a7c:	d3f9      	bcc.n	8002a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a80:	4c0b      	ldr	r4, [pc, #44]	; (8002ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a84:	e001      	b.n	8002a8a <LoopFillZerobss>

08002a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a88:	3204      	adds	r2, #4

08002a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a8c:	d3fb      	bcc.n	8002a86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a8e:	f7fe fe51 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a92:	f007 fec1 	bl	800a818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a96:	f7fd ff5b 	bl	8000950 <main>
  bx  lr    
 8002a9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002aa8:	08019f60 	.word	0x08019f60
  ldr r2, =_sbss
 8002aac:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002ab0:	20006114 	.word	0x20006114

08002ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab4:	e7fe      	b.n	8002ab4 <ADC_IRQHandler>
	...

08002ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_Init+0x40>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_Init+0x40>)
 8002ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <HAL_Init+0x40>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f000 f94f 	bl	8002d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae6:	200f      	movs	r0, #15
 8002ae8:	f000 f808 	bl	8002afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aec:	f7fe fbe6 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00

08002afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_InitTick+0x54>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_InitTick+0x58>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f967 	bl	8002dee <HAL_SYSTICK_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00e      	b.n	8002b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d80a      	bhi.n	8002b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b30:	2200      	movs	r2, #0
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	f000 f92f 	bl	8002d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <HAL_InitTick+0x5c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000004 	.word	0x20000004
 8002b54:	20000014 	.word	0x20000014
 8002b58:	20000010 	.word	0x20000010

08002b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x20>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x24>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_IncTick+0x24>)
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000014 	.word	0x20000014
 8002b80:	200059e8 	.word	0x200059e8

08002b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return uwTick;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_GetTick+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	200059e8 	.word	0x200059e8

08002b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff ffee 	bl	8002b84 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d005      	beq.n	8002bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_Delay+0x44>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bc2:	bf00      	nop
 8002bc4:	f7ff ffde 	bl	8002b84 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d8f7      	bhi.n	8002bc4 <HAL_Delay+0x28>
  {
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000014 	.word	0x20000014

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4907      	ldr	r1, [pc, #28]	; (8002c80 <__NVIC_EnableIRQ+0x38>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0a      	blt.n	8002cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	490c      	ldr	r1, [pc, #48]	; (8002cd0 <__NVIC_SetPriority+0x4c>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cac:	e00a      	b.n	8002cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <__NVIC_SetPriority+0x50>)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	761a      	strb	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	bf28      	it	cs
 8002cf6:	2304      	movcs	r3, #4
 8002cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d902      	bls.n	8002d08 <NVIC_EncodePriority+0x30>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3b03      	subs	r3, #3
 8002d06:	e000      	b.n	8002d0a <NVIC_EncodePriority+0x32>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	4313      	orrs	r3, r2
         );
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d50:	d301      	bcc.n	8002d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00f      	b.n	8002d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <SysTick_Config+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5e:	210f      	movs	r1, #15
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f7ff ff8e 	bl	8002c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <SysTick_Config+0x40>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <SysTick_Config+0x40>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff29 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dac:	f7ff ff3e 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff8e 	bl	8002cd8 <NVIC_EncodePriority>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff5d 	bl	8002c84 <__NVIC_SetPriority>
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff31 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffa2 	bl	8002d40 <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff feb6 	bl	8002b84 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e099      	b.n	8002f58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e44:	e00f      	b.n	8002e66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e46:	f7ff fe9d 	bl	8002b84 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d908      	bls.n	8002e66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e078      	b.n	8002f58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e8      	bne.n	8002e46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_DMA_Init+0x158>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d107      	bne.n	8002ed0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f023 0307 	bic.w	r3, r3, #7
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d117      	bne.n	8002f2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fb55 	bl	80035bc <DMA_CheckFifoParam>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2240      	movs	r2, #64	; 0x40
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f26:	2301      	movs	r3, #1
 8002f28:	e016      	b.n	8002f58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fb0c 	bl	8003550 <DMA_CalcBaseAndBitshift>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	223f      	movs	r2, #63	; 0x3f
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	f010803f 	.word	0xf010803f

08002f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_DMA_Start_IT+0x26>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e040      	b.n	800300c <HAL_DMA_Start_IT+0xa8>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d12f      	bne.n	8002ffe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fa9e 	bl	80034f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	223f      	movs	r2, #63	; 0x3f
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0216 	orr.w	r2, r2, #22
 8002fd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0208 	orr.w	r2, r2, #8
 8002fea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e005      	b.n	800300a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003006:	2302      	movs	r3, #2
 8003008:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800300a:	7dfb      	ldrb	r3, [r7, #23]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003022:	f7ff fdaf 	bl	8002b84 <HAL_GetTick>
 8003026:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d008      	beq.n	8003046 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e052      	b.n	80030ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0216 	bic.w	r2, r2, #22
 8003054:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003064:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <HAL_DMA_Abort+0x62>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0208 	bic.w	r2, r2, #8
 8003084:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003096:	e013      	b.n	80030c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003098:	f7ff fd74 	bl	8002b84 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d90c      	bls.n	80030c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2203      	movs	r2, #3
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e015      	b.n	80030ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e4      	bne.n	8003098 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	223f      	movs	r2, #63	; 0x3f
 80030d4:	409a      	lsls	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2280      	movs	r2, #128	; 0x80
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e00c      	b.n	800312c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2205      	movs	r2, #5
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003144:	4b8e      	ldr	r3, [pc, #568]	; (8003380 <HAL_DMA_IRQHandler+0x248>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a8e      	ldr	r2, [pc, #568]	; (8003384 <HAL_DMA_IRQHandler+0x24c>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	0a9b      	lsrs	r3, r3, #10
 8003150:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	2208      	movs	r2, #8
 8003164:	409a      	lsls	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01a      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	2208      	movs	r2, #8
 8003192:	409a      	lsls	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	2201      	movs	r2, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	2201      	movs	r2, #1
 80031c8:	409a      	lsls	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f043 0202 	orr.w	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	2204      	movs	r2, #4
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d012      	beq.n	8003210 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	2204      	movs	r2, #4
 80031fe:	409a      	lsls	r2, r3
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	f043 0204 	orr.w	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	2210      	movs	r2, #16
 8003216:	409a      	lsls	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d043      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d03c      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	2210      	movs	r2, #16
 8003234:	409a      	lsls	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d018      	beq.n	800327a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d108      	bne.n	8003268 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d024      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
 8003266:	e01f      	b.n	80032a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01b      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
 8003278:	e016      	b.n	80032a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0208 	bic.w	r2, r2, #8
 8003296:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	2220      	movs	r2, #32
 80032ae:	409a      	lsls	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 808f 	beq.w	80033d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8087 	beq.w	80033d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2220      	movs	r2, #32
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d136      	bne.n	8003350 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0216 	bic.w	r2, r2, #22
 80032f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003300:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_DMA_IRQHandler+0x1da>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0208 	bic.w	r2, r2, #8
 8003320:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	223f      	movs	r2, #63	; 0x3f
 8003328:	409a      	lsls	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003342:	2b00      	cmp	r3, #0
 8003344:	d07e      	beq.n	8003444 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
        }
        return;
 800334e:	e079      	b.n	8003444 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01d      	beq.n	800339a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10d      	bne.n	8003388 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	2b00      	cmp	r3, #0
 8003372:	d031      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
 800337c:	e02c      	b.n	80033d8 <HAL_DMA_IRQHandler+0x2a0>
 800337e:	bf00      	nop
 8003380:	20000004 	.word	0x20000004
 8003384:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d023      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e01e      	b.n	80033d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10f      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0210 	bic.w	r2, r2, #16
 80033b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d032      	beq.n	8003446 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d022      	beq.n	8003432 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2205      	movs	r2, #5
 80033f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3301      	adds	r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	429a      	cmp	r2, r3
 800340e:	d307      	bcc.n	8003420 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f2      	bne.n	8003404 <HAL_DMA_IRQHandler+0x2cc>
 800341e:	e000      	b.n	8003422 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003420:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
 8003442:	e000      	b.n	8003446 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003444:	bf00      	nop
    }
  }
}
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	460b      	mov	r3, r1
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_DMA_RegisterCallback+0x20>
 8003468:	2302      	movs	r3, #2
 800346a:	e03d      	b.n	80034e8 <HAL_DMA_RegisterCallback+0x9c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d12c      	bne.n	80034da <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	2b05      	cmp	r3, #5
 8003484:	d826      	bhi.n	80034d4 <HAL_DMA_RegisterCallback+0x88>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <HAL_DMA_RegisterCallback+0x40>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	080034a5 	.word	0x080034a5
 8003490:	080034ad 	.word	0x080034ad
 8003494:	080034b5 	.word	0x080034b5
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080034c5 	.word	0x080034c5
 80034a0:	080034cd 	.word	0x080034cd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80034aa:	e018      	b.n	80034de <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034b2:	e014      	b.n	80034de <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80034ba:	e010      	b.n	80034de <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80034c2:	e00c      	b.n	80034de <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80034ca:	e008      	b.n	80034de <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80034d2:	e004      	b.n	80034de <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	75fb      	strb	r3, [r7, #23]
      break;
 80034d8:	e001      	b.n	80034de <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003510:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d108      	bne.n	8003534 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003532:	e007      	b.n	8003544 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	3b10      	subs	r3, #16
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800356a:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <DMA_CalcBaseAndBitshift+0x68>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d909      	bls.n	8003592 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	1d1a      	adds	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	; 0x58
 8003590:	e007      	b.n	80035a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	aaaaaaab 	.word	0xaaaaaaab
 80035b8:	08019af0 	.word	0x08019af0

080035bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11f      	bne.n	8003616 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d856      	bhi.n	800368a <DMA_CheckFifoParam+0xce>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <DMA_CheckFifoParam+0x28>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	08003607 	.word	0x08003607
 80035ec:	080035f5 	.word	0x080035f5
 80035f0:	0800368b 	.word	0x0800368b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d046      	beq.n	800368e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003604:	e043      	b.n	800368e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800360e:	d140      	bne.n	8003692 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003614:	e03d      	b.n	8003692 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361e:	d121      	bne.n	8003664 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d837      	bhi.n	8003696 <DMA_CheckFifoParam+0xda>
 8003626:	a201      	add	r2, pc, #4	; (adr r2, 800362c <DMA_CheckFifoParam+0x70>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	0800363d 	.word	0x0800363d
 8003630:	08003643 	.word	0x08003643
 8003634:	0800363d 	.word	0x0800363d
 8003638:	08003655 	.word	0x08003655
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      break;
 8003640:	e030      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d025      	beq.n	800369a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003652:	e022      	b.n	800369a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800365c:	d11f      	bne.n	800369e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003662:	e01c      	b.n	800369e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d903      	bls.n	8003672 <DMA_CheckFifoParam+0xb6>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d003      	beq.n	8003678 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003670:	e018      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      break;
 8003676:	e015      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e00b      	b.n	80036a2 <DMA_CheckFifoParam+0xe6>
      break;
 800368a:	bf00      	nop
 800368c:	e00a      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
 8003690:	e008      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003692:	bf00      	nop
 8003694:	e006      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
 8003698:	e004      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
      break;
 800369a:	bf00      	nop
 800369c:	e002      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
    }
  } 
  
  return status; 
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e159      	b.n	8003984 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	f040 8148 	bne.w	800397e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d005      	beq.n	8003706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003702:	2b02      	cmp	r3, #2
 8003704:	d130      	bne.n	8003768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	2203      	movs	r2, #3
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800373c:	2201      	movs	r2, #1
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 0201 	and.w	r2, r3, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b03      	cmp	r3, #3
 8003772:	d017      	beq.n	80037a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d123      	bne.n	80037f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	08da      	lsrs	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3208      	adds	r2, #8
 80037b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	220f      	movs	r2, #15
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	08da      	lsrs	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3208      	adds	r2, #8
 80037f2:	69b9      	ldr	r1, [r7, #24]
 80037f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0203 	and.w	r2, r3, #3
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a2 	beq.w	800397e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_GPIO_Init+0x2e8>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_GPIO_Init+0x2e8>)
 8003844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003848:	6453      	str	r3, [r2, #68]	; 0x44
 800384a:	4b54      	ldr	r3, [pc, #336]	; (800399c <HAL_GPIO_Init+0x2e8>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003856:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_GPIO_Init+0x2ec>)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	220f      	movs	r2, #15
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a49      	ldr	r2, [pc, #292]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d019      	beq.n	80038b6 <HAL_GPIO_Init+0x202>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a48      	ldr	r2, [pc, #288]	; (80039a8 <HAL_GPIO_Init+0x2f4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_Init+0x1fe>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a47      	ldr	r2, [pc, #284]	; (80039ac <HAL_GPIO_Init+0x2f8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_Init+0x1fa>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a46      	ldr	r2, [pc, #280]	; (80039b0 <HAL_GPIO_Init+0x2fc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_Init+0x1f6>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a45      	ldr	r2, [pc, #276]	; (80039b4 <HAL_GPIO_Init+0x300>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_Init+0x1f2>
 80038a2:	2304      	movs	r3, #4
 80038a4:	e008      	b.n	80038b8 <HAL_GPIO_Init+0x204>
 80038a6:	2307      	movs	r3, #7
 80038a8:	e006      	b.n	80038b8 <HAL_GPIO_Init+0x204>
 80038aa:	2303      	movs	r3, #3
 80038ac:	e004      	b.n	80038b8 <HAL_GPIO_Init+0x204>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e002      	b.n	80038b8 <HAL_GPIO_Init+0x204>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_GPIO_Init+0x204>
 80038b6:	2300      	movs	r3, #0
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	f002 0203 	and.w	r2, r2, #3
 80038be:	0092      	lsls	r2, r2, #2
 80038c0:	4093      	lsls	r3, r2
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c8:	4935      	ldr	r1, [pc, #212]	; (80039a0 <HAL_GPIO_Init+0x2ec>)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	3302      	adds	r3, #2
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d6:	4b38      	ldr	r3, [pc, #224]	; (80039b8 <HAL_GPIO_Init+0x304>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038fa:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <HAL_GPIO_Init+0x304>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003900:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <HAL_GPIO_Init+0x304>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <HAL_GPIO_Init+0x304>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <HAL_GPIO_Init+0x304>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394e:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <HAL_GPIO_Init+0x304>)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <HAL_GPIO_Init+0x304>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003978:	4a0f      	ldr	r2, [pc, #60]	; (80039b8 <HAL_GPIO_Init+0x304>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3301      	adds	r3, #1
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	f67f aea2 	bls.w	80036d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3724      	adds	r7, #36	; 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	40013800 	.word	0x40013800
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40020400 	.word	0x40020400
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020c00 	.word	0x40020c00
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40013c00 	.word	0x40013c00

080039bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
 80039c8:	4613      	mov	r3, r2
 80039ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039cc:	787b      	ldrb	r3, [r7, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039d8:	e003      	b.n	80039e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	041a      	lsls	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	619a      	str	r2, [r3, #24]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a00:	887a      	ldrh	r2, [r7, #2]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	041a      	lsls	r2, r3, #16
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	43d9      	mvns	r1, r3
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	400b      	ands	r3, r1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	619a      	str	r2, [r3, #24]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a3a:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fc fdc4 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40013c00 	.word	0x40013c00

08003a54 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a56:	b08f      	sub	sp, #60	; 0x3c
 8003a58:	af0a      	add	r7, sp, #40	; 0x28
 8003a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e054      	b.n	8003b10 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d106      	bne.n	8003a86 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f006 fc27 	bl	800a2d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2203      	movs	r2, #3
 8003a8a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 f965 	bl	8006d74 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	687e      	ldr	r6, [r7, #4]
 8003ab2:	466d      	mov	r5, sp
 8003ab4:	f106 0410 	add.w	r4, r6, #16
 8003ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ac4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ac8:	1d33      	adds	r3, r6, #4
 8003aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003acc:	6838      	ldr	r0, [r7, #0]
 8003ace:	f003 f8df 	bl	8006c90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f003 f95c 	bl	8006d96 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	687e      	ldr	r6, [r7, #4]
 8003ae6:	466d      	mov	r5, sp
 8003ae8:	f106 0410 	add.w	r4, r6, #16
 8003aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003af8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003afc:	1d33      	adds	r3, r6, #4
 8003afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b00:	6838      	ldr	r0, [r7, #0]
 8003b02:	f003 fae5 	bl	80070d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b18 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af04      	add	r7, sp, #16
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	70fb      	strb	r3, [r7, #3]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	70bb      	strb	r3, [r7, #2]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_HCD_HC_Init+0x28>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e076      	b.n	8003c2e <HAL_HCD_HC_Init+0x116>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	333d      	adds	r3, #61	; 0x3d
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	3338      	adds	r3, #56	; 0x38
 8003b68:	787a      	ldrb	r2, [r7, #1]
 8003b6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3340      	adds	r3, #64	; 0x40
 8003b7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003b7c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3339      	adds	r3, #57	; 0x39
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	333f      	adds	r3, #63	; 0x3f
 8003b9e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ba2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	78ba      	ldrb	r2, [r7, #2]
 8003ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bac:	b2d0      	uxtb	r0, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	333a      	adds	r3, #58	; 0x3a
 8003bba:	4602      	mov	r2, r0
 8003bbc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003bbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da09      	bge.n	8003bda <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	333b      	adds	r3, #59	; 0x3b
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	e008      	b.n	8003bec <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	333b      	adds	r3, #59	; 0x3b
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	333c      	adds	r3, #60	; 0x3c
 8003bfa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003bfe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	787c      	ldrb	r4, [r7, #1]
 8003c06:	78ba      	ldrb	r2, [r7, #2]
 8003c08:	78f9      	ldrb	r1, [r7, #3]
 8003c0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c0c:	9302      	str	r3, [sp, #8]
 8003c0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	f003 fbde 	bl	80073dc <USB_HC_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd90      	pop	{r4, r7, pc}

08003c36 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_HCD_HC_Halt+0x1e>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e00f      	b.n	8003c74 <HAL_HCD_HC_Halt+0x3e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f003 fe2e 	bl	80078c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	70fb      	strb	r3, [r7, #3]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	70bb      	strb	r3, [r7, #2]
 8003c92:	4613      	mov	r3, r2
 8003c94:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	333b      	adds	r3, #59	; 0x3b
 8003ca4:	78ba      	ldrb	r2, [r7, #2]
 8003ca6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	333f      	adds	r3, #63	; 0x3f
 8003cb6:	787a      	ldrb	r2, [r7, #1]
 8003cb8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003cba:	7c3b      	ldrb	r3, [r7, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d112      	bne.n	8003ce6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	3342      	adds	r3, #66	; 0x42
 8003cce:	2203      	movs	r2, #3
 8003cd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	333d      	adds	r3, #61	; 0x3d
 8003ce0:	7f3a      	ldrb	r2, [r7, #28]
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	e008      	b.n	8003cf8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3342      	adds	r3, #66	; 0x42
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003cf8:	787b      	ldrb	r3, [r7, #1]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	f200 80c6 	bhi.w	8003e8c <HAL_HCD_HC_SubmitRequest+0x210>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003e79 	.word	0x08003e79
 8003d10:	08003d7d 	.word	0x08003d7d
 8003d14:	08003dfb 	.word	0x08003dfb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003d18:	7c3b      	ldrb	r3, [r7, #16]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	f040 80b8 	bne.w	8003e90 <HAL_HCD_HC_SubmitRequest+0x214>
 8003d20:	78bb      	ldrb	r3, [r7, #2]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 80b4 	bne.w	8003e90 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003d28:	8b3b      	ldrh	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	3355      	adds	r3, #85	; 0x55
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	212c      	movs	r1, #44	; 0x2c
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3355      	adds	r3, #85	; 0x55
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	212c      	movs	r1, #44	; 0x2c
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	3342      	adds	r3, #66	; 0x42
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d66:	e093      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	3342      	adds	r3, #66	; 0x42
 8003d76:	2202      	movs	r2, #2
 8003d78:	701a      	strb	r2, [r3, #0]
      break;
 8003d7a:	e089      	b.n	8003e90 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003d7c:	78bb      	ldrb	r3, [r7, #2]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11d      	bne.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3355      	adds	r3, #85	; 0x55
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3342      	adds	r3, #66	; 0x42
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003da8:	e073      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3342      	adds	r3, #66	; 0x42
 8003db8:	2202      	movs	r2, #2
 8003dba:	701a      	strb	r2, [r3, #0]
      break;
 8003dbc:	e069      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3354      	adds	r3, #84	; 0x54
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	212c      	movs	r1, #44	; 0x2c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	3342      	adds	r3, #66	; 0x42
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
      break;
 8003de4:	e055      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	212c      	movs	r1, #44	; 0x2c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	3342      	adds	r3, #66	; 0x42
 8003df4:	2202      	movs	r2, #2
 8003df6:	701a      	strb	r2, [r3, #0]
      break;
 8003df8:	e04b      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003dfa:	78bb      	ldrb	r3, [r7, #2]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11d      	bne.n	8003e3c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	212c      	movs	r1, #44	; 0x2c
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3355      	adds	r3, #85	; 0x55
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	212c      	movs	r1, #44	; 0x2c
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	4413      	add	r3, r2
 8003e20:	3342      	adds	r3, #66	; 0x42
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e26:	e034      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3342      	adds	r3, #66	; 0x42
 8003e36:	2202      	movs	r2, #2
 8003e38:	701a      	strb	r2, [r3, #0]
      break;
 8003e3a:	e02a      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	212c      	movs	r1, #44	; 0x2c
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	3354      	adds	r3, #84	; 0x54
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	212c      	movs	r1, #44	; 0x2c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3342      	adds	r3, #66	; 0x42
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
      break;
 8003e62:	e016      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	212c      	movs	r1, #44	; 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	3342      	adds	r3, #66	; 0x42
 8003e72:	2202      	movs	r2, #2
 8003e74:	701a      	strb	r2, [r3, #0]
      break;
 8003e76:	e00c      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	212c      	movs	r1, #44	; 0x2c
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	3342      	adds	r3, #66	; 0x42
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
      break;
 8003e8a:	e002      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003e90:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3344      	adds	r3, #68	; 0x44
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	8b3a      	ldrh	r2, [r7, #24]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	202c      	movs	r0, #44	; 0x2c
 8003eac:	fb00 f303 	mul.w	r3, r0, r3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	334c      	adds	r3, #76	; 0x4c
 8003eb4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	212c      	movs	r1, #44	; 0x2c
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3360      	adds	r3, #96	; 0x60
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3350      	adds	r3, #80	; 0x50
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3339      	adds	r3, #57	; 0x39
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3361      	adds	r3, #97	; 0x61
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	222c      	movs	r2, #44	; 0x2c
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	3338      	adds	r3, #56	; 0x38
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	18d1      	adds	r1, r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	f003 fb82 	bl	8007620 <USB_HC_StartXfer>
 8003f1c:	4603      	mov	r3, r0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop

08003f28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f003 f883 	bl	800704a <USB_GetMode>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f040 80f6 	bne.w	8004138 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 f867 	bl	8007024 <USB_ReadInterrupts>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80ec 	beq.w	8004136 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 f85e 	bl	8007024 <USB_ReadInterrupts>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f72:	d104      	bne.n	8003f7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003f7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 f84e 	bl	8007024 <USB_ReadInterrupts>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f92:	d104      	bne.n	8003f9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 f83e 	bl	8007024 <USB_ReadInterrupts>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fb2:	d104      	bne.n	8003fbe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f003 f82e 	bl	8007024 <USB_ReadInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d103      	bne.n	8003fda <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f003 f820 	bl	8007024 <USB_ReadInterrupts>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fee:	d11c      	bne.n	800402a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ff8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10f      	bne.n	800402a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800400a:	2110      	movs	r1, #16
 800400c:	6938      	ldr	r0, [r7, #16]
 800400e:	f002 ff0f 	bl	8006e30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004012:	6938      	ldr	r0, [r7, #16]
 8004014:	f002 ff40 	bl	8006e98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f003 f916 	bl	8007250 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f006 f9c5 	bl	800a3b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f002 fff8 	bl	8007024 <USB_ReadInterrupts>
 8004034:	4603      	mov	r3, r0
 8004036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800403e:	d102      	bne.n	8004046 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f001 f89e 	bl	8005182 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f002 ffea 	bl	8007024 <USB_ReadInterrupts>
 8004050:	4603      	mov	r3, r0
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b08      	cmp	r3, #8
 8004058:	d106      	bne.n	8004068 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f006 f98e 	bl	800a37c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2208      	movs	r2, #8
 8004066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f002 ffd9 	bl	8007024 <USB_ReadInterrupts>
 8004072:	4603      	mov	r3, r0
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d101      	bne.n	8004080 <HAL_HCD_IRQHandler+0x158>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_HCD_IRQHandler+0x15a>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d012      	beq.n	80040ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0210 	bic.w	r2, r2, #16
 8004094:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 ffa1 	bl	8004fde <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0210 	orr.w	r2, r2, #16
 80040aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f002 ffb7 	bl	8007024 <USB_ReadInterrupts>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040c0:	d13a      	bne.n	8004138 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fbec 	bl	80078a4 <USB_HC_ReadInterrupt>
 80040cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	e025      	b.n	8004120 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d018      	beq.n	800411a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fe:	d106      	bne.n	800410e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8ab 	bl	8004262 <HCD_HC_IN_IRQHandler>
 800410c:	e005      	b.n	800411a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fbf9 	bl	800490c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3301      	adds	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	429a      	cmp	r2, r3
 8004128:	d3d4      	bcc.n	80040d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004132:	615a      	str	r2, [r3, #20]
 8004134:	e000      	b.n	8004138 <HAL_HCD_IRQHandler+0x210>
      return;
 8004136:	bf00      	nop
    }
  }
}
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_HCD_Start+0x16>
 8004150:	2302      	movs	r3, #2
 8004152:	e013      	b.n	800417c <HAL_HCD_Start+0x3e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2101      	movs	r1, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f003 f8d8 	bl	8007318 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f002 fdf0 	bl	8006d52 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_HCD_Stop+0x16>
 8004196:	2302      	movs	r3, #2
 8004198:	e00d      	b.n	80041b6 <HAL_HCD_Stop+0x32>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f003 fcc6 	bl	8007b38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f003 f87a 	bl	80072c4 <USB_ResetPort>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3360      	adds	r3, #96	; 0x60
 80041f4:	781b      	ldrb	r3, [r3, #0]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	3350      	adds	r3, #80	; 0x50
 800421c:	681b      	ldr	r3, [r3, #0]
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f003 f8be 	bl	80073b8 <USB_GetCurrentFrame>
 800423c:	4603      	mov	r3, r0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f003 f899 	bl	800738a <USB_GetHostSpeed>
 8004258:	4603      	mov	r3, r0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4413      	add	r3, r2
 8004284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d11a      	bne.n	80042c8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429e:	461a      	mov	r2, r3
 80042a0:	2304      	movs	r3, #4
 80042a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	3361      	adds	r3, #97	; 0x61
 80042b2:	2206      	movs	r2, #6
 80042b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 fb00 	bl	80078c6 <USB_HC_Halt>
 80042c6:	e0af      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042de:	d11b      	bne.n	8004318 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	461a      	mov	r2, r3
 80042ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3361      	adds	r3, #97	; 0x61
 8004302:	2207      	movs	r2, #7
 8004304:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f003 fad8 	bl	80078c6 <USB_HC_Halt>
 8004316:	e087      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d109      	bne.n	8004342 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433a:	461a      	mov	r2, r3
 800433c:	2320      	movs	r3, #32
 800433e:	6093      	str	r3, [r2, #8]
 8004340:	e072      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d11a      	bne.n	800438e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	461a      	mov	r2, r3
 8004366:	2308      	movs	r3, #8
 8004368:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	212c      	movs	r1, #44	; 0x2c
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	4413      	add	r3, r2
 8004376:	3361      	adds	r3, #97	; 0x61
 8004378:	2205      	movs	r2, #5
 800437a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f003 fa9d 	bl	80078c6 <USB_HC_Halt>
 800438c:	e04c      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a4:	d11b      	bne.n	80043de <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b2:	461a      	mov	r2, r3
 80043b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3361      	adds	r3, #97	; 0x61
 80043c8:	2208      	movs	r2, #8
 80043ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f003 fa75 	bl	80078c6 <USB_HC_Halt>
 80043dc:	e024      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d119      	bne.n	8004428 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	461a      	mov	r2, r3
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	3361      	adds	r3, #97	; 0x61
 8004414:	2206      	movs	r2, #6
 8004416:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f003 fa4f 	bl	80078c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800443e:	d112      	bne.n	8004466 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f003 fa3b 	bl	80078c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445c:	461a      	mov	r2, r3
 800445e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004462:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004464:	e24e      	b.n	8004904 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	f040 80df 	bne.w	800463c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d019      	beq.n	80044ba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	212c      	movs	r1, #44	; 0x2c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	3348      	adds	r3, #72	; 0x48
 8004494:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	0159      	lsls	r1, r3, #5
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	440b      	add	r3, r1
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80044a8:	1ad2      	subs	r2, r2, r3
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	202c      	movs	r0, #44	; 0x2c
 80044b0:	fb00 f303 	mul.w	r3, r0, r3
 80044b4:	440b      	add	r3, r1
 80044b6:	3350      	adds	r3, #80	; 0x50
 80044b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	212c      	movs	r1, #44	; 0x2c
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	4413      	add	r3, r2
 80044c6:	3361      	adds	r3, #97	; 0x61
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	335c      	adds	r3, #92	; 0x5c
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ea:	461a      	mov	r2, r3
 80044ec:	2301      	movs	r3, #1
 80044ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	333f      	adds	r3, #63	; 0x3f
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	333f      	adds	r3, #63	; 0x3f
 8004512:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004514:	2b02      	cmp	r3, #2
 8004516:	d111      	bne.n	800453c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f003 f9cf 	bl	80078c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	461a      	mov	r2, r3
 8004536:	2310      	movs	r3, #16
 8004538:	6093      	str	r3, [r2, #8]
 800453a:	e03a      	b.n	80045b2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	333f      	adds	r3, #63	; 0x3f
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d009      	beq.n	8004564 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	333f      	adds	r3, #63	; 0x3f
 800455e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004560:	2b01      	cmp	r3, #1
 8004562:	d126      	bne.n	80045b2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	440a      	add	r2, r1
 800457a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800457e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004582:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	3360      	adds	r3, #96	; 0x60
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	b2d9      	uxtb	r1, r3
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	202c      	movs	r0, #44	; 0x2c
 80045a0:	fb00 f303 	mul.w	r3, r0, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	3360      	adds	r3, #96	; 0x60
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f005 ff0f 	bl	800a3d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d12b      	bne.n	8004612 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	3348      	adds	r3, #72	; 0x48
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	202c      	movs	r0, #44	; 0x2c
 80045d0:	fb00 f202 	mul.w	r2, r0, r2
 80045d4:	440a      	add	r2, r1
 80045d6:	3240      	adds	r2, #64	; 0x40
 80045d8:	8812      	ldrh	r2, [r2, #0]
 80045da:	fbb3 f3f2 	udiv	r3, r3, r2
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 818e 	beq.w	8004904 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	212c      	movs	r1, #44	; 0x2c
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	3354      	adds	r3, #84	; 0x54
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f083 0301 	eor.w	r3, r3, #1
 80045fc:	b2d8      	uxtb	r0, r3
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	3354      	adds	r3, #84	; 0x54
 800460c:	4602      	mov	r2, r0
 800460e:	701a      	strb	r2, [r3, #0]
}
 8004610:	e178      	b.n	8004904 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3354      	adds	r3, #84	; 0x54
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f083 0301 	eor.w	r3, r3, #1
 8004626:	b2d8      	uxtb	r0, r3
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3354      	adds	r3, #84	; 0x54
 8004636:	4602      	mov	r2, r0
 8004638:	701a      	strb	r2, [r3, #0]
}
 800463a:	e163      	b.n	8004904 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	f040 80f6 	bne.w	8004840 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	3361      	adds	r3, #97	; 0x61
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d109      	bne.n	800467c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	3360      	adds	r3, #96	; 0x60
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e0c9      	b.n	8004810 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3361      	adds	r3, #97	; 0x61
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d109      	bne.n	80046a4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	212c      	movs	r1, #44	; 0x2c
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	3360      	adds	r3, #96	; 0x60
 800469e:	2205      	movs	r2, #5
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	e0b5      	b.n	8004810 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	212c      	movs	r1, #44	; 0x2c
 80046aa:	fb01 f303 	mul.w	r3, r1, r3
 80046ae:	4413      	add	r3, r2
 80046b0:	3361      	adds	r3, #97	; 0x61
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d009      	beq.n	80046cc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	212c      	movs	r1, #44	; 0x2c
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	3361      	adds	r3, #97	; 0x61
 80046c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d150      	bne.n	800476e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	335c      	adds	r3, #92	; 0x5c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	202c      	movs	r0, #44	; 0x2c
 80046e4:	fb00 f303 	mul.w	r3, r0, r3
 80046e8:	440b      	add	r3, r1
 80046ea:	335c      	adds	r3, #92	; 0x5c
 80046ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	335c      	adds	r3, #92	; 0x5c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d912      	bls.n	8004728 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	212c      	movs	r1, #44	; 0x2c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	335c      	adds	r3, #92	; 0x5c
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	212c      	movs	r1, #44	; 0x2c
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	3360      	adds	r3, #96	; 0x60
 8004722:	2204      	movs	r2, #4
 8004724:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004726:	e073      	b.n	8004810 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	212c      	movs	r1, #44	; 0x2c
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	3360      	adds	r3, #96	; 0x60
 8004736:	2202      	movs	r2, #2
 8004738:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004750:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004758:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4413      	add	r3, r2
 8004762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004766:	461a      	mov	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800476c:	e050      	b.n	8004810 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	212c      	movs	r1, #44	; 0x2c
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	4413      	add	r3, r2
 800477a:	3361      	adds	r3, #97	; 0x61
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d122      	bne.n	80047c8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	3360      	adds	r3, #96	; 0x60
 8004790:	2202      	movs	r2, #2
 8004792:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4413      	add	r3, r2
 800479c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e023      	b.n	8004810 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3361      	adds	r3, #97	; 0x61
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b07      	cmp	r3, #7
 80047da:	d119      	bne.n	8004810 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	212c      	movs	r1, #44	; 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	335c      	adds	r3, #92	; 0x5c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	202c      	movs	r0, #44	; 0x2c
 80047f4:	fb00 f303 	mul.w	r3, r0, r3
 80047f8:	440b      	add	r3, r1
 80047fa:	335c      	adds	r3, #92	; 0x5c
 80047fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	212c      	movs	r1, #44	; 0x2c
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	4413      	add	r3, r2
 800480a:	3360      	adds	r3, #96	; 0x60
 800480c:	2204      	movs	r2, #4
 800480e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	2302      	movs	r3, #2
 8004820:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	b2d9      	uxtb	r1, r3
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	202c      	movs	r0, #44	; 0x2c
 800482c:	fb00 f303 	mul.w	r3, r0, r3
 8004830:	4413      	add	r3, r2
 8004832:	3360      	adds	r3, #96	; 0x60
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f005 fdc9 	bl	800a3d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800483e:	e061      	b.n	8004904 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d156      	bne.n	8004904 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	333f      	adds	r3, #63	; 0x3f
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d111      	bne.n	800488e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	212c      	movs	r1, #44	; 0x2c
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	4413      	add	r3, r2
 8004876:	335c      	adds	r3, #92	; 0x5c
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f003 f81d 	bl	80078c6 <USB_HC_Halt>
 800488c:	e031      	b.n	80048f2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	212c      	movs	r1, #44	; 0x2c
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	4413      	add	r3, r2
 800489a:	333f      	adds	r3, #63	; 0x3f
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	212c      	movs	r1, #44	; 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	333f      	adds	r3, #63	; 0x3f
 80048b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d11d      	bne.n	80048f2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	335c      	adds	r3, #92	; 0x5c
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d110      	bne.n	80048f2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	3361      	adds	r3, #97	; 0x61
 80048de:	2203      	movs	r2, #3
 80048e0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f002 ffea 	bl	80078c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	461a      	mov	r2, r3
 8004900:	2310      	movs	r3, #16
 8004902:	6093      	str	r3, [r2, #8]
}
 8004904:	bf00      	nop
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d11a      	bne.n	8004972 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004948:	461a      	mov	r2, r3
 800494a:	2304      	movs	r3, #4
 800494c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3361      	adds	r3, #97	; 0x61
 800495c:	2206      	movs	r2, #6
 800495e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f002 ffab 	bl	80078c6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004970:	e331      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d12e      	bne.n	80049e6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	2320      	movs	r3, #32
 8004998:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	212c      	movs	r1, #44	; 0x2c
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	4413      	add	r3, r2
 80049a6:	333d      	adds	r3, #61	; 0x3d
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	f040 8313 	bne.w	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	333d      	adds	r3, #61	; 0x3d
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	212c      	movs	r1, #44	; 0x2c
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	3360      	adds	r3, #96	; 0x60
 80049d0:	2202      	movs	r2, #2
 80049d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f002 ff71 	bl	80078c6 <USB_HC_Halt>
}
 80049e4:	e2f7      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fc:	d112      	bne.n	8004a24 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f002 ff52 	bl	80078c6 <USB_HC_Halt>
}
 8004a22:	e2d8      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d140      	bne.n	8004abc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	335c      	adds	r3, #92	; 0x5c
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d111      	bne.n	8004a86 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	333d      	adds	r3, #61	; 0x3d
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	461a      	mov	r2, r3
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	461a      	mov	r2, r3
 8004a94:	2301      	movs	r3, #1
 8004a96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3361      	adds	r3, #97	; 0x61
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f002 ff06 	bl	80078c6 <USB_HC_Halt>
}
 8004aba:	e28c      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d12c      	bne.n	8004b2c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	212c      	movs	r1, #44	; 0x2c
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	3361      	adds	r3, #97	; 0x61
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	333d      	adds	r3, #61	; 0x3d
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	335c      	adds	r3, #92	; 0x5c
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	4611      	mov	r1, r2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 fed7 	bl	80078c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b24:	461a      	mov	r2, r3
 8004b26:	2340      	movs	r3, #64	; 0x40
 8004b28:	6093      	str	r3, [r2, #8]
}
 8004b2a:	e254      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11a      	bne.n	8004b78 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2308      	movs	r3, #8
 8004b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	212c      	movs	r1, #44	; 0x2c
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	3361      	adds	r3, #97	; 0x61
 8004b62:	2205      	movs	r2, #5
 8004b64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f002 fea8 	bl	80078c6 <USB_HC_Halt>
}
 8004b76:	e22e      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d140      	bne.n	8004c10 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	335c      	adds	r3, #92	; 0x5c
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3361      	adds	r3, #97	; 0x61
 8004bae:	2203      	movs	r2, #3
 8004bb0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	212c      	movs	r1, #44	; 0x2c
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	333d      	adds	r3, #61	; 0x3d
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d112      	bne.n	8004bec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	212c      	movs	r1, #44	; 0x2c
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	333c      	adds	r3, #60	; 0x3c
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	212c      	movs	r1, #44	; 0x2c
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	333d      	adds	r3, #61	; 0x3d
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f002 fe65 	bl	80078c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	6093      	str	r3, [r2, #8]
}
 8004c0e:	e1e2      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d164      	bne.n	8004cf0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d111      	bne.n	8004c52 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3361      	adds	r3, #97	; 0x61
 8004c3c:	2206      	movs	r2, #6
 8004c3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f002 fe3b 	bl	80078c6 <USB_HC_Halt>
 8004c50:	e044      	b.n	8004cdc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	212c      	movs	r1, #44	; 0x2c
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	335c      	adds	r3, #92	; 0x5c
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	202c      	movs	r0, #44	; 0x2c
 8004c6a:	fb00 f303 	mul.w	r3, r0, r3
 8004c6e:	440b      	add	r3, r1
 8004c70:	335c      	adds	r3, #92	; 0x5c
 8004c72:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	335c      	adds	r3, #92	; 0x5c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d920      	bls.n	8004cca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	335c      	adds	r3, #92	; 0x5c
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	212c      	movs	r1, #44	; 0x2c
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3360      	adds	r3, #96	; 0x60
 8004ca8:	2204      	movs	r2, #4
 8004caa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	b2d9      	uxtb	r1, r3
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	202c      	movs	r0, #44	; 0x2c
 8004cb6:	fb00 f303 	mul.w	r3, r0, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3360      	adds	r3, #96	; 0x60
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f005 fb84 	bl	800a3d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cc8:	e008      	b.n	8004cdc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3360      	adds	r3, #96	; 0x60
 8004cd8:	2202      	movs	r2, #2
 8004cda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	6093      	str	r3, [r2, #8]
}
 8004cee:	e172      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d11b      	bne.n	8004d40 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	212c      	movs	r1, #44	; 0x2c
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	3361      	adds	r3, #97	; 0x61
 8004d16:	2208      	movs	r2, #8
 8004d18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 fdce 	bl	80078c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	461a      	mov	r2, r3
 8004d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d3c:	6093      	str	r3, [r2, #8]
}
 8004d3e:	e14a      	b.n	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	f040 813f 	bne.w	8004fd6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	212c      	movs	r1, #44	; 0x2c
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	3361      	adds	r3, #97	; 0x61
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d17d      	bne.n	8004e68 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	212c      	movs	r1, #44	; 0x2c
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	3360      	adds	r3, #96	; 0x60
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	212c      	movs	r1, #44	; 0x2c
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	4413      	add	r3, r2
 8004d8a:	333f      	adds	r3, #63	; 0x3f
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d00a      	beq.n	8004da8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	212c      	movs	r1, #44	; 0x2c
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	333f      	adds	r3, #63	; 0x3f
 8004da0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	f040 8100 	bne.w	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d113      	bne.n	8004dd8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	212c      	movs	r1, #44	; 0x2c
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	3355      	adds	r3, #85	; 0x55
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	f083 0301 	eor.w	r3, r3, #1
 8004dc4:	b2d8      	uxtb	r0, r3
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3355      	adds	r3, #85	; 0x55
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f040 80e3 	bne.w	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	212c      	movs	r1, #44	; 0x2c
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	334c      	adds	r3, #76	; 0x4c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80d8 	beq.w	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	212c      	movs	r1, #44	; 0x2c
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	334c      	adds	r3, #76	; 0x4c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	202c      	movs	r0, #44	; 0x2c
 8004e0e:	fb00 f202 	mul.w	r2, r0, r2
 8004e12:	440a      	add	r2, r1
 8004e14:	3240      	adds	r2, #64	; 0x40
 8004e16:	8812      	ldrh	r2, [r2, #0]
 8004e18:	4413      	add	r3, r2
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	202c      	movs	r0, #44	; 0x2c
 8004e22:	fb00 f202 	mul.w	r2, r0, r2
 8004e26:	440a      	add	r2, r1
 8004e28:	3240      	adds	r2, #64	; 0x40
 8004e2a:	8812      	ldrh	r2, [r2, #0]
 8004e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80b5 	beq.w	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	212c      	movs	r1, #44	; 0x2c
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	3355      	adds	r3, #85	; 0x55
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f083 0301 	eor.w	r3, r3, #1
 8004e52:	b2d8      	uxtb	r0, r3
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	212c      	movs	r1, #44	; 0x2c
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	3355      	adds	r3, #85	; 0x55
 8004e62:	4602      	mov	r2, r0
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e09f      	b.n	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	212c      	movs	r1, #44	; 0x2c
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	4413      	add	r3, r2
 8004e74:	3361      	adds	r3, #97	; 0x61
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d109      	bne.n	8004e90 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	212c      	movs	r1, #44	; 0x2c
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	3360      	adds	r3, #96	; 0x60
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e08b      	b.n	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	212c      	movs	r1, #44	; 0x2c
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3361      	adds	r3, #97	; 0x61
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d109      	bne.n	8004eb8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	212c      	movs	r1, #44	; 0x2c
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	4413      	add	r3, r2
 8004eb0:	3360      	adds	r3, #96	; 0x60
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e077      	b.n	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	212c      	movs	r1, #44	; 0x2c
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3361      	adds	r3, #97	; 0x61
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b05      	cmp	r3, #5
 8004eca:	d109      	bne.n	8004ee0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	212c      	movs	r1, #44	; 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3360      	adds	r3, #96	; 0x60
 8004eda:	2205      	movs	r2, #5
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e063      	b.n	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	212c      	movs	r1, #44	; 0x2c
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	3361      	adds	r3, #97	; 0x61
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d009      	beq.n	8004f08 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	3361      	adds	r3, #97	; 0x61
 8004f02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d14f      	bne.n	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	212c      	movs	r1, #44	; 0x2c
 8004f0e:	fb01 f303 	mul.w	r3, r1, r3
 8004f12:	4413      	add	r3, r2
 8004f14:	335c      	adds	r3, #92	; 0x5c
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	202c      	movs	r0, #44	; 0x2c
 8004f20:	fb00 f303 	mul.w	r3, r0, r3
 8004f24:	440b      	add	r3, r1
 8004f26:	335c      	adds	r3, #92	; 0x5c
 8004f28:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	212c      	movs	r1, #44	; 0x2c
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	4413      	add	r3, r2
 8004f36:	335c      	adds	r3, #92	; 0x5c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d912      	bls.n	8004f64 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	212c      	movs	r1, #44	; 0x2c
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	4413      	add	r3, r2
 8004f4a:	335c      	adds	r3, #92	; 0x5c
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	212c      	movs	r1, #44	; 0x2c
 8004f56:	fb01 f303 	mul.w	r3, r1, r3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3360      	adds	r3, #96	; 0x60
 8004f5e:	2204      	movs	r2, #4
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e021      	b.n	8004fa8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	212c      	movs	r1, #44	; 0x2c
 8004f6a:	fb01 f303 	mul.w	r3, r1, r3
 8004f6e:	4413      	add	r3, r2
 8004f70:	3360      	adds	r3, #96	; 0x60
 8004f72:	2202      	movs	r2, #2
 8004f74:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f8c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	b2d9      	uxtb	r1, r3
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	202c      	movs	r0, #44	; 0x2c
 8004fc4:	fb00 f303 	mul.w	r3, r0, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	3360      	adds	r3, #96	; 0x60
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f005 f9fd 	bl	800a3d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004fd6:	bf00      	nop
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08a      	sub	sp, #40	; 0x28
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	0c5b      	lsrs	r3, r3, #17
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005012:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d004      	beq.n	8005024 <HCD_RXQLVL_IRQHandler+0x46>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b05      	cmp	r3, #5
 800501e:	f000 80a9 	beq.w	8005174 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005022:	e0aa      	b.n	800517a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80a6 	beq.w	8005178 <HCD_RXQLVL_IRQHandler+0x19a>
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	212c      	movs	r1, #44	; 0x2c
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	3344      	adds	r3, #68	; 0x44
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 809b 	beq.w	8005178 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	212c      	movs	r1, #44	; 0x2c
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	4413      	add	r3, r2
 800504e:	3350      	adds	r3, #80	; 0x50
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	441a      	add	r2, r3
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	202c      	movs	r0, #44	; 0x2c
 800505c:	fb00 f303 	mul.w	r3, r0, r3
 8005060:	440b      	add	r3, r1
 8005062:	334c      	adds	r3, #76	; 0x4c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d87a      	bhi.n	8005160 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	212c      	movs	r1, #44	; 0x2c
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	3344      	adds	r3, #68	; 0x44
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	b292      	uxth	r2, r2
 8005082:	4619      	mov	r1, r3
 8005084:	f001 ff76 	bl	8006f74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	212c      	movs	r1, #44	; 0x2c
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	4413      	add	r3, r2
 8005094:	3344      	adds	r3, #68	; 0x44
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	441a      	add	r2, r3
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	202c      	movs	r0, #44	; 0x2c
 80050a2:	fb00 f303 	mul.w	r3, r0, r3
 80050a6:	440b      	add	r3, r1
 80050a8:	3344      	adds	r3, #68	; 0x44
 80050aa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3350      	adds	r3, #80	; 0x50
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	441a      	add	r2, r3
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	202c      	movs	r0, #44	; 0x2c
 80050c6:	fb00 f303 	mul.w	r3, r0, r3
 80050ca:	440b      	add	r3, r1
 80050cc:	3350      	adds	r3, #80	; 0x50
 80050ce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	0cdb      	lsrs	r3, r3, #19
 80050e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	212c      	movs	r1, #44	; 0x2c
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	3340      	adds	r3, #64	; 0x40
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d13c      	bne.n	8005178 <HCD_RXQLVL_IRQHandler+0x19a>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d039      	beq.n	8005178 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800511a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005122:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	461a      	mov	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	212c      	movs	r1, #44	; 0x2c
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	3354      	adds	r3, #84	; 0x54
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f083 0301 	eor.w	r3, r3, #1
 800514a:	b2d8      	uxtb	r0, r3
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	212c      	movs	r1, #44	; 0x2c
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	4413      	add	r3, r2
 8005158:	3354      	adds	r3, #84	; 0x54
 800515a:	4602      	mov	r2, r0
 800515c:	701a      	strb	r2, [r3, #0]
      break;
 800515e:	e00b      	b.n	8005178 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3360      	adds	r3, #96	; 0x60
 800516e:	2204      	movs	r2, #4
 8005170:	701a      	strb	r2, [r3, #0]
      break;
 8005172:	e001      	b.n	8005178 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005178:	bf00      	nop
  }
}
 800517a:	bf00      	nop
 800517c:	3728      	adds	r7, #40	; 0x28
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b086      	sub	sp, #24
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d10b      	bne.n	80051d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d102      	bne.n	80051ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f005 f8e7 	bl	800a398 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d132      	bne.n	8005242 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f043 0308 	orr.w	r3, r3, #8
 80051e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d126      	bne.n	800523c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d113      	bne.n	800521e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80051fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005200:	d106      	bne.n	8005210 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2102      	movs	r1, #2
 8005208:	4618      	mov	r0, r3
 800520a:	f002 f821 	bl	8007250 <USB_InitFSLSPClkSel>
 800520e:	e011      	b.n	8005234 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2101      	movs	r1, #1
 8005216:	4618      	mov	r0, r3
 8005218:	f002 f81a 	bl	8007250 <USB_InitFSLSPClkSel>
 800521c:	e00a      	b.n	8005234 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d106      	bne.n	8005234 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800522c:	461a      	mov	r2, r3
 800522e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005232:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f005 f8d9 	bl	800a3ec <HAL_HCD_PortEnabled_Callback>
 800523a:	e002      	b.n	8005242 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f005 f8e3 	bl	800a408 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b20      	cmp	r3, #32
 800524a:	d103      	bne.n	8005254 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f043 0320 	orr.w	r3, r3, #32
 8005252:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800525a:	461a      	mov	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6013      	str	r3, [r2, #0]
}
 8005260:	bf00      	nop
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e267      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d075      	beq.n	8005372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005286:	4b88      	ldr	r3, [pc, #544]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b04      	cmp	r3, #4
 8005290:	d00c      	beq.n	80052ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005292:	4b85      	ldr	r3, [pc, #532]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800529a:	2b08      	cmp	r3, #8
 800529c:	d112      	bne.n	80052c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529e:	4b82      	ldr	r3, [pc, #520]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052aa:	d10b      	bne.n	80052c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ac:	4b7e      	ldr	r3, [pc, #504]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d05b      	beq.n	8005370 <HAL_RCC_OscConfig+0x108>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d157      	bne.n	8005370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e242      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052cc:	d106      	bne.n	80052dc <HAL_RCC_OscConfig+0x74>
 80052ce:	4b76      	ldr	r3, [pc, #472]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a75      	ldr	r2, [pc, #468]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e01d      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x98>
 80052e6:	4b70      	ldr	r3, [pc, #448]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6f      	ldr	r2, [pc, #444]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4b6d      	ldr	r3, [pc, #436]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a6c      	ldr	r2, [pc, #432]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e00b      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 8005300:	4b69      	ldr	r3, [pc, #420]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a68      	ldr	r2, [pc, #416]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b66      	ldr	r3, [pc, #408]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a65      	ldr	r2, [pc, #404]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d013      	beq.n	8005348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005320:	f7fd fc30 	bl	8002b84 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005328:	f7fd fc2c 	bl	8002b84 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	; 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e207      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	4b5b      	ldr	r3, [pc, #364]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0xc0>
 8005346:	e014      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fd fc1c 	bl	8002b84 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005350:	f7fd fc18 	bl	8002b84 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e1f3      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005362:	4b51      	ldr	r3, [pc, #324]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0xe8>
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d063      	beq.n	8005446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800537e:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538a:	4b47      	ldr	r3, [pc, #284]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005392:	2b08      	cmp	r3, #8
 8005394:	d11c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005396:	4b44      	ldr	r3, [pc, #272]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d116      	bne.n	80053d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a2:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_RCC_OscConfig+0x152>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d001      	beq.n	80053ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e1c7      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ba:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4937      	ldr	r1, [pc, #220]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ce:	e03a      	b.n	8005446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d020      	beq.n	800541a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d8:	4b34      	ldr	r3, [pc, #208]	; (80054ac <HAL_RCC_OscConfig+0x244>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053de:	f7fd fbd1 	bl	8002b84 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e6:	f7fd fbcd 	bl	8002b84 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e1a8      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f8:	4b2b      	ldr	r3, [pc, #172]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005404:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4925      	ldr	r1, [pc, #148]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
 8005418:	e015      	b.n	8005446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <HAL_RCC_OscConfig+0x244>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fd fbb0 	bl	8002b84 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005428:	f7fd fbac 	bl	8002b84 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e187      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d036      	beq.n	80054c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d016      	beq.n	8005488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <HAL_RCC_OscConfig+0x248>)
 800545c:	2201      	movs	r2, #1
 800545e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fd fb90 	bl	8002b84 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005468:	f7fd fb8c 	bl	8002b84 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e167      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <HAL_RCC_OscConfig+0x240>)
 800547c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x200>
 8005486:	e01b      	b.n	80054c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <HAL_RCC_OscConfig+0x248>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548e:	f7fd fb79 	bl	8002b84 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005494:	e00e      	b.n	80054b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005496:	f7fd fb75 	bl	8002b84 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d907      	bls.n	80054b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e150      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
 80054a8:	40023800 	.word	0x40023800
 80054ac:	42470000 	.word	0x42470000
 80054b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b4:	4b88      	ldr	r3, [pc, #544]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ea      	bne.n	8005496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8097 	beq.w	80055fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d2:	4b81      	ldr	r3, [pc, #516]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10f      	bne.n	80054fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	4a7c      	ldr	r2, [pc, #496]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ec:	6413      	str	r3, [r2, #64]	; 0x40
 80054ee:	4b7a      	ldr	r3, [pc, #488]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fe:	4b77      	ldr	r3, [pc, #476]	; (80056dc <HAL_RCC_OscConfig+0x474>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d118      	bne.n	800553c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550a:	4b74      	ldr	r3, [pc, #464]	; (80056dc <HAL_RCC_OscConfig+0x474>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a73      	ldr	r2, [pc, #460]	; (80056dc <HAL_RCC_OscConfig+0x474>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005516:	f7fd fb35 	bl	8002b84 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551e:	f7fd fb31 	bl	8002b84 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e10c      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <HAL_RCC_OscConfig+0x474>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d106      	bne.n	8005552 <HAL_RCC_OscConfig+0x2ea>
 8005544:	4b64      	ldr	r3, [pc, #400]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	4a63      	ldr	r2, [pc, #396]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	; 0x70
 8005550:	e01c      	b.n	800558c <HAL_RCC_OscConfig+0x324>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b05      	cmp	r3, #5
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0x30c>
 800555a:	4b5f      	ldr	r3, [pc, #380]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	4a5e      	ldr	r2, [pc, #376]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	6713      	str	r3, [r2, #112]	; 0x70
 8005566:	4b5c      	ldr	r3, [pc, #368]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4a5b      	ldr	r2, [pc, #364]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	6713      	str	r3, [r2, #112]	; 0x70
 8005572:	e00b      	b.n	800558c <HAL_RCC_OscConfig+0x324>
 8005574:	4b58      	ldr	r3, [pc, #352]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a57      	ldr	r2, [pc, #348]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
 8005580:	4b55      	ldr	r3, [pc, #340]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	4a54      	ldr	r2, [pc, #336]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005586:	f023 0304 	bic.w	r3, r3, #4
 800558a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d015      	beq.n	80055c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fd faf6 	bl	8002b84 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fd faf2 	bl	8002b84 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0cb      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b2:	4b49      	ldr	r3, [pc, #292]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ee      	beq.n	800559c <HAL_RCC_OscConfig+0x334>
 80055be:	e014      	b.n	80055ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c0:	f7fd fae0 	bl	8002b84 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c6:	e00a      	b.n	80055de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c8:	f7fd fadc 	bl	8002b84 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e0b5      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055de:	4b3e      	ldr	r3, [pc, #248]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1ee      	bne.n	80055c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d105      	bne.n	80055fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f0:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80055f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80a1 	beq.w	8005748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005606:	4b34      	ldr	r3, [pc, #208]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	2b08      	cmp	r3, #8
 8005610:	d05c      	beq.n	80056cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d141      	bne.n	800569e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561a:	4b31      	ldr	r3, [pc, #196]	; (80056e0 <HAL_RCC_OscConfig+0x478>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fd fab0 	bl	8002b84 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005628:	f7fd faac 	bl	8002b84 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e087      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563a:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	019b      	lsls	r3, r3, #6
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	3b01      	subs	r3, #1
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	491b      	ldr	r1, [pc, #108]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005670:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005672:	2201      	movs	r2, #1
 8005674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005676:	f7fd fa85 	bl	8002b84 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567e:	f7fd fa81 	bl	8002b84 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e05c      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005690:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x416>
 800569c:	e054      	b.n	8005748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <HAL_RCC_OscConfig+0x478>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fd fa6e 	bl	8002b84 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fd fa6a 	bl	8002b84 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e045      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCC_OscConfig+0x470>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x444>
 80056ca:	e03d      	b.n	8005748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d107      	bne.n	80056e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e038      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40007000 	.word	0x40007000
 80056e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056e4:	4b1b      	ldr	r3, [pc, #108]	; (8005754 <HAL_RCC_OscConfig+0x4ec>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d028      	beq.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d121      	bne.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d11a      	bne.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005714:	4013      	ands	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800571a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800571c:	4293      	cmp	r3, r2
 800571e:	d111      	bne.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	3b01      	subs	r3, #1
 800572e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005730:	429a      	cmp	r2, r3
 8005732:	d107      	bne.n	8005744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800

08005758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0cc      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800576c:	4b68      	ldr	r3, [pc, #416]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d90c      	bls.n	8005794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b65      	ldr	r3, [pc, #404]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	4b63      	ldr	r3, [pc, #396]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0b8      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d020      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057ac:	4b59      	ldr	r3, [pc, #356]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4a58      	ldr	r2, [pc, #352]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c4:	4b53      	ldr	r3, [pc, #332]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a52      	ldr	r2, [pc, #328]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d0:	4b50      	ldr	r3, [pc, #320]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	494d      	ldr	r1, [pc, #308]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d044      	beq.n	8005878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	4b47      	ldr	r3, [pc, #284]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d119      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e07f      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d003      	beq.n	8005816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005812:	2b03      	cmp	r3, #3
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005816:	4b3f      	ldr	r3, [pc, #252]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e06f      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005826:	4b3b      	ldr	r3, [pc, #236]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e067      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005836:	4b37      	ldr	r3, [pc, #220]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f023 0203 	bic.w	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4934      	ldr	r1, [pc, #208]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005848:	f7fd f99c 	bl	8002b84 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584e:	e00a      	b.n	8005866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005850:	f7fd f998 	bl	8002b84 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e04f      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 020c 	and.w	r2, r3, #12
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	429a      	cmp	r2, r3
 8005876:	d1eb      	bne.n	8005850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d20c      	bcs.n	80058a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b22      	ldr	r3, [pc, #136]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b20      	ldr	r3, [pc, #128]	; (8005910 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e032      	b.n	8005906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058ac:	4b19      	ldr	r3, [pc, #100]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4916      	ldr	r1, [pc, #88]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	490e      	ldr	r1, [pc, #56]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058de:	f000 f821 	bl	8005924 <HAL_RCC_GetSysClockFreq>
 80058e2:	4602      	mov	r2, r0
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	490a      	ldr	r1, [pc, #40]	; (8005918 <HAL_RCC_ClockConfig+0x1c0>)
 80058f0:	5ccb      	ldrb	r3, [r1, r3]
 80058f2:	fa22 f303 	lsr.w	r3, r2, r3
 80058f6:	4a09      	ldr	r2, [pc, #36]	; (800591c <HAL_RCC_ClockConfig+0x1c4>)
 80058f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <HAL_RCC_ClockConfig+0x1c8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fd f8fc 	bl	8002afc <HAL_InitTick>

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023c00 	.word	0x40023c00
 8005914:	40023800 	.word	0x40023800
 8005918:	0801928c 	.word	0x0801928c
 800591c:	20000004 	.word	0x20000004
 8005920:	20000010 	.word	0x20000010

08005924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005928:	b090      	sub	sp, #64	; 0x40
 800592a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
 8005930:	2300      	movs	r3, #0
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005934:	2300      	movs	r3, #0
 8005936:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800593c:	4b59      	ldr	r3, [pc, #356]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 030c 	and.w	r3, r3, #12
 8005944:	2b08      	cmp	r3, #8
 8005946:	d00d      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0x40>
 8005948:	2b08      	cmp	r3, #8
 800594a:	f200 80a1 	bhi.w	8005a90 <HAL_RCC_GetSysClockFreq+0x16c>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x34>
 8005952:	2b04      	cmp	r3, #4
 8005954:	d003      	beq.n	800595e <HAL_RCC_GetSysClockFreq+0x3a>
 8005956:	e09b      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005958:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800595c:	e09b      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800595e:	4b53      	ldr	r3, [pc, #332]	; (8005aac <HAL_RCC_GetSysClockFreq+0x188>)
 8005960:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005962:	e098      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005964:	4b4f      	ldr	r3, [pc, #316]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800596e:	4b4d      	ldr	r3, [pc, #308]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d028      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800597a:	4b4a      	ldr	r3, [pc, #296]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	099b      	lsrs	r3, r3, #6
 8005980:	2200      	movs	r2, #0
 8005982:	623b      	str	r3, [r7, #32]
 8005984:	627a      	str	r2, [r7, #36]	; 0x24
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800598c:	2100      	movs	r1, #0
 800598e:	4b47      	ldr	r3, [pc, #284]	; (8005aac <HAL_RCC_GetSysClockFreq+0x188>)
 8005990:	fb03 f201 	mul.w	r2, r3, r1
 8005994:	2300      	movs	r3, #0
 8005996:	fb00 f303 	mul.w	r3, r0, r3
 800599a:	4413      	add	r3, r2
 800599c:	4a43      	ldr	r2, [pc, #268]	; (8005aac <HAL_RCC_GetSysClockFreq+0x188>)
 800599e:	fba0 1202 	umull	r1, r2, r0, r2
 80059a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a4:	460a      	mov	r2, r1
 80059a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80059a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059aa:	4413      	add	r3, r2
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b0:	2200      	movs	r2, #0
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	61fa      	str	r2, [r7, #28]
 80059b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059be:	f7fa fc5f 	bl	8000280 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4613      	mov	r3, r2
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ca:	e053      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059cc:	4b35      	ldr	r3, [pc, #212]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	099b      	lsrs	r3, r3, #6
 80059d2:	2200      	movs	r2, #0
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	617a      	str	r2, [r7, #20]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059de:	f04f 0b00 	mov.w	fp, #0
 80059e2:	4652      	mov	r2, sl
 80059e4:	465b      	mov	r3, fp
 80059e6:	f04f 0000 	mov.w	r0, #0
 80059ea:	f04f 0100 	mov.w	r1, #0
 80059ee:	0159      	lsls	r1, r3, #5
 80059f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f4:	0150      	lsls	r0, r2, #5
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	ebb2 080a 	subs.w	r8, r2, sl
 80059fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a16:	ebb2 0408 	subs.w	r4, r2, r8
 8005a1a:	eb63 0509 	sbc.w	r5, r3, r9
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	00eb      	lsls	r3, r5, #3
 8005a28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a2c:	00e2      	lsls	r2, r4, #3
 8005a2e:	4614      	mov	r4, r2
 8005a30:	461d      	mov	r5, r3
 8005a32:	eb14 030a 	adds.w	r3, r4, sl
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	eb45 030b 	adc.w	r3, r5, fp
 8005a3c:	607b      	str	r3, [r7, #4]
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	028b      	lsls	r3, r1, #10
 8005a4e:	4621      	mov	r1, r4
 8005a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a54:	4621      	mov	r1, r4
 8005a56:	028a      	lsls	r2, r1, #10
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	2200      	movs	r2, #0
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	60fa      	str	r2, [r7, #12]
 8005a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a68:	f7fa fc0a 	bl	8000280 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4613      	mov	r3, r2
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a8e:	e002      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3740      	adds	r7, #64	; 0x40
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	00f42400 	.word	0x00f42400
 8005aac:	017d7840 	.word	0x017d7840

08005ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e041      	b.n	8005b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fb fc18 	bl	800130c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 fcf0 	bl	80064d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d001      	beq.n	8005b68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e03c      	b.n	8005be2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <HAL_TIM_Base_Start+0xa0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d018      	beq.n	8005bac <HAL_TIM_Base_Start+0x5c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	d013      	beq.n	8005bac <HAL_TIM_Base_Start+0x5c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <HAL_TIM_Base_Start+0xa4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00e      	beq.n	8005bac <HAL_TIM_Base_Start+0x5c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a19      	ldr	r2, [pc, #100]	; (8005bf8 <HAL_TIM_Base_Start+0xa8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_TIM_Base_Start+0x5c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <HAL_TIM_Base_Start+0xac>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_TIM_Base_Start+0x5c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <HAL_TIM_Base_Start+0xb0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d111      	bne.n	8005bd0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d010      	beq.n	8005be0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	e007      	b.n	8005be0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40014000 	.word	0x40014000

08005c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d001      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e044      	b.n	8005ca6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x6c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c46:	d013      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x6c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x6c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <HAL_TIM_Base_Start_IT+0xb8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x6c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x6c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a16      	ldr	r2, [pc, #88]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d111      	bne.n	8005c94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b06      	cmp	r3, #6
 8005c80:	d010      	beq.n	8005ca4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c92:	e007      	b.n	8005ca4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40014000 	.word	0x40014000

08005cc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e041      	b.n	8005d5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f839 	bl	8005d66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f000 fbe4 	bl	80064d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <HAL_TIM_PWM_Start+0x24>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	bf14      	ite	ne
 8005d98:	2301      	movne	r3, #1
 8005d9a:	2300      	moveq	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e022      	b.n	8005de6 <HAL_TIM_PWM_Start+0x6a>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d109      	bne.n	8005dba <HAL_TIM_PWM_Start+0x3e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	bf14      	ite	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	2300      	moveq	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	e015      	b.n	8005de6 <HAL_TIM_PWM_Start+0x6a>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d109      	bne.n	8005dd4 <HAL_TIM_PWM_Start+0x58>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	bf14      	ite	ne
 8005dcc:	2301      	movne	r3, #1
 8005dce:	2300      	moveq	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	e008      	b.n	8005de6 <HAL_TIM_PWM_Start+0x6a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e068      	b.n	8005ec0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Start+0x82>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dfc:	e013      	b.n	8005e26 <HAL_TIM_PWM_Start+0xaa>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0x92>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e0c:	e00b      	b.n	8005e26 <HAL_TIM_PWM_Start+0xaa>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0xa2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e1c:	e003      	b.n	8005e26 <HAL_TIM_PWM_Start+0xaa>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fe87 	bl	8006b42 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a23      	ldr	r2, [pc, #140]	; (8005ec8 <HAL_TIM_PWM_Start+0x14c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d107      	bne.n	8005e4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <HAL_TIM_PWM_Start+0x14c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x10e>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e60:	d013      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x10e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <HAL_TIM_PWM_Start+0x150>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x10e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a17      	ldr	r2, [pc, #92]	; (8005ed0 <HAL_TIM_PWM_Start+0x154>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x10e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <HAL_TIM_PWM_Start+0x158>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x10e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <HAL_TIM_PWM_Start+0x15c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d111      	bne.n	8005eae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b06      	cmp	r3, #6
 8005e9a:	d010      	beq.n	8005ebe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eac:	e007      	b.n	8005ebe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0201 	orr.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40014000 	.word	0x40014000

08005edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d122      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d11b      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0202 	mvn.w	r2, #2
 8005f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fab9 	bl	8006496 <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 faab 	bl	8006482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fabc 	bl	80064aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d122      	bne.n	8005f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d11b      	bne.n	8005f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0204 	mvn.w	r2, #4
 8005f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa8f 	bl	8006496 <HAL_TIM_IC_CaptureCallback>
 8005f78:	e005      	b.n	8005f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fa81 	bl	8006482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fa92 	bl	80064aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d122      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d11b      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0208 	mvn.w	r2, #8
 8005fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2204      	movs	r2, #4
 8005fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa65 	bl	8006496 <HAL_TIM_IC_CaptureCallback>
 8005fcc:	e005      	b.n	8005fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa57 	bl	8006482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fa68 	bl	80064aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d122      	bne.n	8006034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d11b      	bne.n	8006034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0210 	mvn.w	r2, #16
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2208      	movs	r2, #8
 800600a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa3b 	bl	8006496 <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa2d 	bl	8006482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa3e 	bl	80064aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b01      	cmp	r3, #1
 8006040:	d10e      	bne.n	8006060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d107      	bne.n	8006060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0201 	mvn.w	r2, #1
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fa fb04 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b80      	cmp	r3, #128	; 0x80
 800606c:	d10e      	bne.n	800608c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006078:	2b80      	cmp	r3, #128	; 0x80
 800607a:	d107      	bne.n	800608c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fdf8 	bl	8006c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d10e      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d107      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fa03 	bl	80064be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d10e      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d107      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0220 	mvn.w	r2, #32
 80060dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fdc2 	bl	8006c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006106:	2302      	movs	r3, #2
 8006108:	e0ae      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b0c      	cmp	r3, #12
 8006116:	f200 809f 	bhi.w	8006258 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800611a:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006155 	.word	0x08006155
 8006124:	08006259 	.word	0x08006259
 8006128:	08006259 	.word	0x08006259
 800612c:	08006259 	.word	0x08006259
 8006130:	08006195 	.word	0x08006195
 8006134:	08006259 	.word	0x08006259
 8006138:	08006259 	.word	0x08006259
 800613c:	08006259 	.word	0x08006259
 8006140:	080061d7 	.word	0x080061d7
 8006144:	08006259 	.word	0x08006259
 8006148:	08006259 	.word	0x08006259
 800614c:	08006259 	.word	0x08006259
 8006150:	08006217 	.word	0x08006217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fa3a 	bl	80065d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0208 	orr.w	r2, r2, #8
 800616e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0204 	bic.w	r2, r2, #4
 800617e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	619a      	str	r2, [r3, #24]
      break;
 8006192:	e064      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa80 	bl	80066a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]
      break;
 80061d4:	e043      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 facb 	bl	8006778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0208 	orr.w	r2, r2, #8
 80061f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0204 	bic.w	r2, r2, #4
 8006200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69d9      	ldr	r1, [r3, #28]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	61da      	str	r2, [r3, #28]
      break;
 8006214:	e023      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fb15 	bl	800684c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69d9      	ldr	r1, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	021a      	lsls	r2, r3, #8
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	61da      	str	r2, [r3, #28]
      break;
 8006256:	e002      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]
      break;
 800625c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIM_ConfigClockSource+0x1c>
 8006288:	2302      	movs	r3, #2
 800628a:	e0b4      	b.n	80063f6 <HAL_TIM_ConfigClockSource+0x186>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c4:	d03e      	beq.n	8006344 <HAL_TIM_ConfigClockSource+0xd4>
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ca:	f200 8087 	bhi.w	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d2:	f000 8086 	beq.w	80063e2 <HAL_TIM_ConfigClockSource+0x172>
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062da:	d87f      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b70      	cmp	r3, #112	; 0x70
 80062de:	d01a      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0xa6>
 80062e0:	2b70      	cmp	r3, #112	; 0x70
 80062e2:	d87b      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b60      	cmp	r3, #96	; 0x60
 80062e6:	d050      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x11a>
 80062e8:	2b60      	cmp	r3, #96	; 0x60
 80062ea:	d877      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b50      	cmp	r3, #80	; 0x50
 80062ee:	d03c      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xfa>
 80062f0:	2b50      	cmp	r3, #80	; 0x50
 80062f2:	d873      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d058      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x13a>
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d86f      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d064      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006300:	2b30      	cmp	r3, #48	; 0x30
 8006302:	d86b      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d060      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d867      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d05c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006310:	2b10      	cmp	r3, #16
 8006312:	d05a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	e062      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6899      	ldr	r1, [r3, #8]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f000 fbec 	bl	8006b02 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	609a      	str	r2, [r3, #8]
      break;
 8006342:	e04f      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6899      	ldr	r1, [r3, #8]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f000 fbd5 	bl	8006b02 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006366:	609a      	str	r2, [r3, #8]
      break;
 8006368:	e03c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	461a      	mov	r2, r3
 8006378:	f000 fb49 	bl	8006a0e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2150      	movs	r1, #80	; 0x50
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fba2 	bl	8006acc <TIM_ITRx_SetConfig>
      break;
 8006388:	e02c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fb68 	bl	8006a6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2160      	movs	r1, #96	; 0x60
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb92 	bl	8006acc <TIM_ITRx_SetConfig>
      break;
 80063a8:	e01c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fb29 	bl	8006a0e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2140      	movs	r1, #64	; 0x40
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fb82 	bl	8006acc <TIM_ITRx_SetConfig>
      break;
 80063c8:	e00c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f000 fb79 	bl	8006acc <TIM_ITRx_SetConfig>
      break;
 80063da:	e003      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	73fb      	strb	r3, [r7, #15]
      break;
 80063e0:	e000      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006412:	2302      	movs	r3, #2
 8006414:	e031      	b.n	800647a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fa5f 	bl	80068ec <TIM_SlaveTimer_SetConfig>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e018      	b.n	800647a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006456:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006466:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a34      	ldr	r2, [pc, #208]	; (80065b8 <TIM_Base_SetConfig+0xe4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00f      	beq.n	800650c <TIM_Base_SetConfig+0x38>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f2:	d00b      	beq.n	800650c <TIM_Base_SetConfig+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a31      	ldr	r2, [pc, #196]	; (80065bc <TIM_Base_SetConfig+0xe8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d007      	beq.n	800650c <TIM_Base_SetConfig+0x38>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a30      	ldr	r2, [pc, #192]	; (80065c0 <TIM_Base_SetConfig+0xec>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_Base_SetConfig+0x38>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a2f      	ldr	r2, [pc, #188]	; (80065c4 <TIM_Base_SetConfig+0xf0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d108      	bne.n	800651e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <TIM_Base_SetConfig+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01b      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d017      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a22      	ldr	r2, [pc, #136]	; (80065bc <TIM_Base_SetConfig+0xe8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <TIM_Base_SetConfig+0xec>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a20      	ldr	r2, [pc, #128]	; (80065c4 <TIM_Base_SetConfig+0xf0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <TIM_Base_SetConfig+0xf4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <TIM_Base_SetConfig+0xf8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <TIM_Base_SetConfig+0xfc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d108      	bne.n	8006570 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <TIM_Base_SetConfig+0xe4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d103      	bne.n	80065a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	615a      	str	r2, [r3, #20]
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40014400 	.word	0x40014400
 80065d0:	40014800 	.word	0x40014800

080065d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f023 0201 	bic.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 0302 	bic.w	r3, r3, #2
 800661c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a1c      	ldr	r2, [pc, #112]	; (800669c <TIM_OC1_SetConfig+0xc8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10c      	bne.n	800664a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 0308 	bic.w	r3, r3, #8
 8006636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 0304 	bic.w	r3, r3, #4
 8006648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a13      	ldr	r2, [pc, #76]	; (800669c <TIM_OC1_SetConfig+0xc8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d111      	bne.n	8006676 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	621a      	str	r2, [r3, #32]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40010000 	.word	0x40010000

080066a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0210 	bic.w	r2, r3, #16
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0320 	bic.w	r3, r3, #32
 80066ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <TIM_OC2_SetConfig+0xd4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10d      	bne.n	800671c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a15      	ldr	r2, [pc, #84]	; (8006774 <TIM_OC2_SetConfig+0xd4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d113      	bne.n	800674c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800672a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000

08006778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <TIM_OC3_SetConfig+0xd0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d10d      	bne.n	80067f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a14      	ldr	r2, [pc, #80]	; (8006848 <TIM_OC3_SetConfig+0xd0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d113      	bne.n	8006822 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40010000 	.word	0x40010000

0800684c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a10      	ldr	r2, [pc, #64]	; (80068e8 <TIM_OC4_SetConfig+0x9c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d109      	bne.n	80068c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	019b      	lsls	r3, r3, #6
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40010000 	.word	0x40010000

080068ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b70      	cmp	r3, #112	; 0x70
 8006934:	d01a      	beq.n	800696c <TIM_SlaveTimer_SetConfig+0x80>
 8006936:	2b70      	cmp	r3, #112	; 0x70
 8006938:	d860      	bhi.n	80069fc <TIM_SlaveTimer_SetConfig+0x110>
 800693a:	2b60      	cmp	r3, #96	; 0x60
 800693c:	d054      	beq.n	80069e8 <TIM_SlaveTimer_SetConfig+0xfc>
 800693e:	2b60      	cmp	r3, #96	; 0x60
 8006940:	d85c      	bhi.n	80069fc <TIM_SlaveTimer_SetConfig+0x110>
 8006942:	2b50      	cmp	r3, #80	; 0x50
 8006944:	d046      	beq.n	80069d4 <TIM_SlaveTimer_SetConfig+0xe8>
 8006946:	2b50      	cmp	r3, #80	; 0x50
 8006948:	d858      	bhi.n	80069fc <TIM_SlaveTimer_SetConfig+0x110>
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d019      	beq.n	8006982 <TIM_SlaveTimer_SetConfig+0x96>
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d854      	bhi.n	80069fc <TIM_SlaveTimer_SetConfig+0x110>
 8006952:	2b30      	cmp	r3, #48	; 0x30
 8006954:	d055      	beq.n	8006a02 <TIM_SlaveTimer_SetConfig+0x116>
 8006956:	2b30      	cmp	r3, #48	; 0x30
 8006958:	d850      	bhi.n	80069fc <TIM_SlaveTimer_SetConfig+0x110>
 800695a:	2b20      	cmp	r3, #32
 800695c:	d051      	beq.n	8006a02 <TIM_SlaveTimer_SetConfig+0x116>
 800695e:	2b20      	cmp	r3, #32
 8006960:	d84c      	bhi.n	80069fc <TIM_SlaveTimer_SetConfig+0x110>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d04d      	beq.n	8006a02 <TIM_SlaveTimer_SetConfig+0x116>
 8006966:	2b10      	cmp	r3, #16
 8006968:	d04b      	beq.n	8006a02 <TIM_SlaveTimer_SetConfig+0x116>
 800696a:	e047      	b.n	80069fc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68d9      	ldr	r1, [r3, #12]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f000 f8c1 	bl	8006b02 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006980:	e040      	b.n	8006a04 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b05      	cmp	r3, #5
 8006988:	d101      	bne.n	800698e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e03b      	b.n	8006a06 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0201 	bic.w	r2, r2, #1
 80069a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	621a      	str	r2, [r3, #32]
      break;
 80069d2:	e017      	b.n	8006a04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	6899      	ldr	r1, [r3, #8]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	461a      	mov	r2, r3
 80069e2:	f000 f814 	bl	8006a0e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80069e6:	e00d      	b.n	8006a04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6899      	ldr	r1, [r3, #8]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	461a      	mov	r2, r3
 80069f6:	f000 f839 	bl	8006a6c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80069fa:	e003      	b.n	8006a04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006a00:	e000      	b.n	8006a04 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006a02:	bf00      	nop
  }

  return status;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b087      	sub	sp, #28
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	f023 0201 	bic.w	r2, r3, #1
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 030a 	bic.w	r3, r3, #10
 8006a4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f023 0210 	bic.w	r2, r3, #16
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	031b      	lsls	r3, r3, #12
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	621a      	str	r2, [r3, #32]
}
 8006ac0:	bf00      	nop
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	f043 0307 	orr.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	609a      	str	r2, [r3, #8]
}
 8006af6:	bf00      	nop
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	021a      	lsls	r2, r3, #8
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	431a      	orrs	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	609a      	str	r2, [r3, #8]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b087      	sub	sp, #28
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	2201      	movs	r2, #1
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a1a      	ldr	r2, [r3, #32]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	43db      	mvns	r3, r3
 8006b64:	401a      	ands	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a1a      	ldr	r2, [r3, #32]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	621a      	str	r2, [r3, #32]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e050      	b.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d018      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf0:	d013      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a16      	ldr	r2, [pc, #88]	; (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a15      	ldr	r2, [pc, #84]	; (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10c      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40000400 	.word	0x40000400
 8006c5c:	40000800 	.word	0x40000800
 8006c60:	40000c00 	.word	0x40000c00
 8006c64:	40014000 	.word	0x40014000

08006c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c90:	b084      	sub	sp, #16
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	f107 001c 	add.w	r0, r7, #28
 8006c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d122      	bne.n	8006cee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d105      	bne.n	8006ce2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f9c0 	bl	8007068 <USB_CoreReset>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]
 8006cec:	e01a      	b.n	8006d24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f9b4 	bl	8007068 <USB_CoreReset>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
 8006d16:	e005      	b.n	8006d24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d10b      	bne.n	8006d42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f043 0206 	orr.w	r2, r3, #6
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f043 0220 	orr.w	r2, r3, #32
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d4e:	b004      	add	sp, #16
 8006d50:	4770      	bx	lr

08006d52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f043 0201 	orr.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f023 0201 	bic.w	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d115      	bne.n	8006de4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	f7fb fee9 	bl	8002b9c <HAL_Delay>
      ms++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f93a 	bl	800704a <USB_GetMode>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d01e      	beq.n	8006e1a <USB_SetCurrentMode+0x84>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b31      	cmp	r3, #49	; 0x31
 8006de0:	d9f0      	bls.n	8006dc4 <USB_SetCurrentMode+0x2e>
 8006de2:	e01a      	b.n	8006e1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d115      	bne.n	8006e16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006df6:	2001      	movs	r0, #1
 8006df8:	f7fb fed0 	bl	8002b9c <HAL_Delay>
      ms++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f921 	bl	800704a <USB_GetMode>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <USB_SetCurrentMode+0x84>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b31      	cmp	r3, #49	; 0x31
 8006e12:	d9f0      	bls.n	8006df6 <USB_SetCurrentMode+0x60>
 8006e14:	e001      	b.n	8006e1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e005      	b.n	8006e26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b32      	cmp	r3, #50	; 0x32
 8006e1e:	d101      	bne.n	8006e24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <USB_FlushTxFifo+0x64>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e01b      	b.n	8006e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	daf2      	bge.n	8006e3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	019b      	lsls	r3, r3, #6
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a08      	ldr	r2, [pc, #32]	; (8006e94 <USB_FlushTxFifo+0x64>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e006      	b.n	8006e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d0f0      	beq.n	8006e68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	00030d40 	.word	0x00030d40

08006e98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <USB_FlushRxFifo+0x5c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d901      	bls.n	8006eb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e018      	b.n	8006ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	daf2      	bge.n	8006ea4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <USB_FlushRxFifo+0x5c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e006      	b.n	8006ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d0f0      	beq.n	8006ec8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	00030d40 	.word	0x00030d40

08006ef8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b089      	sub	sp, #36	; 0x24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	460b      	mov	r3, r1
 8006f08:	71fb      	strb	r3, [r7, #7]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d123      	bne.n	8006f66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f1e:	88bb      	ldrh	r3, [r7, #4]
 8006f20:	3303      	adds	r3, #3
 8006f22:	089b      	lsrs	r3, r3, #2
 8006f24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e018      	b.n	8006f5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	031a      	lsls	r2, r3, #12
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f38:	461a      	mov	r2, r3
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	3301      	adds	r3, #1
 8006f44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	3301      	adds	r3, #1
 8006f56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d3e2      	bcc.n	8006f2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3724      	adds	r7, #36	; 0x24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b08b      	sub	sp, #44	; 0x2c
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	089b      	lsrs	r3, r3, #2
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	623b      	str	r3, [r7, #32]
 8006f9e:	e014      	b.n	8006fca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	3301      	adds	r3, #1
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	3301      	adds	r3, #1
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	623b      	str	r3, [r7, #32]
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d3e6      	bcc.n	8006fa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fd2:	8bfb      	ldrh	r3, [r7, #30]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01e      	beq.n	8007016 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f107 0310 	add.w	r3, r7, #16
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	701a      	strb	r2, [r3, #0]
      i++;
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	3301      	adds	r3, #1
 8007002:	623b      	str	r3, [r7, #32]
      pDest++;
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	3301      	adds	r3, #1
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800700a:	8bfb      	ldrh	r3, [r7, #30]
 800700c:	3b01      	subs	r3, #1
 800700e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007010:	8bfb      	ldrh	r3, [r7, #30]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1ea      	bne.n	8006fec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007018:	4618      	mov	r0, r3
 800701a:	372c      	adds	r7, #44	; 0x2c
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4013      	ands	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f003 0301 	and.w	r3, r3, #1
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4a13      	ldr	r2, [pc, #76]	; (80070cc <USB_CoreReset+0x64>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d901      	bls.n	8007086 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e01b      	b.n	80070be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	daf2      	bge.n	8007074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f043 0201 	orr.w	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4a09      	ldr	r2, [pc, #36]	; (80070cc <USB_CoreReset+0x64>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d901      	bls.n	80070b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e006      	b.n	80070be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d0f0      	beq.n	800709e <USB_CoreReset+0x36>

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	00030d40 	.word	0x00030d40

080070d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070d0:	b084      	sub	sp, #16
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b086      	sub	sp, #24
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070f0:	461a      	mov	r2, r3
 80070f2:	2300      	movs	r3, #0
 80070f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007122:	2b00      	cmp	r3, #0
 8007124:	d018      	beq.n	8007158 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d10a      	bne.n	8007142 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800713a:	f043 0304 	orr.w	r3, r3, #4
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	e014      	b.n	800716c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007150:	f023 0304 	bic.w	r3, r3, #4
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e009      	b.n	800716c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007166:	f023 0304 	bic.w	r3, r3, #4
 800716a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800716c:	2110      	movs	r1, #16
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff fe5e 	bl	8006e30 <USB_FlushTxFifo>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fe8a 	bl	8006e98 <USB_FlushRxFifo>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800718e:	2300      	movs	r3, #0
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	e015      	b.n	80071c0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a0:	461a      	mov	r2, r3
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295
 80071a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b4:	461a      	mov	r2, r3
 80071b6:	2300      	movs	r3, #0
 80071b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3301      	adds	r3, #1
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d3e5      	bcc.n	8007194 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f04f 32ff 	mov.w	r2, #4294967295
 80071d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a13      	ldr	r2, [pc, #76]	; (800723c <USB_HostInit+0x16c>)
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a13      	ldr	r2, [pc, #76]	; (8007240 <USB_HostInit+0x170>)
 80071f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80071f8:	e009      	b.n	800720e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2280      	movs	r2, #128	; 0x80
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a10      	ldr	r2, [pc, #64]	; (8007244 <USB_HostInit+0x174>)
 8007204:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a0f      	ldr	r2, [pc, #60]	; (8007248 <USB_HostInit+0x178>)
 800720a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f043 0210 	orr.w	r2, r3, #16
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699a      	ldr	r2, [r3, #24]
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <USB_HostInit+0x17c>)
 8007226:	4313      	orrs	r3, r2
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007238:	b004      	add	sp, #16
 800723a:	4770      	bx	lr
 800723c:	01000200 	.word	0x01000200
 8007240:	00e00300 	.word	0x00e00300
 8007244:	00600080 	.word	0x00600080
 8007248:	004000e0 	.word	0x004000e0
 800724c:	a3200008 	.word	0xa3200008

08007250 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007288:	4313      	orrs	r3, r2
 800728a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d107      	bne.n	80072a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007298:	461a      	mov	r2, r3
 800729a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800729e:	6053      	str	r3, [r2, #4]
 80072a0:	e009      	b.n	80072b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d106      	bne.n	80072b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ae:	461a      	mov	r2, r3
 80072b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80072b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80072ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80072f4:	2064      	movs	r0, #100	; 0x64
 80072f6:	f7fb fc51 	bl	8002b9c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007306:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007308:	200a      	movs	r0, #10
 800730a:	f7fb fc47 	bl	8002b9c <HAL_Delay>

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800733c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <USB_DriveVbus+0x44>
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d106      	bne.n	800735c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007356:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800735a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007366:	d109      	bne.n	800737c <USB_DriveVbus+0x64>
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800737a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	0c5b      	lsrs	r3, r3, #17
 80073a8:	f003 0303 	and.w	r3, r3, #3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	b29b      	uxth	r3, r3
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	4608      	mov	r0, r1
 80073e6:	4611      	mov	r1, r2
 80073e8:	461a      	mov	r2, r3
 80073ea:	4603      	mov	r3, r0
 80073ec:	70fb      	strb	r3, [r7, #3]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70bb      	strb	r3, [r7, #2]
 80073f2:	4613      	mov	r3, r2
 80073f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	4413      	add	r3, r2
 8007406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740a:	461a      	mov	r2, r3
 800740c:	f04f 33ff 	mov.w	r3, #4294967295
 8007410:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007412:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007416:	2b03      	cmp	r3, #3
 8007418:	d87e      	bhi.n	8007518 <USB_HC_Init+0x13c>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <USB_HC_Init+0x44>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007431 	.word	0x08007431
 8007424:	080074db 	.word	0x080074db
 8007428:	08007431 	.word	0x08007431
 800742c:	0800749d 	.word	0x0800749d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743c:	461a      	mov	r2, r3
 800743e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007442:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007444:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007448:	2b00      	cmp	r3, #0
 800744a:	da10      	bge.n	800746e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	78fa      	ldrb	r2, [r7, #3]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	440a      	add	r2, r1
 8007462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800746c:	e057      	b.n	800751e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d051      	beq.n	800751e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4413      	add	r3, r2
 8007482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	440a      	add	r2, r1
 8007490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007494:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007498:	60d3      	str	r3, [r2, #12]
      break;
 800749a:	e040      	b.n	800751e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a8:	461a      	mov	r2, r3
 80074aa:	f240 639d 	movw	r3, #1693	; 0x69d
 80074ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	da34      	bge.n	8007522 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80074d8:	e023      	b.n	8007522 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e6:	461a      	mov	r2, r3
 80074e8:	f240 2325 	movw	r3, #549	; 0x225
 80074ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	da17      	bge.n	8007526 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	440a      	add	r2, r1
 800750c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007510:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007514:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007516:	e006      	b.n	8007526 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	77fb      	strb	r3, [r7, #31]
      break;
 800751c:	e004      	b.n	8007528 <USB_HC_Init+0x14c>
      break;
 800751e:	bf00      	nop
 8007520:	e002      	b.n	8007528 <USB_HC_Init+0x14c>
      break;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <USB_HC_Init+0x14c>
      break;
 8007526:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	4413      	add	r3, r2
 8007530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	440a      	add	r2, r1
 800753e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007542:	f043 0302 	orr.w	r3, r3, #2
 8007546:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800754e:	699a      	ldr	r2, [r3, #24]
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	2101      	movs	r1, #1
 8007558:	fa01 f303 	lsl.w	r3, r1, r3
 800755c:	6939      	ldr	r1, [r7, #16]
 800755e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007562:	4313      	orrs	r3, r2
 8007564:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007572:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007576:	2b00      	cmp	r3, #0
 8007578:	da03      	bge.n	8007582 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800757a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	e001      	b.n	8007586 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff feff 	bl	800738a <USB_GetHostSpeed>
 800758c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800758e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007592:	2b02      	cmp	r3, #2
 8007594:	d106      	bne.n	80075a4 <USB_HC_Init+0x1c8>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d003      	beq.n	80075a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800759c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	e001      	b.n	80075a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075a8:	787b      	ldrb	r3, [r7, #1]
 80075aa:	059b      	lsls	r3, r3, #22
 80075ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075b0:	78bb      	ldrb	r3, [r7, #2]
 80075b2:	02db      	lsls	r3, r3, #11
 80075b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075be:	049b      	lsls	r3, r3, #18
 80075c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80075c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	0159      	lsls	r1, r3, #5
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	440b      	add	r3, r1
 80075da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075de:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075e4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80075e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d003      	beq.n	80075f6 <USB_HC_Init+0x21a>
 80075ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d10f      	bne.n	8007616 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	78fa      	ldrb	r2, [r7, #3]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	440a      	add	r2, r1
 800760c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007614:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007616:	7ffb      	ldrb	r3, [r7, #31]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08c      	sub	sp, #48	; 0x30
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800763c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007646:	2b00      	cmp	r3, #0
 8007648:	d02d      	beq.n	80076a6 <USB_HC_StartXfer+0x86>
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	791b      	ldrb	r3, [r3, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d129      	bne.n	80076a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007652:	79fb      	ldrb	r3, [r7, #7]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d117      	bne.n	8007688 <USB_HC_StartXfer+0x68>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	79db      	ldrb	r3, [r3, #7]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <USB_HC_StartXfer+0x48>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	79db      	ldrb	r3, [r3, #7]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d10f      	bne.n	8007688 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	4413      	add	r3, r2
 8007670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	6a3a      	ldr	r2, [r7, #32]
 800767c:	440a      	add	r2, r1
 800767e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <USB_HC_StartXfer+0x86>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	795b      	ldrb	r3, [r3, #5]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	785b      	ldrb	r3, [r3, #1]
 800769a:	4619      	mov	r1, r3
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fa0f 	bl	8007ac0 <USB_DoPing>
      return HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e0f8      	b.n	8007898 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d018      	beq.n	80076e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	8912      	ldrh	r2, [r2, #8]
 80076b6:	4413      	add	r3, r2
 80076b8:	3b01      	subs	r3, #1
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	8912      	ldrh	r2, [r2, #8]
 80076be:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80076c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076c6:	8b7b      	ldrh	r3, [r7, #26]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d90b      	bls.n	80076e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80076cc:	8b7b      	ldrh	r3, [r7, #26]
 80076ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	8912      	ldrh	r2, [r2, #8]
 80076d6:	fb03 f202 	mul.w	r2, r3, r2
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	611a      	str	r2, [r3, #16]
 80076de:	e001      	b.n	80076e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80076e0:	2301      	movs	r3, #1
 80076e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	78db      	ldrb	r3, [r3, #3]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	8912      	ldrh	r2, [r2, #8]
 80076f2:	fb03 f202 	mul.w	r2, r3, r2
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	611a      	str	r2, [r3, #16]
 80076fa:	e003      	b.n	8007704 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	695a      	ldr	r2, [r3, #20]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800770c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800770e:	04d9      	lsls	r1, r3, #19
 8007710:	4b63      	ldr	r3, [pc, #396]	; (80078a0 <USB_HC_StartXfer+0x280>)
 8007712:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007714:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	7a9b      	ldrb	r3, [r3, #10]
 800771a:	075b      	lsls	r3, r3, #29
 800771c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007720:	69f9      	ldr	r1, [r7, #28]
 8007722:	0148      	lsls	r0, r1, #5
 8007724:	6a39      	ldr	r1, [r7, #32]
 8007726:	4401      	add	r1, r0
 8007728:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800772c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800772e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	68d9      	ldr	r1, [r3, #12]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	4413      	add	r3, r2
 8007742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007746:	460a      	mov	r2, r1
 8007748:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	bf0c      	ite	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	2300      	movne	r3, #0
 800775e:	b2db      	uxtb	r3, r3
 8007760:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	4413      	add	r3, r2
 800776a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	6a3a      	ldr	r2, [r7, #32]
 8007776:	440a      	add	r2, r1
 8007778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800777c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007780:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	4413      	add	r3, r2
 800778a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	7e7b      	ldrb	r3, [r7, #25]
 8007792:	075b      	lsls	r3, r3, #29
 8007794:	69f9      	ldr	r1, [r7, #28]
 8007796:	0148      	lsls	r0, r1, #5
 8007798:	6a39      	ldr	r1, [r7, #32]
 800779a:	4401      	add	r1, r0
 800779c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80077a0:	4313      	orrs	r3, r2
 80077a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	78db      	ldrb	r3, [r3, #3]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	e003      	b.n	80077d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ea:	461a      	mov	r2, r3
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e04e      	b.n	8007898 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	78db      	ldrb	r3, [r3, #3]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d149      	bne.n	8007896 <USB_HC_StartXfer+0x276>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d045      	beq.n	8007896 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	79db      	ldrb	r3, [r3, #7]
 800780e:	2b03      	cmp	r3, #3
 8007810:	d830      	bhi.n	8007874 <USB_HC_StartXfer+0x254>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <USB_HC_StartXfer+0x1f8>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	08007829 	.word	0x08007829
 800781c:	0800784d 	.word	0x0800784d
 8007820:	08007829 	.word	0x08007829
 8007824:	0800784d 	.word	0x0800784d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	3303      	adds	r3, #3
 800782e:	089b      	lsrs	r3, r3, #2
 8007830:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007832:	8afa      	ldrh	r2, [r7, #22]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	b29b      	uxth	r3, r3
 800783a:	429a      	cmp	r2, r3
 800783c:	d91c      	bls.n	8007878 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	f043 0220 	orr.w	r2, r3, #32
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	619a      	str	r2, [r3, #24]
        }
        break;
 800784a:	e015      	b.n	8007878 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	3303      	adds	r3, #3
 8007852:	089b      	lsrs	r3, r3, #2
 8007854:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007856:	8afa      	ldrh	r2, [r7, #22]
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	b29b      	uxth	r3, r3
 8007862:	429a      	cmp	r2, r3
 8007864:	d90a      	bls.n	800787c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	619a      	str	r2, [r3, #24]
        }
        break;
 8007872:	e003      	b.n	800787c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007874:	bf00      	nop
 8007876:	e002      	b.n	800787e <USB_HC_StartXfer+0x25e>
        break;
 8007878:	bf00      	nop
 800787a:	e000      	b.n	800787e <USB_HC_StartXfer+0x25e>
        break;
 800787c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	68d9      	ldr	r1, [r3, #12]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	785a      	ldrb	r2, [r3, #1]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	b29b      	uxth	r3, r3
 800788c:	2000      	movs	r0, #0
 800788e:	9000      	str	r0, [sp, #0]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff fb31 	bl	8006ef8 <USB_WritePacket>
  }

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3728      	adds	r7, #40	; 0x28
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	1ff80000 	.word	0x1ff80000

080078a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	b29b      	uxth	r3, r3
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b089      	sub	sp, #36	; 0x24
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80078d6:	78fb      	ldrb	r3, [r7, #3]
 80078d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	0c9b      	lsrs	r3, r3, #18
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	0fdb      	lsrs	r3, r3, #31
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b20      	cmp	r3, #32
 8007914:	d104      	bne.n	8007920 <USB_HC_Halt+0x5a>
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	e0c8      	b.n	8007ab2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <USB_HC_Halt+0x66>
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b02      	cmp	r3, #2
 800792a:	d163      	bne.n	80079f4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	440a      	add	r2, r1
 8007942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800794a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 80ab 	bne.w	8007ab0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d133      	bne.n	80079ce <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4413      	add	r3, r2
 800796e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	0151      	lsls	r1, r2, #5
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	440a      	add	r2, r1
 800797c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007984:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	440a      	add	r2, r1
 800799c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079a4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079b2:	d81d      	bhi.n	80079f0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ca:	d0ec      	beq.n	80079a6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079cc:	e070      	b.n	8007ab0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079ee:	e05f      	b.n	8007ab0 <USB_HC_Halt+0x1ea>
            break;
 80079f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079f2:	e05d      	b.n	8007ab0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a12:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d133      	bne.n	8007a8c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	0151      	lsls	r1, r2, #5
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	440a      	add	r2, r1
 8007a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a62:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a70:	d81d      	bhi.n	8007aae <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a88:	d0ec      	beq.n	8007a64 <USB_HC_Halt+0x19e>
 8007a8a:	e011      	b.n	8007ab0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	e000      	b.n	8007ab0 <USB_HC_Halt+0x1ea>
          break;
 8007aae:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3724      	adds	r7, #36	; 0x24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	04da      	lsls	r2, r3, #19
 8007adc:	4b15      	ldr	r3, [pc, #84]	; (8007b34 <USB_DoPing+0x74>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	0151      	lsls	r1, r2, #5
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	440a      	add	r2, r1
 8007ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007af0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1e:	461a      	mov	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	1ff80000 	.word	0x1ff80000

08007b38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff f911 	bl	8006d74 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b52:	2110      	movs	r1, #16
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff f96b 	bl	8006e30 <USB_FlushTxFifo>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff f997 	bl	8006e98 <USB_FlushRxFifo>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007b74:	2300      	movs	r3, #0
 8007b76:	61bb      	str	r3, [r7, #24]
 8007b78:	e01f      	b.n	8007bba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ba0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bae:	461a      	mov	r2, r3
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	61bb      	str	r3, [r7, #24]
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	2b0f      	cmp	r3, #15
 8007bbe:	d9dc      	bls.n	8007b7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61bb      	str	r3, [r7, #24]
 8007bc4:	e034      	b.n	8007c30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bdc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007be4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3301      	adds	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c0c:	d80c      	bhi.n	8007c28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c24:	d0ec      	beq.n	8007c00 <USB_StopHost+0xc8>
 8007c26:	e000      	b.n	8007c2a <USB_StopHost+0xf2>
        break;
 8007c28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	2b0f      	cmp	r3, #15
 8007c34:	d9c7      	bls.n	8007bc6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff f880 	bl	8006d52 <USB_EnableGlobalInt>

  return ret;
 8007c52:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3720      	adds	r7, #32
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c5c:	b590      	push	{r4, r7, lr}
 8007c5e:	b08b      	sub	sp, #44	; 0x2c
 8007c60:	af04      	add	r7, sp, #16
 8007c62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c6e:	7919      	ldrb	r1, [r3, #4]
 8007c70:	23ff      	movs	r3, #255	; 0xff
 8007c72:	2201      	movs	r2, #1
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 ff75 	bl	8008b64 <USBH_FindInterface>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c7e:	7dbb      	ldrb	r3, [r7, #22]
 8007c80:	2bff      	cmp	r3, #255	; 0xff
 8007c82:	d002      	beq.n	8007c8a <USBH_HID_InterfaceInit+0x2e>
 8007c84:	7dbb      	ldrb	r3, [r7, #22]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d901      	bls.n	8007c8e <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e108      	b.n	8007ea0 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8007c8e:	7dbb      	ldrb	r3, [r7, #22]
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 ff4a 	bl	8008b2c <USBH_SelectInterface>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8007c9c:	7d7b      	ldrb	r3, [r7, #21]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e0fc      	b.n	8007ea0 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007cac:	2034      	movs	r0, #52	; 0x34
 8007cae:	f002 fdd7 	bl	800a860 <malloc>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e0ea      	b.n	8007ea0 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8007cca:	2234      	movs	r2, #52	; 0x34
 8007ccc:	2100      	movs	r1, #0
 8007cce:	6938      	ldr	r0, [r7, #16]
 8007cd0:	f002 fde4 	bl	800a89c <memset>

  HID_Handle->state = HID_ERROR;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2207      	movs	r2, #7
 8007cd8:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8007cda:	7dbb      	ldrb	r3, [r7, #22]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	211a      	movs	r1, #26
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d103      	bne.n	8007cf8 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	4a6d      	ldr	r2, [pc, #436]	; (8007ea8 <USBH_HID_InterfaceInit+0x24c>)
 8007cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8007cf6:	e010      	b.n	8007d1a <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8007cf8:	7dbb      	ldrb	r3, [r7, #22]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	211a      	movs	r1, #26
 8007cfe:	fb01 f303 	mul.w	r3, r1, r3
 8007d02:	4413      	add	r3, r2
 8007d04:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d103      	bne.n	8007d16 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4a66      	ldr	r2, [pc, #408]	; (8007eac <USBH_HID_InterfaceInit+0x250>)
 8007d12:	631a      	str	r2, [r3, #48]	; 0x30
 8007d14:	e001      	b.n	8007d1a <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8007d16:	2302      	movs	r3, #2
 8007d18:	e0c2      	b.n	8007ea0 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	2200      	movs	r2, #0
 8007d24:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d26:	7dbb      	ldrb	r3, [r7, #22]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	211a      	movs	r1, #26
 8007d2c:	fb01 f303 	mul.w	r3, r1, r3
 8007d30:	4413      	add	r3, r2
 8007d32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d36:	781a      	ldrb	r2, [r3, #0]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d3c:	7dbb      	ldrb	r3, [r7, #22]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	211a      	movs	r1, #26
 8007d42:	fb01 f303 	mul.w	r3, r1, r3
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d4c:	881a      	ldrh	r2, [r3, #0]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007d52:	7dbb      	ldrb	r3, [r7, #22]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	211a      	movs	r1, #26
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	8b9b      	ldrh	r3, [r3, #28]
 8007d6e:	2b09      	cmp	r3, #9
 8007d70:	d802      	bhi.n	8007d78 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	220a      	movs	r2, #10
 8007d76:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8007d78:	7dbb      	ldrb	r3, [r7, #22]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	211a      	movs	r1, #26
 8007d7e:	fb01 f303 	mul.w	r3, r1, r3
 8007d82:	4413      	add	r3, r2
 8007d84:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	bf28      	it	cs
 8007d8e:	2302      	movcs	r3, #2
 8007d90:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8007d92:	2300      	movs	r3, #0
 8007d94:	75fb      	strb	r3, [r7, #23]
 8007d96:	e07d      	b.n	8007e94 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8007d98:	7dbb      	ldrb	r3, [r7, #22]
 8007d9a:	7df9      	ldrb	r1, [r7, #23]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	3101      	adds	r1, #1
 8007da0:	00c9      	lsls	r1, r1, #3
 8007da2:	201a      	movs	r0, #26
 8007da4:	fb00 f303 	mul.w	r3, r0, r3
 8007da8:	440b      	add	r3, r1
 8007daa:	4413      	add	r3, r2
 8007dac:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b25b      	sxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	da35      	bge.n	8007e24 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007db8:	7dbb      	ldrb	r3, [r7, #22]
 8007dba:	7df9      	ldrb	r1, [r7, #23]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	3101      	adds	r1, #1
 8007dc0:	00c9      	lsls	r1, r1, #3
 8007dc2:	201a      	movs	r0, #26
 8007dc4:	fb00 f303 	mul.w	r3, r0, r3
 8007dc8:	440b      	add	r3, r1
 8007dca:	4413      	add	r3, r2
 8007dcc:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007dd0:	781a      	ldrb	r2, [r3, #0]
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	791b      	ldrb	r3, [r3, #4]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f002 f9b8 	bl	800a152 <USBH_AllocPipe>
 8007de2:	4603      	mov	r3, r0
 8007de4:	461a      	mov	r2, r3
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	7859      	ldrb	r1, [r3, #1]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	7918      	ldrb	r0, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	8b12      	ldrh	r2, [r2, #24]
 8007e02:	9202      	str	r2, [sp, #8]
 8007e04:	2203      	movs	r2, #3
 8007e06:	9201      	str	r2, [sp, #4]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f002 f970 	bl	800a0f4 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f002 fc71 	bl	800a704 <USBH_LL_SetToggle>
 8007e22:	e034      	b.n	8007e8e <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007e24:	7dbb      	ldrb	r3, [r7, #22]
 8007e26:	7df9      	ldrb	r1, [r7, #23]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	3101      	adds	r1, #1
 8007e2c:	00c9      	lsls	r1, r1, #3
 8007e2e:	201a      	movs	r0, #26
 8007e30:	fb00 f303 	mul.w	r3, r0, r3
 8007e34:	440b      	add	r3, r1
 8007e36:	4413      	add	r3, r2
 8007e38:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007e3c:	781a      	ldrb	r2, [r3, #0]
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	78db      	ldrb	r3, [r3, #3]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f002 f982 	bl	800a152 <USBH_AllocPipe>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	461a      	mov	r2, r3
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	7819      	ldrb	r1, [r3, #0]
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	78d8      	ldrb	r0, [r3, #3]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	8b12      	ldrh	r2, [r2, #24]
 8007e6e:	9202      	str	r2, [sp, #8]
 8007e70:	2203      	movs	r2, #3
 8007e72:	9201      	str	r2, [sp, #4]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4623      	mov	r3, r4
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f002 f93a 	bl	800a0f4 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2200      	movs	r2, #0
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f002 fc3b 	bl	800a704 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	3301      	adds	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
 8007e94:	7dfa      	ldrb	r2, [r7, #23]
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	f4ff af7d 	bcc.w	8007d98 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd90      	pop	{r4, r7, pc}
 8007ea8:	080085ad 	.word	0x080085ad
 8007eac:	080087f5 	.word	0x080087f5

08007eb0 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00e      	beq.n	8007ee8 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	785b      	ldrb	r3, [r3, #1]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f002 f92e 	bl	800a132 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f002 f959 	bl	800a194 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00e      	beq.n	8007f0e <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f002 f91b 	bl	800a132 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f002 f946 	bl	800a194 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f002 fca4 	bl	800a870 <free>
    phost->pActiveClass->pData = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f2e:	2200      	movs	r2, #0
 8007f30:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	795b      	ldrb	r3, [r3, #5]
 8007f5a:	2b05      	cmp	r3, #5
 8007f5c:	d860      	bhi.n	8008020 <USBH_HID_ClassRequest+0xe4>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <USBH_HID_ClassRequest+0x28>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f7d 	.word	0x08007f7d
 8007f68:	08008021 	.word	0x08008021
 8007f6c:	08007f97 	.word	0x08007f97
 8007f70:	08007f7d 	.word	0x08007f7d
 8007f74:	08007fc1 	.word	0x08007fc1
 8007f78:	08007feb 	.word	0x08007feb
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	331c      	adds	r3, #28
 8007f86:	4619      	mov	r1, r3
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f000 f9cd 	bl	8008328 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2202      	movs	r2, #2
 8007f92:	715a      	strb	r2, [r3, #5]

      break;
 8007f94:	e04b      	b.n	800802e <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f930 	bl	8008202 <USBH_HID_GetHIDReportDescriptor>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8007fb2:	e037      	b.n	8008024 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d134      	bne.n	8008024 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8007fba:	2302      	movs	r3, #2
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	e031      	b.n	8008024 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f935 	bl	8008234 <USBH_HID_SetIdle>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d103      	bne.n	8007fdc <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2205      	movs	r2, #5
 8007fd8:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8007fda:	e025      	b.n	8008028 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d122      	bne.n	8008028 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2205      	movs	r2, #5
 8007fe6:	715a      	strb	r2, [r3, #5]
      break;
 8007fe8:	e01e      	b.n	8008028 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8007fea:	2100      	movs	r1, #0
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f975 	bl	80082dc <USBH_HID_SetProtocol>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2201      	movs	r2, #1
 8008000:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008008:	2102      	movs	r1, #2
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
        status = USBH_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8008012:	e00b      	b.n	800802c <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b03      	cmp	r3, #3
 8008018:	d108      	bne.n	800802c <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 800801a:	2302      	movs	r3, #2
 800801c:	73fb      	strb	r3, [r7, #15]
      break;
 800801e:	e005      	b.n	800802c <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8008020:	bf00      	nop
 8008022:	e004      	b.n	800802e <USBH_HID_ClassRequest+0xf2>
      break;
 8008024:	bf00      	nop
 8008026:	e002      	b.n	800802e <USBH_HID_ClassRequest+0xf2>
      break;
 8008028:	bf00      	nop
 800802a:	e000      	b.n	800802e <USBH_HID_ClassRequest+0xf2>
      break;
 800802c:	bf00      	nop
  }

  return status;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af02      	add	r7, sp, #8
 800803e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	789b      	ldrb	r3, [r3, #2]
 8008052:	2b06      	cmp	r3, #6
 8008054:	f200 80a9 	bhi.w	80081aa <USBH_HID_Process+0x172>
 8008058:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <USBH_HID_Process+0x28>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	0800807d 	.word	0x0800807d
 8008064:	0800808d 	.word	0x0800808d
 8008068:	080081ab 	.word	0x080081ab
 800806c:	080081ab 	.word	0x080081ab
 8008070:	080080fd 	.word	0x080080fd
 8008074:	080080e7 	.word	0x080080e7
 8008078:	0800812b 	.word	0x0800812b
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2201      	movs	r2, #1
 8008088:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800808a:	e093      	b.n	80081b4 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	695a      	ldr	r2, [r3, #20]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	8b1b      	ldrh	r3, [r3, #24]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	2200      	movs	r2, #0
 800809c:	2101      	movs	r1, #1
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f8f0 	bl	8008284 <USBH_HID_GetReport>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2205      	movs	r2, #5
 80080b2:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080b4:	e07e      	b.n	80081b4 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d105      	bne.n	80080c8 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	2201      	movs	r2, #1
 80080c0:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
      break;
 80080c6:	e075      	b.n	80081b4 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d105      	bne.n	80080da <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2205      	movs	r2, #5
 80080d2:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	75fb      	strb	r3, [r7, #23]
      break;
 80080d8:	e06c      	b.n	80081b4 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2207      	movs	r2, #7
 80080de:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80080e0:	2302      	movs	r3, #2
 80080e2:	75fb      	strb	r3, [r7, #23]
      break;
 80080e4:	e066      	b.n	80081b4 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d05c      	beq.n	80081ae <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2204      	movs	r2, #4
 80080f8:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080fa:	e058      	b.n	80081ae <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8008104:	b2da      	uxtb	r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 ffd3 	bl	800a0b6 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2206      	movs	r2, #6
 8008114:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8008128:	e044      	b.n	80081b4 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f002 fabd 	bl	800a6b0 <USBH_LL_GetURBState>
 8008136:	4603      	mov	r3, r0
 8008138:	2b01      	cmp	r3, #1
 800813a:	d120      	bne.n	800817e <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f002 fa22 	bl	800a58c <USBH_LL_GetLastXferSize>
 8008148:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	d12e      	bne.n	80081b2 <USBH_HID_Process+0x17a>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d02b      	beq.n	80081b2 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f103 0008 	add.w	r0, r3, #8
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	6959      	ldr	r1, [r3, #20]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	8b1b      	ldrh	r3, [r3, #24]
 8008168:	461a      	mov	r2, r3
 800816a:	f000 f9ca 	bl	8008502 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7f8 fb6c 	bl	8000854 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 800817c:	e019      	b.n	80081b2 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f002 fa93 	bl	800a6b0 <USBH_LL_GetURBState>
 800818a:	4603      	mov	r3, r0
 800818c:	2b05      	cmp	r3, #5
 800818e:	d110      	bne.n	80081b2 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	7e9b      	ldrb	r3, [r3, #26]
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fab1 	bl	80096fe <USBH_ClrFeature>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d107      	bne.n	80081b2 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2204      	movs	r2, #4
 80081a6:	709a      	strb	r2, [r3, #2]
      break;
 80081a8:	e003      	b.n	80081b2 <USBH_HID_Process+0x17a>

    default:
      break;
 80081aa:	bf00      	nop
 80081ac:	e002      	b.n	80081b4 <USBH_HID_Process+0x17c>
      break;
 80081ae:	bf00      	nop
 80081b0:	e000      	b.n	80081b4 <USBH_HID_Process+0x17c>
      break;
 80081b2:	bf00      	nop
  }

  return status;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop

080081c0 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	789b      	ldrb	r3, [r3, #2]
 80081d6:	2b06      	cmp	r3, #6
 80081d8:	d10c      	bne.n	80081f4 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	8b92      	ldrh	r2, [r2, #28]
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d302      	bcc.n	80081f4 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2204      	movs	r2, #4
 80081f2:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af02      	add	r7, sp, #8
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	460b      	mov	r3, r1
 800820c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008214:	887b      	ldrh	r3, [r7, #2]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	4613      	mov	r3, r2
 800821a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800821e:	2101      	movs	r1, #1
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 f9cc 	bl	80095be <USBH_GetDescriptor>
 8008226:	4603      	mov	r3, r0
 8008228:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800822a:	7bfb      	ldrb	r3, [r7, #15]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
 8008240:	4613      	mov	r3, r2
 8008242:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2221      	movs	r2, #33	; 0x21
 8008248:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	220a      	movs	r2, #10
 800824e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	b29b      	uxth	r3, r3
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	b29a      	uxth	r2, r3
 8008258:	78bb      	ldrb	r3, [r7, #2]
 800825a:	b29b      	uxth	r3, r3
 800825c:	4313      	orrs	r3, r2
 800825e:	b29a      	uxth	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 fd0f 	bl	8009c98 <USBH_CtlReq>
 800827a:	4603      	mov	r3, r0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	607b      	str	r3, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	72fb      	strb	r3, [r7, #11]
 8008292:	4613      	mov	r3, r2
 8008294:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	22a1      	movs	r2, #161	; 0xa1
 800829a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80082a2:	7afb      	ldrb	r3, [r7, #11]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	7abb      	ldrb	r3, [r7, #10]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80082bc:	7e3b      	ldrb	r3, [r7, #24]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80082c4:	7e3b      	ldrb	r3, [r7, #24]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 fce3 	bl	8009c98 <USBH_CtlReq>
 80082d2:	4603      	mov	r3, r0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2221      	movs	r2, #33	; 0x21
 80082ec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	220b      	movs	r2, #11
 80082f2:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	825a      	strh	r2, [r3, #18]
 8008300:	e002      	b.n	8008308 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008314:	2200      	movs	r2, #0
 8008316:	2100      	movs	r1, #0
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 fcbd 	bl	8009c98 <USBH_CtlReq>
 800831e:	4603      	mov	r3, r0

}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	3302      	adds	r3, #2
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	b29a      	uxth	r2, r3
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	3303      	adds	r3, #3
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	021b      	lsls	r3, r3, #8
 8008348:	b29b      	uxth	r3, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800834e:	897b      	ldrh	r3, [r7, #10]
 8008350:	2b09      	cmp	r3, #9
 8008352:	d943      	bls.n	80083dc <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008354:	2309      	movs	r3, #9
 8008356:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8008358:	e03c      	b.n	80083d4 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4619      	mov	r1, r3
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f001 fc7e 	bl	8009c62 <USBH_GetNextDesc>
 8008366:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b21      	cmp	r3, #33	; 0x21
 800836e:	d131      	bne.n	80083d4 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	781a      	ldrb	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	785a      	ldrb	r2, [r3, #1]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3302      	adds	r3, #2
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	b29a      	uxth	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3303      	adds	r3, #3
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	b29b      	uxth	r3, r3
 8008394:	4313      	orrs	r3, r2
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	791a      	ldrb	r2, [r3, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	795a      	ldrb	r2, [r3, #5]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	799a      	ldrb	r2, [r3, #6]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3307      	adds	r3, #7
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3308      	adds	r3, #8
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	811a      	strh	r2, [r3, #8]
        break;
 80083d0:	bf00      	nop
      }
    }
  }
}
 80083d2:	e003      	b.n	80083dc <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 80083d4:	893b      	ldrh	r3, [r7, #8]
 80083d6:	897a      	ldrh	r2, [r7, #10]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d8be      	bhi.n	800835a <USBH_HID_ParseHIDDesc+0x32>
}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 80083ec:	23ff      	movs	r3, #255	; 0xff
 80083ee:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b0b      	cmp	r3, #11
 80083f8:	d117      	bne.n	800842a <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008400:	4619      	mov	r1, r3
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	231a      	movs	r3, #26
 8008406:	fb01 f303 	mul.w	r3, r1, r3
 800840a:	4413      	add	r3, r2
 800840c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d102      	bne.n	8008420 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800841a:	2302      	movs	r3, #2
 800841c:	73fb      	strb	r3, [r7, #15]
 800841e:	e004      	b.n	800842a <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d101      	bne.n	800842a <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 8008426:	2301      	movs	r3, #1
 8008428:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800842a:	7bfb      	ldrb	r3, [r7, #15]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	601a      	str	r2, [r3, #0]
}
 8008464:	bf00      	nop
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	7a9b      	ldrb	r3, [r3, #10]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d131      	bne.n	80084ee <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2201      	movs	r2, #1
 800848e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8008490:	2300      	movs	r3, #0
 8008492:	82fb      	strh	r3, [r7, #22]
 8008494:	e027      	b.n	80084e6 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	88da      	ldrh	r2, [r3, #6]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	889b      	ldrh	r3, [r3, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d019      	beq.n	80084d6 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	88d2      	ldrh	r2, [r2, #6]
 80084aa:	441a      	add	r2, r3
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1c59      	adds	r1, r3, #1
 80084b0:	6139      	str	r1, [r7, #16]
 80084b2:	7812      	ldrb	r2, [r2, #0]
 80084b4:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	88db      	ldrh	r3, [r3, #6]
 80084ba:	3301      	adds	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	88da      	ldrh	r2, [r3, #6]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	891b      	ldrh	r3, [r3, #8]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d108      	bne.n	80084e0 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	80da      	strh	r2, [r3, #6]
 80084d4:	e004      	b.n	80084e0 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	729a      	strb	r2, [r3, #10]
        return i;
 80084dc:	8afb      	ldrh	r3, [r7, #22]
 80084de:	e00a      	b.n	80084f6 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 80084e0:	8afb      	ldrh	r3, [r7, #22]
 80084e2:	3301      	adds	r3, #1
 80084e4:	82fb      	strh	r3, [r7, #22]
 80084e6:	8afa      	ldrh	r2, [r7, #22]
 80084e8:	88fb      	ldrh	r3, [r7, #6]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d3d3      	bcc.n	8008496 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80084f4:	88fb      	ldrh	r3, [r7, #6]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8008502:	b480      	push	{r7}
 8008504:	b087      	sub	sp, #28
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	4613      	mov	r3, r2
 800850e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	7a9b      	ldrb	r3, [r3, #10]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d13c      	bne.n	8008596 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8008522:	2300      	movs	r3, #0
 8008524:	82fb      	strh	r3, [r7, #22]
 8008526:	e032      	b.n	800858e <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	889b      	ldrh	r3, [r3, #4]
 800852c:	3301      	adds	r3, #1
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	88d2      	ldrh	r2, [r2, #6]
 8008532:	4293      	cmp	r3, r2
 8008534:	d00a      	beq.n	800854c <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	889b      	ldrh	r3, [r3, #4]
 800853a:	3301      	adds	r3, #1
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8008540:	4293      	cmp	r3, r2
 8008542:	d108      	bne.n	8008556 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	88db      	ldrh	r3, [r3, #6]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d104      	bne.n	8008556 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	729a      	strb	r2, [r3, #10]
        return i;
 8008552:	8afb      	ldrh	r3, [r7, #22]
 8008554:	e023      	b.n	800859e <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	613a      	str	r2, [r7, #16]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	6812      	ldr	r2, [r2, #0]
 8008560:	68f9      	ldr	r1, [r7, #12]
 8008562:	8889      	ldrh	r1, [r1, #4]
 8008564:	440a      	add	r2, r1
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	7013      	strb	r3, [r2, #0]
        f->head++;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	889b      	ldrh	r3, [r3, #4]
 800856e:	3301      	adds	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	889a      	ldrh	r2, [r3, #4]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	891b      	ldrh	r3, [r3, #8]
 800857e:	429a      	cmp	r2, r3
 8008580:	d102      	bne.n	8008588 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8008588:	8afb      	ldrh	r3, [r7, #22]
 800858a:	3301      	adds	r3, #1
 800858c:	82fb      	strh	r3, [r7, #22]
 800858e:	8afa      	ldrh	r2, [r7, #22]
 8008590:	88fb      	ldrh	r3, [r7, #6]
 8008592:	429a      	cmp	r2, r3
 8008594:	d3c8      	bcc.n	8008528 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800859c:	88fb      	ldrh	r3, [r7, #6]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
	...

080085ac <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 80085be:	4b22      	ldr	r3, [pc, #136]	; (8008648 <USBH_HID_KeybdInit+0x9c>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80085c4:	4b20      	ldr	r3, [pc, #128]	; (8008648 <USBH_HID_KeybdInit+0x9c>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80085ca:	4b1f      	ldr	r3, [pc, #124]	; (8008648 <USBH_HID_KeybdInit+0x9c>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 80085d0:	4b1d      	ldr	r3, [pc, #116]	; (8008648 <USBH_HID_KeybdInit+0x9c>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 80085d6:	4b1c      	ldr	r3, [pc, #112]	; (8008648 <USBH_HID_KeybdInit+0x9c>)
 80085d8:	2200      	movs	r2, #0
 80085da:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 80085dc:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <USBH_HID_KeybdInit+0x9c>)
 80085de:	2200      	movs	r2, #0
 80085e0:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 80085e2:	4b19      	ldr	r3, [pc, #100]	; (8008648 <USBH_HID_KeybdInit+0x9c>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 80085e8:	4b17      	ldr	r3, [pc, #92]	; (8008648 <USBH_HID_KeybdInit+0x9c>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e00c      	b.n	800860e <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 80085f4:	4a15      	ldr	r2, [pc, #84]	; (800864c <USBH_HID_KeybdInit+0xa0>)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2100      	movs	r1, #0
 80085fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 80085fe:	4a14      	ldr	r2, [pc, #80]	; (8008650 <USBH_HID_KeybdInit+0xa4>)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2100      	movs	r1, #0
 8008604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3301      	adds	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d9ef      	bls.n	80085f4 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	8b1b      	ldrh	r3, [r3, #24]
 8008618:	2b08      	cmp	r3, #8
 800861a:	d902      	bls.n	8008622 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2208      	movs	r2, #8
 8008620:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	4a0a      	ldr	r2, [pc, #40]	; (8008650 <USBH_HID_KeybdInit+0xa4>)
 8008626:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f103 0008 	add.w	r0, r3, #8
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008634:	2250      	movs	r2, #80	; 0x50
 8008636:	4619      	mov	r1, r3
 8008638:	f7ff fefe 	bl	8008438 <USBH_HID_FifoInit>

  return USBH_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	200059ec 	.word	0x200059ec
 800864c:	20005a04 	.word	0x20005a04
 8008650:	200059fc 	.word	0x200059fc

08008654 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f80d 	bl	800867c <USBH_HID_KeybdDecode>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8008668:	4b03      	ldr	r3, [pc, #12]	; (8008678 <USBH_HID_GetKeybdInfo+0x24>)
 800866a:	e000      	b.n	800866e <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800866c:	2300      	movs	r3, #0
  }
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200059ec 	.word	0x200059ec

0800867c <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	8b1b      	ldrh	r3, [r3, #24]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8008696:	2302      	movs	r3, #2
 8008698:	e066      	b.n	8008768 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f103 0008 	add.w	r0, r3, #8
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	8b1b      	ldrh	r3, [r3, #24]
 80086a4:	461a      	mov	r2, r3
 80086a6:	4932      	ldr	r1, [pc, #200]	; (8008770 <USBH_HID_KeybdDecode+0xf4>)
 80086a8:	f7ff fee2 	bl	8008470 <USBH_HID_FifoRead>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461a      	mov	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	8b1b      	ldrh	r3, [r3, #24]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d156      	bne.n	8008766 <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 80086b8:	2100      	movs	r1, #0
 80086ba:	482e      	ldr	r0, [pc, #184]	; (8008774 <USBH_HID_KeybdDecode+0xf8>)
 80086bc:	f000 f8e4 	bl	8008888 <HID_ReadItem>
 80086c0:	4603      	mov	r3, r0
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	4b2c      	ldr	r3, [pc, #176]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 80086c6:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 80086c8:	2100      	movs	r1, #0
 80086ca:	482c      	ldr	r0, [pc, #176]	; (800877c <USBH_HID_KeybdDecode+0x100>)
 80086cc:	f000 f8dc 	bl	8008888 <HID_ReadItem>
 80086d0:	4603      	mov	r3, r0
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	4b28      	ldr	r3, [pc, #160]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 80086d6:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 80086d8:	2100      	movs	r1, #0
 80086da:	4829      	ldr	r0, [pc, #164]	; (8008780 <USBH_HID_KeybdDecode+0x104>)
 80086dc:	f000 f8d4 	bl	8008888 <HID_ReadItem>
 80086e0:	4603      	mov	r3, r0
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	4b24      	ldr	r3, [pc, #144]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 80086e6:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 80086e8:	2100      	movs	r1, #0
 80086ea:	4826      	ldr	r0, [pc, #152]	; (8008784 <USBH_HID_KeybdDecode+0x108>)
 80086ec:	f000 f8cc 	bl	8008888 <HID_ReadItem>
 80086f0:	4603      	mov	r3, r0
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	4b20      	ldr	r3, [pc, #128]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 80086f6:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 80086f8:	2100      	movs	r1, #0
 80086fa:	4823      	ldr	r0, [pc, #140]	; (8008788 <USBH_HID_KeybdDecode+0x10c>)
 80086fc:	f000 f8c4 	bl	8008888 <HID_ReadItem>
 8008700:	4603      	mov	r3, r0
 8008702:	b2da      	uxtb	r2, r3
 8008704:	4b1c      	ldr	r3, [pc, #112]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 8008706:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8008708:	2100      	movs	r1, #0
 800870a:	4820      	ldr	r0, [pc, #128]	; (800878c <USBH_HID_KeybdDecode+0x110>)
 800870c:	f000 f8bc 	bl	8008888 <HID_ReadItem>
 8008710:	4603      	mov	r3, r0
 8008712:	b2da      	uxtb	r2, r3
 8008714:	4b18      	ldr	r3, [pc, #96]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 8008716:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8008718:	2100      	movs	r1, #0
 800871a:	481d      	ldr	r0, [pc, #116]	; (8008790 <USBH_HID_KeybdDecode+0x114>)
 800871c:	f000 f8b4 	bl	8008888 <HID_ReadItem>
 8008720:	4603      	mov	r3, r0
 8008722:	b2da      	uxtb	r2, r3
 8008724:	4b14      	ldr	r3, [pc, #80]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 8008726:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8008728:	2100      	movs	r1, #0
 800872a:	481a      	ldr	r0, [pc, #104]	; (8008794 <USBH_HID_KeybdDecode+0x118>)
 800872c:	f000 f8ac 	bl	8008888 <HID_ReadItem>
 8008730:	4603      	mov	r3, r0
 8008732:	b2da      	uxtb	r2, r3
 8008734:	4b10      	ldr	r3, [pc, #64]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 8008736:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
 800873c:	e00e      	b.n	800875c <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	4619      	mov	r1, r3
 8008742:	4815      	ldr	r0, [pc, #84]	; (8008798 <USBH_HID_KeybdDecode+0x11c>)
 8008744:	f000 f8a0 	bl	8008888 <HID_ReadItem>
 8008748:	4602      	mov	r2, r0
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	b2d1      	uxtb	r1, r2
 800874e:	4a0a      	ldr	r2, [pc, #40]	; (8008778 <USBH_HID_KeybdDecode+0xfc>)
 8008750:	4413      	add	r3, r2
 8008752:	460a      	mov	r2, r1
 8008754:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	3301      	adds	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	2b05      	cmp	r3, #5
 8008760:	d9ed      	bls.n	800873e <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	e000      	b.n	8008768 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 8008766:	2302      	movs	r3, #2
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20005a04 	.word	0x20005a04
 8008774:	08019af8 	.word	0x08019af8
 8008778:	200059ec 	.word	0x200059ec
 800877c:	08019b18 	.word	0x08019b18
 8008780:	08019b38 	.word	0x08019b38
 8008784:	08019b58 	.word	0x08019b58
 8008788:	08019b78 	.word	0x08019b78
 800878c:	08019b98 	.word	0x08019b98
 8008790:	08019bb8 	.word	0x08019bb8
 8008794:	08019bd8 	.word	0x08019bd8
 8008798:	08019bf8 	.word	0x08019bf8

0800879c <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	789b      	ldrb	r3, [r3, #2]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <USBH_HID_GetASCIICode+0x18>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	799b      	ldrb	r3, [r3, #6]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	7a5b      	ldrb	r3, [r3, #9]
 80087b8:	461a      	mov	r2, r3
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <USBH_HID_GetASCIICode+0x4c>)
 80087bc:	5c9b      	ldrb	r3, [r3, r2]
 80087be:	461a      	mov	r2, r3
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <USBH_HID_GetASCIICode+0x50>)
 80087c2:	5c9b      	ldrb	r3, [r3, r2]
 80087c4:	73fb      	strb	r3, [r7, #15]
 80087c6:	e008      	b.n	80087da <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	7a5b      	ldrb	r3, [r3, #9]
 80087cc:	461a      	mov	r2, r3
 80087ce:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <USBH_HID_GetASCIICode+0x4c>)
 80087d0:	5c9b      	ldrb	r3, [r3, r2]
 80087d2:	461a      	mov	r2, r3
 80087d4:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <USBH_HID_GetASCIICode+0x54>)
 80087d6:	5c9b      	ldrb	r3, [r3, r2]
 80087d8:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	08019d20 	.word	0x08019d20
 80087ec:	08019c9c 	.word	0x08019c9c
 80087f0:	08019c18 	.word	0x08019c18

080087f4 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8008806:	4b1d      	ldr	r3, [pc, #116]	; (800887c <USBH_HID_MouseInit+0x88>)
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800880c:	4b1b      	ldr	r3, [pc, #108]	; (800887c <USBH_HID_MouseInit+0x88>)
 800880e:	2200      	movs	r2, #0
 8008810:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8008812:	4b1a      	ldr	r3, [pc, #104]	; (800887c <USBH_HID_MouseInit+0x88>)
 8008814:	2200      	movs	r2, #0
 8008816:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8008818:	4b18      	ldr	r3, [pc, #96]	; (800887c <USBH_HID_MouseInit+0x88>)
 800881a:	2200      	movs	r2, #0
 800881c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800881e:	4b17      	ldr	r3, [pc, #92]	; (800887c <USBH_HID_MouseInit+0x88>)
 8008820:	2200      	movs	r2, #0
 8008822:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8008824:	2300      	movs	r3, #0
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	e00c      	b.n	8008844 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800882a:	4a15      	ldr	r2, [pc, #84]	; (8008880 <USBH_HID_MouseInit+0x8c>)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2100      	movs	r1, #0
 8008830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8008834:	4a13      	ldr	r2, [pc, #76]	; (8008884 <USBH_HID_MouseInit+0x90>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2100      	movs	r1, #0
 800883a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d9ef      	bls.n	800882a <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	8b1b      	ldrh	r3, [r3, #24]
 800884e:	2b08      	cmp	r3, #8
 8008850:	d902      	bls.n	8008858 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2208      	movs	r2, #8
 8008856:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4a0a      	ldr	r2, [pc, #40]	; (8008884 <USBH_HID_MouseInit+0x90>)
 800885c:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f103 0008 	add.w	r0, r3, #8
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800886a:	2250      	movs	r2, #80	; 0x50
 800886c:	4619      	mov	r1, r3
 800886e:	f7ff fde3 	bl	8008438 <USBH_HID_FifoInit>

  return USBH_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20005a0c 	.word	0x20005a0c
 8008880:	20005a14 	.word	0x20005a14
 8008884:	20005a1c 	.word	0x20005a1c

08008888 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8008888:	b480      	push	{r7}
 800888a:	b089      	sub	sp, #36	; 0x24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	7a1b      	ldrb	r3, [r3, #8]
 80088a6:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	7a5b      	ldrb	r3, [r3, #9]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01a      	beq.n	80088e6 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7a5b      	ldrb	r3, [r3, #9]
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d301      	bcc.n	80088be <HID_ReadItem+0x36>
    {
      return (0U);
 80088ba:	2300      	movs	r3, #0
 80088bc:	e078      	b.n	80089b0 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	6852      	ldr	r2, [r2, #4]
 80088c4:	fb02 f303 	mul.w	r3, r2, r3
 80088c8:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 80088ca:	7cfb      	ldrb	r3, [r7, #19]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	08db      	lsrs	r3, r3, #3
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 0307 	and.w	r3, r3, #7
 80088e4:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 80088e6:	2300      	movs	r3, #0
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	e00a      	b.n	8008902 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	fa02 f303 	lsl.w	r3, r2, r3
 80088fa:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	3301      	adds	r3, #1
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b00      	cmp	r3, #0
 800890c:	d004      	beq.n	8008918 <HID_ReadItem+0x90>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	08db      	lsrs	r3, r3, #3
 8008914:	3301      	adds	r3, #1
 8008916:	e002      	b.n	800891e <HID_ReadItem+0x96>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	08db      	lsrs	r3, r3, #3
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	4293      	cmp	r3, r2
 8008922:	d8e3      	bhi.n	80088ec <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8008924:	7cfb      	ldrb	r3, [r7, #19]
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	40da      	lsrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f04f 31ff 	mov.w	r1, #4294967295
 8008932:	fa01 f303 	lsl.w	r3, r1, r3
 8008936:	43db      	mvns	r3, r3
 8008938:	4013      	ands	r3, r2
 800893a:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	429a      	cmp	r2, r3
 8008944:	d304      	bcc.n	8008950 <HID_ReadItem+0xc8>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	429a      	cmp	r2, r3
 800894e:	d901      	bls.n	8008954 <HID_ReadItem+0xcc>
  {
    return (0U);
 8008950:	2300      	movs	r3, #0
 8008952:	e02d      	b.n	80089b0 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7a9b      	ldrb	r3, [r3, #10]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01e      	beq.n	800899a <HID_ReadItem+0x112>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	3b01      	subs	r3, #1
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d014      	beq.n	800899a <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	fa02 f303 	lsl.w	r3, r2, r3
 800897a:	425b      	negs	r3, r3
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	4313      	orrs	r3, r2
 8008980:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	e010      	b.n	80089b0 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	fb02 f303 	mul.w	r3, r2, r3
 8008998:	e00a      	b.n	80089b0 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d101      	bne.n	80089a6 <HID_ReadItem+0x11e>
    {
      return (val);
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	e004      	b.n	80089b0 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3724      	adds	r7, #36	; 0x24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	4613      	mov	r3, r2
 80089c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80089d0:	2302      	movs	r3, #2
 80089d2:	e029      	b.n	8008a28 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	79fa      	ldrb	r2, [r7, #7]
 80089d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 f81f 	bl	8008a30 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f001 fcff 	bl	800a424 <USBH_LL_Init>

  return USBH_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e009      	b.n	8008a56 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	33e0      	adds	r3, #224	; 0xe0
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3301      	adds	r3, #1
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b0f      	cmp	r3, #15
 8008a5a:	d9f2      	bls.n	8008a42 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	e009      	b.n	8008a76 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a7c:	d3f1      	bcc.n	8008a62 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2240      	movs	r2, #64	; 0x40
 8008aa2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d016      	beq.n	8008b1a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10e      	bne.n	8008b14 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008afc:	1c59      	adds	r1, r3, #1
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	33de      	adds	r3, #222	; 0xde
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]
 8008b12:	e004      	b.n	8008b1e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b14:	2302      	movs	r3, #2
 8008b16:	73fb      	strb	r3, [r7, #15]
 8008b18:	e001      	b.n	8008b1e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d204      	bcs.n	8008b52 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008b50:	e001      	b.n	8008b56 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008b52:	2302      	movs	r3, #2
 8008b54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	4611      	mov	r1, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	70fb      	strb	r3, [r7, #3]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70bb      	strb	r3, [r7, #2]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b8c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b8e:	e025      	b.n	8008bdc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	221a      	movs	r2, #26
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
 8008b98:	3308      	adds	r3, #8
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	795b      	ldrb	r3, [r3, #5]
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d002      	beq.n	8008bb2 <USBH_FindInterface+0x4e>
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	2bff      	cmp	r3, #255	; 0xff
 8008bb0:	d111      	bne.n	8008bd6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008bb6:	78ba      	ldrb	r2, [r7, #2]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d002      	beq.n	8008bc2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bbc:	78bb      	ldrb	r3, [r7, #2]
 8008bbe:	2bff      	cmp	r3, #255	; 0xff
 8008bc0:	d109      	bne.n	8008bd6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bc6:	787a      	ldrb	r2, [r7, #1]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d002      	beq.n	8008bd2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008bcc:	787b      	ldrb	r3, [r7, #1]
 8008bce:	2bff      	cmp	r3, #255	; 0xff
 8008bd0:	d101      	bne.n	8008bd6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	e006      	b.n	8008be4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d9d6      	bls.n	8008b90 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008be2:	23ff      	movs	r3, #255	; 0xff
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	371c      	adds	r7, #28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 fc4f 	bl	800a49c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008bfe:	2101      	movs	r1, #1
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fd68 	bl	800a6d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af04      	add	r7, sp, #16
 8008c16:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c18:	2302      	movs	r3, #2
 8008c1a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d102      	bne.n	8008c32 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2203      	movs	r2, #3
 8008c30:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b0b      	cmp	r3, #11
 8008c3a:	f200 81be 	bhi.w	8008fba <USBH_Process+0x3aa>
 8008c3e:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <USBH_Process+0x34>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008c75 	.word	0x08008c75
 8008c48:	08008ca7 	.word	0x08008ca7
 8008c4c:	08008d0f 	.word	0x08008d0f
 8008c50:	08008f55 	.word	0x08008f55
 8008c54:	08008fbb 	.word	0x08008fbb
 8008c58:	08008db3 	.word	0x08008db3
 8008c5c:	08008efb 	.word	0x08008efb
 8008c60:	08008de9 	.word	0x08008de9
 8008c64:	08008e09 	.word	0x08008e09
 8008c68:	08008e29 	.word	0x08008e29
 8008c6c:	08008e6d 	.word	0x08008e6d
 8008c70:	08008f3d 	.word	0x08008f3d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 819e 	beq.w	8008fbe <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008c88:	20c8      	movs	r0, #200	; 0xc8
 8008c8a:	f001 fd6b 	bl	800a764 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 fc61 	bl	800a556 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ca4:	e18b      	b.n	8008fbe <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d107      	bne.n	8008cc0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cbe:	e18d      	b.n	8008fdc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cca:	d914      	bls.n	8008cf6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d903      	bls.n	8008cee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	220d      	movs	r2, #13
 8008cea:	701a      	strb	r2, [r3, #0]
      break;
 8008cec:	e176      	b.n	8008fdc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	701a      	strb	r2, [r3, #0]
      break;
 8008cf4:	e172      	b.n	8008fdc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008cfc:	f103 020a 	add.w	r2, r3, #10
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008d06:	200a      	movs	r0, #10
 8008d08:	f001 fd2c 	bl	800a764 <USBH_Delay>
      break;
 8008d0c:	e166      	b.n	8008fdc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d1e:	2104      	movs	r1, #4
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008d24:	2064      	movs	r0, #100	; 0x64
 8008d26:	f001 fd1d 	bl	800a764 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fbec 	bl	800a508 <USBH_LL_GetSpeed>
 8008d30:	4603      	mov	r3, r0
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2205      	movs	r2, #5
 8008d3e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008d40:	2100      	movs	r1, #0
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fa05 	bl	800a152 <USBH_AllocPipe>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008d50:	2180      	movs	r1, #128	; 0x80
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f001 f9fd 	bl	800a152 <USBH_AllocPipe>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	7919      	ldrb	r1, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d74:	b292      	uxth	r2, r2
 8008d76:	9202      	str	r2, [sp, #8]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	9201      	str	r2, [sp, #4]
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2280      	movs	r2, #128	; 0x80
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f9b6 	bl	800a0f4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7959      	ldrb	r1, [r3, #5]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d9c:	b292      	uxth	r2, r2
 8008d9e:	9202      	str	r2, [sp, #8]
 8008da0:	2200      	movs	r2, #0
 8008da2:	9201      	str	r2, [sp, #4]
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	4603      	mov	r3, r0
 8008da8:	2200      	movs	r2, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 f9a2 	bl	800a0f4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008db0:	e114      	b.n	8008fdc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f918 	bl	8008fe8 <USBH_HandleEnum>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f040 80fe 	bne.w	8008fc2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d103      	bne.n	8008de0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2208      	movs	r2, #8
 8008ddc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008dde:	e0f0      	b.n	8008fc2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2207      	movs	r2, #7
 8008de4:	701a      	strb	r2, [r3, #0]
      break;
 8008de6:	e0ec      	b.n	8008fc2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 80e9 	beq.w	8008fc6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2208      	movs	r2, #8
 8008e04:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008e06:	e0de      	b.n	8008fc6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fc2c 	bl	8009670 <USBH_SetCfg>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f040 80d5 	bne.w	8008fca <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2209      	movs	r2, #9
 8008e24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e26:	e0d0      	b.n	8008fca <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008e2e:	f003 0320 	and.w	r3, r3, #32
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d016      	beq.n	8008e64 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008e36:	2101      	movs	r1, #1
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fc3c 	bl	80096b6 <USBH_SetFeature>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d103      	bne.n	8008e52 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	220a      	movs	r2, #10
 8008e4e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e50:	e0bd      	b.n	8008fce <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	f040 80b9 	bne.w	8008fce <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	220a      	movs	r2, #10
 8008e60:	701a      	strb	r2, [r3, #0]
      break;
 8008e62:	e0b4      	b.n	8008fce <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	220a      	movs	r2, #10
 8008e68:	701a      	strb	r2, [r3, #0]
      break;
 8008e6a:	e0b0      	b.n	8008fce <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 80ad 	beq.w	8008fd2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
 8008e84:	e016      	b.n	8008eb4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008e86:	7bfa      	ldrb	r2, [r7, #15]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	32de      	adds	r2, #222	; 0xde
 8008e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e90:	791a      	ldrb	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d108      	bne.n	8008eae <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e9c:	7bfa      	ldrb	r2, [r7, #15]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	32de      	adds	r2, #222	; 0xde
 8008ea2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008eac:	e005      	b.n	8008eba <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0e5      	beq.n	8008e86 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d016      	beq.n	8008ef2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	4798      	blx	r3
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d109      	bne.n	8008eea <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2206      	movs	r2, #6
 8008eda:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ee2:	2103      	movs	r1, #3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ee8:	e073      	b.n	8008fd2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	220d      	movs	r2, #13
 8008eee:	701a      	strb	r2, [r3, #0]
      break;
 8008ef0:	e06f      	b.n	8008fd2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	220d      	movs	r2, #13
 8008ef6:	701a      	strb	r2, [r3, #0]
      break;
 8008ef8:	e06b      	b.n	8008fd2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d017      	beq.n	8008f34 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	4798      	blx	r3
 8008f10:	4603      	mov	r3, r0
 8008f12:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	220b      	movs	r2, #11
 8008f20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f22:	e058      	b.n	8008fd6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d154      	bne.n	8008fd6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	220d      	movs	r2, #13
 8008f30:	701a      	strb	r2, [r3, #0]
      break;
 8008f32:	e050      	b.n	8008fd6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	220d      	movs	r2, #13
 8008f38:	701a      	strb	r2, [r3, #0]
      break;
 8008f3a:	e04c      	b.n	8008fd6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d049      	beq.n	8008fda <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	4798      	blx	r3
      }
      break;
 8008f52:	e042      	b.n	8008fda <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fd67 	bl	8008a30 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d009      	beq.n	8008f80 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f90:	2105      	movs	r1, #5
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d107      	bne.n	8008fb2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fe20 	bl	8008bf0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fb0:	e014      	b.n	8008fdc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 fa72 	bl	800a49c <USBH_LL_Start>
      break;
 8008fb8:	e010      	b.n	8008fdc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008fba:	bf00      	nop
 8008fbc:	e00e      	b.n	8008fdc <USBH_Process+0x3cc>
      break;
 8008fbe:	bf00      	nop
 8008fc0:	e00c      	b.n	8008fdc <USBH_Process+0x3cc>
      break;
 8008fc2:	bf00      	nop
 8008fc4:	e00a      	b.n	8008fdc <USBH_Process+0x3cc>
    break;
 8008fc6:	bf00      	nop
 8008fc8:	e008      	b.n	8008fdc <USBH_Process+0x3cc>
      break;
 8008fca:	bf00      	nop
 8008fcc:	e006      	b.n	8008fdc <USBH_Process+0x3cc>
      break;
 8008fce:	bf00      	nop
 8008fd0:	e004      	b.n	8008fdc <USBH_Process+0x3cc>
      break;
 8008fd2:	bf00      	nop
 8008fd4:	e002      	b.n	8008fdc <USBH_Process+0x3cc>
      break;
 8008fd6:	bf00      	nop
 8008fd8:	e000      	b.n	8008fdc <USBH_Process+0x3cc>
      break;
 8008fda:	bf00      	nop
  }
  return USBH_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop

08008fe8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af04      	add	r7, sp, #16
 8008fee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	785b      	ldrb	r3, [r3, #1]
 8008ffc:	2b07      	cmp	r3, #7
 8008ffe:	f200 81c1 	bhi.w	8009384 <USBH_HandleEnum+0x39c>
 8009002:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <USBH_HandleEnum+0x20>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	08009029 	.word	0x08009029
 800900c:	080090e7 	.word	0x080090e7
 8009010:	08009151 	.word	0x08009151
 8009014:	080091df 	.word	0x080091df
 8009018:	08009249 	.word	0x08009249
 800901c:	080092b9 	.word	0x080092b9
 8009020:	080092ff 	.word	0x080092ff
 8009024:	08009345 	.word	0x08009345
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009028:	2108      	movs	r1, #8
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa50 	bl	80094d0 <USBH_Get_DevDesc>
 8009030:	4603      	mov	r3, r0
 8009032:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d130      	bne.n	800909c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	7919      	ldrb	r1, [r3, #4]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800905e:	b292      	uxth	r2, r2
 8009060:	9202      	str	r2, [sp, #8]
 8009062:	2200      	movs	r2, #0
 8009064:	9201      	str	r2, [sp, #4]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	4603      	mov	r3, r0
 800906a:	2280      	movs	r2, #128	; 0x80
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f001 f841 	bl	800a0f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7959      	ldrb	r1, [r3, #5]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009086:	b292      	uxth	r2, r2
 8009088:	9202      	str	r2, [sp, #8]
 800908a:	2200      	movs	r2, #0
 800908c:	9201      	str	r2, [sp, #4]
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	4603      	mov	r3, r0
 8009092:	2200      	movs	r2, #0
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 f82d 	bl	800a0f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800909a:	e175      	b.n	8009388 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b03      	cmp	r3, #3
 80090a0:	f040 8172 	bne.w	8009388 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090aa:	3301      	adds	r3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d903      	bls.n	80090c6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	220d      	movs	r2, #13
 80090c2:	701a      	strb	r2, [r3, #0]
      break;
 80090c4:	e160      	b.n	8009388 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	795b      	ldrb	r3, [r3, #5]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 f861 	bl	800a194 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	791b      	ldrb	r3, [r3, #4]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 f85b 	bl	800a194 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	701a      	strb	r2, [r3, #0]
      break;
 80090e4:	e150      	b.n	8009388 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80090e6:	2112      	movs	r1, #18
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f9f1 	bl	80094d0 <USBH_Get_DevDesc>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090fe:	e145      	b.n	800938c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	2b03      	cmp	r3, #3
 8009104:	f040 8142 	bne.w	800938c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800910e:	3301      	adds	r3, #1
 8009110:	b2da      	uxtb	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800911e:	2b03      	cmp	r3, #3
 8009120:	d903      	bls.n	800912a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	220d      	movs	r2, #13
 8009126:	701a      	strb	r2, [r3, #0]
      break;
 8009128:	e130      	b.n	800938c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	795b      	ldrb	r3, [r3, #5]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 f82f 	bl	800a194 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	791b      	ldrb	r3, [r3, #4]
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f001 f829 	bl	800a194 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	701a      	strb	r2, [r3, #0]
      break;
 800914e:	e11d      	b.n	800938c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009150:	2101      	movs	r1, #1
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa68 	bl	8009628 <USBH_SetAddress>
 8009158:	4603      	mov	r3, r0
 800915a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d132      	bne.n	80091c8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009162:	2002      	movs	r0, #2
 8009164:	f001 fafe 	bl	800a764 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2203      	movs	r2, #3
 8009174:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	7919      	ldrb	r1, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800918a:	b292      	uxth	r2, r2
 800918c:	9202      	str	r2, [sp, #8]
 800918e:	2200      	movs	r2, #0
 8009190:	9201      	str	r2, [sp, #4]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	4603      	mov	r3, r0
 8009196:	2280      	movs	r2, #128	; 0x80
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 ffab 	bl	800a0f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	7959      	ldrb	r1, [r3, #5]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091b2:	b292      	uxth	r2, r2
 80091b4:	9202      	str	r2, [sp, #8]
 80091b6:	2200      	movs	r2, #0
 80091b8:	9201      	str	r2, [sp, #4]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	4603      	mov	r3, r0
 80091be:	2200      	movs	r2, #0
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 ff97 	bl	800a0f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80091c6:	e0e3      	b.n	8009390 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	f040 80e0 	bne.w	8009390 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	220d      	movs	r2, #13
 80091d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	705a      	strb	r2, [r3, #1]
      break;
 80091dc:	e0d8      	b.n	8009390 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80091de:	2109      	movs	r1, #9
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f99d 	bl	8009520 <USBH_Get_CfgDesc>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2204      	movs	r2, #4
 80091f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091f6:	e0cd      	b.n	8009394 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	f040 80ca 	bne.w	8009394 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009206:	3301      	adds	r3, #1
 8009208:	b2da      	uxtb	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009216:	2b03      	cmp	r3, #3
 8009218:	d903      	bls.n	8009222 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	220d      	movs	r2, #13
 800921e:	701a      	strb	r2, [r3, #0]
      break;
 8009220:	e0b8      	b.n	8009394 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	795b      	ldrb	r3, [r3, #5]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 ffb3 	bl	800a194 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	791b      	ldrb	r3, [r3, #4]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 ffad 	bl	800a194 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
      break;
 8009246:	e0a5      	b.n	8009394 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f965 	bl	8009520 <USBH_Get_CfgDesc>
 8009256:	4603      	mov	r3, r0
 8009258:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d103      	bne.n	8009268 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2205      	movs	r2, #5
 8009264:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009266:	e097      	b.n	8009398 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	2b03      	cmp	r3, #3
 800926c:	f040 8094 	bne.w	8009398 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009276:	3301      	adds	r3, #1
 8009278:	b2da      	uxtb	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009286:	2b03      	cmp	r3, #3
 8009288:	d903      	bls.n	8009292 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	220d      	movs	r2, #13
 800928e:	701a      	strb	r2, [r3, #0]
      break;
 8009290:	e082      	b.n	8009398 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	795b      	ldrb	r3, [r3, #5]
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 ff7b 	bl	800a194 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	791b      	ldrb	r3, [r3, #4]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 ff75 	bl	800a194 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	701a      	strb	r2, [r3, #0]
      break;
 80092b6:	e06f      	b.n	8009398 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d019      	beq.n	80092f6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092ce:	23ff      	movs	r3, #255	; 0xff
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f949 	bl	8009568 <USBH_Get_StringDesc>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d103      	bne.n	80092e8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2206      	movs	r2, #6
 80092e4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092e6:	e059      	b.n	800939c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	d156      	bne.n	800939c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2206      	movs	r2, #6
 80092f2:	705a      	strb	r2, [r3, #1]
      break;
 80092f4:	e052      	b.n	800939c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2206      	movs	r2, #6
 80092fa:	705a      	strb	r2, [r3, #1]
      break;
 80092fc:	e04e      	b.n	800939c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009304:	2b00      	cmp	r3, #0
 8009306:	d019      	beq.n	800933c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009314:	23ff      	movs	r3, #255	; 0xff
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f926 	bl	8009568 <USBH_Get_StringDesc>
 800931c:	4603      	mov	r3, r0
 800931e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d103      	bne.n	800932e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2207      	movs	r2, #7
 800932a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800932c:	e038      	b.n	80093a0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800932e:	7bbb      	ldrb	r3, [r7, #14]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d135      	bne.n	80093a0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2207      	movs	r2, #7
 8009338:	705a      	strb	r2, [r3, #1]
      break;
 800933a:	e031      	b.n	80093a0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2207      	movs	r2, #7
 8009340:	705a      	strb	r2, [r3, #1]
      break;
 8009342:	e02d      	b.n	80093a0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800934a:	2b00      	cmp	r3, #0
 800934c:	d017      	beq.n	800937e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800935a:	23ff      	movs	r3, #255	; 0xff
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f903 	bl	8009568 <USBH_Get_StringDesc>
 8009362:	4603      	mov	r3, r0
 8009364:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009370:	e018      	b.n	80093a4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b03      	cmp	r3, #3
 8009376:	d115      	bne.n	80093a4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
      break;
 800937c:	e012      	b.n	80093a4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
      break;
 8009382:	e00f      	b.n	80093a4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009384:	bf00      	nop
 8009386:	e00e      	b.n	80093a6 <USBH_HandleEnum+0x3be>
      break;
 8009388:	bf00      	nop
 800938a:	e00c      	b.n	80093a6 <USBH_HandleEnum+0x3be>
      break;
 800938c:	bf00      	nop
 800938e:	e00a      	b.n	80093a6 <USBH_HandleEnum+0x3be>
      break;
 8009390:	bf00      	nop
 8009392:	e008      	b.n	80093a6 <USBH_HandleEnum+0x3be>
      break;
 8009394:	bf00      	nop
 8009396:	e006      	b.n	80093a6 <USBH_HandleEnum+0x3be>
      break;
 8009398:	bf00      	nop
 800939a:	e004      	b.n	80093a6 <USBH_HandleEnum+0x3be>
      break;
 800939c:	bf00      	nop
 800939e:	e002      	b.n	80093a6 <USBH_HandleEnum+0x3be>
      break;
 80093a0:	bf00      	nop
 80093a2:	e000      	b.n	80093a6 <USBH_HandleEnum+0x3be>
      break;
 80093a4:	bf00      	nop
  }
  return Status;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f804 	bl	80093f2 <USBH_HandleSof>
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b0b      	cmp	r3, #11
 8009402:	d10a      	bne.n	800941a <USBH_HandleSof+0x28>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d005      	beq.n	800941a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	4798      	blx	r3
  }
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009432:	bf00      	nop
}
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800944e:	bf00      	nop
}
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f812 	bl	800a4d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	791b      	ldrb	r3, [r3, #4]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fe6d 	bl	800a194 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	795b      	ldrb	r3, [r3, #5]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fe67 	bl	800a194 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af02      	add	r7, sp, #8
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	4613      	mov	r3, r2
 80094ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f864 	bl	80095be <USBH_GetDescriptor>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	b292      	uxth	r2, r2
 8009510:	4619      	mov	r1, r3
 8009512:	f000 f918 	bl	8009746 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af02      	add	r7, sp, #8
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	331c      	adds	r3, #28
 8009530:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009532:	887b      	ldrh	r3, [r7, #2]
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800953c:	2100      	movs	r1, #0
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f83d 	bl	80095be <USBH_GetDescriptor>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d107      	bne.n	800955e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800954e:	887b      	ldrh	r3, [r7, #2]
 8009550:	461a      	mov	r2, r3
 8009552:	68b9      	ldr	r1, [r7, #8]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f987 	bl	8009868 <USBH_ParseCfgDesc>
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af02      	add	r7, sp, #8
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	607a      	str	r2, [r7, #4]
 8009572:	461a      	mov	r2, r3
 8009574:	460b      	mov	r3, r1
 8009576:	72fb      	strb	r3, [r7, #11]
 8009578:	4613      	mov	r3, r2
 800957a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800957c:	7afb      	ldrb	r3, [r7, #11]
 800957e:	b29b      	uxth	r3, r3
 8009580:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009584:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800958c:	893b      	ldrh	r3, [r7, #8]
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	460b      	mov	r3, r1
 8009592:	2100      	movs	r1, #0
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 f812 	bl	80095be <USBH_GetDescriptor>
 800959a:	4603      	mov	r3, r0
 800959c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d107      	bne.n	80095b4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80095aa:	893a      	ldrh	r2, [r7, #8]
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fb24 	bl	8009bfc <USBH_ParseStringDesc>
  }

  return status;
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	607b      	str	r3, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	72fb      	strb	r3, [r7, #11]
 80095cc:	4613      	mov	r3, r2
 80095ce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	789b      	ldrb	r3, [r3, #2]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d11c      	bne.n	8009612 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2206      	movs	r2, #6
 80095e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	893a      	ldrh	r2, [r7, #8]
 80095ee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80095f0:	893b      	ldrh	r3, [r7, #8]
 80095f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80095f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095fa:	d104      	bne.n	8009606 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f240 4209 	movw	r2, #1033	; 0x409
 8009602:	829a      	strh	r2, [r3, #20]
 8009604:	e002      	b.n	800960c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8b3a      	ldrh	r2, [r7, #24]
 8009610:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009612:	8b3b      	ldrh	r3, [r7, #24]
 8009614:	461a      	mov	r2, r3
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fb3d 	bl	8009c98 <USBH_CtlReq>
 800961e:	4603      	mov	r3, r0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	789b      	ldrb	r3, [r3, #2]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d10f      	bne.n	800965c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2205      	movs	r2, #5
 8009646:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	b29a      	uxth	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800965c:	2200      	movs	r2, #0
 800965e:	2100      	movs	r1, #0
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fb19 	bl	8009c98 <USBH_CtlReq>
 8009666:	4603      	mov	r3, r0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	789b      	ldrb	r3, [r3, #2]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d10e      	bne.n	80096a2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2209      	movs	r2, #9
 800968e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	887a      	ldrh	r2, [r7, #2]
 8009694:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096a2:	2200      	movs	r2, #0
 80096a4:	2100      	movs	r1, #0
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 faf6 	bl	8009c98 <USBH_CtlReq>
 80096ac:	4603      	mov	r3, r0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	460b      	mov	r3, r1
 80096c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	789b      	ldrb	r3, [r3, #2]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d10f      	bne.n	80096ea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2203      	movs	r2, #3
 80096d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	b29a      	uxth	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096ea:	2200      	movs	r2, #0
 80096ec:	2100      	movs	r1, #0
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fad2 	bl	8009c98 <USBH_CtlReq>
 80096f4:	4603      	mov	r3, r0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	789b      	ldrb	r3, [r3, #2]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d10f      	bne.n	8009732 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	b29a      	uxth	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009732:	2200      	movs	r2, #0
 8009734:	2100      	movs	r1, #0
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 faae 	bl	8009c98 <USBH_CtlReq>
 800973c:	4603      	mov	r3, r0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009746:	b480      	push	{r7}
 8009748:	b085      	sub	sp, #20
 800974a:	af00      	add	r7, sp, #0
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	4613      	mov	r3, r2
 8009752:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	781a      	ldrb	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	785a      	ldrb	r2, [r3, #1]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	3302      	adds	r3, #2
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	b29a      	uxth	r2, r3
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	3303      	adds	r3, #3
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b29b      	uxth	r3, r3
 8009774:	021b      	lsls	r3, r3, #8
 8009776:	b29b      	uxth	r3, r3
 8009778:	4313      	orrs	r3, r2
 800977a:	b29a      	uxth	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	791a      	ldrb	r2, [r3, #4]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	795a      	ldrb	r2, [r3, #5]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	799a      	ldrb	r2, [r3, #6]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	79da      	ldrb	r2, [r3, #7]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	79db      	ldrb	r3, [r3, #7]
 80097a4:	2b20      	cmp	r3, #32
 80097a6:	dc11      	bgt.n	80097cc <USBH_ParseDevDesc+0x86>
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	db16      	blt.n	80097da <USBH_ParseDevDesc+0x94>
 80097ac:	3b08      	subs	r3, #8
 80097ae:	2201      	movs	r2, #1
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80097b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bf14      	ite	ne
 80097c0:	2301      	movne	r3, #1
 80097c2:	2300      	moveq	r3, #0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <USBH_ParseDevDesc+0x8a>
 80097ca:	e006      	b.n	80097da <USBH_ParseDevDesc+0x94>
 80097cc:	2b40      	cmp	r3, #64	; 0x40
 80097ce:	d104      	bne.n	80097da <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	79da      	ldrb	r2, [r3, #7]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	71da      	strb	r2, [r3, #7]
      break;
 80097d8:	e003      	b.n	80097e2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2240      	movs	r2, #64	; 0x40
 80097de:	71da      	strb	r2, [r3, #7]
      break;
 80097e0:	bf00      	nop
  }

  if (length > 8U)
 80097e2:	88fb      	ldrh	r3, [r7, #6]
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d939      	bls.n	800985c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	3308      	adds	r3, #8
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	3309      	adds	r3, #9
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	4313      	orrs	r3, r2
 80097fe:	b29a      	uxth	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	330a      	adds	r3, #10
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	b29a      	uxth	r2, r3
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	330b      	adds	r3, #11
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	b29b      	uxth	r3, r3
 8009818:	4313      	orrs	r3, r2
 800981a:	b29a      	uxth	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	330c      	adds	r3, #12
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b29a      	uxth	r2, r3
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	330d      	adds	r3, #13
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	b29b      	uxth	r3, r3
 8009834:	4313      	orrs	r3, r2
 8009836:	b29a      	uxth	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	7b9a      	ldrb	r2, [r3, #14]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	7bda      	ldrb	r2, [r3, #15]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	7c1a      	ldrb	r2, [r3, #16]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	7c5a      	ldrb	r2, [r3, #17]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	745a      	strb	r2, [r3, #17]
  }
}
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08c      	sub	sp, #48	; 0x30
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800987c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009888:	2300      	movs	r3, #0
 800988a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	781a      	ldrb	r2, [r3, #0]
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	785a      	ldrb	r2, [r3, #1]
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	3302      	adds	r3, #2
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	3303      	adds	r3, #3
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	4313      	orrs	r3, r2
 80098be:	b29b      	uxth	r3, r3
 80098c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c4:	bf28      	it	cs
 80098c6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	791a      	ldrb	r2, [r3, #4]
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	795a      	ldrb	r2, [r3, #5]
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	799a      	ldrb	r2, [r3, #6]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	79da      	ldrb	r2, [r3, #7]
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	7a1a      	ldrb	r2, [r3, #8]
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b09      	cmp	r3, #9
 80098fe:	d002      	beq.n	8009906 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	2209      	movs	r2, #9
 8009904:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	2b09      	cmp	r3, #9
 800990a:	f240 809d 	bls.w	8009a48 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800990e:	2309      	movs	r3, #9
 8009910:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009916:	e081      	b.n	8009a1c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009918:	f107 0316 	add.w	r3, r7, #22
 800991c:	4619      	mov	r1, r3
 800991e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009920:	f000 f99f 	bl	8009c62 <USBH_GetNextDesc>
 8009924:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009928:	785b      	ldrb	r3, [r3, #1]
 800992a:	2b04      	cmp	r3, #4
 800992c:	d176      	bne.n	8009a1c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b09      	cmp	r3, #9
 8009934:	d002      	beq.n	800993c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	2209      	movs	r2, #9
 800993a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800993c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009940:	221a      	movs	r2, #26
 8009942:	fb02 f303 	mul.w	r3, r2, r3
 8009946:	3308      	adds	r3, #8
 8009948:	6a3a      	ldr	r2, [r7, #32]
 800994a:	4413      	add	r3, r2
 800994c:	3302      	adds	r3, #2
 800994e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009952:	69f8      	ldr	r0, [r7, #28]
 8009954:	f000 f87e 	bl	8009a54 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009962:	e043      	b.n	80099ec <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009964:	f107 0316 	add.w	r3, r7, #22
 8009968:	4619      	mov	r1, r3
 800996a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996c:	f000 f979 	bl	8009c62 <USBH_GetNextDesc>
 8009970:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	2b05      	cmp	r3, #5
 8009978:	d138      	bne.n	80099ec <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	795b      	ldrb	r3, [r3, #5]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d10f      	bne.n	80099a2 <USBH_ParseCfgDesc+0x13a>
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	799b      	ldrb	r3, [r3, #6]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d10b      	bne.n	80099a2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	79db      	ldrb	r3, [r3, #7]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10f      	bne.n	80099b2 <USBH_ParseCfgDesc+0x14a>
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b09      	cmp	r3, #9
 8009998:	d00b      	beq.n	80099b2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	2209      	movs	r2, #9
 800999e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099a0:	e007      	b.n	80099b2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b07      	cmp	r3, #7
 80099a8:	d004      	beq.n	80099b4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	2207      	movs	r2, #7
 80099ae:	701a      	strb	r2, [r3, #0]
 80099b0:	e000      	b.n	80099b4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099b2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80099bc:	3201      	adds	r2, #1
 80099be:	00d2      	lsls	r2, r2, #3
 80099c0:	211a      	movs	r1, #26
 80099c2:	fb01 f303 	mul.w	r3, r1, r3
 80099c6:	4413      	add	r3, r2
 80099c8:	3308      	adds	r3, #8
 80099ca:	6a3a      	ldr	r2, [r7, #32]
 80099cc:	4413      	add	r3, r2
 80099ce:	3304      	adds	r3, #4
 80099d0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80099d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099d4:	69b9      	ldr	r1, [r7, #24]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 f86b 	bl	8009ab2 <USBH_ParseEPDesc>
 80099dc:	4603      	mov	r3, r0
 80099de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80099e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099e6:	3301      	adds	r3, #1
 80099e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	791b      	ldrb	r3, [r3, #4]
 80099f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d204      	bcs.n	8009a02 <USBH_ParseCfgDesc+0x19a>
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	885a      	ldrh	r2, [r3, #2]
 80099fc:	8afb      	ldrh	r3, [r7, #22]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d8b0      	bhi.n	8009964 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	791b      	ldrb	r3, [r3, #4]
 8009a06:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d201      	bcs.n	8009a12 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e01c      	b.n	8009a4c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a16:	3301      	adds	r3, #1
 8009a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d805      	bhi.n	8009a30 <USBH_ParseCfgDesc+0x1c8>
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	885a      	ldrh	r2, [r3, #2]
 8009a28:	8afb      	ldrh	r3, [r7, #22]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	f63f af74 	bhi.w	8009918 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	791b      	ldrb	r3, [r3, #4]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	bf28      	it	cs
 8009a38:	2302      	movcs	r3, #2
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d201      	bcs.n	8009a48 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e001      	b.n	8009a4c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3730      	adds	r7, #48	; 0x30
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	785a      	ldrb	r2, [r3, #1]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	789a      	ldrb	r2, [r3, #2]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	78da      	ldrb	r2, [r3, #3]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	791a      	ldrb	r2, [r3, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	795a      	ldrb	r2, [r3, #5]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	799a      	ldrb	r2, [r3, #6]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	79da      	ldrb	r2, [r3, #7]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	7a1a      	ldrb	r2, [r3, #8]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	721a      	strb	r2, [r3, #8]
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b087      	sub	sp, #28
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	785a      	ldrb	r2, [r3, #1]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	789a      	ldrb	r2, [r3, #2]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	78da      	ldrb	r2, [r3, #3]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3305      	adds	r3, #5
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	799a      	ldrb	r2, [r3, #6]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	889b      	ldrh	r3, [r3, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	75fb      	strb	r3, [r7, #23]
 8009b12:	e033      	b.n	8009b7c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	889b      	ldrh	r3, [r3, #4]
 8009b18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b1c:	f023 0307 	bic.w	r3, r3, #7
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	889b      	ldrh	r3, [r3, #4]
 8009b2a:	b21a      	sxth	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	b299      	uxth	r1, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3305      	adds	r3, #5
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	430b      	orrs	r3, r1
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d110      	bne.n	8009b6e <USBH_ParseEPDesc+0xbc>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	b299      	uxth	r1, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3305      	adds	r3, #5
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	430b      	orrs	r3, r1
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	b21b      	sxth	r3, r3
 8009b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b6a:	b21b      	sxth	r3, r3
 8009b6c:	e001      	b.n	8009b72 <USBH_ParseEPDesc+0xc0>
 8009b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b72:	4313      	orrs	r3, r2
 8009b74:	b21b      	sxth	r3, r3
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d116      	bne.n	8009bb4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	78db      	ldrb	r3, [r3, #3]
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d005      	beq.n	8009b9e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	78db      	ldrb	r3, [r3, #3]
 8009b96:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d127      	bne.n	8009bee <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	799b      	ldrb	r3, [r3, #6]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <USBH_ParseEPDesc+0xfc>
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	799b      	ldrb	r3, [r3, #6]
 8009baa:	2b10      	cmp	r3, #16
 8009bac:	d91f      	bls.n	8009bee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	75fb      	strb	r3, [r7, #23]
 8009bb2:	e01c      	b.n	8009bee <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	78db      	ldrb	r3, [r3, #3]
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d10a      	bne.n	8009bd6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	799b      	ldrb	r3, [r3, #6]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <USBH_ParseEPDesc+0x11e>
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	799b      	ldrb	r3, [r3, #6]
 8009bcc:	2b10      	cmp	r3, #16
 8009bce:	d90e      	bls.n	8009bee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	75fb      	strb	r3, [r7, #23]
 8009bd4:	e00b      	b.n	8009bee <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	78db      	ldrb	r3, [r3, #3]
 8009bda:	f003 0303 	and.w	r3, r3, #3
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d105      	bne.n	8009bee <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	799b      	ldrb	r3, [r3, #6]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d101      	bne.n	8009bee <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009bea:	2303      	movs	r3, #3
 8009bec:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	4613      	mov	r3, r2
 8009c08:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d120      	bne.n	8009c56 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	1e9a      	subs	r2, r3, #2
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	bf28      	it	cs
 8009c20:	4613      	movcs	r3, r2
 8009c22:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3302      	adds	r3, #2
 8009c28:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	82fb      	strh	r3, [r7, #22]
 8009c2e:	e00b      	b.n	8009c48 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c30:	8afb      	ldrh	r3, [r7, #22]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	781a      	ldrb	r2, [r3, #0]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c42:	8afb      	ldrh	r3, [r7, #22]
 8009c44:	3302      	adds	r3, #2
 8009c46:	82fb      	strh	r3, [r7, #22]
 8009c48:	8afa      	ldrh	r2, [r7, #22]
 8009c4a:	8abb      	ldrh	r3, [r7, #20]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d3ef      	bcc.n	8009c30 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2200      	movs	r2, #0
 8009c54:	701a      	strb	r2, [r3, #0]
  }
}
 8009c56:	bf00      	nop
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b085      	sub	sp, #20
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	881a      	ldrh	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	4413      	add	r3, r2
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4413      	add	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	789b      	ldrb	r3, [r3, #2]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d002      	beq.n	8009cb8 <USBH_CtlReq+0x20>
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d00f      	beq.n	8009cd6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009cb6:	e027      	b.n	8009d08 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	88fa      	ldrh	r2, [r7, #6]
 8009cc2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2202      	movs	r2, #2
 8009cce:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd4:	e018      	b.n	8009d08 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f81c 	bl	8009d14 <USBH_HandleControl>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <USBH_CtlReq+0x54>
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d106      	bne.n	8009cfa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	761a      	strb	r2, [r3, #24]
      break;
 8009cf8:	e005      	b.n	8009d06 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d102      	bne.n	8009d06 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2201      	movs	r2, #1
 8009d04:	709a      	strb	r2, [r3, #2]
      break;
 8009d06:	bf00      	nop
  }
  return status;
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	7e1b      	ldrb	r3, [r3, #24]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	2b0a      	cmp	r3, #10
 8009d2c:	f200 8156 	bhi.w	8009fdc <USBH_HandleControl+0x2c8>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <USBH_HandleControl+0x24>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009d65 	.word	0x08009d65
 8009d3c:	08009d7f 	.word	0x08009d7f
 8009d40:	08009de9 	.word	0x08009de9
 8009d44:	08009e0f 	.word	0x08009e0f
 8009d48:	08009e47 	.word	0x08009e47
 8009d4c:	08009e71 	.word	0x08009e71
 8009d50:	08009ec3 	.word	0x08009ec3
 8009d54:	08009ee5 	.word	0x08009ee5
 8009d58:	08009f21 	.word	0x08009f21
 8009d5c:	08009f47 	.word	0x08009f47
 8009d60:	08009f85 	.word	0x08009f85
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f103 0110 	add.w	r1, r3, #16
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	795b      	ldrb	r3, [r3, #5]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f943 	bl	8009ffc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2202      	movs	r2, #2
 8009d7a:	761a      	strb	r2, [r3, #24]
      break;
 8009d7c:	e139      	b.n	8009ff2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	795b      	ldrb	r3, [r3, #5]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fc93 	bl	800a6b0 <USBH_LL_GetURBState>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d11e      	bne.n	8009dd2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	7c1b      	ldrb	r3, [r3, #16]
 8009d98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d9c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	8adb      	ldrh	r3, [r3, #22]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009da6:	7b7b      	ldrb	r3, [r7, #13]
 8009da8:	2b80      	cmp	r3, #128	; 0x80
 8009daa:	d103      	bne.n	8009db4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2203      	movs	r2, #3
 8009db0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009db2:	e115      	b.n	8009fe0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2205      	movs	r2, #5
 8009db8:	761a      	strb	r2, [r3, #24]
      break;
 8009dba:	e111      	b.n	8009fe0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009dbc:	7b7b      	ldrb	r3, [r7, #13]
 8009dbe:	2b80      	cmp	r3, #128	; 0x80
 8009dc0:	d103      	bne.n	8009dca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2209      	movs	r2, #9
 8009dc6:	761a      	strb	r2, [r3, #24]
      break;
 8009dc8:	e10a      	b.n	8009fe0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2207      	movs	r2, #7
 8009dce:	761a      	strb	r2, [r3, #24]
      break;
 8009dd0:	e106      	b.n	8009fe0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d003      	beq.n	8009de0 <USBH_HandleControl+0xcc>
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	f040 8100 	bne.w	8009fe0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	220b      	movs	r2, #11
 8009de4:	761a      	strb	r2, [r3, #24]
      break;
 8009de6:	e0fb      	b.n	8009fe0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6899      	ldr	r1, [r3, #8]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	899a      	ldrh	r2, [r3, #12]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	791b      	ldrb	r3, [r3, #4]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f93a 	bl	800a07a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2204      	movs	r2, #4
 8009e0a:	761a      	strb	r2, [r3, #24]
      break;
 8009e0c:	e0f1      	b.n	8009ff2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	791b      	ldrb	r3, [r3, #4]
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fc4b 	bl	800a6b0 <USBH_LL_GetURBState>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d102      	bne.n	8009e2a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2209      	movs	r2, #9
 8009e28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	2b05      	cmp	r3, #5
 8009e2e:	d102      	bne.n	8009e36 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e30:	2303      	movs	r3, #3
 8009e32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e34:	e0d6      	b.n	8009fe4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	f040 80d3 	bne.w	8009fe4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	220b      	movs	r2, #11
 8009e42:	761a      	strb	r2, [r3, #24]
      break;
 8009e44:	e0ce      	b.n	8009fe4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6899      	ldr	r1, [r3, #8]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	899a      	ldrh	r2, [r3, #12]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	795b      	ldrb	r3, [r3, #5]
 8009e52:	2001      	movs	r0, #1
 8009e54:	9000      	str	r0, [sp, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f8ea 	bl	800a030 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2206      	movs	r2, #6
 8009e6c:	761a      	strb	r2, [r3, #24]
      break;
 8009e6e:	e0c0      	b.n	8009ff2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	795b      	ldrb	r3, [r3, #5]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fc1a 	bl	800a6b0 <USBH_LL_GetURBState>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d103      	bne.n	8009e8e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2207      	movs	r2, #7
 8009e8a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e8c:	e0ac      	b.n	8009fe8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	2b05      	cmp	r3, #5
 8009e92:	d105      	bne.n	8009ea0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	220c      	movs	r2, #12
 8009e98:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e9e:	e0a3      	b.n	8009fe8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d103      	bne.n	8009eae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2205      	movs	r2, #5
 8009eaa:	761a      	strb	r2, [r3, #24]
      break;
 8009eac:	e09c      	b.n	8009fe8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	f040 8099 	bne.w	8009fe8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	220b      	movs	r2, #11
 8009eba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec0:	e092      	b.n	8009fe8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	791b      	ldrb	r3, [r3, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2100      	movs	r1, #0
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f8d5 	bl	800a07a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2208      	movs	r2, #8
 8009ee0:	761a      	strb	r2, [r3, #24]

      break;
 8009ee2:	e086      	b.n	8009ff2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	791b      	ldrb	r3, [r3, #4]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fbe0 	bl	800a6b0 <USBH_LL_GetURBState>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d105      	bne.n	8009f06 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	220d      	movs	r2, #13
 8009efe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f04:	e072      	b.n	8009fec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f06:	7bbb      	ldrb	r3, [r7, #14]
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d103      	bne.n	8009f14 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	220b      	movs	r2, #11
 8009f10:	761a      	strb	r2, [r3, #24]
      break;
 8009f12:	e06b      	b.n	8009fec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	2b05      	cmp	r3, #5
 8009f18:	d168      	bne.n	8009fec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1e:	e065      	b.n	8009fec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	795b      	ldrb	r3, [r3, #5]
 8009f24:	2201      	movs	r2, #1
 8009f26:	9200      	str	r2, [sp, #0]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f87f 	bl	800a030 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	220a      	movs	r2, #10
 8009f42:	761a      	strb	r2, [r3, #24]
      break;
 8009f44:	e055      	b.n	8009ff2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	795b      	ldrb	r3, [r3, #5]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fbaf 	bl	800a6b0 <USBH_LL_GetURBState>
 8009f52:	4603      	mov	r3, r0
 8009f54:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d105      	bne.n	8009f68 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	220d      	movs	r2, #13
 8009f64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f66:	e043      	b.n	8009ff0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d103      	bne.n	8009f76 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2209      	movs	r2, #9
 8009f72:	761a      	strb	r2, [r3, #24]
      break;
 8009f74:	e03c      	b.n	8009ff0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d139      	bne.n	8009ff0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	220b      	movs	r2, #11
 8009f80:	761a      	strb	r2, [r3, #24]
      break;
 8009f82:	e035      	b.n	8009ff0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	7e5b      	ldrb	r3, [r3, #25]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	b2da      	uxtb	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	765a      	strb	r2, [r3, #25]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7e5b      	ldrb	r3, [r3, #25]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d806      	bhi.n	8009fa6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009fa4:	e025      	b.n	8009ff2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fac:	2106      	movs	r1, #6
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	795b      	ldrb	r3, [r3, #5]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f8e8 	bl	800a194 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	791b      	ldrb	r3, [r3, #4]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f8e2 	bl	800a194 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8009fda:	e00a      	b.n	8009ff2 <USBH_HandleControl+0x2de>

    default:
      break;
 8009fdc:	bf00      	nop
 8009fde:	e008      	b.n	8009ff2 <USBH_HandleControl+0x2de>
      break;
 8009fe0:	bf00      	nop
 8009fe2:	e006      	b.n	8009ff2 <USBH_HandleControl+0x2de>
      break;
 8009fe4:	bf00      	nop
 8009fe6:	e004      	b.n	8009ff2 <USBH_HandleControl+0x2de>
      break;
 8009fe8:	bf00      	nop
 8009fea:	e002      	b.n	8009ff2 <USBH_HandleControl+0x2de>
      break;
 8009fec:	bf00      	nop
 8009fee:	e000      	b.n	8009ff2 <USBH_HandleControl+0x2de>
      break;
 8009ff0:	bf00      	nop
  }

  return status;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b088      	sub	sp, #32
 800a000:	af04      	add	r7, sp, #16
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	4613      	mov	r3, r2
 800a008:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a00a:	79f9      	ldrb	r1, [r7, #7]
 800a00c:	2300      	movs	r3, #0
 800a00e:	9303      	str	r3, [sp, #12]
 800a010:	2308      	movs	r3, #8
 800a012:	9302      	str	r3, [sp, #8]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	9301      	str	r3, [sp, #4]
 800a018:	2300      	movs	r3, #0
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	2300      	movs	r3, #0
 800a01e:	2200      	movs	r2, #0
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 fb14 	bl	800a64e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af04      	add	r7, sp, #16
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4611      	mov	r1, r2
 800a03c:	461a      	mov	r2, r3
 800a03e:	460b      	mov	r3, r1
 800a040:	80fb      	strh	r3, [r7, #6]
 800a042:	4613      	mov	r3, r2
 800a044:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a050:	2300      	movs	r3, #0
 800a052:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a054:	7979      	ldrb	r1, [r7, #5]
 800a056:	7e3b      	ldrb	r3, [r7, #24]
 800a058:	9303      	str	r3, [sp, #12]
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	9302      	str	r3, [sp, #8]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	2301      	movs	r3, #1
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	2300      	movs	r3, #0
 800a068:	2200      	movs	r2, #0
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 faef 	bl	800a64e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b088      	sub	sp, #32
 800a07e:	af04      	add	r7, sp, #16
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	4611      	mov	r1, r2
 800a086:	461a      	mov	r2, r3
 800a088:	460b      	mov	r3, r1
 800a08a:	80fb      	strh	r3, [r7, #6]
 800a08c:	4613      	mov	r3, r2
 800a08e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a090:	7979      	ldrb	r1, [r7, #5]
 800a092:	2300      	movs	r3, #0
 800a094:	9303      	str	r3, [sp, #12]
 800a096:	88fb      	ldrh	r3, [r7, #6]
 800a098:	9302      	str	r3, [sp, #8]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	2301      	movs	r3, #1
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 fad1 	bl	800a64e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0ac:	2300      	movs	r3, #0

}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b088      	sub	sp, #32
 800a0ba:	af04      	add	r7, sp, #16
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	71fb      	strb	r3, [r7, #7]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	79b9      	ldrb	r1, [r7, #6]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	9203      	str	r2, [sp, #12]
 800a0d6:	9302      	str	r3, [sp, #8]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	9301      	str	r3, [sp, #4]
 800a0dc:	2301      	movs	r3, #1
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 fab2 	bl	800a64e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af04      	add	r7, sp, #16
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	4611      	mov	r1, r2
 800a100:	461a      	mov	r2, r3
 800a102:	4603      	mov	r3, r0
 800a104:	70fb      	strb	r3, [r7, #3]
 800a106:	460b      	mov	r3, r1
 800a108:	70bb      	strb	r3, [r7, #2]
 800a10a:	4613      	mov	r3, r2
 800a10c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a10e:	7878      	ldrb	r0, [r7, #1]
 800a110:	78ba      	ldrb	r2, [r7, #2]
 800a112:	78f9      	ldrb	r1, [r7, #3]
 800a114:	8b3b      	ldrh	r3, [r7, #24]
 800a116:	9302      	str	r3, [sp, #8]
 800a118:	7d3b      	ldrb	r3, [r7, #20]
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	7c3b      	ldrb	r3, [r7, #16]
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	4603      	mov	r3, r0
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa45 	bl	800a5b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	460b      	mov	r3, r1
 800a13c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa64 	bl	800a610 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	460b      	mov	r3, r1
 800a15c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f836 	bl	800a1d0 <USBH_GetFreePipe>
 800a164:	4603      	mov	r3, r0
 800a166:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a168:	89fb      	ldrh	r3, [r7, #14]
 800a16a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a16e:	4293      	cmp	r3, r2
 800a170:	d00a      	beq.n	800a188 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	89fb      	ldrh	r3, [r7, #14]
 800a176:	f003 030f 	and.w	r3, r3, #15
 800a17a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	33e0      	adds	r3, #224	; 0xe0
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	440b      	add	r3, r1
 800a186:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a188:	89fb      	ldrh	r3, [r7, #14]
 800a18a:	b2db      	uxtb	r3, r3
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	2b0f      	cmp	r3, #15
 800a1a4:	d80d      	bhi.n	800a1c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	33e0      	adds	r3, #224	; 0xe0
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	33e0      	adds	r3, #224	; 0xe0
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	440b      	add	r3, r1
 800a1c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
 800a1e0:	e00f      	b.n	800a202 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	33e0      	adds	r3, #224	; 0xe0
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d102      	bne.n	800a1fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	e007      	b.n	800a20c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	3301      	adds	r3, #1
 800a200:	73fb      	strb	r3, [r7, #15]
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	2b0f      	cmp	r3, #15
 800a206:	d9ec      	bls.n	800a1e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a208:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a21c:	2201      	movs	r2, #1
 800a21e:	490e      	ldr	r1, [pc, #56]	; (800a258 <MX_USB_HOST_Init+0x40>)
 800a220:	480e      	ldr	r0, [pc, #56]	; (800a25c <MX_USB_HOST_Init+0x44>)
 800a222:	f7fe fbcb 	bl	80089bc <USBH_Init>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a22c:	f7f7 f840 	bl	80012b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800a230:	490b      	ldr	r1, [pc, #44]	; (800a260 <MX_USB_HOST_Init+0x48>)
 800a232:	480a      	ldr	r0, [pc, #40]	; (800a25c <MX_USB_HOST_Init+0x44>)
 800a234:	f7fe fc50 	bl	8008ad8 <USBH_RegisterClass>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a23e:	f7f7 f837 	bl	80012b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a242:	4806      	ldr	r0, [pc, #24]	; (800a25c <MX_USB_HOST_Init+0x44>)
 800a244:	f7fe fcd4 	bl	8008bf0 <USBH_Start>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a24e:	f7f7 f82f 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a252:	bf00      	nop
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	0800a279 	.word	0x0800a279
 800a25c:	20005a24 	.word	0x20005a24
 800a260:	20000018 	.word	0x20000018

0800a264 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a268:	4802      	ldr	r0, [pc, #8]	; (800a274 <MX_USB_HOST_Process+0x10>)
 800a26a:	f7fe fcd1 	bl	8008c10 <USBH_Process>
}
 800a26e:	bf00      	nop
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20005a24 	.word	0x20005a24

0800a278 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	3b01      	subs	r3, #1
 800a288:	2b04      	cmp	r3, #4
 800a28a:	d819      	bhi.n	800a2c0 <USBH_UserProcess+0x48>
 800a28c:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <USBH_UserProcess+0x1c>)
 800a28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a292:	bf00      	nop
 800a294:	0800a2c1 	.word	0x0800a2c1
 800a298:	0800a2b1 	.word	0x0800a2b1
 800a29c:	0800a2c1 	.word	0x0800a2c1
 800a2a0:	0800a2b9 	.word	0x0800a2b9
 800a2a4:	0800a2a9 	.word	0x0800a2a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a2a8:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <USBH_UserProcess+0x58>)
 800a2aa:	2203      	movs	r2, #3
 800a2ac:	701a      	strb	r2, [r3, #0]
  break;
 800a2ae:	e008      	b.n	800a2c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a2b0:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <USBH_UserProcess+0x58>)
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	701a      	strb	r2, [r3, #0]
  break;
 800a2b6:	e004      	b.n	800a2c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a2b8:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <USBH_UserProcess+0x58>)
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	701a      	strb	r2, [r3, #0]
  break;
 800a2be:	e000      	b.n	800a2c2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a2c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a2c2:	bf00      	nop
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	20005dfc 	.word	0x20005dfc

0800a2d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	; 0x28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2dc:	f107 0314 	add.w	r3, r7, #20
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	605a      	str	r2, [r3, #4]
 800a2e6:	609a      	str	r2, [r3, #8]
 800a2e8:	60da      	str	r2, [r3, #12]
 800a2ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2f4:	d13a      	bne.n	800a36c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	613b      	str	r3, [r7, #16]
 800a2fa:	4b1e      	ldr	r3, [pc, #120]	; (800a374 <HAL_HCD_MspInit+0xa0>)
 800a2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fe:	4a1d      	ldr	r2, [pc, #116]	; (800a374 <HAL_HCD_MspInit+0xa0>)
 800a300:	f043 0301 	orr.w	r3, r3, #1
 800a304:	6313      	str	r3, [r2, #48]	; 0x30
 800a306:	4b1b      	ldr	r3, [pc, #108]	; (800a374 <HAL_HCD_MspInit+0xa0>)
 800a308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a312:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a318:	2302      	movs	r3, #2
 800a31a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a31c:	2300      	movs	r3, #0
 800a31e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a320:	2303      	movs	r3, #3
 800a322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a324:	230a      	movs	r3, #10
 800a326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a328:	f107 0314 	add.w	r3, r7, #20
 800a32c:	4619      	mov	r1, r3
 800a32e:	4812      	ldr	r0, [pc, #72]	; (800a378 <HAL_HCD_MspInit+0xa4>)
 800a330:	f7f9 f9c0 	bl	80036b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a334:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <HAL_HCD_MspInit+0xa0>)
 800a336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a338:	4a0e      	ldr	r2, [pc, #56]	; (800a374 <HAL_HCD_MspInit+0xa0>)
 800a33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a33e:	6353      	str	r3, [r2, #52]	; 0x34
 800a340:	2300      	movs	r3, #0
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <HAL_HCD_MspInit+0xa0>)
 800a346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a348:	4a0a      	ldr	r2, [pc, #40]	; (800a374 <HAL_HCD_MspInit+0xa0>)
 800a34a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a34e:	6453      	str	r3, [r2, #68]	; 0x44
 800a350:	4b08      	ldr	r3, [pc, #32]	; (800a374 <HAL_HCD_MspInit+0xa0>)
 800a352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a35c:	2200      	movs	r2, #0
 800a35e:	2100      	movs	r1, #0
 800a360:	2043      	movs	r0, #67	; 0x43
 800a362:	f7f8 fd1a 	bl	8002d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a366:	2043      	movs	r0, #67	; 0x43
 800a368:	f7f8 fd33 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a36c:	bf00      	nop
 800a36e:	3728      	adds	r7, #40	; 0x28
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	40023800 	.word	0x40023800
 800a378:	40020000 	.word	0x40020000

0800a37c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff f81f 	bl	80093ce <USBH_LL_IncTimer>
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff f857 	bl	800945a <USBH_LL_Connect>
}
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff f860 	bl	8009488 <USBH_LL_Disconnect>
}
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff f811 	bl	8009422 <USBH_LL_PortEnabled>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff f811 	bl	800943e <USBH_LL_PortDisabled>
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a432:	2b01      	cmp	r3, #1
 800a434:	d12a      	bne.n	800a48c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a436:	4a18      	ldr	r2, [pc, #96]	; (800a498 <USBH_LL_Init+0x74>)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a15      	ldr	r2, [pc, #84]	; (800a498 <USBH_LL_Init+0x74>)
 800a442:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a446:	4b14      	ldr	r3, [pc, #80]	; (800a498 <USBH_LL_Init+0x74>)
 800a448:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a44c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a44e:	4b12      	ldr	r3, [pc, #72]	; (800a498 <USBH_LL_Init+0x74>)
 800a450:	2208      	movs	r2, #8
 800a452:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 800a454:	4b10      	ldr	r3, [pc, #64]	; (800a498 <USBH_LL_Init+0x74>)
 800a456:	2201      	movs	r2, #1
 800a458:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a45a:	4b0f      	ldr	r3, [pc, #60]	; (800a498 <USBH_LL_Init+0x74>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a460:	4b0d      	ldr	r3, [pc, #52]	; (800a498 <USBH_LL_Init+0x74>)
 800a462:	2202      	movs	r2, #2
 800a464:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a466:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <USBH_LL_Init+0x74>)
 800a468:	2200      	movs	r2, #0
 800a46a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a46c:	480a      	ldr	r0, [pc, #40]	; (800a498 <USBH_LL_Init+0x74>)
 800a46e:	f7f9 faf1 	bl	8003a54 <HAL_HCD_Init>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a478:	f7f6 ff1a 	bl	80012b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a47c:	4806      	ldr	r0, [pc, #24]	; (800a498 <USBH_LL_Init+0x74>)
 800a47e:	f7f9 fed4 	bl	800422a <HAL_HCD_GetCurrentFrame>
 800a482:	4603      	mov	r3, r0
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7fe ff92 	bl	80093b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20005e00 	.word	0x20005e00

0800a49c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7f9 fe43 	bl	800413e <HAL_HCD_Start>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f95c 	bl	800a77c <USBH_Get_USB_Status>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f9 fe4b 	bl	8004184 <HAL_HCD_Stop>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 f941 	bl	800a77c <USBH_Get_USB_Status>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a510:	2301      	movs	r3, #1
 800a512:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f9 fe93 	bl	8004246 <HAL_HCD_GetCurrentSpeed>
 800a520:	4603      	mov	r3, r0
 800a522:	2b02      	cmp	r3, #2
 800a524:	d00c      	beq.n	800a540 <USBH_LL_GetSpeed+0x38>
 800a526:	2b02      	cmp	r3, #2
 800a528:	d80d      	bhi.n	800a546 <USBH_LL_GetSpeed+0x3e>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <USBH_LL_GetSpeed+0x2c>
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d003      	beq.n	800a53a <USBH_LL_GetSpeed+0x32>
 800a532:	e008      	b.n	800a546 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a534:	2300      	movs	r3, #0
 800a536:	73fb      	strb	r3, [r7, #15]
    break;
 800a538:	e008      	b.n	800a54c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a53a:	2301      	movs	r3, #1
 800a53c:	73fb      	strb	r3, [r7, #15]
    break;
 800a53e:	e005      	b.n	800a54c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a540:	2302      	movs	r3, #2
 800a542:	73fb      	strb	r3, [r7, #15]
    break;
 800a544:	e002      	b.n	800a54c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a546:	2301      	movs	r3, #1
 800a548:	73fb      	strb	r3, [r7, #15]
    break;
 800a54a:	bf00      	nop
  }
  return  speed;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7f9 fe26 	bl	80041be <HAL_HCD_ResetPort>
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 f8ff 	bl	800a77c <USBH_Get_USB_Status>
 800a57e:	4603      	mov	r3, r0
 800a580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a582:	7bbb      	ldrb	r3, [r7, #14]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a59e:	78fa      	ldrb	r2, [r7, #3]
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7f9 fe2d 	bl	8004202 <HAL_HCD_HC_GetXferCount>
 800a5a8:	4603      	mov	r3, r0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5b2:	b590      	push	{r4, r7, lr}
 800a5b4:	b089      	sub	sp, #36	; 0x24
 800a5b6:	af04      	add	r7, sp, #16
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	4611      	mov	r1, r2
 800a5be:	461a      	mov	r2, r3
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	70fb      	strb	r3, [r7, #3]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	70bb      	strb	r3, [r7, #2]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a5da:	787c      	ldrb	r4, [r7, #1]
 800a5dc:	78ba      	ldrb	r2, [r7, #2]
 800a5de:	78f9      	ldrb	r1, [r7, #3]
 800a5e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a5e2:	9302      	str	r3, [sp, #8]
 800a5e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	f7f9 fa91 	bl	8003b18 <HAL_HCD_HC_Init>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 f8bd 	bl	800a77c <USBH_Get_USB_Status>
 800a602:	4603      	mov	r3, r0
 800a604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a606:	7bbb      	ldrb	r3, [r7, #14]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd90      	pop	{r4, r7, pc}

0800a610 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a62a:	78fa      	ldrb	r2, [r7, #3]
 800a62c:	4611      	mov	r1, r2
 800a62e:	4618      	mov	r0, r3
 800a630:	f7f9 fb01 	bl	8003c36 <HAL_HCD_HC_Halt>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 f89e 	bl	800a77c <USBH_Get_USB_Status>
 800a640:	4603      	mov	r3, r0
 800a642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a644:	7bbb      	ldrb	r3, [r7, #14]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a64e:	b590      	push	{r4, r7, lr}
 800a650:	b089      	sub	sp, #36	; 0x24
 800a652:	af04      	add	r7, sp, #16
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	4608      	mov	r0, r1
 800a658:	4611      	mov	r1, r2
 800a65a:	461a      	mov	r2, r3
 800a65c:	4603      	mov	r3, r0
 800a65e:	70fb      	strb	r3, [r7, #3]
 800a660:	460b      	mov	r3, r1
 800a662:	70bb      	strb	r3, [r7, #2]
 800a664:	4613      	mov	r3, r2
 800a666:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a676:	787c      	ldrb	r4, [r7, #1]
 800a678:	78ba      	ldrb	r2, [r7, #2]
 800a67a:	78f9      	ldrb	r1, [r7, #3]
 800a67c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a680:	9303      	str	r3, [sp, #12]
 800a682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a684:	9302      	str	r3, [sp, #8]
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	4623      	mov	r3, r4
 800a692:	f7f9 faf3 	bl	8003c7c <HAL_HCD_HC_SubmitRequest>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f000 f86d 	bl	800a77c <USBH_Get_USB_Status>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd90      	pop	{r4, r7, pc}

0800a6b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6c2:	78fa      	ldrb	r2, [r7, #3]
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7f9 fd87 	bl	80041da <HAL_HCD_HC_GetURBState>
 800a6cc:	4603      	mov	r3, r0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d103      	bne.n	800a6f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f870 	bl	800a7d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a6f4:	20c8      	movs	r0, #200	; 0xc8
 800a6f6:	f7f8 fa51 	bl	8002b9c <HAL_Delay>
  return USBH_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
 800a710:	4613      	mov	r3, r2
 800a712:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a71a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	212c      	movs	r1, #44	; 0x2c
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	4413      	add	r3, r2
 800a728:	333b      	adds	r3, #59	; 0x3b
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d009      	beq.n	800a744 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	212c      	movs	r1, #44	; 0x2c
 800a736:	fb01 f303 	mul.w	r3, r1, r3
 800a73a:	4413      	add	r3, r2
 800a73c:	3354      	adds	r3, #84	; 0x54
 800a73e:	78ba      	ldrb	r2, [r7, #2]
 800a740:	701a      	strb	r2, [r3, #0]
 800a742:	e008      	b.n	800a756 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	212c      	movs	r1, #44	; 0x2c
 800a74a:	fb01 f303 	mul.w	r3, r1, r3
 800a74e:	4413      	add	r3, r2
 800a750:	3355      	adds	r3, #85	; 0x55
 800a752:	78ba      	ldrb	r2, [r7, #2]
 800a754:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7f8 fa15 	bl	8002b9c <HAL_Delay>
}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d817      	bhi.n	800a7c0 <USBH_Get_USB_Status+0x44>
 800a790:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <USBH_Get_USB_Status+0x1c>)
 800a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a7a9 	.word	0x0800a7a9
 800a79c:	0800a7af 	.word	0x0800a7af
 800a7a0:	0800a7b5 	.word	0x0800a7b5
 800a7a4:	0800a7bb 	.word	0x0800a7bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ac:	e00b      	b.n	800a7c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b2:	e008      	b.n	800a7c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b8:	e005      	b.n	800a7c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a7be:	e002      	b.n	800a7c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c4:	bf00      	nop
  }
  return usb_status;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]
 800a7ec:	e001      	b.n	800a7f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a7fa:	4803      	ldr	r0, [pc, #12]	; (800a808 <MX_DriverVbusFS+0x34>)
 800a7fc:	f7f9 f8de 	bl	80039bc <HAL_GPIO_WritePin>
}
 800a800:	bf00      	nop
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	40020000 	.word	0x40020000

0800a80c <__errno>:
 800a80c:	4b01      	ldr	r3, [pc, #4]	; (800a814 <__errno+0x8>)
 800a80e:	6818      	ldr	r0, [r3, #0]
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20000038 	.word	0x20000038

0800a818 <__libc_init_array>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	4d0d      	ldr	r5, [pc, #52]	; (800a850 <__libc_init_array+0x38>)
 800a81c:	4c0d      	ldr	r4, [pc, #52]	; (800a854 <__libc_init_array+0x3c>)
 800a81e:	1b64      	subs	r4, r4, r5
 800a820:	10a4      	asrs	r4, r4, #2
 800a822:	2600      	movs	r6, #0
 800a824:	42a6      	cmp	r6, r4
 800a826:	d109      	bne.n	800a83c <__libc_init_array+0x24>
 800a828:	4d0b      	ldr	r5, [pc, #44]	; (800a858 <__libc_init_array+0x40>)
 800a82a:	4c0c      	ldr	r4, [pc, #48]	; (800a85c <__libc_init_array+0x44>)
 800a82c:	f001 fa6a 	bl	800bd04 <_init>
 800a830:	1b64      	subs	r4, r4, r5
 800a832:	10a4      	asrs	r4, r4, #2
 800a834:	2600      	movs	r6, #0
 800a836:	42a6      	cmp	r6, r4
 800a838:	d105      	bne.n	800a846 <__libc_init_array+0x2e>
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a840:	4798      	blx	r3
 800a842:	3601      	adds	r6, #1
 800a844:	e7ee      	b.n	800a824 <__libc_init_array+0xc>
 800a846:	f855 3b04 	ldr.w	r3, [r5], #4
 800a84a:	4798      	blx	r3
 800a84c:	3601      	adds	r6, #1
 800a84e:	e7f2      	b.n	800a836 <__libc_init_array+0x1e>
 800a850:	08019f58 	.word	0x08019f58
 800a854:	08019f58 	.word	0x08019f58
 800a858:	08019f58 	.word	0x08019f58
 800a85c:	08019f5c 	.word	0x08019f5c

0800a860 <malloc>:
 800a860:	4b02      	ldr	r3, [pc, #8]	; (800a86c <malloc+0xc>)
 800a862:	4601      	mov	r1, r0
 800a864:	6818      	ldr	r0, [r3, #0]
 800a866:	f000 b88d 	b.w	800a984 <_malloc_r>
 800a86a:	bf00      	nop
 800a86c:	20000038 	.word	0x20000038

0800a870 <free>:
 800a870:	4b02      	ldr	r3, [pc, #8]	; (800a87c <free+0xc>)
 800a872:	4601      	mov	r1, r0
 800a874:	6818      	ldr	r0, [r3, #0]
 800a876:	f000 b819 	b.w	800a8ac <_free_r>
 800a87a:	bf00      	nop
 800a87c:	20000038 	.word	0x20000038

0800a880 <memcpy>:
 800a880:	440a      	add	r2, r1
 800a882:	4291      	cmp	r1, r2
 800a884:	f100 33ff 	add.w	r3, r0, #4294967295
 800a888:	d100      	bne.n	800a88c <memcpy+0xc>
 800a88a:	4770      	bx	lr
 800a88c:	b510      	push	{r4, lr}
 800a88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a892:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a896:	4291      	cmp	r1, r2
 800a898:	d1f9      	bne.n	800a88e <memcpy+0xe>
 800a89a:	bd10      	pop	{r4, pc}

0800a89c <memset>:
 800a89c:	4402      	add	r2, r0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d100      	bne.n	800a8a6 <memset+0xa>
 800a8a4:	4770      	bx	lr
 800a8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8aa:	e7f9      	b.n	800a8a0 <memset+0x4>

0800a8ac <_free_r>:
 800a8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	d044      	beq.n	800a93c <_free_r+0x90>
 800a8b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b6:	9001      	str	r0, [sp, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f1a1 0404 	sub.w	r4, r1, #4
 800a8be:	bfb8      	it	lt
 800a8c0:	18e4      	addlt	r4, r4, r3
 800a8c2:	f000 f99f 	bl	800ac04 <__malloc_lock>
 800a8c6:	4a1e      	ldr	r2, [pc, #120]	; (800a940 <_free_r+0x94>)
 800a8c8:	9801      	ldr	r0, [sp, #4]
 800a8ca:	6813      	ldr	r3, [r2, #0]
 800a8cc:	b933      	cbnz	r3, 800a8dc <_free_r+0x30>
 800a8ce:	6063      	str	r3, [r4, #4]
 800a8d0:	6014      	str	r4, [r2, #0]
 800a8d2:	b003      	add	sp, #12
 800a8d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8d8:	f000 b99a 	b.w	800ac10 <__malloc_unlock>
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	d908      	bls.n	800a8f2 <_free_r+0x46>
 800a8e0:	6825      	ldr	r5, [r4, #0]
 800a8e2:	1961      	adds	r1, r4, r5
 800a8e4:	428b      	cmp	r3, r1
 800a8e6:	bf01      	itttt	eq
 800a8e8:	6819      	ldreq	r1, [r3, #0]
 800a8ea:	685b      	ldreq	r3, [r3, #4]
 800a8ec:	1949      	addeq	r1, r1, r5
 800a8ee:	6021      	streq	r1, [r4, #0]
 800a8f0:	e7ed      	b.n	800a8ce <_free_r+0x22>
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	b10b      	cbz	r3, 800a8fc <_free_r+0x50>
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d9fa      	bls.n	800a8f2 <_free_r+0x46>
 800a8fc:	6811      	ldr	r1, [r2, #0]
 800a8fe:	1855      	adds	r5, r2, r1
 800a900:	42a5      	cmp	r5, r4
 800a902:	d10b      	bne.n	800a91c <_free_r+0x70>
 800a904:	6824      	ldr	r4, [r4, #0]
 800a906:	4421      	add	r1, r4
 800a908:	1854      	adds	r4, r2, r1
 800a90a:	42a3      	cmp	r3, r4
 800a90c:	6011      	str	r1, [r2, #0]
 800a90e:	d1e0      	bne.n	800a8d2 <_free_r+0x26>
 800a910:	681c      	ldr	r4, [r3, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	6053      	str	r3, [r2, #4]
 800a916:	4421      	add	r1, r4
 800a918:	6011      	str	r1, [r2, #0]
 800a91a:	e7da      	b.n	800a8d2 <_free_r+0x26>
 800a91c:	d902      	bls.n	800a924 <_free_r+0x78>
 800a91e:	230c      	movs	r3, #12
 800a920:	6003      	str	r3, [r0, #0]
 800a922:	e7d6      	b.n	800a8d2 <_free_r+0x26>
 800a924:	6825      	ldr	r5, [r4, #0]
 800a926:	1961      	adds	r1, r4, r5
 800a928:	428b      	cmp	r3, r1
 800a92a:	bf04      	itt	eq
 800a92c:	6819      	ldreq	r1, [r3, #0]
 800a92e:	685b      	ldreq	r3, [r3, #4]
 800a930:	6063      	str	r3, [r4, #4]
 800a932:	bf04      	itt	eq
 800a934:	1949      	addeq	r1, r1, r5
 800a936:	6021      	streq	r1, [r4, #0]
 800a938:	6054      	str	r4, [r2, #4]
 800a93a:	e7ca      	b.n	800a8d2 <_free_r+0x26>
 800a93c:	b003      	add	sp, #12
 800a93e:	bd30      	pop	{r4, r5, pc}
 800a940:	20006104 	.word	0x20006104

0800a944 <sbrk_aligned>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	4e0e      	ldr	r6, [pc, #56]	; (800a980 <sbrk_aligned+0x3c>)
 800a948:	460c      	mov	r4, r1
 800a94a:	6831      	ldr	r1, [r6, #0]
 800a94c:	4605      	mov	r5, r0
 800a94e:	b911      	cbnz	r1, 800a956 <sbrk_aligned+0x12>
 800a950:	f000 f8f8 	bl	800ab44 <_sbrk_r>
 800a954:	6030      	str	r0, [r6, #0]
 800a956:	4621      	mov	r1, r4
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 f8f3 	bl	800ab44 <_sbrk_r>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	d00a      	beq.n	800a978 <sbrk_aligned+0x34>
 800a962:	1cc4      	adds	r4, r0, #3
 800a964:	f024 0403 	bic.w	r4, r4, #3
 800a968:	42a0      	cmp	r0, r4
 800a96a:	d007      	beq.n	800a97c <sbrk_aligned+0x38>
 800a96c:	1a21      	subs	r1, r4, r0
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f8e8 	bl	800ab44 <_sbrk_r>
 800a974:	3001      	adds	r0, #1
 800a976:	d101      	bne.n	800a97c <sbrk_aligned+0x38>
 800a978:	f04f 34ff 	mov.w	r4, #4294967295
 800a97c:	4620      	mov	r0, r4
 800a97e:	bd70      	pop	{r4, r5, r6, pc}
 800a980:	20006108 	.word	0x20006108

0800a984 <_malloc_r>:
 800a984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a988:	1ccd      	adds	r5, r1, #3
 800a98a:	f025 0503 	bic.w	r5, r5, #3
 800a98e:	3508      	adds	r5, #8
 800a990:	2d0c      	cmp	r5, #12
 800a992:	bf38      	it	cc
 800a994:	250c      	movcc	r5, #12
 800a996:	2d00      	cmp	r5, #0
 800a998:	4607      	mov	r7, r0
 800a99a:	db01      	blt.n	800a9a0 <_malloc_r+0x1c>
 800a99c:	42a9      	cmp	r1, r5
 800a99e:	d905      	bls.n	800a9ac <_malloc_r+0x28>
 800a9a0:	230c      	movs	r3, #12
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	2600      	movs	r6, #0
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ac:	4e2e      	ldr	r6, [pc, #184]	; (800aa68 <_malloc_r+0xe4>)
 800a9ae:	f000 f929 	bl	800ac04 <__malloc_lock>
 800a9b2:	6833      	ldr	r3, [r6, #0]
 800a9b4:	461c      	mov	r4, r3
 800a9b6:	bb34      	cbnz	r4, 800aa06 <_malloc_r+0x82>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	f7ff ffc2 	bl	800a944 <sbrk_aligned>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	d14d      	bne.n	800aa62 <_malloc_r+0xde>
 800a9c6:	6834      	ldr	r4, [r6, #0]
 800a9c8:	4626      	mov	r6, r4
 800a9ca:	2e00      	cmp	r6, #0
 800a9cc:	d140      	bne.n	800aa50 <_malloc_r+0xcc>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	eb04 0803 	add.w	r8, r4, r3
 800a9d8:	f000 f8b4 	bl	800ab44 <_sbrk_r>
 800a9dc:	4580      	cmp	r8, r0
 800a9de:	d13a      	bne.n	800aa56 <_malloc_r+0xd2>
 800a9e0:	6821      	ldr	r1, [r4, #0]
 800a9e2:	3503      	adds	r5, #3
 800a9e4:	1a6d      	subs	r5, r5, r1
 800a9e6:	f025 0503 	bic.w	r5, r5, #3
 800a9ea:	3508      	adds	r5, #8
 800a9ec:	2d0c      	cmp	r5, #12
 800a9ee:	bf38      	it	cc
 800a9f0:	250c      	movcc	r5, #12
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff ffa5 	bl	800a944 <sbrk_aligned>
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d02b      	beq.n	800aa56 <_malloc_r+0xd2>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	442b      	add	r3, r5
 800aa02:	6023      	str	r3, [r4, #0]
 800aa04:	e00e      	b.n	800aa24 <_malloc_r+0xa0>
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	1b52      	subs	r2, r2, r5
 800aa0a:	d41e      	bmi.n	800aa4a <_malloc_r+0xc6>
 800aa0c:	2a0b      	cmp	r2, #11
 800aa0e:	d916      	bls.n	800aa3e <_malloc_r+0xba>
 800aa10:	1961      	adds	r1, r4, r5
 800aa12:	42a3      	cmp	r3, r4
 800aa14:	6025      	str	r5, [r4, #0]
 800aa16:	bf18      	it	ne
 800aa18:	6059      	strne	r1, [r3, #4]
 800aa1a:	6863      	ldr	r3, [r4, #4]
 800aa1c:	bf08      	it	eq
 800aa1e:	6031      	streq	r1, [r6, #0]
 800aa20:	5162      	str	r2, [r4, r5]
 800aa22:	604b      	str	r3, [r1, #4]
 800aa24:	4638      	mov	r0, r7
 800aa26:	f104 060b 	add.w	r6, r4, #11
 800aa2a:	f000 f8f1 	bl	800ac10 <__malloc_unlock>
 800aa2e:	f026 0607 	bic.w	r6, r6, #7
 800aa32:	1d23      	adds	r3, r4, #4
 800aa34:	1af2      	subs	r2, r6, r3
 800aa36:	d0b6      	beq.n	800a9a6 <_malloc_r+0x22>
 800aa38:	1b9b      	subs	r3, r3, r6
 800aa3a:	50a3      	str	r3, [r4, r2]
 800aa3c:	e7b3      	b.n	800a9a6 <_malloc_r+0x22>
 800aa3e:	6862      	ldr	r2, [r4, #4]
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	bf0c      	ite	eq
 800aa44:	6032      	streq	r2, [r6, #0]
 800aa46:	605a      	strne	r2, [r3, #4]
 800aa48:	e7ec      	b.n	800aa24 <_malloc_r+0xa0>
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	6864      	ldr	r4, [r4, #4]
 800aa4e:	e7b2      	b.n	800a9b6 <_malloc_r+0x32>
 800aa50:	4634      	mov	r4, r6
 800aa52:	6876      	ldr	r6, [r6, #4]
 800aa54:	e7b9      	b.n	800a9ca <_malloc_r+0x46>
 800aa56:	230c      	movs	r3, #12
 800aa58:	603b      	str	r3, [r7, #0]
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	f000 f8d8 	bl	800ac10 <__malloc_unlock>
 800aa60:	e7a1      	b.n	800a9a6 <_malloc_r+0x22>
 800aa62:	6025      	str	r5, [r4, #0]
 800aa64:	e7de      	b.n	800aa24 <_malloc_r+0xa0>
 800aa66:	bf00      	nop
 800aa68:	20006104 	.word	0x20006104

0800aa6c <srand>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4b10      	ldr	r3, [pc, #64]	; (800aab0 <srand+0x44>)
 800aa70:	681d      	ldr	r5, [r3, #0]
 800aa72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aa74:	4604      	mov	r4, r0
 800aa76:	b9b3      	cbnz	r3, 800aaa6 <srand+0x3a>
 800aa78:	2018      	movs	r0, #24
 800aa7a:	f7ff fef1 	bl	800a860 <malloc>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	63a8      	str	r0, [r5, #56]	; 0x38
 800aa82:	b920      	cbnz	r0, 800aa8e <srand+0x22>
 800aa84:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <srand+0x48>)
 800aa86:	480c      	ldr	r0, [pc, #48]	; (800aab8 <srand+0x4c>)
 800aa88:	2142      	movs	r1, #66	; 0x42
 800aa8a:	f000 f88b 	bl	800aba4 <__assert_func>
 800aa8e:	490b      	ldr	r1, [pc, #44]	; (800aabc <srand+0x50>)
 800aa90:	4b0b      	ldr	r3, [pc, #44]	; (800aac0 <srand+0x54>)
 800aa92:	e9c0 1300 	strd	r1, r3, [r0]
 800aa96:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <srand+0x58>)
 800aa98:	6083      	str	r3, [r0, #8]
 800aa9a:	230b      	movs	r3, #11
 800aa9c:	8183      	strh	r3, [r0, #12]
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aaa6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	611c      	str	r4, [r3, #16]
 800aaac:	615a      	str	r2, [r3, #20]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	20000038 	.word	0x20000038
 800aab4:	08019e0c 	.word	0x08019e0c
 800aab8:	08019e23 	.word	0x08019e23
 800aabc:	abcd330e 	.word	0xabcd330e
 800aac0:	e66d1234 	.word	0xe66d1234
 800aac4:	0005deec 	.word	0x0005deec

0800aac8 <rand>:
 800aac8:	4b16      	ldr	r3, [pc, #88]	; (800ab24 <rand+0x5c>)
 800aaca:	b510      	push	{r4, lr}
 800aacc:	681c      	ldr	r4, [r3, #0]
 800aace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aad0:	b9b3      	cbnz	r3, 800ab00 <rand+0x38>
 800aad2:	2018      	movs	r0, #24
 800aad4:	f7ff fec4 	bl	800a860 <malloc>
 800aad8:	63a0      	str	r0, [r4, #56]	; 0x38
 800aada:	b928      	cbnz	r0, 800aae8 <rand+0x20>
 800aadc:	4602      	mov	r2, r0
 800aade:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <rand+0x60>)
 800aae0:	4812      	ldr	r0, [pc, #72]	; (800ab2c <rand+0x64>)
 800aae2:	214e      	movs	r1, #78	; 0x4e
 800aae4:	f000 f85e 	bl	800aba4 <__assert_func>
 800aae8:	4a11      	ldr	r2, [pc, #68]	; (800ab30 <rand+0x68>)
 800aaea:	4b12      	ldr	r3, [pc, #72]	; (800ab34 <rand+0x6c>)
 800aaec:	e9c0 2300 	strd	r2, r3, [r0]
 800aaf0:	4b11      	ldr	r3, [pc, #68]	; (800ab38 <rand+0x70>)
 800aaf2:	6083      	str	r3, [r0, #8]
 800aaf4:	230b      	movs	r3, #11
 800aaf6:	8183      	strh	r3, [r0, #12]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	2300      	movs	r3, #0
 800aafc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ab00:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ab02:	4a0e      	ldr	r2, [pc, #56]	; (800ab3c <rand+0x74>)
 800ab04:	6920      	ldr	r0, [r4, #16]
 800ab06:	6963      	ldr	r3, [r4, #20]
 800ab08:	490d      	ldr	r1, [pc, #52]	; (800ab40 <rand+0x78>)
 800ab0a:	4342      	muls	r2, r0
 800ab0c:	fb01 2203 	mla	r2, r1, r3, r2
 800ab10:	fba0 0101 	umull	r0, r1, r0, r1
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	eb42 0001 	adc.w	r0, r2, r1
 800ab1a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ab1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ab22:	bd10      	pop	{r4, pc}
 800ab24:	20000038 	.word	0x20000038
 800ab28:	08019e0c 	.word	0x08019e0c
 800ab2c:	08019e23 	.word	0x08019e23
 800ab30:	abcd330e 	.word	0xabcd330e
 800ab34:	e66d1234 	.word	0xe66d1234
 800ab38:	0005deec 	.word	0x0005deec
 800ab3c:	5851f42d 	.word	0x5851f42d
 800ab40:	4c957f2d 	.word	0x4c957f2d

0800ab44 <_sbrk_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d06      	ldr	r5, [pc, #24]	; (800ab60 <_sbrk_r+0x1c>)
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	602b      	str	r3, [r5, #0]
 800ab50:	f7f6 fdba 	bl	80016c8 <_sbrk>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_sbrk_r+0x1a>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_sbrk_r+0x1a>
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	2000610c 	.word	0x2000610c

0800ab64 <siprintf>:
 800ab64:	b40e      	push	{r1, r2, r3}
 800ab66:	b500      	push	{lr}
 800ab68:	b09c      	sub	sp, #112	; 0x70
 800ab6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ab6c:	9002      	str	r0, [sp, #8]
 800ab6e:	9006      	str	r0, [sp, #24]
 800ab70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab74:	4809      	ldr	r0, [pc, #36]	; (800ab9c <siprintf+0x38>)
 800ab76:	9107      	str	r1, [sp, #28]
 800ab78:	9104      	str	r1, [sp, #16]
 800ab7a:	4909      	ldr	r1, [pc, #36]	; (800aba0 <siprintf+0x3c>)
 800ab7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab80:	9105      	str	r1, [sp, #20]
 800ab82:	6800      	ldr	r0, [r0, #0]
 800ab84:	9301      	str	r3, [sp, #4]
 800ab86:	a902      	add	r1, sp, #8
 800ab88:	f000 f8a4 	bl	800acd4 <_svfiprintf_r>
 800ab8c:	9b02      	ldr	r3, [sp, #8]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
 800ab92:	b01c      	add	sp, #112	; 0x70
 800ab94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab98:	b003      	add	sp, #12
 800ab9a:	4770      	bx	lr
 800ab9c:	20000038 	.word	0x20000038
 800aba0:	ffff0208 	.word	0xffff0208

0800aba4 <__assert_func>:
 800aba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aba6:	4614      	mov	r4, r2
 800aba8:	461a      	mov	r2, r3
 800abaa:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <__assert_func+0x2c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4605      	mov	r5, r0
 800abb0:	68d8      	ldr	r0, [r3, #12]
 800abb2:	b14c      	cbz	r4, 800abc8 <__assert_func+0x24>
 800abb4:	4b07      	ldr	r3, [pc, #28]	; (800abd4 <__assert_func+0x30>)
 800abb6:	9100      	str	r1, [sp, #0]
 800abb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abbc:	4906      	ldr	r1, [pc, #24]	; (800abd8 <__assert_func+0x34>)
 800abbe:	462b      	mov	r3, r5
 800abc0:	f000 f80e 	bl	800abe0 <fiprintf>
 800abc4:	f000 fd34 	bl	800b630 <abort>
 800abc8:	4b04      	ldr	r3, [pc, #16]	; (800abdc <__assert_func+0x38>)
 800abca:	461c      	mov	r4, r3
 800abcc:	e7f3      	b.n	800abb6 <__assert_func+0x12>
 800abce:	bf00      	nop
 800abd0:	20000038 	.word	0x20000038
 800abd4:	08019e7e 	.word	0x08019e7e
 800abd8:	08019e8b 	.word	0x08019e8b
 800abdc:	08019eb9 	.word	0x08019eb9

0800abe0 <fiprintf>:
 800abe0:	b40e      	push	{r1, r2, r3}
 800abe2:	b503      	push	{r0, r1, lr}
 800abe4:	4601      	mov	r1, r0
 800abe6:	ab03      	add	r3, sp, #12
 800abe8:	4805      	ldr	r0, [pc, #20]	; (800ac00 <fiprintf+0x20>)
 800abea:	f853 2b04 	ldr.w	r2, [r3], #4
 800abee:	6800      	ldr	r0, [r0, #0]
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	f000 f999 	bl	800af28 <_vfiprintf_r>
 800abf6:	b002      	add	sp, #8
 800abf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abfc:	b003      	add	sp, #12
 800abfe:	4770      	bx	lr
 800ac00:	20000038 	.word	0x20000038

0800ac04 <__malloc_lock>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__malloc_lock+0x8>)
 800ac06:	f000 bed3 	b.w	800b9b0 <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	20006110 	.word	0x20006110

0800ac10 <__malloc_unlock>:
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__malloc_unlock+0x8>)
 800ac12:	f000 bece 	b.w	800b9b2 <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	20006110 	.word	0x20006110

0800ac1c <__ssputs_r>:
 800ac1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac20:	688e      	ldr	r6, [r1, #8]
 800ac22:	429e      	cmp	r6, r3
 800ac24:	4682      	mov	sl, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	4690      	mov	r8, r2
 800ac2a:	461f      	mov	r7, r3
 800ac2c:	d838      	bhi.n	800aca0 <__ssputs_r+0x84>
 800ac2e:	898a      	ldrh	r2, [r1, #12]
 800ac30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac34:	d032      	beq.n	800ac9c <__ssputs_r+0x80>
 800ac36:	6825      	ldr	r5, [r4, #0]
 800ac38:	6909      	ldr	r1, [r1, #16]
 800ac3a:	eba5 0901 	sub.w	r9, r5, r1
 800ac3e:	6965      	ldr	r5, [r4, #20]
 800ac40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac48:	3301      	adds	r3, #1
 800ac4a:	444b      	add	r3, r9
 800ac4c:	106d      	asrs	r5, r5, #1
 800ac4e:	429d      	cmp	r5, r3
 800ac50:	bf38      	it	cc
 800ac52:	461d      	movcc	r5, r3
 800ac54:	0553      	lsls	r3, r2, #21
 800ac56:	d531      	bpl.n	800acbc <__ssputs_r+0xa0>
 800ac58:	4629      	mov	r1, r5
 800ac5a:	f7ff fe93 	bl	800a984 <_malloc_r>
 800ac5e:	4606      	mov	r6, r0
 800ac60:	b950      	cbnz	r0, 800ac78 <__ssputs_r+0x5c>
 800ac62:	230c      	movs	r3, #12
 800ac64:	f8ca 3000 	str.w	r3, [sl]
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac6e:	81a3      	strh	r3, [r4, #12]
 800ac70:	f04f 30ff 	mov.w	r0, #4294967295
 800ac74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac78:	6921      	ldr	r1, [r4, #16]
 800ac7a:	464a      	mov	r2, r9
 800ac7c:	f7ff fe00 	bl	800a880 <memcpy>
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac8a:	81a3      	strh	r3, [r4, #12]
 800ac8c:	6126      	str	r6, [r4, #16]
 800ac8e:	6165      	str	r5, [r4, #20]
 800ac90:	444e      	add	r6, r9
 800ac92:	eba5 0509 	sub.w	r5, r5, r9
 800ac96:	6026      	str	r6, [r4, #0]
 800ac98:	60a5      	str	r5, [r4, #8]
 800ac9a:	463e      	mov	r6, r7
 800ac9c:	42be      	cmp	r6, r7
 800ac9e:	d900      	bls.n	800aca2 <__ssputs_r+0x86>
 800aca0:	463e      	mov	r6, r7
 800aca2:	6820      	ldr	r0, [r4, #0]
 800aca4:	4632      	mov	r2, r6
 800aca6:	4641      	mov	r1, r8
 800aca8:	f000 feea 	bl	800ba80 <memmove>
 800acac:	68a3      	ldr	r3, [r4, #8]
 800acae:	1b9b      	subs	r3, r3, r6
 800acb0:	60a3      	str	r3, [r4, #8]
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	4433      	add	r3, r6
 800acb6:	6023      	str	r3, [r4, #0]
 800acb8:	2000      	movs	r0, #0
 800acba:	e7db      	b.n	800ac74 <__ssputs_r+0x58>
 800acbc:	462a      	mov	r2, r5
 800acbe:	f000 fef9 	bl	800bab4 <_realloc_r>
 800acc2:	4606      	mov	r6, r0
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d1e1      	bne.n	800ac8c <__ssputs_r+0x70>
 800acc8:	6921      	ldr	r1, [r4, #16]
 800acca:	4650      	mov	r0, sl
 800accc:	f7ff fdee 	bl	800a8ac <_free_r>
 800acd0:	e7c7      	b.n	800ac62 <__ssputs_r+0x46>
	...

0800acd4 <_svfiprintf_r>:
 800acd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	4698      	mov	r8, r3
 800acda:	898b      	ldrh	r3, [r1, #12]
 800acdc:	061b      	lsls	r3, r3, #24
 800acde:	b09d      	sub	sp, #116	; 0x74
 800ace0:	4607      	mov	r7, r0
 800ace2:	460d      	mov	r5, r1
 800ace4:	4614      	mov	r4, r2
 800ace6:	d50e      	bpl.n	800ad06 <_svfiprintf_r+0x32>
 800ace8:	690b      	ldr	r3, [r1, #16]
 800acea:	b963      	cbnz	r3, 800ad06 <_svfiprintf_r+0x32>
 800acec:	2140      	movs	r1, #64	; 0x40
 800acee:	f7ff fe49 	bl	800a984 <_malloc_r>
 800acf2:	6028      	str	r0, [r5, #0]
 800acf4:	6128      	str	r0, [r5, #16]
 800acf6:	b920      	cbnz	r0, 800ad02 <_svfiprintf_r+0x2e>
 800acf8:	230c      	movs	r3, #12
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	e0d1      	b.n	800aea6 <_svfiprintf_r+0x1d2>
 800ad02:	2340      	movs	r3, #64	; 0x40
 800ad04:	616b      	str	r3, [r5, #20]
 800ad06:	2300      	movs	r3, #0
 800ad08:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0a:	2320      	movs	r3, #32
 800ad0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad14:	2330      	movs	r3, #48	; 0x30
 800ad16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aec0 <_svfiprintf_r+0x1ec>
 800ad1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad1e:	f04f 0901 	mov.w	r9, #1
 800ad22:	4623      	mov	r3, r4
 800ad24:	469a      	mov	sl, r3
 800ad26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad2a:	b10a      	cbz	r2, 800ad30 <_svfiprintf_r+0x5c>
 800ad2c:	2a25      	cmp	r2, #37	; 0x25
 800ad2e:	d1f9      	bne.n	800ad24 <_svfiprintf_r+0x50>
 800ad30:	ebba 0b04 	subs.w	fp, sl, r4
 800ad34:	d00b      	beq.n	800ad4e <_svfiprintf_r+0x7a>
 800ad36:	465b      	mov	r3, fp
 800ad38:	4622      	mov	r2, r4
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	f7ff ff6d 	bl	800ac1c <__ssputs_r>
 800ad42:	3001      	adds	r0, #1
 800ad44:	f000 80aa 	beq.w	800ae9c <_svfiprintf_r+0x1c8>
 800ad48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad4a:	445a      	add	r2, fp
 800ad4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f000 80a2 	beq.w	800ae9c <_svfiprintf_r+0x1c8>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad62:	f10a 0a01 	add.w	sl, sl, #1
 800ad66:	9304      	str	r3, [sp, #16]
 800ad68:	9307      	str	r3, [sp, #28]
 800ad6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad6e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad70:	4654      	mov	r4, sl
 800ad72:	2205      	movs	r2, #5
 800ad74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad78:	4851      	ldr	r0, [pc, #324]	; (800aec0 <_svfiprintf_r+0x1ec>)
 800ad7a:	f7f5 fa31 	bl	80001e0 <memchr>
 800ad7e:	9a04      	ldr	r2, [sp, #16]
 800ad80:	b9d8      	cbnz	r0, 800adba <_svfiprintf_r+0xe6>
 800ad82:	06d0      	lsls	r0, r2, #27
 800ad84:	bf44      	itt	mi
 800ad86:	2320      	movmi	r3, #32
 800ad88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad8c:	0711      	lsls	r1, r2, #28
 800ad8e:	bf44      	itt	mi
 800ad90:	232b      	movmi	r3, #43	; 0x2b
 800ad92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad96:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad9c:	d015      	beq.n	800adca <_svfiprintf_r+0xf6>
 800ad9e:	9a07      	ldr	r2, [sp, #28]
 800ada0:	4654      	mov	r4, sl
 800ada2:	2000      	movs	r0, #0
 800ada4:	f04f 0c0a 	mov.w	ip, #10
 800ada8:	4621      	mov	r1, r4
 800adaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adae:	3b30      	subs	r3, #48	; 0x30
 800adb0:	2b09      	cmp	r3, #9
 800adb2:	d94e      	bls.n	800ae52 <_svfiprintf_r+0x17e>
 800adb4:	b1b0      	cbz	r0, 800ade4 <_svfiprintf_r+0x110>
 800adb6:	9207      	str	r2, [sp, #28]
 800adb8:	e014      	b.n	800ade4 <_svfiprintf_r+0x110>
 800adba:	eba0 0308 	sub.w	r3, r0, r8
 800adbe:	fa09 f303 	lsl.w	r3, r9, r3
 800adc2:	4313      	orrs	r3, r2
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	46a2      	mov	sl, r4
 800adc8:	e7d2      	b.n	800ad70 <_svfiprintf_r+0x9c>
 800adca:	9b03      	ldr	r3, [sp, #12]
 800adcc:	1d19      	adds	r1, r3, #4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	9103      	str	r1, [sp, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	bfbb      	ittet	lt
 800add6:	425b      	neglt	r3, r3
 800add8:	f042 0202 	orrlt.w	r2, r2, #2
 800addc:	9307      	strge	r3, [sp, #28]
 800adde:	9307      	strlt	r3, [sp, #28]
 800ade0:	bfb8      	it	lt
 800ade2:	9204      	strlt	r2, [sp, #16]
 800ade4:	7823      	ldrb	r3, [r4, #0]
 800ade6:	2b2e      	cmp	r3, #46	; 0x2e
 800ade8:	d10c      	bne.n	800ae04 <_svfiprintf_r+0x130>
 800adea:	7863      	ldrb	r3, [r4, #1]
 800adec:	2b2a      	cmp	r3, #42	; 0x2a
 800adee:	d135      	bne.n	800ae5c <_svfiprintf_r+0x188>
 800adf0:	9b03      	ldr	r3, [sp, #12]
 800adf2:	1d1a      	adds	r2, r3, #4
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	9203      	str	r2, [sp, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	bfb8      	it	lt
 800adfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae00:	3402      	adds	r4, #2
 800ae02:	9305      	str	r3, [sp, #20]
 800ae04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aed0 <_svfiprintf_r+0x1fc>
 800ae08:	7821      	ldrb	r1, [r4, #0]
 800ae0a:	2203      	movs	r2, #3
 800ae0c:	4650      	mov	r0, sl
 800ae0e:	f7f5 f9e7 	bl	80001e0 <memchr>
 800ae12:	b140      	cbz	r0, 800ae26 <_svfiprintf_r+0x152>
 800ae14:	2340      	movs	r3, #64	; 0x40
 800ae16:	eba0 000a 	sub.w	r0, r0, sl
 800ae1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae1e:	9b04      	ldr	r3, [sp, #16]
 800ae20:	4303      	orrs	r3, r0
 800ae22:	3401      	adds	r4, #1
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2a:	4826      	ldr	r0, [pc, #152]	; (800aec4 <_svfiprintf_r+0x1f0>)
 800ae2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae30:	2206      	movs	r2, #6
 800ae32:	f7f5 f9d5 	bl	80001e0 <memchr>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d038      	beq.n	800aeac <_svfiprintf_r+0x1d8>
 800ae3a:	4b23      	ldr	r3, [pc, #140]	; (800aec8 <_svfiprintf_r+0x1f4>)
 800ae3c:	bb1b      	cbnz	r3, 800ae86 <_svfiprintf_r+0x1b2>
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	3307      	adds	r3, #7
 800ae42:	f023 0307 	bic.w	r3, r3, #7
 800ae46:	3308      	adds	r3, #8
 800ae48:	9303      	str	r3, [sp, #12]
 800ae4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4c:	4433      	add	r3, r6
 800ae4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae50:	e767      	b.n	800ad22 <_svfiprintf_r+0x4e>
 800ae52:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae56:	460c      	mov	r4, r1
 800ae58:	2001      	movs	r0, #1
 800ae5a:	e7a5      	b.n	800ada8 <_svfiprintf_r+0xd4>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	3401      	adds	r4, #1
 800ae60:	9305      	str	r3, [sp, #20]
 800ae62:	4619      	mov	r1, r3
 800ae64:	f04f 0c0a 	mov.w	ip, #10
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae6e:	3a30      	subs	r2, #48	; 0x30
 800ae70:	2a09      	cmp	r2, #9
 800ae72:	d903      	bls.n	800ae7c <_svfiprintf_r+0x1a8>
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0c5      	beq.n	800ae04 <_svfiprintf_r+0x130>
 800ae78:	9105      	str	r1, [sp, #20]
 800ae7a:	e7c3      	b.n	800ae04 <_svfiprintf_r+0x130>
 800ae7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae80:	4604      	mov	r4, r0
 800ae82:	2301      	movs	r3, #1
 800ae84:	e7f0      	b.n	800ae68 <_svfiprintf_r+0x194>
 800ae86:	ab03      	add	r3, sp, #12
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	462a      	mov	r2, r5
 800ae8c:	4b0f      	ldr	r3, [pc, #60]	; (800aecc <_svfiprintf_r+0x1f8>)
 800ae8e:	a904      	add	r1, sp, #16
 800ae90:	4638      	mov	r0, r7
 800ae92:	f3af 8000 	nop.w
 800ae96:	1c42      	adds	r2, r0, #1
 800ae98:	4606      	mov	r6, r0
 800ae9a:	d1d6      	bne.n	800ae4a <_svfiprintf_r+0x176>
 800ae9c:	89ab      	ldrh	r3, [r5, #12]
 800ae9e:	065b      	lsls	r3, r3, #25
 800aea0:	f53f af2c 	bmi.w	800acfc <_svfiprintf_r+0x28>
 800aea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea6:	b01d      	add	sp, #116	; 0x74
 800aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeac:	ab03      	add	r3, sp, #12
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	462a      	mov	r2, r5
 800aeb2:	4b06      	ldr	r3, [pc, #24]	; (800aecc <_svfiprintf_r+0x1f8>)
 800aeb4:	a904      	add	r1, sp, #16
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f000 f9d4 	bl	800b264 <_printf_i>
 800aebc:	e7eb      	b.n	800ae96 <_svfiprintf_r+0x1c2>
 800aebe:	bf00      	nop
 800aec0:	08019eba 	.word	0x08019eba
 800aec4:	08019ec4 	.word	0x08019ec4
 800aec8:	00000000 	.word	0x00000000
 800aecc:	0800ac1d 	.word	0x0800ac1d
 800aed0:	08019ec0 	.word	0x08019ec0

0800aed4 <__sfputc_r>:
 800aed4:	6893      	ldr	r3, [r2, #8]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	b410      	push	{r4}
 800aedc:	6093      	str	r3, [r2, #8]
 800aede:	da08      	bge.n	800aef2 <__sfputc_r+0x1e>
 800aee0:	6994      	ldr	r4, [r2, #24]
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	db01      	blt.n	800aeea <__sfputc_r+0x16>
 800aee6:	290a      	cmp	r1, #10
 800aee8:	d103      	bne.n	800aef2 <__sfputc_r+0x1e>
 800aeea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeee:	f000 badf 	b.w	800b4b0 <__swbuf_r>
 800aef2:	6813      	ldr	r3, [r2, #0]
 800aef4:	1c58      	adds	r0, r3, #1
 800aef6:	6010      	str	r0, [r2, #0]
 800aef8:	7019      	strb	r1, [r3, #0]
 800aefa:	4608      	mov	r0, r1
 800aefc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <__sfputs_r>:
 800af02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af04:	4606      	mov	r6, r0
 800af06:	460f      	mov	r7, r1
 800af08:	4614      	mov	r4, r2
 800af0a:	18d5      	adds	r5, r2, r3
 800af0c:	42ac      	cmp	r4, r5
 800af0e:	d101      	bne.n	800af14 <__sfputs_r+0x12>
 800af10:	2000      	movs	r0, #0
 800af12:	e007      	b.n	800af24 <__sfputs_r+0x22>
 800af14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af18:	463a      	mov	r2, r7
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff ffda 	bl	800aed4 <__sfputc_r>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	d1f3      	bne.n	800af0c <__sfputs_r+0xa>
 800af24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af28 <_vfiprintf_r>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	460d      	mov	r5, r1
 800af2e:	b09d      	sub	sp, #116	; 0x74
 800af30:	4614      	mov	r4, r2
 800af32:	4698      	mov	r8, r3
 800af34:	4606      	mov	r6, r0
 800af36:	b118      	cbz	r0, 800af40 <_vfiprintf_r+0x18>
 800af38:	6983      	ldr	r3, [r0, #24]
 800af3a:	b90b      	cbnz	r3, 800af40 <_vfiprintf_r+0x18>
 800af3c:	f000 fc9a 	bl	800b874 <__sinit>
 800af40:	4b89      	ldr	r3, [pc, #548]	; (800b168 <_vfiprintf_r+0x240>)
 800af42:	429d      	cmp	r5, r3
 800af44:	d11b      	bne.n	800af7e <_vfiprintf_r+0x56>
 800af46:	6875      	ldr	r5, [r6, #4]
 800af48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	d405      	bmi.n	800af5a <_vfiprintf_r+0x32>
 800af4e:	89ab      	ldrh	r3, [r5, #12]
 800af50:	059a      	lsls	r2, r3, #22
 800af52:	d402      	bmi.n	800af5a <_vfiprintf_r+0x32>
 800af54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af56:	f000 fd2b 	bl	800b9b0 <__retarget_lock_acquire_recursive>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	071b      	lsls	r3, r3, #28
 800af5e:	d501      	bpl.n	800af64 <_vfiprintf_r+0x3c>
 800af60:	692b      	ldr	r3, [r5, #16]
 800af62:	b9eb      	cbnz	r3, 800afa0 <_vfiprintf_r+0x78>
 800af64:	4629      	mov	r1, r5
 800af66:	4630      	mov	r0, r6
 800af68:	f000 faf4 	bl	800b554 <__swsetup_r>
 800af6c:	b1c0      	cbz	r0, 800afa0 <_vfiprintf_r+0x78>
 800af6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af70:	07dc      	lsls	r4, r3, #31
 800af72:	d50e      	bpl.n	800af92 <_vfiprintf_r+0x6a>
 800af74:	f04f 30ff 	mov.w	r0, #4294967295
 800af78:	b01d      	add	sp, #116	; 0x74
 800af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7e:	4b7b      	ldr	r3, [pc, #492]	; (800b16c <_vfiprintf_r+0x244>)
 800af80:	429d      	cmp	r5, r3
 800af82:	d101      	bne.n	800af88 <_vfiprintf_r+0x60>
 800af84:	68b5      	ldr	r5, [r6, #8]
 800af86:	e7df      	b.n	800af48 <_vfiprintf_r+0x20>
 800af88:	4b79      	ldr	r3, [pc, #484]	; (800b170 <_vfiprintf_r+0x248>)
 800af8a:	429d      	cmp	r5, r3
 800af8c:	bf08      	it	eq
 800af8e:	68f5      	ldreq	r5, [r6, #12]
 800af90:	e7da      	b.n	800af48 <_vfiprintf_r+0x20>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	0598      	lsls	r0, r3, #22
 800af96:	d4ed      	bmi.n	800af74 <_vfiprintf_r+0x4c>
 800af98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af9a:	f000 fd0a 	bl	800b9b2 <__retarget_lock_release_recursive>
 800af9e:	e7e9      	b.n	800af74 <_vfiprintf_r+0x4c>
 800afa0:	2300      	movs	r3, #0
 800afa2:	9309      	str	r3, [sp, #36]	; 0x24
 800afa4:	2320      	movs	r3, #32
 800afa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800afae:	2330      	movs	r3, #48	; 0x30
 800afb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b174 <_vfiprintf_r+0x24c>
 800afb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afb8:	f04f 0901 	mov.w	r9, #1
 800afbc:	4623      	mov	r3, r4
 800afbe:	469a      	mov	sl, r3
 800afc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afc4:	b10a      	cbz	r2, 800afca <_vfiprintf_r+0xa2>
 800afc6:	2a25      	cmp	r2, #37	; 0x25
 800afc8:	d1f9      	bne.n	800afbe <_vfiprintf_r+0x96>
 800afca:	ebba 0b04 	subs.w	fp, sl, r4
 800afce:	d00b      	beq.n	800afe8 <_vfiprintf_r+0xc0>
 800afd0:	465b      	mov	r3, fp
 800afd2:	4622      	mov	r2, r4
 800afd4:	4629      	mov	r1, r5
 800afd6:	4630      	mov	r0, r6
 800afd8:	f7ff ff93 	bl	800af02 <__sfputs_r>
 800afdc:	3001      	adds	r0, #1
 800afde:	f000 80aa 	beq.w	800b136 <_vfiprintf_r+0x20e>
 800afe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afe4:	445a      	add	r2, fp
 800afe6:	9209      	str	r2, [sp, #36]	; 0x24
 800afe8:	f89a 3000 	ldrb.w	r3, [sl]
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 80a2 	beq.w	800b136 <_vfiprintf_r+0x20e>
 800aff2:	2300      	movs	r3, #0
 800aff4:	f04f 32ff 	mov.w	r2, #4294967295
 800aff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800affc:	f10a 0a01 	add.w	sl, sl, #1
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	9307      	str	r3, [sp, #28]
 800b004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b008:	931a      	str	r3, [sp, #104]	; 0x68
 800b00a:	4654      	mov	r4, sl
 800b00c:	2205      	movs	r2, #5
 800b00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b012:	4858      	ldr	r0, [pc, #352]	; (800b174 <_vfiprintf_r+0x24c>)
 800b014:	f7f5 f8e4 	bl	80001e0 <memchr>
 800b018:	9a04      	ldr	r2, [sp, #16]
 800b01a:	b9d8      	cbnz	r0, 800b054 <_vfiprintf_r+0x12c>
 800b01c:	06d1      	lsls	r1, r2, #27
 800b01e:	bf44      	itt	mi
 800b020:	2320      	movmi	r3, #32
 800b022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b026:	0713      	lsls	r3, r2, #28
 800b028:	bf44      	itt	mi
 800b02a:	232b      	movmi	r3, #43	; 0x2b
 800b02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b030:	f89a 3000 	ldrb.w	r3, [sl]
 800b034:	2b2a      	cmp	r3, #42	; 0x2a
 800b036:	d015      	beq.n	800b064 <_vfiprintf_r+0x13c>
 800b038:	9a07      	ldr	r2, [sp, #28]
 800b03a:	4654      	mov	r4, sl
 800b03c:	2000      	movs	r0, #0
 800b03e:	f04f 0c0a 	mov.w	ip, #10
 800b042:	4621      	mov	r1, r4
 800b044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b048:	3b30      	subs	r3, #48	; 0x30
 800b04a:	2b09      	cmp	r3, #9
 800b04c:	d94e      	bls.n	800b0ec <_vfiprintf_r+0x1c4>
 800b04e:	b1b0      	cbz	r0, 800b07e <_vfiprintf_r+0x156>
 800b050:	9207      	str	r2, [sp, #28]
 800b052:	e014      	b.n	800b07e <_vfiprintf_r+0x156>
 800b054:	eba0 0308 	sub.w	r3, r0, r8
 800b058:	fa09 f303 	lsl.w	r3, r9, r3
 800b05c:	4313      	orrs	r3, r2
 800b05e:	9304      	str	r3, [sp, #16]
 800b060:	46a2      	mov	sl, r4
 800b062:	e7d2      	b.n	800b00a <_vfiprintf_r+0xe2>
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	1d19      	adds	r1, r3, #4
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	9103      	str	r1, [sp, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bfbb      	ittet	lt
 800b070:	425b      	neglt	r3, r3
 800b072:	f042 0202 	orrlt.w	r2, r2, #2
 800b076:	9307      	strge	r3, [sp, #28]
 800b078:	9307      	strlt	r3, [sp, #28]
 800b07a:	bfb8      	it	lt
 800b07c:	9204      	strlt	r2, [sp, #16]
 800b07e:	7823      	ldrb	r3, [r4, #0]
 800b080:	2b2e      	cmp	r3, #46	; 0x2e
 800b082:	d10c      	bne.n	800b09e <_vfiprintf_r+0x176>
 800b084:	7863      	ldrb	r3, [r4, #1]
 800b086:	2b2a      	cmp	r3, #42	; 0x2a
 800b088:	d135      	bne.n	800b0f6 <_vfiprintf_r+0x1ce>
 800b08a:	9b03      	ldr	r3, [sp, #12]
 800b08c:	1d1a      	adds	r2, r3, #4
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	9203      	str	r2, [sp, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	bfb8      	it	lt
 800b096:	f04f 33ff 	movlt.w	r3, #4294967295
 800b09a:	3402      	adds	r4, #2
 800b09c:	9305      	str	r3, [sp, #20]
 800b09e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b184 <_vfiprintf_r+0x25c>
 800b0a2:	7821      	ldrb	r1, [r4, #0]
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	f7f5 f89a 	bl	80001e0 <memchr>
 800b0ac:	b140      	cbz	r0, 800b0c0 <_vfiprintf_r+0x198>
 800b0ae:	2340      	movs	r3, #64	; 0x40
 800b0b0:	eba0 000a 	sub.w	r0, r0, sl
 800b0b4:	fa03 f000 	lsl.w	r0, r3, r0
 800b0b8:	9b04      	ldr	r3, [sp, #16]
 800b0ba:	4303      	orrs	r3, r0
 800b0bc:	3401      	adds	r4, #1
 800b0be:	9304      	str	r3, [sp, #16]
 800b0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c4:	482c      	ldr	r0, [pc, #176]	; (800b178 <_vfiprintf_r+0x250>)
 800b0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0ca:	2206      	movs	r2, #6
 800b0cc:	f7f5 f888 	bl	80001e0 <memchr>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d03f      	beq.n	800b154 <_vfiprintf_r+0x22c>
 800b0d4:	4b29      	ldr	r3, [pc, #164]	; (800b17c <_vfiprintf_r+0x254>)
 800b0d6:	bb1b      	cbnz	r3, 800b120 <_vfiprintf_r+0x1f8>
 800b0d8:	9b03      	ldr	r3, [sp, #12]
 800b0da:	3307      	adds	r3, #7
 800b0dc:	f023 0307 	bic.w	r3, r3, #7
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	9303      	str	r3, [sp, #12]
 800b0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e6:	443b      	add	r3, r7
 800b0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ea:	e767      	b.n	800afbc <_vfiprintf_r+0x94>
 800b0ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0f0:	460c      	mov	r4, r1
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	e7a5      	b.n	800b042 <_vfiprintf_r+0x11a>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	3401      	adds	r4, #1
 800b0fa:	9305      	str	r3, [sp, #20]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f04f 0c0a 	mov.w	ip, #10
 800b102:	4620      	mov	r0, r4
 800b104:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b108:	3a30      	subs	r2, #48	; 0x30
 800b10a:	2a09      	cmp	r2, #9
 800b10c:	d903      	bls.n	800b116 <_vfiprintf_r+0x1ee>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d0c5      	beq.n	800b09e <_vfiprintf_r+0x176>
 800b112:	9105      	str	r1, [sp, #20]
 800b114:	e7c3      	b.n	800b09e <_vfiprintf_r+0x176>
 800b116:	fb0c 2101 	mla	r1, ip, r1, r2
 800b11a:	4604      	mov	r4, r0
 800b11c:	2301      	movs	r3, #1
 800b11e:	e7f0      	b.n	800b102 <_vfiprintf_r+0x1da>
 800b120:	ab03      	add	r3, sp, #12
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	462a      	mov	r2, r5
 800b126:	4b16      	ldr	r3, [pc, #88]	; (800b180 <_vfiprintf_r+0x258>)
 800b128:	a904      	add	r1, sp, #16
 800b12a:	4630      	mov	r0, r6
 800b12c:	f3af 8000 	nop.w
 800b130:	4607      	mov	r7, r0
 800b132:	1c78      	adds	r0, r7, #1
 800b134:	d1d6      	bne.n	800b0e4 <_vfiprintf_r+0x1bc>
 800b136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b138:	07d9      	lsls	r1, r3, #31
 800b13a:	d405      	bmi.n	800b148 <_vfiprintf_r+0x220>
 800b13c:	89ab      	ldrh	r3, [r5, #12]
 800b13e:	059a      	lsls	r2, r3, #22
 800b140:	d402      	bmi.n	800b148 <_vfiprintf_r+0x220>
 800b142:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b144:	f000 fc35 	bl	800b9b2 <__retarget_lock_release_recursive>
 800b148:	89ab      	ldrh	r3, [r5, #12]
 800b14a:	065b      	lsls	r3, r3, #25
 800b14c:	f53f af12 	bmi.w	800af74 <_vfiprintf_r+0x4c>
 800b150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b152:	e711      	b.n	800af78 <_vfiprintf_r+0x50>
 800b154:	ab03      	add	r3, sp, #12
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	462a      	mov	r2, r5
 800b15a:	4b09      	ldr	r3, [pc, #36]	; (800b180 <_vfiprintf_r+0x258>)
 800b15c:	a904      	add	r1, sp, #16
 800b15e:	4630      	mov	r0, r6
 800b160:	f000 f880 	bl	800b264 <_printf_i>
 800b164:	e7e4      	b.n	800b130 <_vfiprintf_r+0x208>
 800b166:	bf00      	nop
 800b168:	08019f10 	.word	0x08019f10
 800b16c:	08019f30 	.word	0x08019f30
 800b170:	08019ef0 	.word	0x08019ef0
 800b174:	08019eba 	.word	0x08019eba
 800b178:	08019ec4 	.word	0x08019ec4
 800b17c:	00000000 	.word	0x00000000
 800b180:	0800af03 	.word	0x0800af03
 800b184:	08019ec0 	.word	0x08019ec0

0800b188 <_printf_common>:
 800b188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b18c:	4616      	mov	r6, r2
 800b18e:	4699      	mov	r9, r3
 800b190:	688a      	ldr	r2, [r1, #8]
 800b192:	690b      	ldr	r3, [r1, #16]
 800b194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b198:	4293      	cmp	r3, r2
 800b19a:	bfb8      	it	lt
 800b19c:	4613      	movlt	r3, r2
 800b19e:	6033      	str	r3, [r6, #0]
 800b1a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	b10a      	cbz	r2, 800b1ae <_printf_common+0x26>
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	6033      	str	r3, [r6, #0]
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	0699      	lsls	r1, r3, #26
 800b1b2:	bf42      	ittt	mi
 800b1b4:	6833      	ldrmi	r3, [r6, #0]
 800b1b6:	3302      	addmi	r3, #2
 800b1b8:	6033      	strmi	r3, [r6, #0]
 800b1ba:	6825      	ldr	r5, [r4, #0]
 800b1bc:	f015 0506 	ands.w	r5, r5, #6
 800b1c0:	d106      	bne.n	800b1d0 <_printf_common+0x48>
 800b1c2:	f104 0a19 	add.w	sl, r4, #25
 800b1c6:	68e3      	ldr	r3, [r4, #12]
 800b1c8:	6832      	ldr	r2, [r6, #0]
 800b1ca:	1a9b      	subs	r3, r3, r2
 800b1cc:	42ab      	cmp	r3, r5
 800b1ce:	dc26      	bgt.n	800b21e <_printf_common+0x96>
 800b1d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1d4:	1e13      	subs	r3, r2, #0
 800b1d6:	6822      	ldr	r2, [r4, #0]
 800b1d8:	bf18      	it	ne
 800b1da:	2301      	movne	r3, #1
 800b1dc:	0692      	lsls	r2, r2, #26
 800b1de:	d42b      	bmi.n	800b238 <_printf_common+0xb0>
 800b1e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	47c0      	blx	r8
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d01e      	beq.n	800b22c <_printf_common+0xa4>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	68e5      	ldr	r5, [r4, #12]
 800b1f2:	6832      	ldr	r2, [r6, #0]
 800b1f4:	f003 0306 	and.w	r3, r3, #6
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	bf08      	it	eq
 800b1fc:	1aad      	subeq	r5, r5, r2
 800b1fe:	68a3      	ldr	r3, [r4, #8]
 800b200:	6922      	ldr	r2, [r4, #16]
 800b202:	bf0c      	ite	eq
 800b204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b208:	2500      	movne	r5, #0
 800b20a:	4293      	cmp	r3, r2
 800b20c:	bfc4      	itt	gt
 800b20e:	1a9b      	subgt	r3, r3, r2
 800b210:	18ed      	addgt	r5, r5, r3
 800b212:	2600      	movs	r6, #0
 800b214:	341a      	adds	r4, #26
 800b216:	42b5      	cmp	r5, r6
 800b218:	d11a      	bne.n	800b250 <_printf_common+0xc8>
 800b21a:	2000      	movs	r0, #0
 800b21c:	e008      	b.n	800b230 <_printf_common+0xa8>
 800b21e:	2301      	movs	r3, #1
 800b220:	4652      	mov	r2, sl
 800b222:	4649      	mov	r1, r9
 800b224:	4638      	mov	r0, r7
 800b226:	47c0      	blx	r8
 800b228:	3001      	adds	r0, #1
 800b22a:	d103      	bne.n	800b234 <_printf_common+0xac>
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b234:	3501      	adds	r5, #1
 800b236:	e7c6      	b.n	800b1c6 <_printf_common+0x3e>
 800b238:	18e1      	adds	r1, r4, r3
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	2030      	movs	r0, #48	; 0x30
 800b23e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b242:	4422      	add	r2, r4
 800b244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b24c:	3302      	adds	r3, #2
 800b24e:	e7c7      	b.n	800b1e0 <_printf_common+0x58>
 800b250:	2301      	movs	r3, #1
 800b252:	4622      	mov	r2, r4
 800b254:	4649      	mov	r1, r9
 800b256:	4638      	mov	r0, r7
 800b258:	47c0      	blx	r8
 800b25a:	3001      	adds	r0, #1
 800b25c:	d0e6      	beq.n	800b22c <_printf_common+0xa4>
 800b25e:	3601      	adds	r6, #1
 800b260:	e7d9      	b.n	800b216 <_printf_common+0x8e>
	...

0800b264 <_printf_i>:
 800b264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	7e0f      	ldrb	r7, [r1, #24]
 800b26a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b26c:	2f78      	cmp	r7, #120	; 0x78
 800b26e:	4691      	mov	r9, r2
 800b270:	4680      	mov	r8, r0
 800b272:	460c      	mov	r4, r1
 800b274:	469a      	mov	sl, r3
 800b276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b27a:	d807      	bhi.n	800b28c <_printf_i+0x28>
 800b27c:	2f62      	cmp	r7, #98	; 0x62
 800b27e:	d80a      	bhi.n	800b296 <_printf_i+0x32>
 800b280:	2f00      	cmp	r7, #0
 800b282:	f000 80d8 	beq.w	800b436 <_printf_i+0x1d2>
 800b286:	2f58      	cmp	r7, #88	; 0x58
 800b288:	f000 80a3 	beq.w	800b3d2 <_printf_i+0x16e>
 800b28c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b294:	e03a      	b.n	800b30c <_printf_i+0xa8>
 800b296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b29a:	2b15      	cmp	r3, #21
 800b29c:	d8f6      	bhi.n	800b28c <_printf_i+0x28>
 800b29e:	a101      	add	r1, pc, #4	; (adr r1, 800b2a4 <_printf_i+0x40>)
 800b2a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2a4:	0800b2fd 	.word	0x0800b2fd
 800b2a8:	0800b311 	.word	0x0800b311
 800b2ac:	0800b28d 	.word	0x0800b28d
 800b2b0:	0800b28d 	.word	0x0800b28d
 800b2b4:	0800b28d 	.word	0x0800b28d
 800b2b8:	0800b28d 	.word	0x0800b28d
 800b2bc:	0800b311 	.word	0x0800b311
 800b2c0:	0800b28d 	.word	0x0800b28d
 800b2c4:	0800b28d 	.word	0x0800b28d
 800b2c8:	0800b28d 	.word	0x0800b28d
 800b2cc:	0800b28d 	.word	0x0800b28d
 800b2d0:	0800b41d 	.word	0x0800b41d
 800b2d4:	0800b341 	.word	0x0800b341
 800b2d8:	0800b3ff 	.word	0x0800b3ff
 800b2dc:	0800b28d 	.word	0x0800b28d
 800b2e0:	0800b28d 	.word	0x0800b28d
 800b2e4:	0800b43f 	.word	0x0800b43f
 800b2e8:	0800b28d 	.word	0x0800b28d
 800b2ec:	0800b341 	.word	0x0800b341
 800b2f0:	0800b28d 	.word	0x0800b28d
 800b2f4:	0800b28d 	.word	0x0800b28d
 800b2f8:	0800b407 	.word	0x0800b407
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	1d1a      	adds	r2, r3, #4
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	602a      	str	r2, [r5, #0]
 800b304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b30c:	2301      	movs	r3, #1
 800b30e:	e0a3      	b.n	800b458 <_printf_i+0x1f4>
 800b310:	6820      	ldr	r0, [r4, #0]
 800b312:	6829      	ldr	r1, [r5, #0]
 800b314:	0606      	lsls	r6, r0, #24
 800b316:	f101 0304 	add.w	r3, r1, #4
 800b31a:	d50a      	bpl.n	800b332 <_printf_i+0xce>
 800b31c:	680e      	ldr	r6, [r1, #0]
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	2e00      	cmp	r6, #0
 800b322:	da03      	bge.n	800b32c <_printf_i+0xc8>
 800b324:	232d      	movs	r3, #45	; 0x2d
 800b326:	4276      	negs	r6, r6
 800b328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b32c:	485e      	ldr	r0, [pc, #376]	; (800b4a8 <_printf_i+0x244>)
 800b32e:	230a      	movs	r3, #10
 800b330:	e019      	b.n	800b366 <_printf_i+0x102>
 800b332:	680e      	ldr	r6, [r1, #0]
 800b334:	602b      	str	r3, [r5, #0]
 800b336:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b33a:	bf18      	it	ne
 800b33c:	b236      	sxthne	r6, r6
 800b33e:	e7ef      	b.n	800b320 <_printf_i+0xbc>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	6820      	ldr	r0, [r4, #0]
 800b344:	1d19      	adds	r1, r3, #4
 800b346:	6029      	str	r1, [r5, #0]
 800b348:	0601      	lsls	r1, r0, #24
 800b34a:	d501      	bpl.n	800b350 <_printf_i+0xec>
 800b34c:	681e      	ldr	r6, [r3, #0]
 800b34e:	e002      	b.n	800b356 <_printf_i+0xf2>
 800b350:	0646      	lsls	r6, r0, #25
 800b352:	d5fb      	bpl.n	800b34c <_printf_i+0xe8>
 800b354:	881e      	ldrh	r6, [r3, #0]
 800b356:	4854      	ldr	r0, [pc, #336]	; (800b4a8 <_printf_i+0x244>)
 800b358:	2f6f      	cmp	r7, #111	; 0x6f
 800b35a:	bf0c      	ite	eq
 800b35c:	2308      	moveq	r3, #8
 800b35e:	230a      	movne	r3, #10
 800b360:	2100      	movs	r1, #0
 800b362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b366:	6865      	ldr	r5, [r4, #4]
 800b368:	60a5      	str	r5, [r4, #8]
 800b36a:	2d00      	cmp	r5, #0
 800b36c:	bfa2      	ittt	ge
 800b36e:	6821      	ldrge	r1, [r4, #0]
 800b370:	f021 0104 	bicge.w	r1, r1, #4
 800b374:	6021      	strge	r1, [r4, #0]
 800b376:	b90e      	cbnz	r6, 800b37c <_printf_i+0x118>
 800b378:	2d00      	cmp	r5, #0
 800b37a:	d04d      	beq.n	800b418 <_printf_i+0x1b4>
 800b37c:	4615      	mov	r5, r2
 800b37e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b382:	fb03 6711 	mls	r7, r3, r1, r6
 800b386:	5dc7      	ldrb	r7, [r0, r7]
 800b388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b38c:	4637      	mov	r7, r6
 800b38e:	42bb      	cmp	r3, r7
 800b390:	460e      	mov	r6, r1
 800b392:	d9f4      	bls.n	800b37e <_printf_i+0x11a>
 800b394:	2b08      	cmp	r3, #8
 800b396:	d10b      	bne.n	800b3b0 <_printf_i+0x14c>
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	07de      	lsls	r6, r3, #31
 800b39c:	d508      	bpl.n	800b3b0 <_printf_i+0x14c>
 800b39e:	6923      	ldr	r3, [r4, #16]
 800b3a0:	6861      	ldr	r1, [r4, #4]
 800b3a2:	4299      	cmp	r1, r3
 800b3a4:	bfde      	ittt	le
 800b3a6:	2330      	movle	r3, #48	; 0x30
 800b3a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3b0:	1b52      	subs	r2, r2, r5
 800b3b2:	6122      	str	r2, [r4, #16]
 800b3b4:	f8cd a000 	str.w	sl, [sp]
 800b3b8:	464b      	mov	r3, r9
 800b3ba:	aa03      	add	r2, sp, #12
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4640      	mov	r0, r8
 800b3c0:	f7ff fee2 	bl	800b188 <_printf_common>
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d14c      	bne.n	800b462 <_printf_i+0x1fe>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	b004      	add	sp, #16
 800b3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d2:	4835      	ldr	r0, [pc, #212]	; (800b4a8 <_printf_i+0x244>)
 800b3d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b3d8:	6829      	ldr	r1, [r5, #0]
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3e0:	6029      	str	r1, [r5, #0]
 800b3e2:	061d      	lsls	r5, r3, #24
 800b3e4:	d514      	bpl.n	800b410 <_printf_i+0x1ac>
 800b3e6:	07df      	lsls	r7, r3, #31
 800b3e8:	bf44      	itt	mi
 800b3ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b3ee:	6023      	strmi	r3, [r4, #0]
 800b3f0:	b91e      	cbnz	r6, 800b3fa <_printf_i+0x196>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	f023 0320 	bic.w	r3, r3, #32
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	2310      	movs	r3, #16
 800b3fc:	e7b0      	b.n	800b360 <_printf_i+0xfc>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	f043 0320 	orr.w	r3, r3, #32
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	2378      	movs	r3, #120	; 0x78
 800b408:	4828      	ldr	r0, [pc, #160]	; (800b4ac <_printf_i+0x248>)
 800b40a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b40e:	e7e3      	b.n	800b3d8 <_printf_i+0x174>
 800b410:	0659      	lsls	r1, r3, #25
 800b412:	bf48      	it	mi
 800b414:	b2b6      	uxthmi	r6, r6
 800b416:	e7e6      	b.n	800b3e6 <_printf_i+0x182>
 800b418:	4615      	mov	r5, r2
 800b41a:	e7bb      	b.n	800b394 <_printf_i+0x130>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	6826      	ldr	r6, [r4, #0]
 800b420:	6961      	ldr	r1, [r4, #20]
 800b422:	1d18      	adds	r0, r3, #4
 800b424:	6028      	str	r0, [r5, #0]
 800b426:	0635      	lsls	r5, r6, #24
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	d501      	bpl.n	800b430 <_printf_i+0x1cc>
 800b42c:	6019      	str	r1, [r3, #0]
 800b42e:	e002      	b.n	800b436 <_printf_i+0x1d2>
 800b430:	0670      	lsls	r0, r6, #25
 800b432:	d5fb      	bpl.n	800b42c <_printf_i+0x1c8>
 800b434:	8019      	strh	r1, [r3, #0]
 800b436:	2300      	movs	r3, #0
 800b438:	6123      	str	r3, [r4, #16]
 800b43a:	4615      	mov	r5, r2
 800b43c:	e7ba      	b.n	800b3b4 <_printf_i+0x150>
 800b43e:	682b      	ldr	r3, [r5, #0]
 800b440:	1d1a      	adds	r2, r3, #4
 800b442:	602a      	str	r2, [r5, #0]
 800b444:	681d      	ldr	r5, [r3, #0]
 800b446:	6862      	ldr	r2, [r4, #4]
 800b448:	2100      	movs	r1, #0
 800b44a:	4628      	mov	r0, r5
 800b44c:	f7f4 fec8 	bl	80001e0 <memchr>
 800b450:	b108      	cbz	r0, 800b456 <_printf_i+0x1f2>
 800b452:	1b40      	subs	r0, r0, r5
 800b454:	6060      	str	r0, [r4, #4]
 800b456:	6863      	ldr	r3, [r4, #4]
 800b458:	6123      	str	r3, [r4, #16]
 800b45a:	2300      	movs	r3, #0
 800b45c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b460:	e7a8      	b.n	800b3b4 <_printf_i+0x150>
 800b462:	6923      	ldr	r3, [r4, #16]
 800b464:	462a      	mov	r2, r5
 800b466:	4649      	mov	r1, r9
 800b468:	4640      	mov	r0, r8
 800b46a:	47d0      	blx	sl
 800b46c:	3001      	adds	r0, #1
 800b46e:	d0ab      	beq.n	800b3c8 <_printf_i+0x164>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	079b      	lsls	r3, r3, #30
 800b474:	d413      	bmi.n	800b49e <_printf_i+0x23a>
 800b476:	68e0      	ldr	r0, [r4, #12]
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	4298      	cmp	r0, r3
 800b47c:	bfb8      	it	lt
 800b47e:	4618      	movlt	r0, r3
 800b480:	e7a4      	b.n	800b3cc <_printf_i+0x168>
 800b482:	2301      	movs	r3, #1
 800b484:	4632      	mov	r2, r6
 800b486:	4649      	mov	r1, r9
 800b488:	4640      	mov	r0, r8
 800b48a:	47d0      	blx	sl
 800b48c:	3001      	adds	r0, #1
 800b48e:	d09b      	beq.n	800b3c8 <_printf_i+0x164>
 800b490:	3501      	adds	r5, #1
 800b492:	68e3      	ldr	r3, [r4, #12]
 800b494:	9903      	ldr	r1, [sp, #12]
 800b496:	1a5b      	subs	r3, r3, r1
 800b498:	42ab      	cmp	r3, r5
 800b49a:	dcf2      	bgt.n	800b482 <_printf_i+0x21e>
 800b49c:	e7eb      	b.n	800b476 <_printf_i+0x212>
 800b49e:	2500      	movs	r5, #0
 800b4a0:	f104 0619 	add.w	r6, r4, #25
 800b4a4:	e7f5      	b.n	800b492 <_printf_i+0x22e>
 800b4a6:	bf00      	nop
 800b4a8:	08019ecb 	.word	0x08019ecb
 800b4ac:	08019edc 	.word	0x08019edc

0800b4b0 <__swbuf_r>:
 800b4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b2:	460e      	mov	r6, r1
 800b4b4:	4614      	mov	r4, r2
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	b118      	cbz	r0, 800b4c2 <__swbuf_r+0x12>
 800b4ba:	6983      	ldr	r3, [r0, #24]
 800b4bc:	b90b      	cbnz	r3, 800b4c2 <__swbuf_r+0x12>
 800b4be:	f000 f9d9 	bl	800b874 <__sinit>
 800b4c2:	4b21      	ldr	r3, [pc, #132]	; (800b548 <__swbuf_r+0x98>)
 800b4c4:	429c      	cmp	r4, r3
 800b4c6:	d12b      	bne.n	800b520 <__swbuf_r+0x70>
 800b4c8:	686c      	ldr	r4, [r5, #4]
 800b4ca:	69a3      	ldr	r3, [r4, #24]
 800b4cc:	60a3      	str	r3, [r4, #8]
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	071a      	lsls	r2, r3, #28
 800b4d2:	d52f      	bpl.n	800b534 <__swbuf_r+0x84>
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	b36b      	cbz	r3, 800b534 <__swbuf_r+0x84>
 800b4d8:	6923      	ldr	r3, [r4, #16]
 800b4da:	6820      	ldr	r0, [r4, #0]
 800b4dc:	1ac0      	subs	r0, r0, r3
 800b4de:	6963      	ldr	r3, [r4, #20]
 800b4e0:	b2f6      	uxtb	r6, r6
 800b4e2:	4283      	cmp	r3, r0
 800b4e4:	4637      	mov	r7, r6
 800b4e6:	dc04      	bgt.n	800b4f2 <__swbuf_r+0x42>
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f000 f92e 	bl	800b74c <_fflush_r>
 800b4f0:	bb30      	cbnz	r0, 800b540 <__swbuf_r+0x90>
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	60a3      	str	r3, [r4, #8]
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	6022      	str	r2, [r4, #0]
 800b4fe:	701e      	strb	r6, [r3, #0]
 800b500:	6963      	ldr	r3, [r4, #20]
 800b502:	3001      	adds	r0, #1
 800b504:	4283      	cmp	r3, r0
 800b506:	d004      	beq.n	800b512 <__swbuf_r+0x62>
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	07db      	lsls	r3, r3, #31
 800b50c:	d506      	bpl.n	800b51c <__swbuf_r+0x6c>
 800b50e:	2e0a      	cmp	r6, #10
 800b510:	d104      	bne.n	800b51c <__swbuf_r+0x6c>
 800b512:	4621      	mov	r1, r4
 800b514:	4628      	mov	r0, r5
 800b516:	f000 f919 	bl	800b74c <_fflush_r>
 800b51a:	b988      	cbnz	r0, 800b540 <__swbuf_r+0x90>
 800b51c:	4638      	mov	r0, r7
 800b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b520:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <__swbuf_r+0x9c>)
 800b522:	429c      	cmp	r4, r3
 800b524:	d101      	bne.n	800b52a <__swbuf_r+0x7a>
 800b526:	68ac      	ldr	r4, [r5, #8]
 800b528:	e7cf      	b.n	800b4ca <__swbuf_r+0x1a>
 800b52a:	4b09      	ldr	r3, [pc, #36]	; (800b550 <__swbuf_r+0xa0>)
 800b52c:	429c      	cmp	r4, r3
 800b52e:	bf08      	it	eq
 800b530:	68ec      	ldreq	r4, [r5, #12]
 800b532:	e7ca      	b.n	800b4ca <__swbuf_r+0x1a>
 800b534:	4621      	mov	r1, r4
 800b536:	4628      	mov	r0, r5
 800b538:	f000 f80c 	bl	800b554 <__swsetup_r>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d0cb      	beq.n	800b4d8 <__swbuf_r+0x28>
 800b540:	f04f 37ff 	mov.w	r7, #4294967295
 800b544:	e7ea      	b.n	800b51c <__swbuf_r+0x6c>
 800b546:	bf00      	nop
 800b548:	08019f10 	.word	0x08019f10
 800b54c:	08019f30 	.word	0x08019f30
 800b550:	08019ef0 	.word	0x08019ef0

0800b554 <__swsetup_r>:
 800b554:	4b32      	ldr	r3, [pc, #200]	; (800b620 <__swsetup_r+0xcc>)
 800b556:	b570      	push	{r4, r5, r6, lr}
 800b558:	681d      	ldr	r5, [r3, #0]
 800b55a:	4606      	mov	r6, r0
 800b55c:	460c      	mov	r4, r1
 800b55e:	b125      	cbz	r5, 800b56a <__swsetup_r+0x16>
 800b560:	69ab      	ldr	r3, [r5, #24]
 800b562:	b913      	cbnz	r3, 800b56a <__swsetup_r+0x16>
 800b564:	4628      	mov	r0, r5
 800b566:	f000 f985 	bl	800b874 <__sinit>
 800b56a:	4b2e      	ldr	r3, [pc, #184]	; (800b624 <__swsetup_r+0xd0>)
 800b56c:	429c      	cmp	r4, r3
 800b56e:	d10f      	bne.n	800b590 <__swsetup_r+0x3c>
 800b570:	686c      	ldr	r4, [r5, #4]
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b578:	0719      	lsls	r1, r3, #28
 800b57a:	d42c      	bmi.n	800b5d6 <__swsetup_r+0x82>
 800b57c:	06dd      	lsls	r5, r3, #27
 800b57e:	d411      	bmi.n	800b5a4 <__swsetup_r+0x50>
 800b580:	2309      	movs	r3, #9
 800b582:	6033      	str	r3, [r6, #0]
 800b584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b588:	81a3      	strh	r3, [r4, #12]
 800b58a:	f04f 30ff 	mov.w	r0, #4294967295
 800b58e:	e03e      	b.n	800b60e <__swsetup_r+0xba>
 800b590:	4b25      	ldr	r3, [pc, #148]	; (800b628 <__swsetup_r+0xd4>)
 800b592:	429c      	cmp	r4, r3
 800b594:	d101      	bne.n	800b59a <__swsetup_r+0x46>
 800b596:	68ac      	ldr	r4, [r5, #8]
 800b598:	e7eb      	b.n	800b572 <__swsetup_r+0x1e>
 800b59a:	4b24      	ldr	r3, [pc, #144]	; (800b62c <__swsetup_r+0xd8>)
 800b59c:	429c      	cmp	r4, r3
 800b59e:	bf08      	it	eq
 800b5a0:	68ec      	ldreq	r4, [r5, #12]
 800b5a2:	e7e6      	b.n	800b572 <__swsetup_r+0x1e>
 800b5a4:	0758      	lsls	r0, r3, #29
 800b5a6:	d512      	bpl.n	800b5ce <__swsetup_r+0x7a>
 800b5a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5aa:	b141      	cbz	r1, 800b5be <__swsetup_r+0x6a>
 800b5ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b0:	4299      	cmp	r1, r3
 800b5b2:	d002      	beq.n	800b5ba <__swsetup_r+0x66>
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7ff f979 	bl	800a8ac <_free_r>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	6363      	str	r3, [r4, #52]	; 0x34
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5c4:	81a3      	strh	r3, [r4, #12]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	6063      	str	r3, [r4, #4]
 800b5ca:	6923      	ldr	r3, [r4, #16]
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	f043 0308 	orr.w	r3, r3, #8
 800b5d4:	81a3      	strh	r3, [r4, #12]
 800b5d6:	6923      	ldr	r3, [r4, #16]
 800b5d8:	b94b      	cbnz	r3, 800b5ee <__swsetup_r+0x9a>
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e4:	d003      	beq.n	800b5ee <__swsetup_r+0x9a>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f000 fa09 	bl	800ba00 <__smakebuf_r>
 800b5ee:	89a0      	ldrh	r0, [r4, #12]
 800b5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5f4:	f010 0301 	ands.w	r3, r0, #1
 800b5f8:	d00a      	beq.n	800b610 <__swsetup_r+0xbc>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60a3      	str	r3, [r4, #8]
 800b5fe:	6963      	ldr	r3, [r4, #20]
 800b600:	425b      	negs	r3, r3
 800b602:	61a3      	str	r3, [r4, #24]
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	b943      	cbnz	r3, 800b61a <__swsetup_r+0xc6>
 800b608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b60c:	d1ba      	bne.n	800b584 <__swsetup_r+0x30>
 800b60e:	bd70      	pop	{r4, r5, r6, pc}
 800b610:	0781      	lsls	r1, r0, #30
 800b612:	bf58      	it	pl
 800b614:	6963      	ldrpl	r3, [r4, #20]
 800b616:	60a3      	str	r3, [r4, #8]
 800b618:	e7f4      	b.n	800b604 <__swsetup_r+0xb0>
 800b61a:	2000      	movs	r0, #0
 800b61c:	e7f7      	b.n	800b60e <__swsetup_r+0xba>
 800b61e:	bf00      	nop
 800b620:	20000038 	.word	0x20000038
 800b624:	08019f10 	.word	0x08019f10
 800b628:	08019f30 	.word	0x08019f30
 800b62c:	08019ef0 	.word	0x08019ef0

0800b630 <abort>:
 800b630:	b508      	push	{r3, lr}
 800b632:	2006      	movs	r0, #6
 800b634:	f000 fa96 	bl	800bb64 <raise>
 800b638:	2001      	movs	r0, #1
 800b63a:	f7f5 ffcd 	bl	80015d8 <_exit>
	...

0800b640 <__sflush_r>:
 800b640:	898a      	ldrh	r2, [r1, #12]
 800b642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b646:	4605      	mov	r5, r0
 800b648:	0710      	lsls	r0, r2, #28
 800b64a:	460c      	mov	r4, r1
 800b64c:	d458      	bmi.n	800b700 <__sflush_r+0xc0>
 800b64e:	684b      	ldr	r3, [r1, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc05      	bgt.n	800b660 <__sflush_r+0x20>
 800b654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b656:	2b00      	cmp	r3, #0
 800b658:	dc02      	bgt.n	800b660 <__sflush_r+0x20>
 800b65a:	2000      	movs	r0, #0
 800b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b662:	2e00      	cmp	r6, #0
 800b664:	d0f9      	beq.n	800b65a <__sflush_r+0x1a>
 800b666:	2300      	movs	r3, #0
 800b668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b66c:	682f      	ldr	r7, [r5, #0]
 800b66e:	602b      	str	r3, [r5, #0]
 800b670:	d032      	beq.n	800b6d8 <__sflush_r+0x98>
 800b672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	075a      	lsls	r2, r3, #29
 800b678:	d505      	bpl.n	800b686 <__sflush_r+0x46>
 800b67a:	6863      	ldr	r3, [r4, #4]
 800b67c:	1ac0      	subs	r0, r0, r3
 800b67e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b680:	b10b      	cbz	r3, 800b686 <__sflush_r+0x46>
 800b682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b684:	1ac0      	subs	r0, r0, r3
 800b686:	2300      	movs	r3, #0
 800b688:	4602      	mov	r2, r0
 800b68a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b68c:	6a21      	ldr	r1, [r4, #32]
 800b68e:	4628      	mov	r0, r5
 800b690:	47b0      	blx	r6
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	d106      	bne.n	800b6a6 <__sflush_r+0x66>
 800b698:	6829      	ldr	r1, [r5, #0]
 800b69a:	291d      	cmp	r1, #29
 800b69c:	d82c      	bhi.n	800b6f8 <__sflush_r+0xb8>
 800b69e:	4a2a      	ldr	r2, [pc, #168]	; (800b748 <__sflush_r+0x108>)
 800b6a0:	40ca      	lsrs	r2, r1
 800b6a2:	07d6      	lsls	r6, r2, #31
 800b6a4:	d528      	bpl.n	800b6f8 <__sflush_r+0xb8>
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	6062      	str	r2, [r4, #4]
 800b6aa:	04d9      	lsls	r1, r3, #19
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	6022      	str	r2, [r4, #0]
 800b6b0:	d504      	bpl.n	800b6bc <__sflush_r+0x7c>
 800b6b2:	1c42      	adds	r2, r0, #1
 800b6b4:	d101      	bne.n	800b6ba <__sflush_r+0x7a>
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	b903      	cbnz	r3, 800b6bc <__sflush_r+0x7c>
 800b6ba:	6560      	str	r0, [r4, #84]	; 0x54
 800b6bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6be:	602f      	str	r7, [r5, #0]
 800b6c0:	2900      	cmp	r1, #0
 800b6c2:	d0ca      	beq.n	800b65a <__sflush_r+0x1a>
 800b6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6c8:	4299      	cmp	r1, r3
 800b6ca:	d002      	beq.n	800b6d2 <__sflush_r+0x92>
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f7ff f8ed 	bl	800a8ac <_free_r>
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b6d6:	e7c1      	b.n	800b65c <__sflush_r+0x1c>
 800b6d8:	6a21      	ldr	r1, [r4, #32]
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b0      	blx	r6
 800b6e0:	1c41      	adds	r1, r0, #1
 800b6e2:	d1c7      	bne.n	800b674 <__sflush_r+0x34>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0c4      	beq.n	800b674 <__sflush_r+0x34>
 800b6ea:	2b1d      	cmp	r3, #29
 800b6ec:	d001      	beq.n	800b6f2 <__sflush_r+0xb2>
 800b6ee:	2b16      	cmp	r3, #22
 800b6f0:	d101      	bne.n	800b6f6 <__sflush_r+0xb6>
 800b6f2:	602f      	str	r7, [r5, #0]
 800b6f4:	e7b1      	b.n	800b65a <__sflush_r+0x1a>
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	e7ad      	b.n	800b65c <__sflush_r+0x1c>
 800b700:	690f      	ldr	r7, [r1, #16]
 800b702:	2f00      	cmp	r7, #0
 800b704:	d0a9      	beq.n	800b65a <__sflush_r+0x1a>
 800b706:	0793      	lsls	r3, r2, #30
 800b708:	680e      	ldr	r6, [r1, #0]
 800b70a:	bf08      	it	eq
 800b70c:	694b      	ldreq	r3, [r1, #20]
 800b70e:	600f      	str	r7, [r1, #0]
 800b710:	bf18      	it	ne
 800b712:	2300      	movne	r3, #0
 800b714:	eba6 0807 	sub.w	r8, r6, r7
 800b718:	608b      	str	r3, [r1, #8]
 800b71a:	f1b8 0f00 	cmp.w	r8, #0
 800b71e:	dd9c      	ble.n	800b65a <__sflush_r+0x1a>
 800b720:	6a21      	ldr	r1, [r4, #32]
 800b722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b724:	4643      	mov	r3, r8
 800b726:	463a      	mov	r2, r7
 800b728:	4628      	mov	r0, r5
 800b72a:	47b0      	blx	r6
 800b72c:	2800      	cmp	r0, #0
 800b72e:	dc06      	bgt.n	800b73e <__sflush_r+0xfe>
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	f04f 30ff 	mov.w	r0, #4294967295
 800b73c:	e78e      	b.n	800b65c <__sflush_r+0x1c>
 800b73e:	4407      	add	r7, r0
 800b740:	eba8 0800 	sub.w	r8, r8, r0
 800b744:	e7e9      	b.n	800b71a <__sflush_r+0xda>
 800b746:	bf00      	nop
 800b748:	20400001 	.word	0x20400001

0800b74c <_fflush_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	690b      	ldr	r3, [r1, #16]
 800b750:	4605      	mov	r5, r0
 800b752:	460c      	mov	r4, r1
 800b754:	b913      	cbnz	r3, 800b75c <_fflush_r+0x10>
 800b756:	2500      	movs	r5, #0
 800b758:	4628      	mov	r0, r5
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	b118      	cbz	r0, 800b766 <_fflush_r+0x1a>
 800b75e:	6983      	ldr	r3, [r0, #24]
 800b760:	b90b      	cbnz	r3, 800b766 <_fflush_r+0x1a>
 800b762:	f000 f887 	bl	800b874 <__sinit>
 800b766:	4b14      	ldr	r3, [pc, #80]	; (800b7b8 <_fflush_r+0x6c>)
 800b768:	429c      	cmp	r4, r3
 800b76a:	d11b      	bne.n	800b7a4 <_fflush_r+0x58>
 800b76c:	686c      	ldr	r4, [r5, #4]
 800b76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0ef      	beq.n	800b756 <_fflush_r+0xa>
 800b776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b778:	07d0      	lsls	r0, r2, #31
 800b77a:	d404      	bmi.n	800b786 <_fflush_r+0x3a>
 800b77c:	0599      	lsls	r1, r3, #22
 800b77e:	d402      	bmi.n	800b786 <_fflush_r+0x3a>
 800b780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b782:	f000 f915 	bl	800b9b0 <__retarget_lock_acquire_recursive>
 800b786:	4628      	mov	r0, r5
 800b788:	4621      	mov	r1, r4
 800b78a:	f7ff ff59 	bl	800b640 <__sflush_r>
 800b78e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b790:	07da      	lsls	r2, r3, #31
 800b792:	4605      	mov	r5, r0
 800b794:	d4e0      	bmi.n	800b758 <_fflush_r+0xc>
 800b796:	89a3      	ldrh	r3, [r4, #12]
 800b798:	059b      	lsls	r3, r3, #22
 800b79a:	d4dd      	bmi.n	800b758 <_fflush_r+0xc>
 800b79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b79e:	f000 f908 	bl	800b9b2 <__retarget_lock_release_recursive>
 800b7a2:	e7d9      	b.n	800b758 <_fflush_r+0xc>
 800b7a4:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <_fflush_r+0x70>)
 800b7a6:	429c      	cmp	r4, r3
 800b7a8:	d101      	bne.n	800b7ae <_fflush_r+0x62>
 800b7aa:	68ac      	ldr	r4, [r5, #8]
 800b7ac:	e7df      	b.n	800b76e <_fflush_r+0x22>
 800b7ae:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <_fflush_r+0x74>)
 800b7b0:	429c      	cmp	r4, r3
 800b7b2:	bf08      	it	eq
 800b7b4:	68ec      	ldreq	r4, [r5, #12]
 800b7b6:	e7da      	b.n	800b76e <_fflush_r+0x22>
 800b7b8:	08019f10 	.word	0x08019f10
 800b7bc:	08019f30 	.word	0x08019f30
 800b7c0:	08019ef0 	.word	0x08019ef0

0800b7c4 <std>:
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	b510      	push	{r4, lr}
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b7ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7d2:	6083      	str	r3, [r0, #8]
 800b7d4:	8181      	strh	r1, [r0, #12]
 800b7d6:	6643      	str	r3, [r0, #100]	; 0x64
 800b7d8:	81c2      	strh	r2, [r0, #14]
 800b7da:	6183      	str	r3, [r0, #24]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	2208      	movs	r2, #8
 800b7e0:	305c      	adds	r0, #92	; 0x5c
 800b7e2:	f7ff f85b 	bl	800a89c <memset>
 800b7e6:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <std+0x38>)
 800b7e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b7ea:	4b05      	ldr	r3, [pc, #20]	; (800b800 <std+0x3c>)
 800b7ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <std+0x40>)
 800b7f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7f2:	4b05      	ldr	r3, [pc, #20]	; (800b808 <std+0x44>)
 800b7f4:	6224      	str	r4, [r4, #32]
 800b7f6:	6323      	str	r3, [r4, #48]	; 0x30
 800b7f8:	bd10      	pop	{r4, pc}
 800b7fa:	bf00      	nop
 800b7fc:	0800bb9d 	.word	0x0800bb9d
 800b800:	0800bbbf 	.word	0x0800bbbf
 800b804:	0800bbf7 	.word	0x0800bbf7
 800b808:	0800bc1b 	.word	0x0800bc1b

0800b80c <_cleanup_r>:
 800b80c:	4901      	ldr	r1, [pc, #4]	; (800b814 <_cleanup_r+0x8>)
 800b80e:	f000 b8af 	b.w	800b970 <_fwalk_reent>
 800b812:	bf00      	nop
 800b814:	0800b74d 	.word	0x0800b74d

0800b818 <__sfmoreglue>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	2268      	movs	r2, #104	; 0x68
 800b81c:	1e4d      	subs	r5, r1, #1
 800b81e:	4355      	muls	r5, r2
 800b820:	460e      	mov	r6, r1
 800b822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b826:	f7ff f8ad 	bl	800a984 <_malloc_r>
 800b82a:	4604      	mov	r4, r0
 800b82c:	b140      	cbz	r0, 800b840 <__sfmoreglue+0x28>
 800b82e:	2100      	movs	r1, #0
 800b830:	e9c0 1600 	strd	r1, r6, [r0]
 800b834:	300c      	adds	r0, #12
 800b836:	60a0      	str	r0, [r4, #8]
 800b838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b83c:	f7ff f82e 	bl	800a89c <memset>
 800b840:	4620      	mov	r0, r4
 800b842:	bd70      	pop	{r4, r5, r6, pc}

0800b844 <__sfp_lock_acquire>:
 800b844:	4801      	ldr	r0, [pc, #4]	; (800b84c <__sfp_lock_acquire+0x8>)
 800b846:	f000 b8b3 	b.w	800b9b0 <__retarget_lock_acquire_recursive>
 800b84a:	bf00      	nop
 800b84c:	20006111 	.word	0x20006111

0800b850 <__sfp_lock_release>:
 800b850:	4801      	ldr	r0, [pc, #4]	; (800b858 <__sfp_lock_release+0x8>)
 800b852:	f000 b8ae 	b.w	800b9b2 <__retarget_lock_release_recursive>
 800b856:	bf00      	nop
 800b858:	20006111 	.word	0x20006111

0800b85c <__sinit_lock_acquire>:
 800b85c:	4801      	ldr	r0, [pc, #4]	; (800b864 <__sinit_lock_acquire+0x8>)
 800b85e:	f000 b8a7 	b.w	800b9b0 <__retarget_lock_acquire_recursive>
 800b862:	bf00      	nop
 800b864:	20006112 	.word	0x20006112

0800b868 <__sinit_lock_release>:
 800b868:	4801      	ldr	r0, [pc, #4]	; (800b870 <__sinit_lock_release+0x8>)
 800b86a:	f000 b8a2 	b.w	800b9b2 <__retarget_lock_release_recursive>
 800b86e:	bf00      	nop
 800b870:	20006112 	.word	0x20006112

0800b874 <__sinit>:
 800b874:	b510      	push	{r4, lr}
 800b876:	4604      	mov	r4, r0
 800b878:	f7ff fff0 	bl	800b85c <__sinit_lock_acquire>
 800b87c:	69a3      	ldr	r3, [r4, #24]
 800b87e:	b11b      	cbz	r3, 800b888 <__sinit+0x14>
 800b880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b884:	f7ff bff0 	b.w	800b868 <__sinit_lock_release>
 800b888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b88c:	6523      	str	r3, [r4, #80]	; 0x50
 800b88e:	4b13      	ldr	r3, [pc, #76]	; (800b8dc <__sinit+0x68>)
 800b890:	4a13      	ldr	r2, [pc, #76]	; (800b8e0 <__sinit+0x6c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	62a2      	str	r2, [r4, #40]	; 0x28
 800b896:	42a3      	cmp	r3, r4
 800b898:	bf04      	itt	eq
 800b89a:	2301      	moveq	r3, #1
 800b89c:	61a3      	streq	r3, [r4, #24]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 f820 	bl	800b8e4 <__sfp>
 800b8a4:	6060      	str	r0, [r4, #4]
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 f81c 	bl	800b8e4 <__sfp>
 800b8ac:	60a0      	str	r0, [r4, #8]
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 f818 	bl	800b8e4 <__sfp>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	60e0      	str	r0, [r4, #12]
 800b8b8:	2104      	movs	r1, #4
 800b8ba:	6860      	ldr	r0, [r4, #4]
 800b8bc:	f7ff ff82 	bl	800b7c4 <std>
 800b8c0:	68a0      	ldr	r0, [r4, #8]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	2109      	movs	r1, #9
 800b8c6:	f7ff ff7d 	bl	800b7c4 <std>
 800b8ca:	68e0      	ldr	r0, [r4, #12]
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	2112      	movs	r1, #18
 800b8d0:	f7ff ff78 	bl	800b7c4 <std>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	61a3      	str	r3, [r4, #24]
 800b8d8:	e7d2      	b.n	800b880 <__sinit+0xc>
 800b8da:	bf00      	nop
 800b8dc:	08019e08 	.word	0x08019e08
 800b8e0:	0800b80d 	.word	0x0800b80d

0800b8e4 <__sfp>:
 800b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	f7ff ffac 	bl	800b844 <__sfp_lock_acquire>
 800b8ec:	4b1e      	ldr	r3, [pc, #120]	; (800b968 <__sfp+0x84>)
 800b8ee:	681e      	ldr	r6, [r3, #0]
 800b8f0:	69b3      	ldr	r3, [r6, #24]
 800b8f2:	b913      	cbnz	r3, 800b8fa <__sfp+0x16>
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7ff ffbd 	bl	800b874 <__sinit>
 800b8fa:	3648      	adds	r6, #72	; 0x48
 800b8fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b900:	3b01      	subs	r3, #1
 800b902:	d503      	bpl.n	800b90c <__sfp+0x28>
 800b904:	6833      	ldr	r3, [r6, #0]
 800b906:	b30b      	cbz	r3, 800b94c <__sfp+0x68>
 800b908:	6836      	ldr	r6, [r6, #0]
 800b90a:	e7f7      	b.n	800b8fc <__sfp+0x18>
 800b90c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b910:	b9d5      	cbnz	r5, 800b948 <__sfp+0x64>
 800b912:	4b16      	ldr	r3, [pc, #88]	; (800b96c <__sfp+0x88>)
 800b914:	60e3      	str	r3, [r4, #12]
 800b916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b91a:	6665      	str	r5, [r4, #100]	; 0x64
 800b91c:	f000 f847 	bl	800b9ae <__retarget_lock_init_recursive>
 800b920:	f7ff ff96 	bl	800b850 <__sfp_lock_release>
 800b924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b92c:	6025      	str	r5, [r4, #0]
 800b92e:	61a5      	str	r5, [r4, #24]
 800b930:	2208      	movs	r2, #8
 800b932:	4629      	mov	r1, r5
 800b934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b938:	f7fe ffb0 	bl	800a89c <memset>
 800b93c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b944:	4620      	mov	r0, r4
 800b946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b948:	3468      	adds	r4, #104	; 0x68
 800b94a:	e7d9      	b.n	800b900 <__sfp+0x1c>
 800b94c:	2104      	movs	r1, #4
 800b94e:	4638      	mov	r0, r7
 800b950:	f7ff ff62 	bl	800b818 <__sfmoreglue>
 800b954:	4604      	mov	r4, r0
 800b956:	6030      	str	r0, [r6, #0]
 800b958:	2800      	cmp	r0, #0
 800b95a:	d1d5      	bne.n	800b908 <__sfp+0x24>
 800b95c:	f7ff ff78 	bl	800b850 <__sfp_lock_release>
 800b960:	230c      	movs	r3, #12
 800b962:	603b      	str	r3, [r7, #0]
 800b964:	e7ee      	b.n	800b944 <__sfp+0x60>
 800b966:	bf00      	nop
 800b968:	08019e08 	.word	0x08019e08
 800b96c:	ffff0001 	.word	0xffff0001

0800b970 <_fwalk_reent>:
 800b970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b974:	4606      	mov	r6, r0
 800b976:	4688      	mov	r8, r1
 800b978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b97c:	2700      	movs	r7, #0
 800b97e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b982:	f1b9 0901 	subs.w	r9, r9, #1
 800b986:	d505      	bpl.n	800b994 <_fwalk_reent+0x24>
 800b988:	6824      	ldr	r4, [r4, #0]
 800b98a:	2c00      	cmp	r4, #0
 800b98c:	d1f7      	bne.n	800b97e <_fwalk_reent+0xe>
 800b98e:	4638      	mov	r0, r7
 800b990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b994:	89ab      	ldrh	r3, [r5, #12]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d907      	bls.n	800b9aa <_fwalk_reent+0x3a>
 800b99a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	d003      	beq.n	800b9aa <_fwalk_reent+0x3a>
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	47c0      	blx	r8
 800b9a8:	4307      	orrs	r7, r0
 800b9aa:	3568      	adds	r5, #104	; 0x68
 800b9ac:	e7e9      	b.n	800b982 <_fwalk_reent+0x12>

0800b9ae <__retarget_lock_init_recursive>:
 800b9ae:	4770      	bx	lr

0800b9b0 <__retarget_lock_acquire_recursive>:
 800b9b0:	4770      	bx	lr

0800b9b2 <__retarget_lock_release_recursive>:
 800b9b2:	4770      	bx	lr

0800b9b4 <__swhatbuf_r>:
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	460e      	mov	r6, r1
 800b9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9bc:	2900      	cmp	r1, #0
 800b9be:	b096      	sub	sp, #88	; 0x58
 800b9c0:	4614      	mov	r4, r2
 800b9c2:	461d      	mov	r5, r3
 800b9c4:	da08      	bge.n	800b9d8 <__swhatbuf_r+0x24>
 800b9c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	602a      	str	r2, [r5, #0]
 800b9ce:	061a      	lsls	r2, r3, #24
 800b9d0:	d410      	bmi.n	800b9f4 <__swhatbuf_r+0x40>
 800b9d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9d6:	e00e      	b.n	800b9f6 <__swhatbuf_r+0x42>
 800b9d8:	466a      	mov	r2, sp
 800b9da:	f000 f945 	bl	800bc68 <_fstat_r>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	dbf1      	blt.n	800b9c6 <__swhatbuf_r+0x12>
 800b9e2:	9a01      	ldr	r2, [sp, #4]
 800b9e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9ec:	425a      	negs	r2, r3
 800b9ee:	415a      	adcs	r2, r3
 800b9f0:	602a      	str	r2, [r5, #0]
 800b9f2:	e7ee      	b.n	800b9d2 <__swhatbuf_r+0x1e>
 800b9f4:	2340      	movs	r3, #64	; 0x40
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	b016      	add	sp, #88	; 0x58
 800b9fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba00 <__smakebuf_r>:
 800ba00:	898b      	ldrh	r3, [r1, #12]
 800ba02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba04:	079d      	lsls	r5, r3, #30
 800ba06:	4606      	mov	r6, r0
 800ba08:	460c      	mov	r4, r1
 800ba0a:	d507      	bpl.n	800ba1c <__smakebuf_r+0x1c>
 800ba0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	6123      	str	r3, [r4, #16]
 800ba14:	2301      	movs	r3, #1
 800ba16:	6163      	str	r3, [r4, #20]
 800ba18:	b002      	add	sp, #8
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}
 800ba1c:	ab01      	add	r3, sp, #4
 800ba1e:	466a      	mov	r2, sp
 800ba20:	f7ff ffc8 	bl	800b9b4 <__swhatbuf_r>
 800ba24:	9900      	ldr	r1, [sp, #0]
 800ba26:	4605      	mov	r5, r0
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7fe ffab 	bl	800a984 <_malloc_r>
 800ba2e:	b948      	cbnz	r0, 800ba44 <__smakebuf_r+0x44>
 800ba30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba34:	059a      	lsls	r2, r3, #22
 800ba36:	d4ef      	bmi.n	800ba18 <__smakebuf_r+0x18>
 800ba38:	f023 0303 	bic.w	r3, r3, #3
 800ba3c:	f043 0302 	orr.w	r3, r3, #2
 800ba40:	81a3      	strh	r3, [r4, #12]
 800ba42:	e7e3      	b.n	800ba0c <__smakebuf_r+0xc>
 800ba44:	4b0d      	ldr	r3, [pc, #52]	; (800ba7c <__smakebuf_r+0x7c>)
 800ba46:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	6020      	str	r0, [r4, #0]
 800ba4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba50:	81a3      	strh	r3, [r4, #12]
 800ba52:	9b00      	ldr	r3, [sp, #0]
 800ba54:	6163      	str	r3, [r4, #20]
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	6120      	str	r0, [r4, #16]
 800ba5a:	b15b      	cbz	r3, 800ba74 <__smakebuf_r+0x74>
 800ba5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba60:	4630      	mov	r0, r6
 800ba62:	f000 f913 	bl	800bc8c <_isatty_r>
 800ba66:	b128      	cbz	r0, 800ba74 <__smakebuf_r+0x74>
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	f023 0303 	bic.w	r3, r3, #3
 800ba6e:	f043 0301 	orr.w	r3, r3, #1
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	89a0      	ldrh	r0, [r4, #12]
 800ba76:	4305      	orrs	r5, r0
 800ba78:	81a5      	strh	r5, [r4, #12]
 800ba7a:	e7cd      	b.n	800ba18 <__smakebuf_r+0x18>
 800ba7c:	0800b80d 	.word	0x0800b80d

0800ba80 <memmove>:
 800ba80:	4288      	cmp	r0, r1
 800ba82:	b510      	push	{r4, lr}
 800ba84:	eb01 0402 	add.w	r4, r1, r2
 800ba88:	d902      	bls.n	800ba90 <memmove+0x10>
 800ba8a:	4284      	cmp	r4, r0
 800ba8c:	4623      	mov	r3, r4
 800ba8e:	d807      	bhi.n	800baa0 <memmove+0x20>
 800ba90:	1e43      	subs	r3, r0, #1
 800ba92:	42a1      	cmp	r1, r4
 800ba94:	d008      	beq.n	800baa8 <memmove+0x28>
 800ba96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba9e:	e7f8      	b.n	800ba92 <memmove+0x12>
 800baa0:	4402      	add	r2, r0
 800baa2:	4601      	mov	r1, r0
 800baa4:	428a      	cmp	r2, r1
 800baa6:	d100      	bne.n	800baaa <memmove+0x2a>
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bab2:	e7f7      	b.n	800baa4 <memmove+0x24>

0800bab4 <_realloc_r>:
 800bab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab8:	4680      	mov	r8, r0
 800baba:	4614      	mov	r4, r2
 800babc:	460e      	mov	r6, r1
 800babe:	b921      	cbnz	r1, 800baca <_realloc_r+0x16>
 800bac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bac4:	4611      	mov	r1, r2
 800bac6:	f7fe bf5d 	b.w	800a984 <_malloc_r>
 800baca:	b92a      	cbnz	r2, 800bad8 <_realloc_r+0x24>
 800bacc:	f7fe feee 	bl	800a8ac <_free_r>
 800bad0:	4625      	mov	r5, r4
 800bad2:	4628      	mov	r0, r5
 800bad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bad8:	f000 f8fa 	bl	800bcd0 <_malloc_usable_size_r>
 800badc:	4284      	cmp	r4, r0
 800bade:	4607      	mov	r7, r0
 800bae0:	d802      	bhi.n	800bae8 <_realloc_r+0x34>
 800bae2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bae6:	d812      	bhi.n	800bb0e <_realloc_r+0x5a>
 800bae8:	4621      	mov	r1, r4
 800baea:	4640      	mov	r0, r8
 800baec:	f7fe ff4a 	bl	800a984 <_malloc_r>
 800baf0:	4605      	mov	r5, r0
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d0ed      	beq.n	800bad2 <_realloc_r+0x1e>
 800baf6:	42bc      	cmp	r4, r7
 800baf8:	4622      	mov	r2, r4
 800bafa:	4631      	mov	r1, r6
 800bafc:	bf28      	it	cs
 800bafe:	463a      	movcs	r2, r7
 800bb00:	f7fe febe 	bl	800a880 <memcpy>
 800bb04:	4631      	mov	r1, r6
 800bb06:	4640      	mov	r0, r8
 800bb08:	f7fe fed0 	bl	800a8ac <_free_r>
 800bb0c:	e7e1      	b.n	800bad2 <_realloc_r+0x1e>
 800bb0e:	4635      	mov	r5, r6
 800bb10:	e7df      	b.n	800bad2 <_realloc_r+0x1e>

0800bb12 <_raise_r>:
 800bb12:	291f      	cmp	r1, #31
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4604      	mov	r4, r0
 800bb18:	460d      	mov	r5, r1
 800bb1a:	d904      	bls.n	800bb26 <_raise_r+0x14>
 800bb1c:	2316      	movs	r3, #22
 800bb1e:	6003      	str	r3, [r0, #0]
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	bd38      	pop	{r3, r4, r5, pc}
 800bb26:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb28:	b112      	cbz	r2, 800bb30 <_raise_r+0x1e>
 800bb2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb2e:	b94b      	cbnz	r3, 800bb44 <_raise_r+0x32>
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 f831 	bl	800bb98 <_getpid_r>
 800bb36:	462a      	mov	r2, r5
 800bb38:	4601      	mov	r1, r0
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb40:	f000 b818 	b.w	800bb74 <_kill_r>
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d00a      	beq.n	800bb5e <_raise_r+0x4c>
 800bb48:	1c59      	adds	r1, r3, #1
 800bb4a:	d103      	bne.n	800bb54 <_raise_r+0x42>
 800bb4c:	2316      	movs	r3, #22
 800bb4e:	6003      	str	r3, [r0, #0]
 800bb50:	2001      	movs	r0, #1
 800bb52:	e7e7      	b.n	800bb24 <_raise_r+0x12>
 800bb54:	2400      	movs	r4, #0
 800bb56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	4798      	blx	r3
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e7e0      	b.n	800bb24 <_raise_r+0x12>
	...

0800bb64 <raise>:
 800bb64:	4b02      	ldr	r3, [pc, #8]	; (800bb70 <raise+0xc>)
 800bb66:	4601      	mov	r1, r0
 800bb68:	6818      	ldr	r0, [r3, #0]
 800bb6a:	f7ff bfd2 	b.w	800bb12 <_raise_r>
 800bb6e:	bf00      	nop
 800bb70:	20000038 	.word	0x20000038

0800bb74 <_kill_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4d07      	ldr	r5, [pc, #28]	; (800bb94 <_kill_r+0x20>)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	4611      	mov	r1, r2
 800bb80:	602b      	str	r3, [r5, #0]
 800bb82:	f7f5 fd19 	bl	80015b8 <_kill>
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	d102      	bne.n	800bb90 <_kill_r+0x1c>
 800bb8a:	682b      	ldr	r3, [r5, #0]
 800bb8c:	b103      	cbz	r3, 800bb90 <_kill_r+0x1c>
 800bb8e:	6023      	str	r3, [r4, #0]
 800bb90:	bd38      	pop	{r3, r4, r5, pc}
 800bb92:	bf00      	nop
 800bb94:	2000610c 	.word	0x2000610c

0800bb98 <_getpid_r>:
 800bb98:	f7f5 bd06 	b.w	80015a8 <_getpid>

0800bb9c <__sread>:
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	460c      	mov	r4, r1
 800bba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba4:	f000 f89c 	bl	800bce0 <_read_r>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	bfab      	itete	ge
 800bbac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbae:	89a3      	ldrhlt	r3, [r4, #12]
 800bbb0:	181b      	addge	r3, r3, r0
 800bbb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbb6:	bfac      	ite	ge
 800bbb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbba:	81a3      	strhlt	r3, [r4, #12]
 800bbbc:	bd10      	pop	{r4, pc}

0800bbbe <__swrite>:
 800bbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc2:	461f      	mov	r7, r3
 800bbc4:	898b      	ldrh	r3, [r1, #12]
 800bbc6:	05db      	lsls	r3, r3, #23
 800bbc8:	4605      	mov	r5, r0
 800bbca:	460c      	mov	r4, r1
 800bbcc:	4616      	mov	r6, r2
 800bbce:	d505      	bpl.n	800bbdc <__swrite+0x1e>
 800bbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f000 f868 	bl	800bcac <_lseek_r>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbe6:	81a3      	strh	r3, [r4, #12]
 800bbe8:	4632      	mov	r2, r6
 800bbea:	463b      	mov	r3, r7
 800bbec:	4628      	mov	r0, r5
 800bbee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf2:	f000 b817 	b.w	800bc24 <_write_r>

0800bbf6 <__sseek>:
 800bbf6:	b510      	push	{r4, lr}
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbfe:	f000 f855 	bl	800bcac <_lseek_r>
 800bc02:	1c43      	adds	r3, r0, #1
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	bf15      	itete	ne
 800bc08:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc12:	81a3      	strheq	r3, [r4, #12]
 800bc14:	bf18      	it	ne
 800bc16:	81a3      	strhne	r3, [r4, #12]
 800bc18:	bd10      	pop	{r4, pc}

0800bc1a <__sclose>:
 800bc1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc1e:	f000 b813 	b.w	800bc48 <_close_r>
	...

0800bc24 <_write_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d07      	ldr	r5, [pc, #28]	; (800bc44 <_write_r+0x20>)
 800bc28:	4604      	mov	r4, r0
 800bc2a:	4608      	mov	r0, r1
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	2200      	movs	r2, #0
 800bc30:	602a      	str	r2, [r5, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	f7f5 fcf7 	bl	8001626 <_write>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d102      	bne.n	800bc42 <_write_r+0x1e>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	b103      	cbz	r3, 800bc42 <_write_r+0x1e>
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	2000610c 	.word	0x2000610c

0800bc48 <_close_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4d06      	ldr	r5, [pc, #24]	; (800bc64 <_close_r+0x1c>)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	4604      	mov	r4, r0
 800bc50:	4608      	mov	r0, r1
 800bc52:	602b      	str	r3, [r5, #0]
 800bc54:	f7f5 fd03 	bl	800165e <_close>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d102      	bne.n	800bc62 <_close_r+0x1a>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	b103      	cbz	r3, 800bc62 <_close_r+0x1a>
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	2000610c 	.word	0x2000610c

0800bc68 <_fstat_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4d07      	ldr	r5, [pc, #28]	; (800bc88 <_fstat_r+0x20>)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4604      	mov	r4, r0
 800bc70:	4608      	mov	r0, r1
 800bc72:	4611      	mov	r1, r2
 800bc74:	602b      	str	r3, [r5, #0]
 800bc76:	f7f5 fcfe 	bl	8001676 <_fstat>
 800bc7a:	1c43      	adds	r3, r0, #1
 800bc7c:	d102      	bne.n	800bc84 <_fstat_r+0x1c>
 800bc7e:	682b      	ldr	r3, [r5, #0]
 800bc80:	b103      	cbz	r3, 800bc84 <_fstat_r+0x1c>
 800bc82:	6023      	str	r3, [r4, #0]
 800bc84:	bd38      	pop	{r3, r4, r5, pc}
 800bc86:	bf00      	nop
 800bc88:	2000610c 	.word	0x2000610c

0800bc8c <_isatty_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d06      	ldr	r5, [pc, #24]	; (800bca8 <_isatty_r+0x1c>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	602b      	str	r3, [r5, #0]
 800bc98:	f7f5 fcfd 	bl	8001696 <_isatty>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_isatty_r+0x1a>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_isatty_r+0x1a>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	2000610c 	.word	0x2000610c

0800bcac <_lseek_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d07      	ldr	r5, [pc, #28]	; (800bccc <_lseek_r+0x20>)
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	4608      	mov	r0, r1
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	602a      	str	r2, [r5, #0]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f7f5 fcf6 	bl	80016ac <_lseek>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_lseek_r+0x1e>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_lseek_r+0x1e>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	2000610c 	.word	0x2000610c

0800bcd0 <_malloc_usable_size_r>:
 800bcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd4:	1f18      	subs	r0, r3, #4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfbc      	itt	lt
 800bcda:	580b      	ldrlt	r3, [r1, r0]
 800bcdc:	18c0      	addlt	r0, r0, r3
 800bcde:	4770      	bx	lr

0800bce0 <_read_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4d07      	ldr	r5, [pc, #28]	; (800bd00 <_read_r+0x20>)
 800bce4:	4604      	mov	r4, r0
 800bce6:	4608      	mov	r0, r1
 800bce8:	4611      	mov	r1, r2
 800bcea:	2200      	movs	r2, #0
 800bcec:	602a      	str	r2, [r5, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f7f5 fc7c 	bl	80015ec <_read>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d102      	bne.n	800bcfe <_read_r+0x1e>
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	b103      	cbz	r3, 800bcfe <_read_r+0x1e>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	2000610c 	.word	0x2000610c

0800bd04 <_init>:
 800bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd06:	bf00      	nop
 800bd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd0a:	bc08      	pop	{r3}
 800bd0c:	469e      	mov	lr, r3
 800bd0e:	4770      	bx	lr

0800bd10 <_fini>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	bf00      	nop
 800bd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd16:	bc08      	pop	{r3}
 800bd18:	469e      	mov	lr, r3
 800bd1a:	4770      	bx	lr
