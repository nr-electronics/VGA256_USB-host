
F411_VGA256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e234  0800bd4c  0800bd4c  0001bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f80  08019f80  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  08019f80  08019f80  00029f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f88  08019f88  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f88  08019f88  00029f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f8c  08019f8c  00029f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08019f90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006078  2000009c  0801a02c  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006114  0801a02c  00036114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001910f  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000420d  00000000  00000000  000491db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0004d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  0004e700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b576  00000000  00000000  0004f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018da8  00000000  00000000  0006adae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094932  00000000  00000000  00083b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005948  00000000  00000000  001184d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd34 	.word	0x0800bd34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	0800bd34 	.word	0x0800bd34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <VGA_update>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void VGA_update(){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
	vga_voff[0] = VOFFSET;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <VGA_update+0x44>)
 800058c:	881a      	ldrh	r2, [r3, #0]
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <VGA_update+0x48>)
 8000590:	801a      	strh	r2, [r3, #0]
	for(int i=1;i<8;i++)
 8000592:	2301      	movs	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	e00d      	b.n	80005b4 <VGA_update+0x30>
	   vga_voff[i]=vga_voff[i-1]+VGA_LBUFFERSIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <VGA_update+0x48>)
 800059e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a2:	33c8      	adds	r3, #200	; 0xc8
 80005a4:	b299      	uxth	r1, r3
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <VGA_update+0x48>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=1;i<8;i++)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3301      	adds	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b07      	cmp	r3, #7
 80005b8:	ddee      	ble.n	8000598 <VGA_update+0x14>
}
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	200001f0 	.word	0x200001f0
 80005cc:	200001f8 	.word	0x200001f8

080005d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_9){
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e0:	d10f      	bne.n	8000602 <HAL_GPIO_EXTI_Callback+0x32>
		if(VOFFSET>0)VOFFSET-=1;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d005      	beq.n	80005f6 <HAL_GPIO_EXTI_Callback+0x26>
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 80005f4:	801a      	strh	r2, [r3, #0]
		vga_stop=1;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_GPIO_EXTI_Callback+0x88>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	801a      	strh	r2, [r3, #0]
		VGA_update();
 80005fc:	f7ff ffc2 	bl	8000584 <VGA_update>
 8000600:	e012      	b.n	8000628 <HAL_GPIO_EXTI_Callback+0x58>
	}
	else if(GPIO_Pin==GPIO_PIN_10){
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000608:	d10e      	bne.n	8000628 <HAL_GPIO_EXTI_Callback+0x58>
		if(VOFFSET<(VGA_LBUFFERSIZE-VGA_WIDTH))VOFFSET+=1;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2b27      	cmp	r3, #39	; 0x27
 8000610:	d805      	bhi.n	800061e <HAL_GPIO_EXTI_Callback+0x4e>
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	b29a      	uxth	r2, r3
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 800061c:	801a      	strh	r2, [r3, #0]
		vga_stop=1;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_GPIO_EXTI_Callback+0x88>)
 8000620:	2201      	movs	r2, #1
 8000622:	801a      	strh	r2, [r3, #0]
		VGA_update();
 8000624:	f7ff ffae 	bl	8000584 <VGA_update>
	}
	   sprintf(msg,"%d ",VOFFSET);
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_GPIO_EXTI_Callback+0x84>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	490b      	ldr	r1, [pc, #44]	; (800065c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <HAL_GPIO_EXTI_Callback+0x90>)
 8000632:	f00a faaf 	bl	800ab94 <siprintf>
	   SetCursor(3,50);
 8000636:	2132      	movs	r1, #50	; 0x32
 8000638:	2003      	movs	r0, #3
 800063a:	f001 ff9f 	bl	800257c <SetCursor>
	   WriteString(msg,Font_7x10,VGA_WHITE);
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <HAL_GPIO_EXTI_Callback+0x94>)
 8000640:	23ff      	movs	r3, #255	; 0xff
 8000642:	ca06      	ldmia	r2, {r1, r2}
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <HAL_GPIO_EXTI_Callback+0x90>)
 8000646:	f001 ff73 	bl	8002530 <WriteString>

}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200001f0 	.word	0x200001f0
 8000658:	200001f2 	.word	0x200001f2
 800065c:	0800bd4c 	.word	0x0800bd4c
 8000660:	20000224 	.word	0x20000224
 8000664:	20000008 	.word	0x20000008

08000668 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
     if(htim==&htim9){
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d11f      	bne.n	80006b8 <HAL_TIM_PeriodElapsedCallback+0x50>
		line=-14;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800067a:	f64f 72f2 	movw	r2, #65522	; 0xfff2
 800067e:	801a      	strh	r2, [r3, #0]
		if(firstTrig){
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d017      	beq.n	80006b8 <HAL_TIM_PeriodElapsedCallback+0x50>
			if(
            HAL_DMA_Start_IT(&hdma_tim1_up,(uint32_t)VGA_obuffer,GPIOB_ODR,VGA_FULL)
 8000688:	4910      	ldr	r1, [pc, #64]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000692:	4810      	ldr	r0, [pc, #64]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000694:	f002 fc7e 	bl	8002f94 <HAL_DMA_Start_IT>
 8000698:	4603      	mov	r3, r0
			if(
 800069a:	2b00      	cmp	r3, #0
 800069c:	d009      	beq.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			!= HAL_OK){
				while(1){
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006a4:	f003 f9bb 	bl	8003a1e <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f002 fa8e 	bl	8002bcc <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80006b0:	e7f5      	b.n	800069e <HAL_TIM_PeriodElapsedCallback+0x36>
				}
			}
			firstTrig=0;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000100 	.word	0x20000100
 80006c4:	200001f4 	.word	0x200001f4
 80006c8:	20000000 	.word	0x20000000
 80006cc:	200008a4 	.word	0x200008a4
 80006d0:	20000208 	.word	0x20000208
 80006d4:	20000190 	.word	0x20000190
 80006d8:	40020800 	.word	0x40020800

080006dc <DMA_HalfCpltCallback>:

static void DMA_HalfCpltCallback(DMA_HandleTypeDef *hdma){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
     //fill in line1
	if((line<0)||(line>=VGA_VBUFFER)){
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 80006e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db04      	blt.n	80006f8 <DMA_HalfCpltCallback+0x1c>
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 80006f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f4:	2b77      	cmp	r3, #119	; 0x77
 80006f6:	dd06      	ble.n	8000706 <DMA_HalfCpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 80006f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80006fc:	2100      	movs	r1, #0
 80006fe:	4820      	ldr	r0, [pc, #128]	; (8000780 <DMA_HalfCpltCallback+0xa4>)
 8000700:	f00a f8e4 	bl	800a8cc <memset>
 8000704:	e01d      	b.n	8000742 <DMA_HalfCpltCallback+0x66>
	}else{
		for(int i=0;i<4;i++)
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e017      	b.n	800073c <DMA_HalfCpltCallback+0x60>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 800070c:	4a1d      	ldr	r2, [pc, #116]	; (8000784 <DMA_HalfCpltCallback+0xa8>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000714:	461a      	mov	r2, r3
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <DMA_HalfCpltCallback+0xa4>)
 8000718:	18d0      	adds	r0, r2, r3
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 800071c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000720:	461a      	mov	r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	015b      	lsls	r3, r3, #5
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <DMA_HalfCpltCallback+0xac>)
 800072c:	4413      	add	r3, r2
 800072e:	22a0      	movs	r2, #160	; 0xa0
 8000730:	4619      	mov	r1, r3
 8000732:	f00a f8bd 	bl	800a8b0 <memcpy>
		for(int i=0;i<4;i++)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b03      	cmp	r3, #3
 8000740:	dde4      	ble.n	800070c <DMA_HalfCpltCallback+0x30>
	}
	line++;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 8000744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000748:	b29b      	uxth	r3, r3
 800074a:	3301      	adds	r3, #1
 800074c:	b29b      	uxth	r3, r3
 800074e:	b21a      	sxth	r2, r3
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <DMA_HalfCpltCallback+0xa0>)
 8000752:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <DMA_HalfCpltCallback+0xb0>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00a      	beq.n	8000772 <DMA_HalfCpltCallback+0x96>
		HAL_DMA_Abort_IT(&hdma_tim1_up);
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <DMA_HalfCpltCallback+0xb4>)
 800075e:	f002 fce1 	bl	8003124 <HAL_DMA_Abort_IT>
		firstTrig=1;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <DMA_HalfCpltCallback+0xb8>)
 8000764:	2201      	movs	r2, #1
 8000766:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <DMA_HalfCpltCallback+0xb0>)
 800076a:	2200      	movs	r2, #0
 800076c:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800076e:	f7ff ff09 	bl	8000584 <VGA_update>
	}
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001f4 	.word	0x200001f4
 8000780:	200008a4 	.word	0x200008a4
 8000784:	200001f8 	.word	0x200001f8
 8000788:	20000ee4 	.word	0x20000ee4
 800078c:	200001f2 	.word	0x200001f2
 8000790:	20000190 	.word	0x20000190
 8000794:	20000000 	.word	0x20000000

08000798 <DMA_CpltCallback>:

static void DMA_CpltCallback(DMA_HandleTypeDef *hdma){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    //fill in line2 (later half)
	if((line<0)||(line>=VGA_VBUFFER)){
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <DMA_CpltCallback+0xa0>)
 80007a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db04      	blt.n	80007b4 <DMA_CpltCallback+0x1c>
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <DMA_CpltCallback+0xa0>)
 80007ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b0:	2b77      	cmp	r3, #119	; 0x77
 80007b2:	dd06      	ble.n	80007c2 <DMA_CpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 80007b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80007b8:	2100      	movs	r1, #0
 80007ba:	4820      	ldr	r0, [pc, #128]	; (800083c <DMA_CpltCallback+0xa4>)
 80007bc:	f00a f886 	bl	800a8cc <memset>
 80007c0:	e01d      	b.n	80007fe <DMA_CpltCallback+0x66>
	}else{
		for(int i=4;i<8;i++)
 80007c2:	2304      	movs	r3, #4
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e017      	b.n	80007f8 <DMA_CpltCallback+0x60>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <DMA_CpltCallback+0xa8>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <DMA_CpltCallback+0xa4>)
 80007d4:	18d0      	adds	r0, r2, r3
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <DMA_CpltCallback+0xa0>)
 80007d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007dc:	461a      	mov	r2, r3
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	015b      	lsls	r3, r3, #5
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <DMA_CpltCallback+0xac>)
 80007e8:	4413      	add	r3, r2
 80007ea:	22a0      	movs	r2, #160	; 0xa0
 80007ec:	4619      	mov	r1, r3
 80007ee:	f00a f85f 	bl	800a8b0 <memcpy>
		for(int i=4;i<8;i++)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b07      	cmp	r3, #7
 80007fc:	dde4      	ble.n	80007c8 <DMA_CpltCallback+0x30>
	}
	line++;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <DMA_CpltCallback+0xa0>)
 8000800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000804:	b29b      	uxth	r3, r3
 8000806:	3301      	adds	r3, #1
 8000808:	b29b      	uxth	r3, r3
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <DMA_CpltCallback+0xa0>)
 800080e:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <DMA_CpltCallback+0xb0>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00a      	beq.n	800082e <DMA_CpltCallback+0x96>
		HAL_DMA_Abort_IT(&hdma_tim1_up);
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <DMA_CpltCallback+0xb4>)
 800081a:	f002 fc83 	bl	8003124 <HAL_DMA_Abort_IT>
		firstTrig=1;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <DMA_CpltCallback+0xb8>)
 8000820:	2201      	movs	r2, #1
 8000822:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <DMA_CpltCallback+0xb0>)
 8000826:	2200      	movs	r2, #0
 8000828:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800082a:	f7ff feab 	bl	8000584 <VGA_update>
	}
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001f4 	.word	0x200001f4
 800083c:	200008a4 	.word	0x200008a4
 8000840:	200001f8 	.word	0x200001f8
 8000844:	20000ee4 	.word	0x20000ee4
 8000848:	200001f2 	.word	0x200001f2
 800084c:	20000190 	.word	0x20000190
 8000850:	20000000 	.word	0x20000000

08000854 <USBH_HID_EventCallback>:

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_KEYBOARD){
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f007 fdd9 	bl	8008414 <USBH_HID_GetDeviceType>
 8000862:	4603      	mov	r3, r0
 8000864:	2b02      	cmp	r3, #2
 8000866:	d129      	bne.n	80008bc <USBH_HID_EventCallback+0x68>
		HID_KEYBD_Info_TypeDef *Keyboard_Info;
		Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f007 ff0b 	bl	8008684 <USBH_HID_GetKeybdInfo>
 800086e:	60f8      	str	r0, [r7, #12]
		uint8_t key = USBH_HID_GetASCIICode(Keyboard_Info);
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f007 ffab 	bl	80087cc <USBH_HID_GetASCIICode>
 8000876:	4603      	mov	r3, r0
 8000878:	72fb      	strb	r3, [r7, #11]
		if(key==0)return;
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d01a      	beq.n	80008b6 <USBH_HID_EventCallback+0x62>
		if(((kBin+1)&0xf)==kBout)return;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <USBH_HID_EventCallback+0x70>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	f003 020f 	and.w	r2, r3, #15
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <USBH_HID_EventCallback+0x74>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d013      	beq.n	80008ba <USBH_HID_EventCallback+0x66>
		kBuffer[kBin]=key;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <USBH_HID_EventCallback+0x70>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <USBH_HID_EventCallback+0x78>)
 8000898:	7afa      	ldrb	r2, [r7, #11]
 800089a:	54ca      	strb	r2, [r1, r3]
		kBin=(kBin+1)&0xf;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <USBH_HID_EventCallback+0x70>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <USBH_HID_EventCallback+0x70>)
 80008a8:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80008aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ae:	4808      	ldr	r0, [pc, #32]	; (80008d0 <USBH_HID_EventCallback+0x7c>)
 80008b0:	f003 f8b5 	bl	8003a1e <HAL_GPIO_TogglePin>
 80008b4:	e002      	b.n	80008bc <USBH_HID_EventCallback+0x68>
		if(key==0)return;
 80008b6:	bf00      	nop
 80008b8:	e000      	b.n	80008bc <USBH_HID_EventCallback+0x68>
		if(((kBin+1)&0xf)==kBout)return;
 80008ba:	bf00      	nop
	}
}
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000021c 	.word	0x2000021c
 80008c8:	20000220 	.word	0x20000220
 80008cc:	2000020c 	.word	0x2000020c
 80008d0:	40020800 	.word	0x40020800

080008d4 <getch>:

extern uint8_t getch(char *ch){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	for(int i=0;i<10;i++){
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e007      	b.n	80008f2 <getch+0x1e>
	   MX_USB_HOST_Process();
 80008e2:	f009 fcd7 	bl	800a294 <MX_USB_HOST_Process>
	   HAL_Delay(2);
 80008e6:	2002      	movs	r0, #2
 80008e8:	f002 f970 	bl	8002bcc <HAL_Delay>
	for(int i=0;i<10;i++){
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b09      	cmp	r3, #9
 80008f6:	ddf4      	ble.n	80008e2 <getch+0xe>
	}
	if(kBin==kBout) return 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <getch+0x58>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <getch+0x5c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d101      	bne.n	8000908 <getch+0x34>
 8000904:	2300      	movs	r3, #0
 8000906:	e00d      	b.n	8000924 <getch+0x50>
	*ch = kBuffer[kBout];
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <getch+0x5c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <getch+0x60>)
 800090e:	5cd2      	ldrb	r2, [r2, r3]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	701a      	strb	r2, [r3, #0]
	kBout = (kBout+1)&0xf;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <getch+0x5c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <getch+0x5c>)
 8000920:	6013      	str	r3, [r2, #0]
	return 1;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000021c 	.word	0x2000021c
 8000930:	20000220 	.word	0x20000220
 8000934:	2000020c 	.word	0x2000020c

08000938 <tetrisDelay>:

extern void tetrisDelay(int ms){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4618      	mov	r0, r3
 8000944:	f002 f942 	bl	8002bcc <HAL_Delay>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <tetrisSeed>:

extern uint32_t tetrisSeed(){
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	return TIM1->CNT+TIM9->CNT+TIM10->CNT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <tetrisSeed+0x20>)
 8000956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <tetrisSeed+0x24>)
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	441a      	add	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <tetrisSeed+0x28>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	4413      	add	r3, r2
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40010000 	.word	0x40010000
 8000974:	40014000 	.word	0x40014000
 8000978:	40014400 	.word	0x40014400

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b093      	sub	sp, #76	; 0x4c
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f002 f8b1 	bl	8002ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 fa75 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 fbfd 	bl	8001188 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 fbdb 	bl	8001148 <MX_DMA_Init>
  MX_TIM10_Init();
 8000992:	f000 fb8b 	bl	80010ac <MX_TIM10_Init>
  MX_TIM9_Init();
 8000996:	f000 fb25 	bl	8000fe4 <MX_TIM9_Init>
  MX_TIM1_Init();
 800099a:	f000 fad3 	bl	8000f44 <MX_TIM1_Init>
  MX_USB_HOST_Init();
 800099e:	f009 fc53 	bl	800a248 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Abort(&hdma_tim1_up);
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <main+0x74>)
 80009a4:	f002 fb4e 	bl	8003044 <HAL_DMA_Abort>
  if(
  	  HAL_DMA_RegisterCallback(&hdma_tim1_up,HAL_DMA_XFER_HALFCPLT_CB_ID,DMA_HalfCpltCallback)
 80009a8:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <main+0x78>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	4810      	ldr	r0, [pc, #64]	; (80009f0 <main+0x74>)
 80009ae:	f002 fd65 	bl	800347c <HAL_DMA_RegisterCallback>
 80009b2:	4603      	mov	r3, r0
  if(
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d009      	beq.n	80009cc <main+0x50>
  	  !=HAL_OK){
  	  while(1){
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80009b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009bc:	480e      	ldr	r0, [pc, #56]	; (80009f8 <main+0x7c>)
 80009be:	f003 f82e 	bl	8003a1e <HAL_GPIO_TogglePin>
  		  HAL_Delay(500);
 80009c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c6:	f002 f901 	bl	8002bcc <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80009ca:	e7f5      	b.n	80009b8 <main+0x3c>
  	  }
  }
  if(
        HAL_DMA_RegisterCallback(&hdma_tim1_up,HAL_DMA_XFER_CPLT_CB_ID,DMA_CpltCallback)
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <main+0x80>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <main+0x74>)
 80009d2:	f002 fd53 	bl	800347c <HAL_DMA_RegisterCallback>
 80009d6:	4603      	mov	r3, r0
  if(
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d011      	beq.n	8000a00 <main+0x84>
        !=HAL_OK){
  	  while(1){
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80009dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <main+0x7c>)
 80009e2:	f003 f81c 	bl	8003a1e <HAL_GPIO_TogglePin>
  		  HAL_Delay(250);
 80009e6:	20fa      	movs	r0, #250	; 0xfa
 80009e8:	f002 f8f0 	bl	8002bcc <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80009ec:	e7f6      	b.n	80009dc <main+0x60>
 80009ee:	bf00      	nop
 80009f0:	20000190 	.word	0x20000190
 80009f4:	080006dd 	.word	0x080006dd
 80009f8:	40020800 	.word	0x40020800
 80009fc:	08000799 	.word	0x08000799
  	  }
  }
  VGA_update();
 8000a00:	f7ff fdc0 	bl	8000584 <VGA_update>
  GPIOB_ODR = (uint32_t)&(GPIOB->ODR);
 8000a04:	4bbd      	ldr	r3, [pc, #756]	; (8000cfc <main+0x380>)
 8000a06:	4abe      	ldr	r2, [pc, #760]	; (8000d00 <main+0x384>)
 8000a08:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim9);
 8000a0a:	48be      	ldr	r0, [pc, #760]	; (8000d04 <main+0x388>)
 8000a0c:	f005 f912 	bl	8005c34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 8000a10:	2100      	movs	r1, #0
 8000a12:	48bc      	ldr	r0, [pc, #752]	; (8000d04 <main+0x388>)
 8000a14:	f005 f9ca 	bl	8005dac <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 8000a18:	48bb      	ldr	r0, [pc, #748]	; (8000d08 <main+0x38c>)
 8000a1a:	f005 f90b 	bl	8005c34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	48b9      	ldr	r0, [pc, #740]	; (8000d08 <main+0x38c>)
 8000a22:	f005 f9c3 	bl	8005dac <HAL_TIM_PWM_Start>


  __HAL_DMA_ENABLE_IT(&hdma_tim1_up,DMA_IT_TC);
 8000a26:	4bb9      	ldr	r3, [pc, #740]	; (8000d0c <main+0x390>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4bb7      	ldr	r3, [pc, #732]	; (8000d0c <main+0x390>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f042 0210 	orr.w	r2, r2, #16
 8000a34:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up,DMA_IT_HT);
 8000a36:	4bb5      	ldr	r3, [pc, #724]	; (8000d0c <main+0x390>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4bb3      	ldr	r3, [pc, #716]	; (8000d0c <main+0x390>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f042 0208 	orr.w	r2, r2, #8
 8000a44:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000a46:	4bb2      	ldr	r3, [pc, #712]	; (8000d10 <main+0x394>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	4bb0      	ldr	r3, [pc, #704]	; (8000d10 <main+0x394>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a54:	60da      	str	r2, [r3, #12]

  HAL_TIM_Base_Start(&htim1);
 8000a56:	48ae      	ldr	r0, [pc, #696]	; (8000d10 <main+0x394>)
 8000a58:	f005 f892 	bl	8005b80 <HAL_TIM_Base_Start>

  HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f002 f8b5 	bl	8002bcc <HAL_Delay>
  vga_stop=1;
 8000a62:	4bac      	ldr	r3, [pc, #688]	; (8000d14 <main+0x398>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	801a      	strh	r2, [r3, #0]

  ClearScreen(VGA_BLACK);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 fb77 	bl	800215c <ClearScreen>
  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000a6e:	23ff      	movs	r3, #255	; 0xff
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2373      	movs	r3, #115	; 0x73
 8000a74:	229f      	movs	r2, #159	; 0x9f
 8000a76:	2100      	movs	r1, #0
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 fe41 	bl	8002700 <DrawRectangle>
  char msg[32]="Testing";
 8000a7e:	4aa6      	ldr	r2, [pc, #664]	; (8000d18 <main+0x39c>)
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a86:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	615a      	str	r2, [r3, #20]
  SetCursor(3,3);
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	f001 fd6c 	bl	800257c <SetCursor>
  WriteString(msg,Font_7x10,VGA_GREEN);
 8000aa4:	4a9d      	ldr	r2, [pc, #628]	; (8000d1c <main+0x3a0>)
 8000aa6:	1d38      	adds	r0, r7, #4
 8000aa8:	231c      	movs	r3, #28
 8000aaa:	ca06      	ldmia	r2, {r1, r2}
 8000aac:	f001 fd40 	bl	8002530 <WriteString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int r,x,y,w,h,z=0,c;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1)
  {
	  char cc;
//	  MX_USB_HOST_Process();
//	  continue;
	  r = rand()%50;
 8000ab4:	f00a f820 	bl	800aaf8 <rand>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a99      	ldr	r2, [pc, #612]	; (8000d20 <main+0x3a4>)
 8000abc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac0:	1111      	asrs	r1, r2, #4
 8000ac2:	17da      	asrs	r2, r3, #31
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	2132      	movs	r1, #50	; 0x32
 8000ac8:	fb01 f202 	mul.w	r2, r1, r2
 8000acc:	1a9b      	subs	r3, r3, r2
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000ad0:	f00a f812 	bl	800aaf8 <rand>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b93      	ldr	r3, [pc, #588]	; (8000d24 <main+0x3a8>)
 8000ad8:	fb83 1302 	smull	r1, r3, r3, r2
 8000adc:	1199      	asrs	r1, r3, #6
 8000ade:	17d3      	asrs	r3, r2, #31
 8000ae0:	1ac9      	subs	r1, r1, r3
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	015b      	lsls	r3, r3, #5
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000aee:	f00a f803 	bl	800aaf8 <rand>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a8c      	ldr	r2, [pc, #560]	; (8000d28 <main+0x3ac>)
 8000af6:	fb82 1203 	smull	r1, r2, r2, r3
 8000afa:	441a      	add	r2, r3
 8000afc:	1191      	asrs	r1, r2, #6
 8000afe:	17da      	asrs	r2, r3, #31
 8000b00:	1a8a      	subs	r2, r1, r2
 8000b02:	2174      	movs	r1, #116	; 0x74
 8000b04:	fb01 f202 	mul.w	r2, r1, r2
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000b0c:	f009 fff4 	bl	800aaf8 <rand>
 8000b10:	4603      	mov	r3, r0
 8000b12:	425a      	negs	r2, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	bf58      	it	pl
 8000b1a:	4253      	negpl	r3, r2
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawCircle(x,y,r,c);
 8000b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b20:	b218      	sxth	r0, r3
 8000b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b24:	b219      	sxth	r1, r3
 8000b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f001 fd55 	bl	80025dc <DrawCircle>
	  r = rand()%50;
 8000b32:	f009 ffe1 	bl	800aaf8 <rand>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a79      	ldr	r2, [pc, #484]	; (8000d20 <main+0x3a4>)
 8000b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3e:	1111      	asrs	r1, r2, #4
 8000b40:	17da      	asrs	r2, r3, #31
 8000b42:	1a8a      	subs	r2, r1, r2
 8000b44:	2132      	movs	r1, #50	; 0x32
 8000b46:	fb01 f202 	mul.w	r2, r1, r2
 8000b4a:	1a9b      	subs	r3, r3, r2
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000b4e:	f009 ffd3 	bl	800aaf8 <rand>
 8000b52:	4602      	mov	r2, r0
 8000b54:	4b73      	ldr	r3, [pc, #460]	; (8000d24 <main+0x3a8>)
 8000b56:	fb83 1302 	smull	r1, r3, r3, r2
 8000b5a:	1199      	asrs	r1, r3, #6
 8000b5c:	17d3      	asrs	r3, r2, #31
 8000b5e:	1ac9      	subs	r1, r1, r3
 8000b60:	460b      	mov	r3, r1
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	440b      	add	r3, r1
 8000b66:	015b      	lsls	r3, r3, #5
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000b6c:	f009 ffc4 	bl	800aaf8 <rand>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a6d      	ldr	r2, [pc, #436]	; (8000d28 <main+0x3ac>)
 8000b74:	fb82 1203 	smull	r1, r2, r2, r3
 8000b78:	441a      	add	r2, r3
 8000b7a:	1191      	asrs	r1, r2, #6
 8000b7c:	17da      	asrs	r2, r3, #31
 8000b7e:	1a8a      	subs	r2, r1, r2
 8000b80:	2174      	movs	r1, #116	; 0x74
 8000b82:	fb01 f202 	mul.w	r2, r1, r2
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000b8a:	f009 ffb5 	bl	800aaf8 <rand>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	425a      	negs	r2, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	bf58      	it	pl
 8000b98:	4253      	negpl	r3, r2
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillCircle(x,y,r,c);
 8000b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9e:	b218      	sxth	r0, r3
 8000ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba2:	b219      	sxth	r1, r3
 8000ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f001 fe31 	bl	8002812 <FillCircle>
	  x = rand()%VGA_WIDTH;
 8000bb0:	f009 ffa2 	bl	800aaf8 <rand>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	4b5b      	ldr	r3, [pc, #364]	; (8000d24 <main+0x3a8>)
 8000bb8:	fb83 1302 	smull	r1, r3, r3, r2
 8000bbc:	1199      	asrs	r1, r3, #6
 8000bbe:	17d3      	asrs	r3, r2, #31
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	015b      	lsls	r3, r3, #5
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000bce:	f009 ff93 	bl	800aaf8 <rand>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a54      	ldr	r2, [pc, #336]	; (8000d28 <main+0x3ac>)
 8000bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bda:	441a      	add	r2, r3
 8000bdc:	1191      	asrs	r1, r2, #6
 8000bde:	17da      	asrs	r2, r3, #31
 8000be0:	1a8a      	subs	r2, r1, r2
 8000be2:	2174      	movs	r1, #116	; 0x74
 8000be4:	fb01 f202 	mul.w	r2, r1, r2
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%50;
 8000bec:	f009 ff84 	bl	800aaf8 <rand>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a4b      	ldr	r2, [pc, #300]	; (8000d20 <main+0x3a4>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1111      	asrs	r1, r2, #4
 8000bfa:	17da      	asrs	r2, r3, #31
 8000bfc:	1a8a      	subs	r2, r1, r2
 8000bfe:	2132      	movs	r1, #50	; 0x32
 8000c00:	fb01 f202 	mul.w	r2, r1, r2
 8000c04:	1a9b      	subs	r3, r3, r2
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%50;
 8000c08:	f009 ff76 	bl	800aaf8 <rand>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a44      	ldr	r2, [pc, #272]	; (8000d20 <main+0x3a4>)
 8000c10:	fb82 1203 	smull	r1, r2, r2, r3
 8000c14:	1111      	asrs	r1, r2, #4
 8000c16:	17da      	asrs	r2, r3, #31
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	2132      	movs	r1, #50	; 0x32
 8000c1c:	fb01 f202 	mul.w	r2, r1, r2
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000c24:	f009 ff68 	bl	800aaf8 <rand>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	425a      	negs	r2, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	bf58      	it	pl
 8000c32:	4253      	negpl	r3, r2
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawRectangle(x,y,x+w,y+h,c);
 8000c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c38:	b218      	sxth	r0, r3
 8000c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3c:	b219      	sxth	r1, r3
 8000c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b21c      	sxth	r4, r3
 8000c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	4613      	mov	r3, r2
 8000c62:	4622      	mov	r2, r4
 8000c64:	f001 fd4c 	bl	8002700 <DrawRectangle>
	  x = rand()%VGA_WIDTH;
 8000c68:	f009 ff46 	bl	800aaf8 <rand>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <main+0x3a8>)
 8000c70:	fb83 1302 	smull	r1, r3, r3, r2
 8000c74:	1199      	asrs	r1, r3, #6
 8000c76:	17d3      	asrs	r3, r2, #31
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	015b      	lsls	r3, r3, #5
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000c86:	f009 ff37 	bl	800aaf8 <rand>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <main+0x3ac>)
 8000c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c92:	441a      	add	r2, r3
 8000c94:	1191      	asrs	r1, r2, #6
 8000c96:	17da      	asrs	r2, r3, #31
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	2174      	movs	r1, #116	; 0x74
 8000c9c:	fb01 f202 	mul.w	r2, r1, r2
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%50;
 8000ca4:	f009 ff28 	bl	800aaf8 <rand>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <main+0x3a4>)
 8000cac:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb0:	1111      	asrs	r1, r2, #4
 8000cb2:	17da      	asrs	r2, r3, #31
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	2132      	movs	r1, #50	; 0x32
 8000cb8:	fb01 f202 	mul.w	r2, r1, r2
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%50;
 8000cc0:	f009 ff1a 	bl	800aaf8 <rand>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <main+0x3a4>)
 8000cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ccc:	1111      	asrs	r1, r2, #4
 8000cce:	17da      	asrs	r2, r3, #31
 8000cd0:	1a8a      	subs	r2, r1, r2
 8000cd2:	2132      	movs	r1, #50	; 0x32
 8000cd4:	fb01 f202 	mul.w	r2, r1, r2
 8000cd8:	1a9b      	subs	r3, r3, r2
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000cdc:	f009 ff0c 	bl	800aaf8 <rand>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	425a      	negs	r2, r3
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	bf58      	it	pl
 8000cea:	4253      	negpl	r3, r2
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillRectangle(x,y,w,h,c);
 8000cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf0:	b218      	sxth	r0, r3
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	b219      	sxth	r1, r3
 8000cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	e017      	b.n	8000d2c <main+0x3b0>
 8000cfc:	20000208 	.word	0x20000208
 8000d00:	40020414 	.word	0x40020414
 8000d04:	20000100 	.word	0x20000100
 8000d08:	20000148 	.word	0x20000148
 8000d0c:	20000190 	.word	0x20000190
 8000d10:	200000b8 	.word	0x200000b8
 8000d14:	200001f2 	.word	0x200001f2
 8000d18:	0800bd64 	.word	0x0800bd64
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	51eb851f 	.word	0x51eb851f
 8000d24:	66666667 	.word	0x66666667
 8000d28:	8d3dcb09 	.word	0x8d3dcb09
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	b21c      	sxth	r4, r3
 8000d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4623      	mov	r3, r4
 8000d38:	f001 fd29 	bl	800278e <FillRectangle>

	  if(getch(&cc)){
 8000d3c:	1cfb      	adds	r3, r7, #3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fdc8 	bl	80008d4 <getch>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d018      	beq.n	8000d7c <main+0x400>
		FillRectangle(VGA_WIDTH-100,0,VGA_WIDTH-1,20,VGA_BLACK);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2314      	movs	r3, #20
 8000d50:	229f      	movs	r2, #159	; 0x9f
 8000d52:	2100      	movs	r1, #0
 8000d54:	203c      	movs	r0, #60	; 0x3c
 8000d56:	f001 fd1a 	bl	800278e <FillRectangle>
		sprintf(msg,"KEY:%d:%c",cc,cc);
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	1d38      	adds	r0, r7, #4
 8000d62:	493b      	ldr	r1, [pc, #236]	; (8000e50 <main+0x4d4>)
 8000d64:	f009 ff16 	bl	800ab94 <siprintf>
		SetCursor(VGA_WIDTH-100,5);
 8000d68:	2105      	movs	r1, #5
 8000d6a:	203c      	movs	r0, #60	; 0x3c
 8000d6c:	f001 fc06 	bl	800257c <SetCursor>
		WriteString(msg,Font_7x10,VGA_GREEN);
 8000d70:	4a38      	ldr	r2, [pc, #224]	; (8000e54 <main+0x4d8>)
 8000d72:	1d38      	adds	r0, r7, #4
 8000d74:	231c      	movs	r3, #28
 8000d76:	ca06      	ldmia	r2, {r1, r2}
 8000d78:	f001 fbda 	bl	8002530 <WriteString>
	  }
	  z=z+1;
 8000d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d7e:	3301      	adds	r3, #1
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(z>=100){
 8000d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d84:	2b63      	cmp	r3, #99	; 0x63
 8000d86:	dd5c      	ble.n	8000e42 <main+0x4c6>
		  /////////
		  ClearScreen(VGA_BLACK);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f001 f9e7 	bl	800215c <ClearScreen>
		  ShowImage((uint8_t *)color,160,120,0,0);
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	2278      	movs	r2, #120	; 0x78
 8000d96:	21a0      	movs	r1, #160	; 0xa0
 8000d98:	482f      	ldr	r0, [pc, #188]	; (8000e58 <main+0x4dc>)
 8000d9a:	f001 fe31 	bl	8002a00 <ShowImage>
		  HAL_Delay(5000);
 8000d9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000da2:	f001 ff13 	bl	8002bcc <HAL_Delay>
		  ShowImage((uint8_t *)flower,160,101,0,0);
 8000da6:	2300      	movs	r3, #0
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2300      	movs	r3, #0
 8000dac:	2265      	movs	r2, #101	; 0x65
 8000dae:	21a0      	movs	r1, #160	; 0xa0
 8000db0:	482a      	ldr	r0, [pc, #168]	; (8000e5c <main+0x4e0>)
 8000db2:	f001 fe25 	bl	8002a00 <ShowImage>
		  HAL_Delay(5000);
 8000db6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dba:	f001 ff07 	bl	8002bcc <HAL_Delay>
		  ShowImage((uint8_t *)rgb,160,120,0,0);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2278      	movs	r2, #120	; 0x78
 8000dc6:	21a0      	movs	r1, #160	; 0xa0
 8000dc8:	4825      	ldr	r0, [pc, #148]	; (8000e60 <main+0x4e4>)
 8000dca:	f001 fe19 	bl	8002a00 <ShowImage>
		  HAL_Delay(5000);
 8000dce:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dd2:	f001 fefb 	bl	8002bcc <HAL_Delay>

		  tetris();
 8000dd6:	f000 fcd5 	bl	8001784 <tetris>
		  //////////
		  z=0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ClearScreen(VGA_BLACK);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f001 f9bc 	bl	800215c <ClearScreen>
		  HAL_Delay(100);
 8000de4:	2064      	movs	r0, #100	; 0x64
 8000de6:	f001 fef1 	bl	8002bcc <HAL_Delay>
		  vga_stop=1;
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <main+0x4e8>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	801a      	strh	r2, [r3, #0]
		  sprintf(msg,"Testing");
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	491d      	ldr	r1, [pc, #116]	; (8000e68 <main+0x4ec>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f009 fecd 	bl	800ab94 <siprintf>
		  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000dfa:	23ff      	movs	r3, #255	; 0xff
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2373      	movs	r3, #115	; 0x73
 8000e00:	229f      	movs	r2, #159	; 0x9f
 8000e02:	2100      	movs	r1, #0
 8000e04:	2000      	movs	r0, #0
 8000e06:	f001 fc7b 	bl	8002700 <DrawRectangle>
		  SetCursor(3,3);
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f001 fbb5 	bl	800257c <SetCursor>
		  WriteString(msg,Font_7x10,VGA_GREEN);
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <main+0x4d8>)
 8000e14:	1d38      	adds	r0, r7, #4
 8000e16:	231c      	movs	r3, #28
 8000e18:	ca06      	ldmia	r2, {r1, r2}
 8000e1a:	f001 fb89 	bl	8002530 <WriteString>
		  sprintf(msg,"%d ",VOFFSET);
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <main+0x4f0>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4912      	ldr	r1, [pc, #72]	; (8000e70 <main+0x4f4>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f009 feb3 	bl	800ab94 <siprintf>
		  SetCursor(3,50);
 8000e2e:	2132      	movs	r1, #50	; 0x32
 8000e30:	2003      	movs	r0, #3
 8000e32:	f001 fba3 	bl	800257c <SetCursor>
		  WriteString(msg,Font_7x10,VGA_WHITE);
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <main+0x4d8>)
 8000e38:	1d38      	adds	r0, r7, #4
 8000e3a:	23ff      	movs	r3, #255	; 0xff
 8000e3c:	ca06      	ldmia	r2, {r1, r2}
 8000e3e:	f001 fb77 	bl	8002530 <WriteString>
	  }
	  HAL_Delay(100);
 8000e42:	2064      	movs	r0, #100	; 0x64
 8000e44:	f001 fec2 	bl	8002bcc <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e48:	f009 fa24 	bl	800a294 <MX_USB_HOST_Process>
  {
 8000e4c:	e632      	b.n	8000ab4 <main+0x138>
 8000e4e:	bf00      	nop
 8000e50:	0800bd50 	.word	0x0800bd50
 8000e54:	20000008 	.word	0x20000008
 8000e58:	0800fcbc 	.word	0x0800fcbc
 8000e5c:	0800bd9c 	.word	0x0800bd9c
 8000e60:	080147bc 	.word	0x080147bc
 8000e64:	200001f2 	.word	0x200001f2
 8000e68:	0800bd5c 	.word	0x0800bd5c
 8000e6c:	200001f0 	.word	0x200001f0
 8000e70:	0800bd4c 	.word	0x0800bd4c

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2230      	movs	r2, #48	; 0x30
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f009 fd22 	bl	800a8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <SystemClock_Config+0xc8>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <SystemClock_Config+0xc8>)
 8000ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <SystemClock_Config+0xc8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <SystemClock_Config+0xcc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <SystemClock_Config+0xcc>)
 8000ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <SystemClock_Config+0xcc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ee4:	2319      	movs	r3, #25
 8000ee6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ee8:	23c0      	movs	r3, #192	; 0xc0
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 f9cd 	bl	8005298 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f04:	f000 f9ea 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2103      	movs	r1, #3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fc2f 	bl	8005788 <HAL_RCC_ClockConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f30:	f000 f9d4 	bl	80012dc <Error_Handler>
  }
}
 8000f34:	bf00      	nop
 8000f36:	3750      	adds	r7, #80	; 0x50
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40007000 	.word	0x40007000

08000f44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000f62:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <MX_TIM1_Init+0x9c>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000f68:	2203      	movs	r2, #3
 8000f6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4-1;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000f74:	2203      	movs	r2, #3
 8000f76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f8a:	4814      	ldr	r0, [pc, #80]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000f8c:	f004 fda8 	bl	8005ae0 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000f96:	f000 f9a1 	bl	80012dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000fa8:	f005 f97a 	bl	80062a0 <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000fb2:	f000 f993 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_TIM1_Init+0x98>)
 8000fc4:	f005 fdfa 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000fce:	f000 f985 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000b8 	.word	0x200000b8
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
 8001008:	615a      	str	r2, [r3, #20]
 800100a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <MX_TIM9_Init+0xc0>)
 800100e:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <MX_TIM9_Init+0xc4>)
 8001010:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_TIM9_Init+0xc0>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_TIM9_Init+0xc0>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 525-2;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_TIM9_Init+0xc0>)
 8001020:	f240 220b 	movw	r2, #523	; 0x20b
 8001024:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_TIM9_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_TIM9_Init+0xc0>)
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001032:	481c      	ldr	r0, [pc, #112]	; (80010a4 <MX_TIM9_Init+0xc0>)
 8001034:	f004 fd54 	bl	8005ae0 <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800103e:	f000 f94d 	bl	80012dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001042:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_TIM9_Init+0xc0>)
 8001044:	f004 fe58 	bl	8005cf8 <HAL_TIM_PWM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 f945 	bl	80012dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001052:	2307      	movs	r3, #7
 8001054:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001056:	2320      	movs	r3, #32
 8001058:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <MX_TIM9_Init+0xc0>)
 8001062:	f005 f9e4 	bl	800642e <HAL_TIM_SlaveConfigSynchro>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 800106c:	f000 f936 	bl	80012dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800107c:	2304      	movs	r3, #4
 800107e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM9_Init+0xc0>)
 8001088:	f005 f848 	bl	800611c <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM9_Init+0xb2>
  {
    Error_Handler();
 8001092:	f000 f923 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM9_Init+0xc0>)
 8001098:	f000 f9de 	bl	8001458 <HAL_TIM_MspPostInit>

}
 800109c:	bf00      	nop
 800109e:	3730      	adds	r7, #48	; 0x30
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000100 	.word	0x20000100
 80010a8:	40014000 	.word	0x40014000

080010ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_TIM10_Init+0x94>)
 80010c6:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <MX_TIM10_Init+0x98>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4-1;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM10_Init+0x94>)
 80010cc:	2203      	movs	r2, #3
 80010ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM10_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800-1;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM10_Init+0x94>)
 80010d8:	f240 321f 	movw	r2, #799	; 0x31f
 80010dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM10_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_TIM10_Init+0x94>)
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010ea:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_TIM10_Init+0x94>)
 80010ec:	f004 fcf8 	bl	8005ae0 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80010f6:	f000 f8f1 	bl	80012dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <MX_TIM10_Init+0x94>)
 80010fc:	f004 fdfc 	bl	8005cf8 <HAL_TIM_PWM_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001106:	f000 f8e9 	bl	80012dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	; 0x60
 800110c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 96-1;
 800110e:	235f      	movs	r3, #95	; 0x5f
 8001110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001116:	2304      	movs	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM10_Init+0x94>)
 8001122:	f004 fffb 	bl	800611c <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800112c:	f000 f8d6 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM10_Init+0x94>)
 8001132:	f000 f991 	bl	8001458 <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000148 	.word	0x20000148
 8001144:	40014400 	.word	0x40014400

08001148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_DMA_Init+0x3c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <MX_DMA_Init+0x3c>)
 8001158:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_DMA_Init+0x3c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2044      	movs	r0, #68	; 0x44
 8001170:	f001 fe2b 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001174:	2044      	movs	r0, #68	; 0x44
 8001176:	f001 fe44 	bl	8002e02 <HAL_NVIC_EnableIRQ>

}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <MX_GPIO_Init+0x144>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a49      	ldr	r2, [pc, #292]	; (80012cc <MX_GPIO_Init+0x144>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <MX_GPIO_Init+0x144>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b43      	ldr	r3, [pc, #268]	; (80012cc <MX_GPIO_Init+0x144>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a42      	ldr	r2, [pc, #264]	; (80012cc <MX_GPIO_Init+0x144>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <MX_GPIO_Init+0x144>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <MX_GPIO_Init+0x144>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <MX_GPIO_Init+0x144>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <MX_GPIO_Init+0x144>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MX_GPIO_Init+0x144>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a34      	ldr	r2, [pc, #208]	; (80012cc <MX_GPIO_Init+0x144>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <MX_GPIO_Init+0x144>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001214:	482e      	ldr	r0, [pc, #184]	; (80012d0 <MX_GPIO_Init+0x148>)
 8001216:	f002 fbe9 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B0_Pin|B1_Pin|G0_Pin|G1_Pin
 800121a:	2200      	movs	r2, #0
 800121c:	21ff      	movs	r1, #255	; 0xff
 800121e:	482d      	ldr	r0, [pc, #180]	; (80012d4 <MX_GPIO_Init+0x14c>)
 8001220:	f002 fbe4 	bl	80039ec <HAL_GPIO_WritePin>
                          |G2_Pin|R0_Pin|R1_Pin|R2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122a:	482b      	ldr	r0, [pc, #172]	; (80012d8 <MX_GPIO_Init+0x150>)
 800122c:	f002 fbde 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4821      	ldr	r0, [pc, #132]	; (80012d0 <MX_GPIO_Init+0x148>)
 800124a:	f002 fa4b 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin B1_Pin G0_Pin G1_Pin
                           G2_Pin R0_Pin R1_Pin R2_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|G0_Pin|G1_Pin
 800124e:	23ff      	movs	r3, #255	; 0xff
 8001250:	617b      	str	r3, [r7, #20]
                          |G2_Pin|R0_Pin|R1_Pin|R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	481b      	ldr	r0, [pc, #108]	; (80012d4 <MX_GPIO_Init+0x14c>)
 8001266:	f002 fa3d 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800126a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001270:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001276:	2301      	movs	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4814      	ldr	r0, [pc, #80]	; (80012d4 <MX_GPIO_Init+0x14c>)
 8001282:	f002 fa2f 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <MX_GPIO_Init+0x150>)
 80012a0:	f002 fa20 	bl	80036e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2017      	movs	r0, #23
 80012aa:	f001 fd8e 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ae:	2017      	movs	r0, #23
 80012b0:	f001 fda7 	bl	8002e02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	f001 fd86 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012be:	2028      	movs	r0, #40	; 0x28
 80012c0:	f001 fd9f 	bl	8002e02 <HAL_NVIC_EnableIRQ>

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020000 	.word	0x40020000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_MspInit+0x4c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x4c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <HAL_TIM_Base_MspInit+0x108>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d146      	bne.n	80013d8 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a3c      	ldr	r2, [pc, #240]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_TIM_Base_MspInit+0x114>)
 800136a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 800136e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001372:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 8001382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001386:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001394:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 8001396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139a:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 800139e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013a2:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80013aa:	4827      	ldr	r0, [pc, #156]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 80013ac:	f001 fd44 	bl	8002e38 <HAL_DMA_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80013b6:	f7ff ff91 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a22      	ldr	r2, [pc, #136]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 80013be:	621a      	str	r2, [r3, #32]
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <HAL_TIM_Base_MspInit+0x110>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2018      	movs	r0, #24
 80013cc:	f001 fcfd 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013d0:	2018      	movs	r0, #24
 80013d2:	f001 fd16 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80013d6:	e02e      	b.n	8001436 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM9)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <HAL_TIM_Base_MspInit+0x118>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d116      	bne.n	8001410 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2018      	movs	r0, #24
 8001404:	f001 fce1 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001408:	2018      	movs	r0, #24
 800140a:	f001 fcfa 	bl	8002e02 <HAL_NVIC_EnableIRQ>
}
 800140e:	e012      	b.n	8001436 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_TIM_Base_MspInit+0x11c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10d      	bne.n	8001436 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_TIM_Base_MspInit+0x10c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40010000 	.word	0x40010000
 8001444:	40023800 	.word	0x40023800
 8001448:	20000190 	.word	0x20000190
 800144c:	40026488 	.word	0x40026488
 8001450:	40014000 	.word	0x40014000
 8001454:	40014400 	.word	0x40014400

08001458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_TIM_MspPostInit+0xb0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11e      	bne.n	80014b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_TIM_MspPostInit+0xb4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a22      	ldr	r2, [pc, #136]	; (800150c <HAL_TIM_MspPostInit+0xb4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_TIM_MspPostInit+0xb4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001496:	2304      	movs	r3, #4
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80014a6:	2303      	movs	r3, #3
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4817      	ldr	r0, [pc, #92]	; (8001510 <HAL_TIM_MspPostInit+0xb8>)
 80014b2:	f002 f917 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80014b6:	e023      	b.n	8001500 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a15      	ldr	r2, [pc, #84]	; (8001514 <HAL_TIM_MspPostInit+0xbc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d11e      	bne.n	8001500 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_TIM_MspPostInit+0xb4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_TIM_MspPostInit+0xb4>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_TIM_MspPostInit+0xb4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80014f0:	2303      	movs	r3, #3
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <HAL_TIM_MspPostInit+0xc0>)
 80014fc:	f002 f8f2 	bl	80036e4 <HAL_GPIO_Init>
}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40014000 	.word	0x40014000
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000
 8001514:	40014400 	.word	0x40014400
 8001518:	40020400 	.word	0x40020400

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <NMI_Handler+0x4>

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f001 fb10 	bl	8002b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001574:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001578:	f002 fa6c 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001586:	f004 fcc1 	bl	8005f0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800158c:	f004 fcbe 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200000b8 	.word	0x200000b8
 8001598:	20000100 	.word	0x20000100

0800159c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015a4:	f002 fa56 	bl	8003a54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <OTG_FS_IRQHandler+0x10>)
 80015b2:	f002 fcd1 	bl	8003f58 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20005e00 	.word	0x20005e00

080015c0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA2_Stream5_IRQHandler+0x10>)
 80015c6:	f001 fdcf 	bl	8003168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000190 	.word	0x20000190

080015d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
	return 1;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_kill>:

int _kill(int pid, int sig)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015ee:	f009 f925 	bl	800a83c <__errno>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2216      	movs	r2, #22
 80015f6:	601a      	str	r2, [r3, #0]
	return -1;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_exit>:

void _exit (int status)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ffe7 	bl	80015e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001616:	e7fe      	b.n	8001616 <_exit+0x12>

08001618 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e00a      	b.n	8001640 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800162a:	f3af 8000 	nop.w
 800162e:	4601      	mov	r1, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	b2ca      	uxtb	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf0      	blt.n	800162a <_read+0x12>
	}

return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	e009      	b.n	8001678 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf1      	blt.n	8001664 <_write+0x12>
	}
	return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_close>:

int _close(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b2:	605a      	str	r2, [r3, #4]
	return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_isatty>:

int _isatty(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f009 f88a 	bl	800a83c <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20020000 	.word	0x20020000
 8001754:	00000400 	.word	0x00000400
 8001758:	20000264 	.word	0x20000264
 800175c:	20006118 	.word	0x20006118

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <tetris>:
void drawPiece(int pieceNum,int pieceRotation,int locX,int locY,int color);
void drawBoard();
void checkRows();


void tetris(){
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af02      	add	r7, sp, #8
	int x,y;
	uint8_t ch;
	//Initial values
	srand(tetrisSeed());
 800178a:	f7ff f8e1 	bl	8000950 <tetrisSeed>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f009 f983 	bl	800aa9c <srand>
	fallDelay = NUMLEVEL;
 8001796:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <tetris+0x26c>)
 8001798:	220a      	movs	r2, #10
 800179a:	601a      	str	r2, [r3, #0]
	curDelay=0;
 800179c:	4b95      	ldr	r3, [pc, #596]	; (80019f4 <tetris+0x270>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
	curX = WIDTH/2;
 80017a2:	4b95      	ldr	r3, [pc, #596]	; (80019f8 <tetris+0x274>)
 80017a4:	2206      	movs	r2, #6
 80017a6:	601a      	str	r2, [r3, #0]
	curY = 0;
 80017a8:	4b94      	ldr	r3, [pc, #592]	; (80019fc <tetris+0x278>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
	curR = 0;
 80017ae:	4b94      	ldr	r3, [pc, #592]	; (8001a00 <tetris+0x27c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
	curPiece = rand()%7;
 80017b4:	f009 f9a0 	bl	800aaf8 <rand>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b92      	ldr	r3, [pc, #584]	; (8001a04 <tetris+0x280>)
 80017bc:	fb83 1302 	smull	r1, r3, r3, r2
 80017c0:	4413      	add	r3, r2
 80017c2:	1099      	asrs	r1, r3, #2
 80017c4:	17d3      	asrs	r3, r2, #31
 80017c6:	1ac9      	subs	r1, r1, r3
 80017c8:	460b      	mov	r3, r1
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	1a5b      	subs	r3, r3, r1
 80017ce:	1ad1      	subs	r1, r2, r3
 80017d0:	4b8d      	ldr	r3, [pc, #564]	; (8001a08 <tetris+0x284>)
 80017d2:	6019      	str	r1, [r3, #0]
	score=0;
 80017d4:	4b8d      	ldr	r3, [pc, #564]	; (8001a0c <tetris+0x288>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
	running = 1;
 80017da:	4b8d      	ldr	r3, [pc, #564]	; (8001a10 <tetris+0x28c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    //Initialize board
	for(y=0;y<HEIGHT;y++){
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	e017      	b.n	8001816 <tetris+0x92>
		for(x=0;x<WIDTH;x++){
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e00e      	b.n	800180a <tetris+0x86>
			tetrisBoard[y][x]=V_BGND;
 80017ec:	4989      	ldr	r1, [pc, #548]	; (8001a14 <tetris+0x290>)
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(x=0;x<WIDTH;x++){
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3301      	adds	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b0c      	cmp	r3, #12
 800180e:	dded      	ble.n	80017ec <tetris+0x68>
	for(y=0;y<HEIGHT;y++){
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3301      	adds	r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b1d      	cmp	r3, #29
 800181a:	dde4      	ble.n	80017e6 <tetris+0x62>
		}
	}
	//Clear screen and draw borders
	ClearScreen(V_BGND);
 800181c:	2000      	movs	r0, #0
 800181e:	f000 fc9d 	bl	800215c <ClearScreen>
	FillRectangle(BOARD_X,BOARD_Y,
 8001822:	23ff      	movs	r3, #255	; 0xff
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2360      	movs	r3, #96	; 0x60
 8001828:	2203      	movs	r2, #3
 800182a:	2101      	movs	r1, #1
 800182c:	2001      	movs	r0, #1
 800182e:	f000 ffae 	bl	800278e <FillRectangle>
			      BOARD_X+SIZE-1,BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);
	FillRectangle(BOARD_X+(WIDTH+1)*SIZE,BOARD_Y,
 8001832:	23ff      	movs	r3, #255	; 0xff
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2360      	movs	r3, #96	; 0x60
 8001838:	222d      	movs	r2, #45	; 0x2d
 800183a:	2101      	movs	r1, #1
 800183c:	202b      	movs	r0, #43	; 0x2b
 800183e:	f000 ffa6 	bl	800278e <FillRectangle>
			      BOARD_X+(WIDTH+2)*SIZE-1,BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);
	FillRectangle(BOARD_X+SIZE,BOARD_Y,
 8001842:	23ff      	movs	r3, #255	; 0xff
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2303      	movs	r3, #3
 8001848:	222a      	movs	r2, #42	; 0x2a
 800184a:	2101      	movs	r1, #1
 800184c:	2004      	movs	r0, #4
 800184e:	f000 ff9e 	bl	800278e <FillRectangle>
			      BOARD_X+(WIDTH+1)*SIZE-1,BOARD_Y+SIZE-1,V_BORD);
	FillRectangle(BOARD_X+SIZE,BOARD_Y+(HEIGHT+1)*SIZE,
 8001852:	23ff      	movs	r3, #255	; 0xff
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2360      	movs	r3, #96	; 0x60
 8001858:	222a      	movs	r2, #42	; 0x2a
 800185a:	215e      	movs	r1, #94	; 0x5e
 800185c:	2004      	movs	r0, #4
 800185e:	f000 ff96 	bl	800278e <FillRectangle>
			      BOARD_X+(WIDTH+1)*SIZE-1,
				  BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);

	//Main Game Loop
	while(running){
 8001862:	e1d0      	b.n	8001c06 <tetris+0x482>
		//Checking for key pressed and move current piece
		if(getch(&ch)){
 8001864:	1cfb      	adds	r3, r7, #3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f834 	bl	80008d4 <getch>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8104 	beq.w	8001a7c <tetris+0x2f8>
			switch(ch){
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	3b30      	subs	r3, #48	; 0x30
 8001878:	2b08      	cmp	r3, #8
 800187a:	f200 8108 	bhi.w	8001a8e <tetris+0x30a>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <tetris+0x100>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	080018a9 	.word	0x080018a9
 8001888:	08001a8f 	.word	0x08001a8f
 800188c:	08001a1d 	.word	0x08001a1d
 8001890:	08001a8f 	.word	0x08001a8f
 8001894:	0800192f 	.word	0x0800192f
 8001898:	08001a8f 	.word	0x08001a8f
 800189c:	08001991 	.word	0x08001991
 80018a0:	08001a8f 	.word	0x08001a8f
 80018a4:	080018b1 	.word	0x080018b1
			case '0': // Exit Tetris
				running = 0;
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <tetris+0x28c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
				continue;
 80018ae:	e1aa      	b.n	8001c06 <tetris+0x482>
			case '8': // rotate
				if(rotateAble(curPiece,(curR+1)%4,curX,curY)){
 80018b0:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <tetris+0x284>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	4b52      	ldr	r3, [pc, #328]	; (8001a00 <tetris+0x27c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	425a      	negs	r2, r3
 80018bc:	f003 0103 	and.w	r1, r3, #3
 80018c0:	f002 0303 	and.w	r3, r2, #3
 80018c4:	bf58      	it	pl
 80018c6:	4259      	negpl	r1, r3
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <tetris+0x274>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <tetris+0x278>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f000 fa0a 	bl	8001ce8 <rotateAble>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80d2 	beq.w	8001a80 <tetris+0x2fc>
					//remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <tetris+0x284>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <tetris+0x27c>)
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <tetris+0x274>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b44      	ldr	r3, [pc, #272]	; (80019fc <tetris+0x278>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2400      	movs	r4, #0
 80018ee:	9400      	str	r4, [sp, #0]
 80018f0:	f000 fafe 	bl	8001ef0 <drawPiece>
					//rotate piece and re-draw
					curR = (curR+1)%4;
 80018f4:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <tetris+0x27c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	425a      	negs	r2, r3
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	f002 0203 	and.w	r2, r2, #3
 8001904:	bf58      	it	pl
 8001906:	4253      	negpl	r3, r2
 8001908:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <tetris+0x27c>)
 800190a:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <tetris+0x284>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <tetris+0x27c>)
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <tetris+0x274>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <tetris+0x278>)
 800191a:	681c      	ldr	r4, [r3, #0]
 800191c:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <tetris+0x284>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4d3d      	ldr	r5, [pc, #244]	; (8001a18 <tetris+0x294>)
 8001922:	5ceb      	ldrb	r3, [r5, r3]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4623      	mov	r3, r4
 8001928:	f000 fae2 	bl	8001ef0 <drawPiece>
			    }
				break;
 800192c:	e0a8      	b.n	8001a80 <tetris+0x2fc>
			case '4': // move left
				if(rotateAble(curPiece,curR,curX-1,curY)){
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <tetris+0x284>)
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <tetris+0x27c>)
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <tetris+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <tetris+0x278>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f000 f9d2 	bl	8001ce8 <rotateAble>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 809c 	beq.w	8001a84 <tetris+0x300>
				    //remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 800194c:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <tetris+0x284>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <tetris+0x27c>)
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <tetris+0x274>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <tetris+0x278>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2400      	movs	r4, #0
 800195e:	9400      	str	r4, [sp, #0]
 8001960:	f000 fac6 	bl	8001ef0 <drawPiece>
					//rotate piece and re-draw
					curX = curX-1;
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <tetris+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3b01      	subs	r3, #1
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <tetris+0x274>)
 800196c:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <tetris+0x284>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <tetris+0x27c>)
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <tetris+0x274>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <tetris+0x278>)
 800197c:	681c      	ldr	r4, [r3, #0]
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <tetris+0x284>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4d25      	ldr	r5, [pc, #148]	; (8001a18 <tetris+0x294>)
 8001984:	5ceb      	ldrb	r3, [r5, r3]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4623      	mov	r3, r4
 800198a:	f000 fab1 	bl	8001ef0 <drawPiece>
				}
				break;
 800198e:	e079      	b.n	8001a84 <tetris+0x300>
			case '6': // move right
				if(rotateAble(curPiece,curR,curX+1,curY)){
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <tetris+0x284>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <tetris+0x27c>)
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <tetris+0x274>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <tetris+0x278>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f000 f9a1 	bl	8001ce8 <rotateAble>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d06d      	beq.n	8001a88 <tetris+0x304>
				    //remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <tetris+0x284>)
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <tetris+0x27c>)
 80019b2:	6819      	ldr	r1, [r3, #0]
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <tetris+0x274>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <tetris+0x278>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2400      	movs	r4, #0
 80019be:	9400      	str	r4, [sp, #0]
 80019c0:	f000 fa96 	bl	8001ef0 <drawPiece>
					//rotate piece and re-draw
					curX = curX+1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <tetris+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <tetris+0x274>)
 80019cc:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <tetris+0x284>)
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <tetris+0x27c>)
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <tetris+0x274>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <tetris+0x278>)
 80019dc:	681c      	ldr	r4, [r3, #0]
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <tetris+0x284>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4d0d      	ldr	r5, [pc, #52]	; (8001a18 <tetris+0x294>)
 80019e4:	5ceb      	ldrb	r3, [r5, r3]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4623      	mov	r3, r4
 80019ea:	f000 fa81 	bl	8001ef0 <drawPiece>
				}
				break;
 80019ee:	e04b      	b.n	8001a88 <tetris+0x304>
 80019f0:	20000884 	.word	0x20000884
 80019f4:	20000888 	.word	0x20000888
 80019f8:	2000088c 	.word	0x2000088c
 80019fc:	20000890 	.word	0x20000890
 8001a00:	20000894 	.word	0x20000894
 8001a04:	92492493 	.word	0x92492493
 8001a08:	20000898 	.word	0x20000898
 8001a0c:	20000880 	.word	0x20000880
 8001a10:	2000089c 	.word	0x2000089c
 8001a14:	20000268 	.word	0x20000268
 8001a18:	080193ac 	.word	0x080193ac
			case '2': // move down
				if(rotateAble(curPiece,curR,curX,curY+1)){
 8001a1c:	4b7f      	ldr	r3, [pc, #508]	; (8001c1c <tetris+0x498>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <tetris+0x49c>)
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <tetris+0x4a0>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <tetris+0x4a4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f000 f95b 	bl	8001ce8 <rotateAble>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d029      	beq.n	8001a8c <tetris+0x308>
					//remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001a38:	4b78      	ldr	r3, [pc, #480]	; (8001c1c <tetris+0x498>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	4b78      	ldr	r3, [pc, #480]	; (8001c20 <tetris+0x49c>)
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	4b78      	ldr	r3, [pc, #480]	; (8001c24 <tetris+0x4a0>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <tetris+0x4a4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2400      	movs	r4, #0
 8001a4a:	9400      	str	r4, [sp, #0]
 8001a4c:	f000 fa50 	bl	8001ef0 <drawPiece>
					//rotate piece and re-draw
					curY = curY+1;
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <tetris+0x4a4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	4a74      	ldr	r2, [pc, #464]	; (8001c28 <tetris+0x4a4>)
 8001a58:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 8001a5a:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <tetris+0x498>)
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <tetris+0x49c>)
 8001a60:	6819      	ldr	r1, [r3, #0]
 8001a62:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <tetris+0x4a0>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b70      	ldr	r3, [pc, #448]	; (8001c28 <tetris+0x4a4>)
 8001a68:	681c      	ldr	r4, [r3, #0]
 8001a6a:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <tetris+0x498>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4d6f      	ldr	r5, [pc, #444]	; (8001c2c <tetris+0x4a8>)
 8001a70:	5ceb      	ldrb	r3, [r5, r3]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	4623      	mov	r3, r4
 8001a76:	f000 fa3b 	bl	8001ef0 <drawPiece>
				}
				break;
 8001a7a:	e007      	b.n	8001a8c <tetris+0x308>
		}
		}
 8001a7c:	bf00      	nop
 8001a7e:	e006      	b.n	8001a8e <tetris+0x30a>
				break;
 8001a80:	bf00      	nop
 8001a82:	e004      	b.n	8001a8e <tetris+0x30a>
				break;
 8001a84:	bf00      	nop
 8001a86:	e002      	b.n	8001a8e <tetris+0x30a>
				break;
 8001a88:	bf00      	nop
 8001a8a:	e000      	b.n	8001a8e <tetris+0x30a>
				break;
 8001a8c:	bf00      	nop
		curDelay--;
 8001a8e:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <tetris+0x4ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	4a66      	ldr	r2, [pc, #408]	; (8001c30 <tetris+0x4ac>)
 8001a96:	6013      	str	r3, [r2, #0]
		if(curDelay<0){
 8001a98:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <tetris+0x4ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f280 80af 	bge.w	8001c00 <tetris+0x47c>
			Round++;
 8001aa2:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <tetris+0x4b0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a62      	ldr	r2, [pc, #392]	; (8001c34 <tetris+0x4b0>)
 8001aaa:	6013      	str	r3, [r2, #0]
			if(Round>UPSPEED){
 8001aac:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <tetris+0x4b0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	dd0b      	ble.n	8001acc <tetris+0x348>
				Round = 0;
 8001ab4:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <tetris+0x4b0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
				if(fallDelay>0)
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <tetris+0x4b4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	dd04      	ble.n	8001acc <tetris+0x348>
					fallDelay--;
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <tetris+0x4b4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	4a5b      	ldr	r2, [pc, #364]	; (8001c38 <tetris+0x4b4>)
 8001aca:	6013      	str	r3, [r2, #0]
			}
			curDelay=fallDelay;
 8001acc:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <tetris+0x4b4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <tetris+0x4ac>)
 8001ad2:	6013      	str	r3, [r2, #0]
		    // Check if current piece can move further down
		    if(moveAble(curPiece,curR,curX,curY)){
 8001ad4:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <tetris+0x498>)
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <tetris+0x49c>)
 8001ada:	6819      	ldr	r1, [r3, #0]
 8001adc:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <tetris+0x4a0>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <tetris+0x4a4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f000 f958 	bl	8001d98 <moveAble>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d021      	beq.n	8001b32 <tetris+0x3ae>
			    //remove old piece
		    	drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001aee:	4b4b      	ldr	r3, [pc, #300]	; (8001c1c <tetris+0x498>)
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <tetris+0x49c>)
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <tetris+0x4a0>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <tetris+0x4a4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2400      	movs	r4, #0
 8001b00:	9400      	str	r4, [sp, #0]
 8001b02:	f000 f9f5 	bl	8001ef0 <drawPiece>
		    	//rotate piece and re-draw
		    	curY = curY+1;
 8001b06:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <tetris+0x4a4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	4a46      	ldr	r2, [pc, #280]	; (8001c28 <tetris+0x4a4>)
 8001b0e:	6013      	str	r3, [r2, #0]
		    	drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <tetris+0x498>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <tetris+0x49c>)
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <tetris+0x4a0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <tetris+0x4a4>)
 8001b1e:	681c      	ldr	r4, [r3, #0]
 8001b20:	4b3e      	ldr	r3, [pc, #248]	; (8001c1c <tetris+0x498>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4d41      	ldr	r5, [pc, #260]	; (8001c2c <tetris+0x4a8>)
 8001b26:	5ceb      	ldrb	r3, [r5, r3]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	f000 f9e0 	bl	8001ef0 <drawPiece>
 8001b30:	e066      	b.n	8001c00 <tetris+0x47c>
		    }else{
		    	// struck here
		    	//Assign value to the board
		    	for(int i=0;i<4;i++){
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	e035      	b.n	8001ba4 <tetris+0x420>
		    		tetrisBoard[curY+piece[curPiece][curR][i*2+1]]
							   [curX+piece[curPiece][curR][i*2]] = pieceColor[curPiece];
 8001b38:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <tetris+0x498>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <tetris+0x4a8>)
 8001b3e:	5cd5      	ldrb	r5, [r2, r3]
		    		tetrisBoard[curY+piece[curPiece][curR][i*2+1]]
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <tetris+0x498>)
 8001b42:	6819      	ldr	r1, [r3, #0]
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <tetris+0x49c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	483b      	ldr	r0, [pc, #236]	; (8001c3c <tetris+0x4b8>)
 8001b50:	0089      	lsls	r1, r1, #2
 8001b52:	440a      	add	r2, r1
 8001b54:	00d2      	lsls	r2, r2, #3
 8001b56:	4402      	add	r2, r0
 8001b58:	4413      	add	r3, r2
 8001b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <tetris+0x4a4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	441a      	add	r2, r3
							   [curX+piece[curPiece][curR][i*2]] = pieceColor[curPiece];
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <tetris+0x498>)
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <tetris+0x49c>)
 8001b6c:	6819      	ldr	r1, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4c32      	ldr	r4, [pc, #200]	; (8001c3c <tetris+0x4b8>)
 8001b74:	0080      	lsls	r0, r0, #2
 8001b76:	4401      	add	r1, r0
 8001b78:	00c9      	lsls	r1, r1, #3
 8001b7a:	4421      	add	r1, r4
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <tetris+0x4a0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4419      	add	r1, r3
 8001b8a:	462c      	mov	r4, r5
 8001b8c:	482c      	ldr	r0, [pc, #176]	; (8001c40 <tetris+0x4bc>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		    	for(int i=0;i<4;i++){
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	ddc6      	ble.n	8001b38 <tetris+0x3b4>
		        }
		    	score = score+4; // Add score of placing new piece in the board
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <tetris+0x4c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <tetris+0x4c0>)
 8001bb2:	6013      	str	r3, [r2, #0]

		    	//Check for completed rows
		    	checkRows();
 8001bb4:	f000 fa54 	bl	8002060 <checkRows>
		    	showScore();
 8001bb8:	f000 f84a 	bl	8001c50 <showScore>
			    //Generate new piece
			    curPiece = rand()%7;
 8001bbc:	f008 ff9c 	bl	800aaf8 <rand>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <tetris+0x4c4>)
 8001bc4:	fb83 1302 	smull	r1, r3, r3, r2
 8001bc8:	4413      	add	r3, r2
 8001bca:	1099      	asrs	r1, r3, #2
 8001bcc:	17d3      	asrs	r3, r2, #31
 8001bce:	1ac9      	subs	r1, r1, r3
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	1a5b      	subs	r3, r3, r1
 8001bd6:	1ad1      	subs	r1, r2, r3
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <tetris+0x498>)
 8001bda:	6019      	str	r1, [r3, #0]
			    curX = WIDTH/2;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <tetris+0x4a0>)
 8001bde:	2206      	movs	r2, #6
 8001be0:	601a      	str	r2, [r3, #0]
			    curY = 0;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <tetris+0x4a4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
			    curR = 0;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <tetris+0x49c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

			    if(pieceOverlapped()){
 8001bee:	f000 f925 	bl	8001e3c <pieceOverlapped>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <tetris+0x47c>
			    	// Can not place new piece
			    	running = 0;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <tetris+0x4c8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
			    	continue;
 8001bfe:	e002      	b.n	8001c06 <tetris+0x482>
			    }
		    }
		}
		tetrisDelay(100); //Delay one unit
 8001c00:	2064      	movs	r0, #100	; 0x64
 8001c02:	f7fe fe99 	bl	8000938 <tetrisDelay>
	while(running){
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <tetris+0x4c8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f47f ae2a 	bne.w	8001864 <tetris+0xe0>
	}
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000898 	.word	0x20000898
 8001c20:	20000894 	.word	0x20000894
 8001c24:	2000088c 	.word	0x2000088c
 8001c28:	20000890 	.word	0x20000890
 8001c2c:	080193ac 	.word	0x080193ac
 8001c30:	20000888 	.word	0x20000888
 8001c34:	200008a0 	.word	0x200008a0
 8001c38:	20000884 	.word	0x20000884
 8001c3c:	080192cc 	.word	0x080192cc
 8001c40:	20000268 	.word	0x20000268
 8001c44:	20000880 	.word	0x20000880
 8001c48:	92492493 	.word	0x92492493
 8001c4c:	2000089c 	.word	0x2000089c

08001c50 <showScore>:


void showScore(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
	char msg[16];
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE);
 8001c56:	2104      	movs	r1, #4
 8001c58:	2030      	movs	r0, #48	; 0x30
 8001c5a:	f000 fc8f 	bl	800257c <SetCursor>
	WriteString(" SCORE",Font_7x10,VGA_CYAN);
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <showScore+0x80>)
 8001c60:	231f      	movs	r3, #31
 8001c62:	ca06      	ldmia	r2, {r1, r2}
 8001c64:	481b      	ldr	r0, [pc, #108]	; (8001cd4 <showScore+0x84>)
 8001c66:	f000 fc63 	bl	8002530 <WriteString>
	sprintf(msg,"%6d",score);
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <showScore+0x88>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	463b      	mov	r3, r7
 8001c70:	491a      	ldr	r1, [pc, #104]	; (8001cdc <showScore+0x8c>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	f008 ff8e 	bl	800ab94 <siprintf>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE+12);
 8001c78:	2110      	movs	r1, #16
 8001c7a:	2030      	movs	r0, #48	; 0x30
 8001c7c:	f000 fc7e 	bl	800257c <SetCursor>
	WriteString(msg,Font_7x10,VGA_YELLOW);
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <showScore+0x80>)
 8001c82:	4638      	mov	r0, r7
 8001c84:	23fc      	movs	r3, #252	; 0xfc
 8001c86:	ca06      	ldmia	r2, {r1, r2}
 8001c88:	f000 fc52 	bl	8002530 <WriteString>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE+24);
 8001c8c:	211c      	movs	r1, #28
 8001c8e:	2030      	movs	r0, #48	; 0x30
 8001c90:	f000 fc74 	bl	800257c <SetCursor>
	WriteString(" LEVEL",Font_7x10,VGA_CYAN);
 8001c94:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <showScore+0x80>)
 8001c96:	231f      	movs	r3, #31
 8001c98:	ca06      	ldmia	r2, {r1, r2}
 8001c9a:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <showScore+0x90>)
 8001c9c:	f000 fc48 	bl	8002530 <WriteString>
	sprintf(msg,"%6d",NUMLEVEL-fallDelay+1);
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <showScore+0x94>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1c3 020b 	rsb	r2, r3, #11
 8001ca8:	463b      	mov	r3, r7
 8001caa:	490c      	ldr	r1, [pc, #48]	; (8001cdc <showScore+0x8c>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f008 ff71 	bl	800ab94 <siprintf>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE+36);
 8001cb2:	2128      	movs	r1, #40	; 0x28
 8001cb4:	2030      	movs	r0, #48	; 0x30
 8001cb6:	f000 fc61 	bl	800257c <SetCursor>
	WriteString(msg,Font_7x10,VGA_GREEN);
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <showScore+0x80>)
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	231c      	movs	r3, #28
 8001cc0:	ca06      	ldmia	r2, {r1, r2}
 8001cc2:	f000 fc35 	bl	8002530 <WriteString>
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	0800bd84 	.word	0x0800bd84
 8001cd8:	20000880 	.word	0x20000880
 8001cdc:	0800bd8c 	.word	0x0800bd8c
 8001ce0:	0800bd90 	.word	0x0800bd90
 8001ce4:	20000884 	.word	0x20000884

08001ce8 <rotateAble>:
int  rotateAble(int pieceNum,int pieceTargetRotation,int locX,int locY){
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
    for(int i=0;i<4;i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e03f      	b.n	8001d7c <rotateAble+0x94>
    	int x = piece[pieceNum][pieceTargetRotation][i*2]+locX;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4823      	ldr	r0, [pc, #140]	; (8001d90 <rotateAble+0xa8>)
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	0091      	lsls	r1, r2, #2
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	440a      	add	r2, r1
 8001d0a:	00d2      	lsls	r2, r2, #3
 8001d0c:	4402      	add	r2, r0
 8001d0e:	4413      	add	r3, r2
 8001d10:	f993 3000 	ldrsb.w	r3, [r3]
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceTargetRotation][i*2+1]+locY;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	3301      	adds	r3, #1
 8001d22:	481b      	ldr	r0, [pc, #108]	; (8001d90 <rotateAble+0xa8>)
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	0091      	lsls	r1, r2, #2
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	440a      	add	r2, r1
 8001d2c:	00d2      	lsls	r2, r2, #3
 8001d2e:	4402      	add	r2, r0
 8001d30:	4413      	add	r3, r2
 8001d32:	f993 3000 	ldrsb.w	r3, [r3]
 8001d36:	461a      	mov	r2, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]
    	if(x<0) return 0; // Out of board
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	da01      	bge.n	8001d48 <rotateAble+0x60>
 8001d44:	2300      	movs	r3, #0
 8001d46:	e01d      	b.n	8001d84 <rotateAble+0x9c>
    	if((x>=WIDTH) || (y>=HEIGHT)) return 0; // Out of board
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	dc02      	bgt.n	8001d54 <rotateAble+0x6c>
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b1d      	cmp	r3, #29
 8001d52:	dd01      	ble.n	8001d58 <rotateAble+0x70>
 8001d54:	2300      	movs	r3, #0
 8001d56:	e015      	b.n	8001d84 <rotateAble+0x9c>
    	if(tetrisBoard[y][x]!=V_BGND) return 0; // Overlapped other pieces
 8001d58:	490e      	ldr	r1, [pc, #56]	; (8001d94 <rotateAble+0xac>)
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <rotateAble+0x8e>
 8001d72:	2300      	movs	r3, #0
 8001d74:	e006      	b.n	8001d84 <rotateAble+0x9c>
    for(int i=0;i<4;i++){
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	ddbc      	ble.n	8001cfc <rotateAble+0x14>
    }
    return 1;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3724      	adds	r7, #36	; 0x24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	080192cc 	.word	0x080192cc
 8001d94:	20000268 	.word	0x20000268

08001d98 <moveAble>:

int  moveAble(int pieceNum,int pieceRotation,int locX,int locY){
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++){
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e038      	b.n	8001e1e <moveAble+0x86>
    	int x = piece[pieceNum][pieceRotation][i*2]+locX;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4820      	ldr	r0, [pc, #128]	; (8001e34 <moveAble+0x9c>)
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	0091      	lsls	r1, r2, #2
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	440a      	add	r2, r1
 8001dba:	00d2      	lsls	r2, r2, #3
 8001dbc:	4402      	add	r2, r0
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceRotation][i*2+1]+locY;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4818      	ldr	r0, [pc, #96]	; (8001e34 <moveAble+0x9c>)
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	0091      	lsls	r1, r2, #2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	440a      	add	r2, r1
 8001ddc:	00d2      	lsls	r2, r2, #3
 8001dde:	4402      	add	r2, r0
 8001de0:	4413      	add	r3, r2
 8001de2:	f993 3000 	ldrsb.w	r3, [r3]
 8001de6:	461a      	mov	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
    	//check if it is at the buttom
    	if(y>=(HEIGHT-1)) return 0;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b1c      	cmp	r3, #28
 8001df2:	dd01      	ble.n	8001df8 <moveAble+0x60>
 8001df4:	2300      	movs	r3, #0
 8001df6:	e016      	b.n	8001e26 <moveAble+0x8e>
    	//check if there is another piece under the current one
    	if(tetrisBoard[y+1][x]!=V_BGND)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	490e      	ldr	r1, [pc, #56]	; (8001e38 <moveAble+0xa0>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <moveAble+0x80>
    		return 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e006      	b.n	8001e26 <moveAble+0x8e>
	for(int i=0;i<4;i++){
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	ddc3      	ble.n	8001dac <moveAble+0x14>
	}
	return 1;
 8001e24:	2301      	movs	r3, #1
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	080192cc 	.word	0x080192cc
 8001e38:	20000268 	.word	0x20000268

08001e3c <pieceOverlapped>:

int  pieceOverlapped(){
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
	for(int i=0;i<4;i++){
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e03d      	b.n	8001ec4 <pieceOverlapped+0x88>
    	int x = piece[curPiece][curR][i*2]+curX;
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <pieceOverlapped+0x9c>)
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <pieceOverlapped+0xa0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4822      	ldr	r0, [pc, #136]	; (8001ee0 <pieceOverlapped+0xa4>)
 8001e56:	0089      	lsls	r1, r1, #2
 8001e58:	440a      	add	r2, r1
 8001e5a:	00d2      	lsls	r2, r2, #3
 8001e5c:	4402      	add	r2, r0
 8001e5e:	4413      	add	r3, r2
 8001e60:	f993 3000 	ldrsb.w	r3, [r3]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <pieceOverlapped+0xa8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60bb      	str	r3, [r7, #8]
    	int y = piece[curPiece][curR][i*2+1]+curY;
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <pieceOverlapped+0x9c>)
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <pieceOverlapped+0xa0>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4818      	ldr	r0, [pc, #96]	; (8001ee0 <pieceOverlapped+0xa4>)
 8001e7e:	0089      	lsls	r1, r1, #2
 8001e80:	440a      	add	r2, r1
 8001e82:	00d2      	lsls	r2, r2, #3
 8001e84:	4402      	add	r2, r0
 8001e86:	4413      	add	r3, r2
 8001e88:	f993 3000 	ldrsb.w	r3, [r3]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <pieceOverlapped+0xac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	607b      	str	r3, [r7, #4]
    	//check if there is another piece under the current one
    	if(y<0) continue;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0f      	blt.n	8001ebc <pieceOverlapped+0x80>
    	if(tetrisBoard[y+1][x]!=V_BGND)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	4912      	ldr	r1, [pc, #72]	; (8001eec <pieceOverlapped+0xb0>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <pieceOverlapped+0x82>
    		return 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <pieceOverlapped+0x90>
    	if(y<0) continue;
 8001ebc:	bf00      	nop
	for(int i=0;i<4;i++){
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	ddbe      	ble.n	8001e48 <pieceOverlapped+0xc>
	}
	return 0;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	20000898 	.word	0x20000898
 8001edc:	20000894 	.word	0x20000894
 8001ee0:	080192cc 	.word	0x080192cc
 8001ee4:	2000088c 	.word	0x2000088c
 8001ee8:	20000890 	.word	0x20000890
 8001eec:	20000268 	.word	0x20000268

08001ef0 <drawPiece>:

void  drawPiece(int pieceNum,int pieceRotation,int locX,int locY,int color){
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b08b      	sub	sp, #44	; 0x2c
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++){
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e050      	b.n	8001fa6 <drawPiece+0xb6>
    	int x = piece[pieceNum][pieceRotation][i*2]+locX;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <drawPiece+0xc8>)
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	0091      	lsls	r1, r2, #2
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	440a      	add	r2, r1
 8001f12:	00d2      	lsls	r2, r2, #3
 8001f14:	4402      	add	r2, r0
 8001f16:	4413      	add	r3, r2
 8001f18:	f993 3000 	ldrsb.w	r3, [r3]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceRotation][i*2+1]+locY;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	3301      	adds	r3, #1
 8001f2a:	4823      	ldr	r0, [pc, #140]	; (8001fb8 <drawPiece+0xc8>)
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	0091      	lsls	r1, r2, #2
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	440a      	add	r2, r1
 8001f34:	00d2      	lsls	r2, r2, #3
 8001f36:	4402      	add	r2, r0
 8001f38:	4413      	add	r3, r2
 8001f3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    	if(y>=0){
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db29      	blt.n	8001fa0 <drawPiece+0xb0>
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	0052      	lsls	r2, r2, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b218      	sxth	r0, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	0052      	lsls	r2, r2, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b219      	sxth	r1, r3
    	    		      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,color);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	3302      	adds	r3, #2
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	0052      	lsls	r2, r2, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b21a      	sxth	r2, r3
    	    		      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,color);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3302      	adds	r3, #2
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461c      	mov	r4, r3
 8001f8c:	0064      	lsls	r4, r4, #1
 8001f8e:	4423      	add	r3, r4
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b21c      	sxth	r4, r3
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	f000 fbf7 	bl	800278e <FillRectangle>
	for(int i=0;i<4;i++){
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	ddab      	ble.n	8001f04 <drawPiece+0x14>
    	}
	}
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	080192cc 	.word	0x080192cc

08001fbc <drawBoard>:

void drawBoard(){
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af02      	add	r7, sp, #8
	for(int y=0;y<HEIGHT;y++){
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	e040      	b.n	800204a <drawBoard+0x8e>
		for(int x=0;x<WIDTH;x++){
 8001fc8:	2300      	movs	r3, #0
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	e037      	b.n	800203e <drawBoard+0x82>
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	0052      	lsls	r2, r2, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b218      	sxth	r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	0052      	lsls	r2, r2, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	b219      	sxth	r1, r3
					      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3302      	adds	r3, #2
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	0052      	lsls	r2, r2, #1
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	b21c      	sxth	r4, r3
					      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3302      	adds	r3, #2
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	0052      	lsls	r2, r2, #1
 8002010:	4413      	add	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	b21d      	sxth	r5, r3
					       tetrisBoard[y][x]);
 8002016:	4e11      	ldr	r6, [pc, #68]	; (800205c <drawBoard+0xa0>)
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 800202c:	b2db      	uxtb	r3, r3
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	462b      	mov	r3, r5
 8002032:	4622      	mov	r2, r4
 8002034:	f000 fbab 	bl	800278e <FillRectangle>
		for(int x=0;x<WIDTH;x++){
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	ddc4      	ble.n	8001fce <drawBoard+0x12>
	for(int y=0;y<HEIGHT;y++){
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3301      	adds	r3, #1
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b1d      	cmp	r3, #29
 800204e:	ddbb      	ble.n	8001fc8 <drawBoard+0xc>
		}
	}
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205a:	bf00      	nop
 800205c:	20000268 	.word	0x20000268

08002060 <checkRows>:

void checkRows(){
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
	int addedScore = 100;
 8002066:	2364      	movs	r3, #100	; 0x64
 8002068:	617b      	str	r3, [r7, #20]
	int y,x,yy;
	int flag;

	for(y=HEIGHT-1;y>=0;y--){
 800206a:	231d      	movs	r3, #29
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e068      	b.n	8002142 <checkRows+0xe2>
		flag = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	607b      	str	r3, [r7, #4]
		//check current row if all filled
		for(x=0;x<WIDTH;x++){
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	e012      	b.n	80020a0 <checkRows+0x40>
			if(tetrisBoard[y][x]==V_BGND){
 800207a:	4936      	ldr	r1, [pc, #216]	; (8002154 <checkRows+0xf4>)
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <checkRows+0x3a>
				flag = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
				break;
 8002098:	e005      	b.n	80020a6 <checkRows+0x46>
		for(x=0;x<WIDTH;x++){
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	dde9      	ble.n	800207a <checkRows+0x1a>
			}
		}
		if(flag){
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d047      	beq.n	800213c <checkRows+0xdc>
			score += addedScore;  //increase score
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <checkRows+0xf8>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a28      	ldr	r2, [pc, #160]	; (8002158 <checkRows+0xf8>)
 80020b6:	6013      	str	r3, [r2, #0]
			addedScore *=2;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
			//Bunch pieces down
			for(yy=y-1;yy>=0;yy--){
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	e022      	b.n	800210c <checkRows+0xac>
			   for(x=0;x<WIDTH;x++){
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e019      	b.n	8002100 <checkRows+0xa0>
				   tetrisBoard[yy+1][x] = tetrisBoard[yy][x];
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	4820      	ldr	r0, [pc, #128]	; (8002154 <checkRows+0xf4>)
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	460b      	mov	r3, r1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	440b      	add	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	68f9      	ldr	r1, [r7, #12]
 80020e0:	440b      	add	r3, r1
 80020e2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80020e6:	481b      	ldr	r0, [pc, #108]	; (8002154 <checkRows+0xf4>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			   for(x=0;x<WIDTH;x++){
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	dde2      	ble.n	80020cc <checkRows+0x6c>
			for(yy=y-1;yy>=0;yy--){
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3b01      	subs	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	dad9      	bge.n	80020c6 <checkRows+0x66>
			   }
			}
			for(x=0;x<WIDTH;x++){
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e007      	b.n	8002128 <checkRows+0xc8>
				   tetrisBoard[0][x] = V_BGND;
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <checkRows+0xf4>)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2100      	movs	r1, #0
 800211e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<WIDTH;x++){
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3301      	adds	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	ddf4      	ble.n	8002118 <checkRows+0xb8>
			}
			y = HEIGHT; // recheck from bottom
 800212e:	231e      	movs	r3, #30
 8002130:	613b      	str	r3, [r7, #16]
			drawBoard();
 8002132:	f7ff ff43 	bl	8001fbc <drawBoard>
			tetrisDelay(200);
 8002136:	20c8      	movs	r0, #200	; 0xc8
 8002138:	f7fe fbfe 	bl	8000938 <tetrisDelay>
	for(y=HEIGHT-1;y>=0;y--){
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	3b01      	subs	r3, #1
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	da93      	bge.n	8002070 <checkRows+0x10>
		}
	}
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000268 	.word	0x20000268
 8002158:	20000880 	.word	0x20000880

0800215c <ClearScreen>:

uint8_t VGA_obuffer[VGA_FULL];
uint8_t VGA_buffer[VGA_VBUFFER][VGA_LBUFFER];
VGA_t VGA;

void ClearScreen(VGA_COLOR color){
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
	int i,j;
	for(j=0;j<VGA_VBUFFER;j++)
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	e016      	b.n	800219a <ClearScreen+0x3e>
		for(i=0;i<VGA_LBUFFER;i++){
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e00d      	b.n	800218e <ClearScreen+0x32>
			VGA_buffer[j][i]= color;
 8002172:	490f      	ldr	r1, [pc, #60]	; (80021b0 <ClearScreen+0x54>)
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	18ca      	adds	r2, r1, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	79fa      	ldrb	r2, [r7, #7]
 8002186:	701a      	strb	r2, [r3, #0]
		for(i=0;i<VGA_LBUFFER;i++){
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3301      	adds	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b9f      	cmp	r3, #159	; 0x9f
 8002192:	ddee      	ble.n	8002172 <ClearScreen+0x16>
	for(j=0;j<VGA_VBUFFER;j++)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	3301      	adds	r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b77      	cmp	r3, #119	; 0x77
 800219e:	dde5      	ble.n	800216c <ClearScreen+0x10>
	}
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000ee4 	.word	0x20000ee4

080021b4 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, VGA_COLOR color) {
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	80fb      	strh	r3, [r7, #6]
 80021be:	460b      	mov	r3, r1
 80021c0:	80bb      	strh	r3, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (y <0)||
 80021c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db19      	blt.n	8002202 <DrawPixel+0x4e>
 80021ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db15      	blt.n	8002202 <DrawPixel+0x4e>
 80021d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021da:	2b9f      	cmp	r3, #159	; 0x9f
 80021dc:	dc11      	bgt.n	8002202 <DrawPixel+0x4e>
	    (x >= VGA_WIDTH) || (y >= VGA_HEIGHT)) {
 80021de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021e2:	2b73      	cmp	r3, #115	; 0x73
 80021e4:	dc0d      	bgt.n	8002202 <DrawPixel+0x4e>
		/* Error */
		return;
	}
	/* Set color */
	VGA_buffer[y][x]=color;
 80021e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80021ea:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80021ee:	4808      	ldr	r0, [pc, #32]	; (8002210 <DrawPixel+0x5c>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	015b      	lsls	r3, r3, #5
 80021f8:	4403      	add	r3, r0
 80021fa:	440b      	add	r3, r1
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e000      	b.n	8002204 <DrawPixel+0x50>
		return;
 8002202:	bf00      	nop
}
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000ee4 	.word	0x20000ee4

08002214 <DrawLine>:

void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, VGA_COLOR c) {
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	4604      	mov	r4, r0
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4623      	mov	r3, r4
 8002224:	80fb      	strh	r3, [r7, #6]
 8002226:	4603      	mov	r3, r0
 8002228:	80bb      	strh	r3, [r7, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	807b      	strh	r3, [r7, #2]
 800222e:	4613      	mov	r3, r2
 8002230:	803b      	strh	r3, [r7, #0]
	}
	if (y1 >= VGA_HEIGHT) {
		y1 = VGA_HEIGHT - 1;
	}
*/
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8002232:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002236:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800223a:	429a      	cmp	r2, r3
 800223c:	da05      	bge.n	800224a <DrawLine+0x36>
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	b29b      	uxth	r3, r3
 8002246:	b21b      	sxth	r3, r3
 8002248:	e004      	b.n	8002254 <DrawLine+0x40>
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21b      	sxth	r3, r3
 8002254:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8002256:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800225a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800225e:	429a      	cmp	r2, r3
 8002260:	da05      	bge.n	800226e <DrawLine+0x5a>
 8002262:	883a      	ldrh	r2, [r7, #0]
 8002264:	88bb      	ldrh	r3, [r7, #4]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	b29b      	uxth	r3, r3
 800226a:	b21b      	sxth	r3, r3
 800226c:	e004      	b.n	8002278 <DrawLine+0x64>
 800226e:	88ba      	ldrh	r2, [r7, #4]
 8002270:	883b      	ldrh	r3, [r7, #0]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	b29b      	uxth	r3, r3
 8002276:	b21b      	sxth	r3, r3
 8002278:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 800227a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800227e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002282:	429a      	cmp	r2, r3
 8002284:	da01      	bge.n	800228a <DrawLine+0x76>
 8002286:	2301      	movs	r3, #1
 8002288:	e001      	b.n	800228e <DrawLine+0x7a>
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8002290:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002294:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002298:	429a      	cmp	r2, r3
 800229a:	da01      	bge.n	80022a0 <DrawLine+0x8c>
 800229c:	2301      	movs	r3, #1
 800229e:	e001      	b.n	80022a4 <DrawLine+0x90>
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 80022a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	dd06      	ble.n	80022c0 <DrawLine+0xac>
 80022b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022b6:	0fda      	lsrs	r2, r3, #31
 80022b8:	4413      	add	r3, r2
 80022ba:	105b      	asrs	r3, r3, #1
 80022bc:	b21b      	sxth	r3, r3
 80022be:	e006      	b.n	80022ce <DrawLine+0xba>
 80022c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022c4:	0fda      	lsrs	r2, r3, #31
 80022c6:	4413      	add	r3, r2
 80022c8:	105b      	asrs	r3, r3, #1
 80022ca:	425b      	negs	r3, r3
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80022d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d130      	bne.n	800233a <DrawLine+0x126>
		if (y1 < y0) {
 80022d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80022dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	da05      	bge.n	80022f0 <DrawLine+0xdc>
			tmp = y1;
 80022e4:	883b      	ldrh	r3, [r7, #0]
 80022e6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80022e8:	88bb      	ldrh	r3, [r7, #4]
 80022ea:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80022ec:	893b      	ldrh	r3, [r7, #8]
 80022ee:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80022f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	da05      	bge.n	8002308 <DrawLine+0xf4>
			tmp = x1;
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002304:	893b      	ldrh	r3, [r7, #8]
 8002306:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002308:	88bb      	ldrh	r3, [r7, #4]
 800230a:	82bb      	strh	r3, [r7, #20]
 800230c:	e00e      	b.n	800232c <DrawLine+0x118>
			DrawPixel(x0, i, c);
 800230e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002312:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff4a 	bl	80021b4 <DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002320:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002324:	b29b      	uxth	r3, r3
 8002326:	3301      	adds	r3, #1
 8002328:	b29b      	uxth	r3, r3
 800232a:	82bb      	strh	r3, [r7, #20]
 800232c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002330:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002334:	429a      	cmp	r2, r3
 8002336:	ddea      	ble.n	800230e <DrawLine+0xfa>
		}

		/* Return from function */
		return;
 8002338:	e06e      	b.n	8002418 <DrawLine+0x204>
	}

	if (dy == 0) {
 800233a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d130      	bne.n	80023a4 <DrawLine+0x190>
		if (y1 < y0) {
 8002342:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002346:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	da05      	bge.n	800235a <DrawLine+0x146>
			tmp = y1;
 800234e:	883b      	ldrh	r3, [r7, #0]
 8002350:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002352:	88bb      	ldrh	r3, [r7, #4]
 8002354:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002356:	893b      	ldrh	r3, [r7, #8]
 8002358:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800235a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800235e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002362:	429a      	cmp	r2, r3
 8002364:	da05      	bge.n	8002372 <DrawLine+0x15e>
			tmp = x1;
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800236e:	893b      	ldrh	r3, [r7, #8]
 8002370:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	82bb      	strh	r3, [r7, #20]
 8002376:	e00e      	b.n	8002396 <DrawLine+0x182>
			DrawPixel(i, y0, c);
 8002378:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800237c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002380:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff15 	bl	80021b4 <DrawPixel>
		for (i = x0; i <= x1; i++) {
 800238a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800238e:	b29b      	uxth	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	b29b      	uxth	r3, r3
 8002394:	82bb      	strh	r3, [r7, #20]
 8002396:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800239a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800239e:	429a      	cmp	r2, r3
 80023a0:	ddea      	ble.n	8002378 <DrawLine+0x164>
		}

		/* Return from function */
		return;
 80023a2:	e039      	b.n	8002418 <DrawLine+0x204>
	}

	while (1) {
		DrawPixel(x0, y0, c);
 80023a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80023a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff feff 	bl	80021b4 <DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80023b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80023ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d105      	bne.n	80023ce <DrawLine+0x1ba>
 80023c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80023c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d023      	beq.n	8002416 <DrawLine+0x202>
			break;
		}
		e2 = err;
 80023ce:	8afb      	ldrh	r3, [r7, #22]
 80023d0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80023d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023da:	425b      	negs	r3, r3
 80023dc:	429a      	cmp	r2, r3
 80023de:	dd09      	ble.n	80023f4 <DrawLine+0x1e0>
			err -= dy;
 80023e0:	8afa      	ldrh	r2, [r7, #22]
 80023e2:	8a3b      	ldrh	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	89fb      	ldrh	r3, [r7, #14]
 80023ee:	4413      	add	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 80023f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dad1      	bge.n	80023a4 <DrawLine+0x190>
			err += dx;
 8002400:	8afa      	ldrh	r2, [r7, #22]
 8002402:	8a7b      	ldrh	r3, [r7, #18]
 8002404:	4413      	add	r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800240a:	88ba      	ldrh	r2, [r7, #4]
 800240c:	89bb      	ldrh	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	80bb      	strh	r3, [r7, #4]
		DrawPixel(x0, y0, c);
 8002414:	e7c6      	b.n	80023a4 <DrawLine+0x190>
			break;
 8002416:	bf00      	nop
		}
	}
}
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}
	...

08002420 <WriteChar>:

char WriteChar(char ch, FontDef Font, VGA_COLOR color) {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	4604      	mov	r4, r0
 8002428:	1d38      	adds	r0, r7, #4
 800242a:	e880 0006 	stmia.w	r0, {r1, r2}
 800242e:	461a      	mov	r2, r3
 8002430:	4623      	mov	r3, r4
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	4613      	mov	r3, r2
 8002436:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b1f      	cmp	r3, #31
 800243c:	d902      	bls.n	8002444 <WriteChar+0x24>
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b7e      	cmp	r3, #126	; 0x7e
 8002442:	d901      	bls.n	8002448 <WriteChar+0x28>
        return 0;
 8002444:	2300      	movs	r3, #0
 8002446:	e06d      	b.n	8002524 <WriteChar+0x104>

    // Check remaining space on current line
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <WriteChar+0x10c>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	793b      	ldrb	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	2ba0      	cmp	r3, #160	; 0xa0
 8002454:	dc06      	bgt.n	8002464 <WriteChar+0x44>
        VGA_HEIGHT < (VGA.CurrentY + Font.FontHeight))
 8002456:	4b35      	ldr	r3, [pc, #212]	; (800252c <WriteChar+0x10c>)
 8002458:	885b      	ldrh	r3, [r3, #2]
 800245a:	461a      	mov	r2, r3
 800245c:	797b      	ldrb	r3, [r7, #5]
 800245e:	4413      	add	r3, r2
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8002460:	2b74      	cmp	r3, #116	; 0x74
 8002462:	dd01      	ble.n	8002468 <WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002464:	2300      	movs	r3, #0
 8002466:	e05d      	b.n	8002524 <WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	e04c      	b.n	8002508 <WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	3b20      	subs	r3, #32
 8002474:	7979      	ldrb	r1, [r7, #5]
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4619      	mov	r1, r3
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	440b      	add	r3, r1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	e034      	b.n	80024f8 <WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d012      	beq.n	80024c4 <WriteChar+0xa4>
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR) color);
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <WriteChar+0x10c>)
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b218      	sxth	r0, r3
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <WriteChar+0x10c>)
 80024ae:	885a      	ldrh	r2, [r3, #2]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	7bba      	ldrb	r2, [r7, #14]
 80024bc:	4619      	mov	r1, r3
 80024be:	f7ff fe79 	bl	80021b4 <DrawPixel>
 80024c2:	e016      	b.n	80024f2 <WriteChar+0xd2>
            } else {
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR)!color);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <WriteChar+0x10c>)
 80024c6:	881a      	ldrh	r2, [r3, #0]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b218      	sxth	r0, r3
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <WriteChar+0x10c>)
 80024d4:	885a      	ldrh	r2, [r3, #2]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4413      	add	r3, r2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b219      	sxth	r1, r3
 80024e0:	7bbb      	ldrb	r3, [r7, #14]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	f7ff fe61 	bl	80021b4 <DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61bb      	str	r3, [r7, #24]
 80024f8:	793b      	ldrb	r3, [r7, #4]
 80024fa:	461a      	mov	r2, r3
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	4293      	cmp	r3, r2
 8002500:	d3c5      	bcc.n	800248e <WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	797b      	ldrb	r3, [r7, #5]
 800250a:	461a      	mov	r2, r3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4293      	cmp	r3, r2
 8002510:	d3ad      	bcc.n	800246e <WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    VGA.CurrentX += Font.FontWidth;
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <WriteChar+0x10c>)
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	793b      	ldrb	r3, [r7, #4]
 8002518:	b29b      	uxth	r3, r3
 800251a:	4413      	add	r3, r2
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b03      	ldr	r3, [pc, #12]	; (800252c <WriteChar+0x10c>)
 8002520:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3724      	adds	r7, #36	; 0x24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	200059e4 	.word	0x200059e4

08002530 <WriteString>:

char WriteString(char* str, FontDef Font, VGA_COLOR color) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	1d38      	adds	r0, r7, #4
 800253a:	e880 0006 	stmia.w	r0, {r1, r2}
 800253e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002540:	e012      	b.n	8002568 <WriteString+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	7818      	ldrb	r0, [r3, #0]
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	1d3a      	adds	r2, r7, #4
 800254a:	ca06      	ldmia	r2, {r1, r2}
 800254c:	f7ff ff68 	bl	8002420 <WriteChar>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d002      	beq.n	8002562 <WriteString+0x32>
            // Char could not be written
            return *str;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	e008      	b.n	8002574 <WriteString+0x44>
        }

        // Next char
        str++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e8      	bne.n	8002542 <WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	781b      	ldrb	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <SetCursor>:

// Position the cursor
void SetCursor(int16_t x, int16_t y) {
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	460a      	mov	r2, r1
 8002586:	80fb      	strh	r3, [r7, #6]
 8002588:	4613      	mov	r3, r2
 800258a:	80bb      	strh	r3, [r7, #4]
	if((x<0)||(x>=VGA_WIDTH))
 800258c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db03      	blt.n	800259c <SetCursor+0x20>
 8002594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002598:	2b9f      	cmp	r3, #159	; 0x9f
 800259a:	dd03      	ble.n	80025a4 <SetCursor+0x28>
	    VGA.CurrentX = 0;
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <SetCursor+0x5c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	e002      	b.n	80025aa <SetCursor+0x2e>
	else
		VGA.CurrentX = x;
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <SetCursor+0x5c>)
 80025a8:	801a      	strh	r2, [r3, #0]
	if((y<0)||(y>=VGA_HEIGHT))
 80025aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db03      	blt.n	80025ba <SetCursor+0x3e>
 80025b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025b6:	2b73      	cmp	r3, #115	; 0x73
 80025b8:	dd03      	ble.n	80025c2 <SetCursor+0x46>
	    VGA.CurrentY = 0;
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <SetCursor+0x5c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	805a      	strh	r2, [r3, #2]
 80025c0:	e003      	b.n	80025ca <SetCursor+0x4e>
	else
        VGA.CurrentY = y;
 80025c2:	88ba      	ldrh	r2, [r7, #4]
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <SetCursor+0x5c>)
 80025c6:	805a      	strh	r2, [r3, #2]
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	200059e4 	.word	0x200059e4

080025dc <DrawCircle>:
    }

    return;
}

void DrawCircle(int16_t par_x,int16_t par_y,int16_t par_r,VGA_COLOR par_color) {
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4604      	mov	r4, r0
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	80fb      	strh	r3, [r7, #6]
 80025ee:	4603      	mov	r3, r0
 80025f0:	80bb      	strh	r3, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	807b      	strh	r3, [r7, #2]
 80025f6:	4613      	mov	r3, r2
 80025f8:	707b      	strb	r3, [r7, #1]
  int32_t x = -par_r;
 80025fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025fe:	425b      	negs	r3, r3
 8002600:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8002606:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800260a:	f1c3 0301 	rsb	r3, r3, #1
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= VGA_WIDTH || par_y >= VGA_HEIGHT) {
 8002612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002616:	2b9f      	cmp	r3, #159	; 0x9f
 8002618:	dc6e      	bgt.n	80026f8 <DrawCircle+0x11c>
 800261a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800261e:	2b73      	cmp	r3, #115	; 0x73
 8002620:	dc6a      	bgt.n	80026f8 <DrawCircle+0x11c>
    return;
  }

    do {
      DrawPixel(par_x - x, par_y + y, par_color);
 8002622:	88fa      	ldrh	r2, [r7, #6]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	b29b      	uxth	r3, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	b29b      	uxth	r3, r3
 800262c:	b218      	sxth	r0, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	b29a      	uxth	r2, r3
 8002632:	88bb      	ldrh	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	b21b      	sxth	r3, r3
 800263a:	787a      	ldrb	r2, [r7, #1]
 800263c:	4619      	mov	r1, r3
 800263e:	f7ff fdb9 	bl	80021b4 <DrawPixel>
      DrawPixel(par_x + x, par_y + y, par_color);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	b29a      	uxth	r2, r3
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	4413      	add	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	b218      	sxth	r0, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	b29a      	uxth	r2, r3
 8002652:	88bb      	ldrh	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	b21b      	sxth	r3, r3
 800265a:	787a      	ldrb	r2, [r7, #1]
 800265c:	4619      	mov	r1, r3
 800265e:	f7ff fda9 	bl	80021b4 <DrawPixel>
      DrawPixel(par_x + x, par_y - y, par_color);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	b29a      	uxth	r2, r3
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	4413      	add	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	b218      	sxth	r0, r3
 800266e:	88ba      	ldrh	r2, [r7, #4]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	b29b      	uxth	r3, r3
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	b29b      	uxth	r3, r3
 8002678:	b21b      	sxth	r3, r3
 800267a:	787a      	ldrb	r2, [r7, #1]
 800267c:	4619      	mov	r1, r3
 800267e:	f7ff fd99 	bl	80021b4 <DrawPixel>
      DrawPixel(par_x - x, par_y - y, par_color);
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	b29b      	uxth	r3, r3
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	b29b      	uxth	r3, r3
 800268c:	b218      	sxth	r0, r3
 800268e:	88ba      	ldrh	r2, [r7, #4]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	b29b      	uxth	r3, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	b29b      	uxth	r3, r3
 8002698:	b21b      	sxth	r3, r3
 800269a:	787a      	ldrb	r2, [r7, #1]
 800269c:	4619      	mov	r1, r3
 800269e:	f7ff fd89 	bl	80021b4 <DrawPixel>
        e2 = err;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dc13      	bgt.n	80026d6 <DrawCircle+0xfa>
            y++;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	3301      	adds	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	3301      	adds	r3, #1
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4413      	add	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	425b      	negs	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d105      	bne.n	80026d6 <DrawCircle+0xfa>
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dc01      	bgt.n	80026d6 <DrawCircle+0xfa>
              e2 = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	429a      	cmp	r2, r3
 80026dc:	dd08      	ble.n	80026f0 <DrawCircle+0x114>
          x++;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	3301      	adds	r3, #1
 80026e2:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	3301      	adds	r3, #1
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	dd95      	ble.n	8002622 <DrawCircle+0x46>

    return;
 80026f6:	e000      	b.n	80026fa <DrawCircle+0x11e>
    return;
 80026f8:	bf00      	nop
}
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}

08002700 <DrawRectangle>:

void DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b085      	sub	sp, #20
 8002704:	af02      	add	r7, sp, #8
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4623      	mov	r3, r4
 8002710:	80fb      	strh	r3, [r7, #6]
 8002712:	4603      	mov	r3, r0
 8002714:	80bb      	strh	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]
 800271a:	4613      	mov	r3, r2
 800271c:	803b      	strh	r3, [r7, #0]
  DrawLine(x1,y1,x2,y1,color);
 800271e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002722:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002726:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800272a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800272e:	7e3b      	ldrb	r3, [r7, #24]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4623      	mov	r3, r4
 8002734:	f7ff fd6e 	bl	8002214 <DrawLine>
  DrawLine(x2,y1,x2,y2,color);
 8002738:	f9b7 4000 	ldrsh.w	r4, [r7]
 800273c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002740:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002744:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002748:	7e3b      	ldrb	r3, [r7, #24]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4623      	mov	r3, r4
 800274e:	f7ff fd61 	bl	8002214 <DrawLine>
  DrawLine(x2,y2,x1,y2,color);
 8002752:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800275a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800275e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002762:	7e3b      	ldrb	r3, [r7, #24]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	4623      	mov	r3, r4
 8002768:	f7ff fd54 	bl	8002214 <DrawLine>
  DrawLine(x1,y2,x1,y1,color);
 800276c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002770:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002774:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002778:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800277c:	7e3b      	ldrb	r3, [r7, #24]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	4623      	mov	r3, r4
 8002782:	f7ff fd47 	bl	8002214 <DrawLine>
  return;
 8002786:	bf00      	nop
}
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bd90      	pop	{r4, r7, pc}

0800278e <FillRectangle>:

void FillRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 800278e:	b590      	push	{r4, r7, lr}
 8002790:	b087      	sub	sp, #28
 8002792:	af02      	add	r7, sp, #8
 8002794:	4604      	mov	r4, r0
 8002796:	4608      	mov	r0, r1
 8002798:	4611      	mov	r1, r2
 800279a:	461a      	mov	r2, r3
 800279c:	4623      	mov	r3, r4
 800279e:	80fb      	strh	r3, [r7, #6]
 80027a0:	4603      	mov	r3, r0
 80027a2:	80bb      	strh	r3, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 80027ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b0:	2b9f      	cmp	r3, #159	; 0x9f
 80027b2:	dc2a      	bgt.n	800280a <FillRectangle+0x7c>
 80027b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027b8:	2b73      	cmp	r3, #115	; 0x73
 80027ba:	dc26      	bgt.n	800280a <FillRectangle+0x7c>
    if(x2 >= VGA_WIDTH) x2 = VGA_WIDTH-1;
 80027bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027c0:	2b9f      	cmp	r3, #159	; 0x9f
 80027c2:	dd01      	ble.n	80027c8 <FillRectangle+0x3a>
 80027c4:	239f      	movs	r3, #159	; 0x9f
 80027c6:	807b      	strh	r3, [r7, #2]
    if(y2 >= VGA_HEIGHT) y2 = VGA_HEIGHT-1;
 80027c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027cc:	2b73      	cmp	r3, #115	; 0x73
 80027ce:	dd01      	ble.n	80027d4 <FillRectangle+0x46>
 80027d0:	2373      	movs	r3, #115	; 0x73
 80027d2:	803b      	strh	r3, [r7, #0]
    for(int yy = y1; yy <= y2; yy++) {
 80027d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e010      	b.n	80027fe <FillRectangle+0x70>
    	DrawLine(x1,yy,x2,yy,color);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	b219      	sxth	r1, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	b21c      	sxth	r4, r3
 80027e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80027e8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80027ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4623      	mov	r3, r4
 80027f4:	f7ff fd0e 	bl	8002214 <DrawLine>
    for(int yy = y1; yy <= y2; yy++) {
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	dde9      	ble.n	80027dc <FillRectangle+0x4e>
 8002808:	e000      	b.n	800280c <FillRectangle+0x7e>
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 800280a:	bf00      	nop
    }
}
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}

08002812 <FillCircle>:

void FillCircle(int16_t x0, int16_t y0, int16_t r, VGA_COLOR c) {
 8002812:	b590      	push	{r4, r7, lr}
 8002814:	b089      	sub	sp, #36	; 0x24
 8002816:	af02      	add	r7, sp, #8
 8002818:	4604      	mov	r4, r0
 800281a:	4608      	mov	r0, r1
 800281c:	4611      	mov	r1, r2
 800281e:	461a      	mov	r2, r3
 8002820:	4623      	mov	r3, r4
 8002822:	80fb      	strh	r3, [r7, #6]
 8002824:	4603      	mov	r3, r0
 8002826:	80bb      	strh	r3, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	f1c3 0301 	rsb	r3, r3, #1
 8002836:	b29b      	uxth	r3, r3
 8002838:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800283a:	2301      	movs	r3, #1
 800283c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	461a      	mov	r2, r3
 8002842:	03d2      	lsls	r2, r2, #15
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	81fb      	strh	r3, [r7, #14]

    DrawPixel(x0, y0 + r, c);
 8002854:	88ba      	ldrh	r2, [r7, #4]
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	4413      	add	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	b219      	sxth	r1, r3
 800285e:	787a      	ldrb	r2, [r7, #1]
 8002860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fca5 	bl	80021b4 <DrawPixel>
    DrawPixel(x0, y0 - r, c);
 800286a:	88ba      	ldrh	r2, [r7, #4]
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	b29b      	uxth	r3, r3
 8002872:	b219      	sxth	r1, r3
 8002874:	787a      	ldrb	r2, [r7, #1]
 8002876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fc9a 	bl	80021b4 <DrawPixel>
    DrawPixel(x0 + r, y0, c);
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	4413      	add	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	b21b      	sxth	r3, r3
 800288a:	787a      	ldrb	r2, [r7, #1]
 800288c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fc8f 	bl	80021b4 <DrawPixel>
    DrawPixel(x0 - r, y0, c);
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	887b      	ldrh	r3, [r7, #2]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	b29b      	uxth	r3, r3
 800289e:	b21b      	sxth	r3, r3
 80028a0:	787a      	ldrb	r2, [r7, #1]
 80028a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fc84 	bl	80021b4 <DrawPixel>
    DrawLine(x0 - r, y0, x0 + r, y0, c);
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b218      	sxth	r0, r3
 80028b6:	88fa      	ldrh	r2, [r7, #6]
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	4413      	add	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b21a      	sxth	r2, r3
 80028c0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80028c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4623      	mov	r3, r4
 80028ce:	f7ff fca1 	bl	8002214 <DrawLine>

    while (x < y) {
 80028d2:	e089      	b.n	80029e8 <FillCircle+0x1d6>
        if (f >= 0) {
 80028d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	db0e      	blt.n	80028fa <FillCircle+0xe8>
            y--;
 80028dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80028e8:	8a7b      	ldrh	r3, [r7, #18]
 80028ea:	3302      	adds	r3, #2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80028f0:	8afa      	ldrh	r2, [r7, #22]
 80028f2:	8a7b      	ldrh	r3, [r7, #18]
 80028f4:	4413      	add	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80028fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002906:	8abb      	ldrh	r3, [r7, #20]
 8002908:	3302      	adds	r3, #2
 800290a:	b29b      	uxth	r3, r3
 800290c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800290e:	8afa      	ldrh	r2, [r7, #22]
 8002910:	8abb      	ldrh	r3, [r7, #20]
 8002912:	4413      	add	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	8a3b      	ldrh	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	b29b      	uxth	r3, r3
 8002920:	b218      	sxth	r0, r3
 8002922:	88ba      	ldrh	r2, [r7, #4]
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	4413      	add	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	b219      	sxth	r1, r3
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	8a3b      	ldrh	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	b21c      	sxth	r4, r3
 8002936:	88ba      	ldrh	r2, [r7, #4]
 8002938:	89fb      	ldrh	r3, [r7, #14]
 800293a:	4413      	add	r3, r2
 800293c:	b29b      	uxth	r3, r3
 800293e:	b21a      	sxth	r2, r3
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	4622      	mov	r2, r4
 8002948:	f7ff fc64 	bl	8002214 <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	8a3b      	ldrh	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	b218      	sxth	r0, r3
 8002956:	88ba      	ldrh	r2, [r7, #4]
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	b29b      	uxth	r3, r3
 800295e:	b219      	sxth	r1, r3
 8002960:	88fa      	ldrh	r2, [r7, #6]
 8002962:	8a3b      	ldrh	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21c      	sxth	r4, r3
 800296a:	88ba      	ldrh	r2, [r7, #4]
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	b29b      	uxth	r3, r3
 8002972:	b21a      	sxth	r2, r3
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	4622      	mov	r2, r4
 800297c:	f7ff fc4a 	bl	8002214 <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	89fb      	ldrh	r3, [r7, #14]
 8002984:	4413      	add	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	b218      	sxth	r0, r3
 800298a:	88ba      	ldrh	r2, [r7, #4]
 800298c:	8a3b      	ldrh	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	b29b      	uxth	r3, r3
 8002992:	b219      	sxth	r1, r3
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	b29b      	uxth	r3, r3
 800299c:	b21c      	sxth	r4, r3
 800299e:	88ba      	ldrh	r2, [r7, #4]
 80029a0:	8a3b      	ldrh	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	4622      	mov	r2, r4
 80029b0:	f7ff fc30 	bl	8002214 <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	89fb      	ldrh	r3, [r7, #14]
 80029b8:	4413      	add	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	b218      	sxth	r0, r3
 80029be:	88ba      	ldrh	r2, [r7, #4]
 80029c0:	8a3b      	ldrh	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b219      	sxth	r1, r3
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	89fb      	ldrh	r3, [r7, #14]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b21c      	sxth	r4, r3
 80029d2:	88ba      	ldrh	r2, [r7, #4]
 80029d4:	8a3b      	ldrh	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b21a      	sxth	r2, r3
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	4622      	mov	r2, r4
 80029e4:	f7ff fc16 	bl	8002214 <DrawLine>
    while (x < y) {
 80029e8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f6ff af6f 	blt.w	80028d4 <FillCircle+0xc2>
    }
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <ShowImage>:

void ShowImage(uint8_t *image,int16_t x,int16_t y,int16_t locX,int16_t locY){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	817b      	strh	r3, [r7, #10]
 8002a12:	460b      	mov	r3, r1
 8002a14:	813b      	strh	r3, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
    int16_t j,i;

    for(j=0;j<y;j++){
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	82fb      	strh	r3, [r7, #22]
 8002a1e:	e02e      	b.n	8002a7e <ShowImage+0x7e>
    	for(i=0;i<x;i++){
 8002a20:	2300      	movs	r3, #0
 8002a22:	82bb      	strh	r3, [r7, #20]
 8002a24:	e01f      	b.n	8002a66 <ShowImage+0x66>
    		DrawPixel(i+locX,j+locY,image[j*x+i]);
 8002a26:	8aba      	ldrh	r2, [r7, #20]
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b218      	sxth	r0, r3
 8002a30:	8afa      	ldrh	r2, [r7, #22]
 8002a32:	8c3b      	ldrh	r3, [r7, #32]
 8002a34:	4413      	add	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	b219      	sxth	r1, r3
 8002a3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a3e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a42:	fb03 f202 	mul.w	r2, r3, r2
 8002a46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4413      	add	r3, r2
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	f7ff fbad 	bl	80021b4 <DrawPixel>
    	for(i=0;i<x;i++){
 8002a5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	82bb      	strh	r3, [r7, #20]
 8002a66:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002a6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	dbd9      	blt.n	8002a26 <ShowImage+0x26>
    for(j=0;j<y;j++){
 8002a72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	82fb      	strh	r3, [r7, #22]
 8002a7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	dbca      	blt.n	8002a20 <ShowImage+0x20>
    	}
    }
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a9a:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa0:	e002      	b.n	8002aa8 <LoopCopyDataInit>

08002aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa6:	3304      	adds	r3, #4

08002aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aac:	d3f9      	bcc.n	8002aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ab0:	4c0b      	ldr	r4, [pc, #44]	; (8002ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab4:	e001      	b.n	8002aba <LoopFillZerobss>

08002ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab8:	3204      	adds	r2, #4

08002aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002abc:	d3fb      	bcc.n	8002ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002abe:	f7fe fe4f 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ac2:	f007 fec1 	bl	800a848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ac6:	f7fd ff59 	bl	800097c <main>
  bx  lr    
 8002aca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002ad8:	08019f90 	.word	0x08019f90
  ldr r2, =_sbss
 8002adc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002ae0:	20006114 	.word	0x20006114

08002ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <ADC_IRQHandler>
	...

08002ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_Init+0x40>)
 8002af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_Init+0x40>)
 8002afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_Init+0x40>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b10:	2003      	movs	r0, #3
 8002b12:	f000 f94f 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b16:	200f      	movs	r0, #15
 8002b18:	f000 f808 	bl	8002b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1c:	f7fe fbe4 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_InitTick+0x54>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_InitTick+0x58>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f967 	bl	8002e1e <HAL_SYSTICK_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00e      	b.n	8002b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b0f      	cmp	r3, #15
 8002b5e:	d80a      	bhi.n	8002b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b60:	2200      	movs	r2, #0
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f000 f92f 	bl	8002dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <HAL_InitTick+0x5c>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000004 	.word	0x20000004
 8002b84:	20000014 	.word	0x20000014
 8002b88:	20000010 	.word	0x20000010

08002b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_IncTick+0x20>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_IncTick+0x24>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <HAL_IncTick+0x24>)
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000014 	.word	0x20000014
 8002bb0:	200059e8 	.word	0x200059e8

08002bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_GetTick+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	200059e8 	.word	0x200059e8

08002bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff ffee 	bl	8002bb4 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d005      	beq.n	8002bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_Delay+0x44>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bf2:	bf00      	nop
 8002bf4:	f7ff ffde 	bl	8002bb4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d8f7      	bhi.n	8002bf4 <HAL_Delay+0x28>
  {
  }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000014 	.word	0x20000014

08002c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <__NVIC_GetPriorityGrouping+0x18>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0307 	and.w	r3, r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0b      	blt.n	8002ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4907      	ldr	r1, [pc, #28]	; (8002cb0 <__NVIC_EnableIRQ+0x38>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e100 	.word	0xe000e100

08002cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db0a      	blt.n	8002cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	490c      	ldr	r1, [pc, #48]	; (8002d00 <__NVIC_SetPriority+0x4c>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cdc:	e00a      	b.n	8002cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4908      	ldr	r1, [pc, #32]	; (8002d04 <__NVIC_SetPriority+0x50>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3b04      	subs	r3, #4
 8002cec:	0112      	lsls	r2, r2, #4
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	761a      	strb	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf28      	it	cs
 8002d26:	2304      	movcs	r3, #4
 8002d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d902      	bls.n	8002d38 <NVIC_EncodePriority+0x30>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3b03      	subs	r3, #3
 8002d36:	e000      	b.n	8002d3a <NVIC_EncodePriority+0x32>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43d9      	mvns	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	4313      	orrs	r3, r2
         );
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f7ff ff8e 	bl	8002cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff29 	bl	8002c14 <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ddc:	f7ff ff3e 	bl	8002c5c <__NVIC_GetPriorityGrouping>
 8002de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f7ff ff8e 	bl	8002d08 <NVIC_EncodePriority>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5d 	bl	8002cb4 <__NVIC_SetPriority>
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff31 	bl	8002c78 <__NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffa2 	bl	8002d70 <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff feb6 	bl	8002bb4 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e099      	b.n	8002f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e74:	e00f      	b.n	8002e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e76:	f7ff fe9d 	bl	8002bb4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d908      	bls.n	8002e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e078      	b.n	8002f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e8      	bne.n	8002e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_DMA_Init+0x158>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d117      	bne.n	8002f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00e      	beq.n	8002f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fb55 	bl	80035ec <DMA_CheckFifoParam>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f56:	2301      	movs	r3, #1
 8002f58:	e016      	b.n	8002f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fb0c 	bl	8003580 <DMA_CalcBaseAndBitshift>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	223f      	movs	r2, #63	; 0x3f
 8002f72:	409a      	lsls	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	f010803f 	.word	0xf010803f

08002f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_DMA_Start_IT+0x26>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e040      	b.n	800303c <HAL_DMA_Start_IT+0xa8>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d12f      	bne.n	800302e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa9e 	bl	8003524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	223f      	movs	r2, #63	; 0x3f
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0216 	orr.w	r2, r2, #22
 8003002:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0208 	orr.w	r2, r2, #8
 800301a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e005      	b.n	800303a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003052:	f7ff fdaf 	bl	8002bb4 <HAL_GetTick>
 8003056:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d008      	beq.n	8003076 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e052      	b.n	800311c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0216 	bic.w	r2, r2, #22
 8003084:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003094:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_DMA_Abort+0x62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0208 	bic.w	r2, r2, #8
 80030b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c6:	e013      	b.n	80030f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030c8:	f7ff fd74 	bl	8002bb4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d90c      	bls.n	80030f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2203      	movs	r2, #3
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e015      	b.n	800311c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e4      	bne.n	80030c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	223f      	movs	r2, #63	; 0x3f
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d004      	beq.n	8003142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00c      	b.n	800315c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2205      	movs	r2, #5
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003174:	4b8e      	ldr	r3, [pc, #568]	; (80033b0 <HAL_DMA_IRQHandler+0x248>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a8e      	ldr	r2, [pc, #568]	; (80033b4 <HAL_DMA_IRQHandler+0x24c>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	0a9b      	lsrs	r3, r3, #10
 8003180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	2208      	movs	r2, #8
 8003194:	409a      	lsls	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01a      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	2208      	movs	r2, #8
 80031c2:	409a      	lsls	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	2201      	movs	r2, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2201      	movs	r2, #1
 80031f8:	409a      	lsls	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0202 	orr.w	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	2204      	movs	r2, #4
 8003210:	409a      	lsls	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d012      	beq.n	8003240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2204      	movs	r2, #4
 800322e:	409a      	lsls	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f043 0204 	orr.w	r2, r3, #4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	2210      	movs	r2, #16
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d043      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d03c      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	2210      	movs	r2, #16
 8003264:	409a      	lsls	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d018      	beq.n	80032aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d108      	bne.n	8003298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d024      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
 8003296:	e01f      	b.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
 80032a8:	e016      	b.n	80032d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d107      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0208 	bic.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	2220      	movs	r2, #32
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 808f 	beq.w	8003408 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8087 	beq.w	8003408 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2220      	movs	r2, #32
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b05      	cmp	r3, #5
 8003310:	d136      	bne.n	8003380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0216 	bic.w	r2, r2, #22
 8003320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <HAL_DMA_IRQHandler+0x1da>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0208 	bic.w	r2, r2, #8
 8003350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	223f      	movs	r2, #63	; 0x3f
 8003358:	409a      	lsls	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	2b00      	cmp	r3, #0
 8003374:	d07e      	beq.n	8003474 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
        }
        return;
 800337e:	e079      	b.n	8003474 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01d      	beq.n	80033ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10d      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d031      	beq.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
 80033ac:	e02c      	b.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
 80033ae:	bf00      	nop
 80033b0:	20000004 	.word	0x20000004
 80033b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d023      	beq.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e01e      	b.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10f      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0210 	bic.w	r2, r2, #16
 80033e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340c:	2b00      	cmp	r3, #0
 800340e:	d032      	beq.n	8003476 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d022      	beq.n	8003462 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2205      	movs	r2, #5
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3301      	adds	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	d307      	bcc.n	8003450 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f2      	bne.n	8003434 <HAL_DMA_IRQHandler+0x2cc>
 800344e:	e000      	b.n	8003452 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003450:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
 8003472:	e000      	b.n	8003476 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003474:	bf00      	nop
    }
  }
}
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	460b      	mov	r3, r1
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_DMA_RegisterCallback+0x20>
 8003498:	2302      	movs	r3, #2
 800349a:	e03d      	b.n	8003518 <HAL_DMA_RegisterCallback+0x9c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d12c      	bne.n	800350a <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 80034b0:	7afb      	ldrb	r3, [r7, #11]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d826      	bhi.n	8003504 <HAL_DMA_RegisterCallback+0x88>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <HAL_DMA_RegisterCallback+0x40>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034d5 	.word	0x080034d5
 80034c0:	080034dd 	.word	0x080034dd
 80034c4:	080034e5 	.word	0x080034e5
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	080034fd 	.word	0x080034fd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80034da:	e018      	b.n	800350e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034e2:	e014      	b.n	800350e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80034ea:	e010      	b.n	800350e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80034f2:	e00c      	b.n	800350e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80034fa:	e008      	b.n	800350e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003502:	e004      	b.n	800350e <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
      break;
 8003508:	e001      	b.n	800350e <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
}
 8003518:	4618      	mov	r0, r3
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d108      	bne.n	8003564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003562:	e007      	b.n	8003574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3b10      	subs	r3, #16
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <DMA_CalcBaseAndBitshift+0x68>)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d909      	bls.n	80035c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	1d1a      	adds	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	659a      	str	r2, [r3, #88]	; 0x58
 80035c0:	e007      	b.n	80035d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ca:	f023 0303 	bic.w	r3, r3, #3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	aaaaaaab 	.word	0xaaaaaaab
 80035e8:	08019b20 	.word	0x08019b20

080035ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11f      	bne.n	8003646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d856      	bhi.n	80036ba <DMA_CheckFifoParam+0xce>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <DMA_CheckFifoParam+0x28>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003625 	.word	0x08003625
 8003618:	08003637 	.word	0x08003637
 800361c:	08003625 	.word	0x08003625
 8003620:	080036bb 	.word	0x080036bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d046      	beq.n	80036be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e043      	b.n	80036be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800363e:	d140      	bne.n	80036c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003644:	e03d      	b.n	80036c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364e:	d121      	bne.n	8003694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d837      	bhi.n	80036c6 <DMA_CheckFifoParam+0xda>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <DMA_CheckFifoParam+0x70>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	0800366d 	.word	0x0800366d
 8003660:	08003673 	.word	0x08003673
 8003664:	0800366d 	.word	0x0800366d
 8003668:	08003685 	.word	0x08003685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      break;
 8003670:	e030      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d025      	beq.n	80036ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003682:	e022      	b.n	80036ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800368c:	d11f      	bne.n	80036ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003692:	e01c      	b.n	80036ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d903      	bls.n	80036a2 <DMA_CheckFifoParam+0xb6>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d003      	beq.n	80036a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036a0:	e018      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      break;
 80036a6:	e015      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	e00b      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036ba:	bf00      	nop
 80036bc:	e00a      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e008      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e006      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e004      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
      break;
 80036d2:	bf00      	nop
    }
  } 
  
  return status; 
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e159      	b.n	80039b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 8148 	bne.w	80039ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d005      	beq.n	8003736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	2b02      	cmp	r3, #2
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a2 	beq.w	80039ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b57      	ldr	r3, [pc, #348]	; (80039cc <HAL_GPIO_Init+0x2e8>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	4a56      	ldr	r2, [pc, #344]	; (80039cc <HAL_GPIO_Init+0x2e8>)
 8003874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003878:	6453      	str	r3, [r2, #68]	; 0x44
 800387a:	4b54      	ldr	r3, [pc, #336]	; (80039cc <HAL_GPIO_Init+0x2e8>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_GPIO_Init+0x2ec>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a49      	ldr	r2, [pc, #292]	; (80039d4 <HAL_GPIO_Init+0x2f0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x202>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a48      	ldr	r2, [pc, #288]	; (80039d8 <HAL_GPIO_Init+0x2f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x1fe>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a47      	ldr	r2, [pc, #284]	; (80039dc <HAL_GPIO_Init+0x2f8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x1fa>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a46      	ldr	r2, [pc, #280]	; (80039e0 <HAL_GPIO_Init+0x2fc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x1f6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a45      	ldr	r2, [pc, #276]	; (80039e4 <HAL_GPIO_Init+0x300>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x1f2>
 80038d2:	2304      	movs	r3, #4
 80038d4:	e008      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038d6:	2307      	movs	r3, #7
 80038d8:	e006      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038da:	2303      	movs	r3, #3
 80038dc:	e004      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038de:	2302      	movs	r3, #2
 80038e0:	e002      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_GPIO_Init+0x204>
 80038e6:	2300      	movs	r3, #0
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f002 0203 	and.w	r2, r2, #3
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	4093      	lsls	r3, r2
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f8:	4935      	ldr	r1, [pc, #212]	; (80039d0 <HAL_GPIO_Init+0x2ec>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003906:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392a:	4a2f      	ldr	r2, [pc, #188]	; (80039e8 <HAL_GPIO_Init+0x304>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003954:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_GPIO_Init+0x304>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003984:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_GPIO_Init+0x304>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039a8:	4a0f      	ldr	r2, [pc, #60]	; (80039e8 <HAL_GPIO_Init+0x304>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	f67f aea2 	bls.w	8003700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40013800 	.word	0x40013800
 80039d4:	40020000 	.word	0x40020000
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	619a      	str	r2, [r3, #24]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a30:	887a      	ldrh	r2, [r7, #2]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	041a      	lsls	r2, r3, #16
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	887b      	ldrh	r3, [r7, #2]
 8003a3e:	400b      	ands	r3, r1
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	619a      	str	r2, [r3, #24]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6a:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fdac 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40013c00 	.word	0x40013c00

08003a84 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	b08f      	sub	sp, #60	; 0x3c
 8003a88:	af0a      	add	r7, sp, #40	; 0x28
 8003a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e054      	b.n	8003b40 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f006 fc27 	bl	800a304 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 f965 	bl	8006da4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	687e      	ldr	r6, [r7, #4]
 8003ae2:	466d      	mov	r5, sp
 8003ae4:	f106 0410 	add.w	r4, r6, #16
 8003ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003af8:	1d33      	adds	r3, r6, #4
 8003afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003afc:	6838      	ldr	r0, [r7, #0]
 8003afe:	f003 f8df 	bl	8006cc0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 f95c 	bl	8006dc6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	687e      	ldr	r6, [r7, #4]
 8003b16:	466d      	mov	r5, sp
 8003b18:	f106 0410 	add.w	r4, r6, #16
 8003b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b2c:	1d33      	adds	r3, r6, #4
 8003b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b30:	6838      	ldr	r0, [r7, #0]
 8003b32:	f003 fae5 	bl	8007100 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b48 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af04      	add	r7, sp, #16
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	70fb      	strb	r3, [r7, #3]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	70bb      	strb	r3, [r7, #2]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_HCD_HC_Init+0x28>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e076      	b.n	8003c5e <HAL_HCD_HC_Init+0x116>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	333d      	adds	r3, #61	; 0x3d
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3338      	adds	r3, #56	; 0x38
 8003b98:	787a      	ldrb	r2, [r7, #1]
 8003b9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3340      	adds	r3, #64	; 0x40
 8003baa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003bac:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	3339      	adds	r3, #57	; 0x39
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	333f      	adds	r3, #63	; 0x3f
 8003bce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	78ba      	ldrb	r2, [r7, #2]
 8003bd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bdc:	b2d0      	uxtb	r0, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	333a      	adds	r3, #58	; 0x3a
 8003bea:	4602      	mov	r2, r0
 8003bec:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003bee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	da09      	bge.n	8003c0a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	333b      	adds	r3, #59	; 0x3b
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e008      	b.n	8003c1c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	333b      	adds	r3, #59	; 0x3b
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	212c      	movs	r1, #44	; 0x2c
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	333c      	adds	r3, #60	; 0x3c
 8003c2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003c2e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	787c      	ldrb	r4, [r7, #1]
 8003c36:	78ba      	ldrb	r2, [r7, #2]
 8003c38:	78f9      	ldrb	r1, [r7, #3]
 8003c3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c3c:	9302      	str	r3, [sp, #8]
 8003c3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	f003 fbde 	bl	800740c <USB_HC_Init>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd90      	pop	{r4, r7, pc}

08003c66 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_HCD_HC_Halt+0x1e>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e00f      	b.n	8003ca4 <HAL_HCD_HC_Halt+0x3e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f003 fe2e 	bl	80078f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	70fb      	strb	r3, [r7, #3]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70bb      	strb	r3, [r7, #2]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	333b      	adds	r3, #59	; 0x3b
 8003cd4:	78ba      	ldrb	r2, [r7, #2]
 8003cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	333f      	adds	r3, #63	; 0x3f
 8003ce6:	787a      	ldrb	r2, [r7, #1]
 8003ce8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003cea:	7c3b      	ldrb	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d112      	bne.n	8003d16 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3342      	adds	r3, #66	; 0x42
 8003cfe:	2203      	movs	r2, #3
 8003d00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	333d      	adds	r3, #61	; 0x3d
 8003d10:	7f3a      	ldrb	r2, [r7, #28]
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e008      	b.n	8003d28 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	3342      	adds	r3, #66	; 0x42
 8003d24:	2202      	movs	r2, #2
 8003d26:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	f200 80c6 	bhi.w	8003ebc <HAL_HCD_HC_SubmitRequest+0x210>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003ea9 	.word	0x08003ea9
 8003d40:	08003dad 	.word	0x08003dad
 8003d44:	08003e2b 	.word	0x08003e2b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003d48:	7c3b      	ldrb	r3, [r7, #16]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	f040 80b8 	bne.w	8003ec0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003d50:	78bb      	ldrb	r3, [r7, #2]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 80b4 	bne.w	8003ec0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003d58:	8b3b      	ldrh	r3, [r7, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	212c      	movs	r1, #44	; 0x2c
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	3355      	adds	r3, #85	; 0x55
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3355      	adds	r3, #85	; 0x55
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3342      	adds	r3, #66	; 0x42
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d96:	e093      	b.n	8003ec0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3342      	adds	r3, #66	; 0x42
 8003da6:	2202      	movs	r2, #2
 8003da8:	701a      	strb	r2, [r3, #0]
      break;
 8003daa:	e089      	b.n	8003ec0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003dac:	78bb      	ldrb	r3, [r7, #2]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d11d      	bne.n	8003dee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3355      	adds	r3, #85	; 0x55
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3342      	adds	r3, #66	; 0x42
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003dd8:	e073      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3342      	adds	r3, #66	; 0x42
 8003de8:	2202      	movs	r2, #2
 8003dea:	701a      	strb	r2, [r3, #0]
      break;
 8003dec:	e069      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3354      	adds	r3, #84	; 0x54
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3342      	adds	r3, #66	; 0x42
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
      break;
 8003e14:	e055      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	3342      	adds	r3, #66	; 0x42
 8003e24:	2202      	movs	r2, #2
 8003e26:	701a      	strb	r2, [r3, #0]
      break;
 8003e28:	e04b      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003e2a:	78bb      	ldrb	r3, [r7, #2]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11d      	bne.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3355      	adds	r3, #85	; 0x55
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	3342      	adds	r3, #66	; 0x42
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e56:	e034      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3342      	adds	r3, #66	; 0x42
 8003e66:	2202      	movs	r2, #2
 8003e68:	701a      	strb	r2, [r3, #0]
      break;
 8003e6a:	e02a      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	212c      	movs	r1, #44	; 0x2c
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	3354      	adds	r3, #84	; 0x54
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	212c      	movs	r1, #44	; 0x2c
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3342      	adds	r3, #66	; 0x42
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
      break;
 8003e92:	e016      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3342      	adds	r3, #66	; 0x42
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	701a      	strb	r2, [r3, #0]
      break;
 8003ea6:	e00c      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	212c      	movs	r1, #44	; 0x2c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3342      	adds	r3, #66	; 0x42
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
      break;
 8003eba:	e002      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003ec0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3344      	adds	r3, #68	; 0x44
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	8b3a      	ldrh	r2, [r7, #24]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	202c      	movs	r0, #44	; 0x2c
 8003edc:	fb00 f303 	mul.w	r3, r0, r3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	334c      	adds	r3, #76	; 0x4c
 8003ee4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3360      	adds	r3, #96	; 0x60
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3350      	adds	r3, #80	; 0x50
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	3339      	adds	r3, #57	; 0x39
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	3361      	adds	r3, #97	; 0x61
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	222c      	movs	r2, #44	; 0x2c
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	3338      	adds	r3, #56	; 0x38
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	18d1      	adds	r1, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	f003 fb82 	bl	8007650 <USB_HC_StartXfer>
 8003f4c:	4603      	mov	r3, r0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop

08003f58 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f003 f883 	bl	800707a <USB_GetMode>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	f040 80f6 	bne.w	8004168 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 f867 	bl	8007054 <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80ec 	beq.w	8004166 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 f85e 	bl	8007054 <USB_ReadInterrupts>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa2:	d104      	bne.n	8003fae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003fac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 f84e 	bl	8007054 <USB_ReadInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc2:	d104      	bne.n	8003fce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 f83e 	bl	8007054 <USB_ReadInterrupts>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe2:	d104      	bne.n	8003fee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f003 f82e 	bl	8007054 <USB_ReadInterrupts>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d103      	bne.n	800400a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2202      	movs	r2, #2
 8004008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f003 f820 	bl	8007054 <USB_ReadInterrupts>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800401a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401e:	d11c      	bne.n	800405a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004028:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800403a:	2110      	movs	r1, #16
 800403c:	6938      	ldr	r0, [r7, #16]
 800403e:	f002 ff0f 	bl	8006e60 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004042:	6938      	ldr	r0, [r7, #16]
 8004044:	f002 ff40 	bl	8006ec8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f003 f916 	bl	8007280 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f006 f9c5 	bl	800a3e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f002 fff8 	bl	8007054 <USB_ReadInterrupts>
 8004064:	4603      	mov	r3, r0
 8004066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800406e:	d102      	bne.n	8004076 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f001 f89e 	bl	80051b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f002 ffea 	bl	8007054 <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b08      	cmp	r3, #8
 8004088:	d106      	bne.n	8004098 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f006 f98e 	bl	800a3ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2208      	movs	r2, #8
 8004096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f002 ffd9 	bl	8007054 <USB_ReadInterrupts>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d101      	bne.n	80040b0 <HAL_HCD_IRQHandler+0x158>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_HCD_IRQHandler+0x15a>
 80040b0:	2300      	movs	r3, #0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0210 	bic.w	r2, r2, #16
 80040c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 ffa1 	bl	800500e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0210 	orr.w	r2, r2, #16
 80040da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f002 ffb7 	bl	8007054 <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f0:	d13a      	bne.n	8004168 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f003 fbec 	bl	80078d4 <USB_HC_ReadInterrupt>
 80040fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e025      	b.n	8004150 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d018      	beq.n	800414a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800412e:	d106      	bne.n	800413e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8ab 	bl	8004292 <HCD_HC_IN_IRQHandler>
 800413c:	e005      	b.n	800414a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fbf9 	bl	800493c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	3301      	adds	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	429a      	cmp	r2, r3
 8004158:	d3d4      	bcc.n	8004104 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004162:	615a      	str	r2, [r3, #20]
 8004164:	e000      	b.n	8004168 <HAL_HCD_IRQHandler+0x210>
      return;
 8004166:	bf00      	nop
    }
  }
}
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_HCD_Start+0x16>
 8004180:	2302      	movs	r3, #2
 8004182:	e013      	b.n	80041ac <HAL_HCD_Start+0x3e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f003 f8d8 	bl	8007348 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f002 fdf0 	bl	8006d82 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_HCD_Stop+0x16>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e00d      	b.n	80041e6 <HAL_HCD_Stop+0x32>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f003 fcc6 	bl	8007b68 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 f87a 	bl	80072f4 <USB_ResetPort>
 8004200:	4603      	mov	r3, r0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	212c      	movs	r1, #44	; 0x2c
 800421c:	fb01 f303 	mul.w	r3, r1, r3
 8004220:	4413      	add	r3, r2
 8004222:	3360      	adds	r3, #96	; 0x60
 8004224:	781b      	ldrb	r3, [r3, #0]
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	212c      	movs	r1, #44	; 0x2c
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4413      	add	r3, r2
 800424a:	3350      	adds	r3, #80	; 0x50
 800424c:	681b      	ldr	r3, [r3, #0]
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f003 f8be 	bl	80073e8 <USB_GetCurrentFrame>
 800426c:	4603      	mov	r3, r0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f003 f899 	bl	80073ba <USB_GetHostSpeed>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d11a      	bne.n	80042f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ce:	461a      	mov	r2, r3
 80042d0:	2304      	movs	r3, #4
 80042d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	212c      	movs	r1, #44	; 0x2c
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	3361      	adds	r3, #97	; 0x61
 80042e2:	2206      	movs	r2, #6
 80042e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f003 fb00 	bl	80078f6 <USB_HC_Halt>
 80042f6:	e0af      	b.n	8004458 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430e:	d11b      	bne.n	8004348 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	461a      	mov	r2, r3
 800431e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004322:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	212c      	movs	r1, #44	; 0x2c
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	3361      	adds	r3, #97	; 0x61
 8004332:	2207      	movs	r2, #7
 8004334:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f003 fad8 	bl	80078f6 <USB_HC_Halt>
 8004346:	e087      	b.n	8004458 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b20      	cmp	r3, #32
 800435c:	d109      	bne.n	8004372 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	461a      	mov	r2, r3
 800436c:	2320      	movs	r3, #32
 800436e:	6093      	str	r3, [r2, #8]
 8004370:	e072      	b.n	8004458 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d11a      	bne.n	80043be <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	461a      	mov	r2, r3
 8004396:	2308      	movs	r3, #8
 8004398:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	3361      	adds	r3, #97	; 0x61
 80043a8:	2205      	movs	r2, #5
 80043aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f003 fa9d 	bl	80078f6 <USB_HC_Halt>
 80043bc:	e04c      	b.n	8004458 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d11b      	bne.n	800440e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	461a      	mov	r2, r3
 80043e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3361      	adds	r3, #97	; 0x61
 80043f8:	2208      	movs	r2, #8
 80043fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f003 fa75 	bl	80078f6 <USB_HC_Halt>
 800440c:	e024      	b.n	8004458 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4413      	add	r3, r2
 8004416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d119      	bne.n	8004458 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	461a      	mov	r2, r3
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	212c      	movs	r1, #44	; 0x2c
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	4413      	add	r3, r2
 8004442:	3361      	adds	r3, #97	; 0x61
 8004444:	2206      	movs	r2, #6
 8004446:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f003 fa4f 	bl	80078f6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800446a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446e:	d112      	bne.n	8004496 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f003 fa3b 	bl	80078f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4413      	add	r3, r2
 8004488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448c:	461a      	mov	r2, r3
 800448e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004492:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004494:	e24e      	b.n	8004934 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	f040 80df 	bne.w	800466c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d019      	beq.n	80044ea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3348      	adds	r3, #72	; 0x48
 80044c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	0159      	lsls	r1, r3, #5
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	440b      	add	r3, r1
 80044ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80044d8:	1ad2      	subs	r2, r2, r3
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	202c      	movs	r0, #44	; 0x2c
 80044e0:	fb00 f303 	mul.w	r3, r0, r3
 80044e4:	440b      	add	r3, r1
 80044e6:	3350      	adds	r3, #80	; 0x50
 80044e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	212c      	movs	r1, #44	; 0x2c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	3361      	adds	r3, #97	; 0x61
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	335c      	adds	r3, #92	; 0x5c
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451a:	461a      	mov	r2, r3
 800451c:	2301      	movs	r3, #1
 800451e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	212c      	movs	r1, #44	; 0x2c
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	333f      	adds	r3, #63	; 0x3f
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d009      	beq.n	8004548 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	212c      	movs	r1, #44	; 0x2c
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	333f      	adds	r3, #63	; 0x3f
 8004542:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004544:	2b02      	cmp	r3, #2
 8004546:	d111      	bne.n	800456c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f003 f9cf 	bl	80078f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004564:	461a      	mov	r2, r3
 8004566:	2310      	movs	r3, #16
 8004568:	6093      	str	r3, [r2, #8]
 800456a:	e03a      	b.n	80045e2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	333f      	adds	r3, #63	; 0x3f
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d009      	beq.n	8004594 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	212c      	movs	r1, #44	; 0x2c
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	4413      	add	r3, r2
 800458c:	333f      	adds	r3, #63	; 0x3f
 800458e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004590:	2b01      	cmp	r3, #1
 8004592:	d126      	bne.n	80045e2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3360      	adds	r3, #96	; 0x60
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	b2d9      	uxtb	r1, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	202c      	movs	r0, #44	; 0x2c
 80045d0:	fb00 f303 	mul.w	r3, r0, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	3360      	adds	r3, #96	; 0x60
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f005 ff0f 	bl	800a400 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d12b      	bne.n	8004642 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	212c      	movs	r1, #44	; 0x2c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	3348      	adds	r3, #72	; 0x48
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	202c      	movs	r0, #44	; 0x2c
 8004600:	fb00 f202 	mul.w	r2, r0, r2
 8004604:	440a      	add	r2, r1
 8004606:	3240      	adds	r2, #64	; 0x40
 8004608:	8812      	ldrh	r2, [r2, #0]
 800460a:	fbb3 f3f2 	udiv	r3, r3, r2
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 818e 	beq.w	8004934 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	212c      	movs	r1, #44	; 0x2c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	3354      	adds	r3, #84	; 0x54
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	f083 0301 	eor.w	r3, r3, #1
 800462c:	b2d8      	uxtb	r0, r3
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	3354      	adds	r3, #84	; 0x54
 800463c:	4602      	mov	r2, r0
 800463e:	701a      	strb	r2, [r3, #0]
}
 8004640:	e178      	b.n	8004934 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	3354      	adds	r3, #84	; 0x54
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	f083 0301 	eor.w	r3, r3, #1
 8004656:	b2d8      	uxtb	r0, r3
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	212c      	movs	r1, #44	; 0x2c
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	4413      	add	r3, r2
 8004664:	3354      	adds	r3, #84	; 0x54
 8004666:	4602      	mov	r2, r0
 8004668:	701a      	strb	r2, [r3, #0]
}
 800466a:	e163      	b.n	8004934 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	f040 80f6 	bne.w	8004870 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	212c      	movs	r1, #44	; 0x2c
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	4413      	add	r3, r2
 8004690:	3361      	adds	r3, #97	; 0x61
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d109      	bne.n	80046ac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	212c      	movs	r1, #44	; 0x2c
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	3360      	adds	r3, #96	; 0x60
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e0c9      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	3361      	adds	r3, #97	; 0x61
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d109      	bne.n	80046d4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3360      	adds	r3, #96	; 0x60
 80046ce:	2205      	movs	r2, #5
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e0b5      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	3361      	adds	r3, #97	; 0x61
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d009      	beq.n	80046fc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	3361      	adds	r3, #97	; 0x61
 80046f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d150      	bne.n	800479e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	212c      	movs	r1, #44	; 0x2c
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	335c      	adds	r3, #92	; 0x5c
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	202c      	movs	r0, #44	; 0x2c
 8004714:	fb00 f303 	mul.w	r3, r0, r3
 8004718:	440b      	add	r3, r1
 800471a:	335c      	adds	r3, #92	; 0x5c
 800471c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	212c      	movs	r1, #44	; 0x2c
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	4413      	add	r3, r2
 800472a:	335c      	adds	r3, #92	; 0x5c
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d912      	bls.n	8004758 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	212c      	movs	r1, #44	; 0x2c
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	4413      	add	r3, r2
 800473e:	335c      	adds	r3, #92	; 0x5c
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	3360      	adds	r3, #96	; 0x60
 8004752:	2204      	movs	r2, #4
 8004754:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004756:	e073      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	212c      	movs	r1, #44	; 0x2c
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4413      	add	r3, r2
 8004764:	3360      	adds	r3, #96	; 0x60
 8004766:	2202      	movs	r2, #2
 8004768:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004780:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004788:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4413      	add	r3, r2
 8004792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800479c:	e050      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	212c      	movs	r1, #44	; 0x2c
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	3361      	adds	r3, #97	; 0x61
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d122      	bne.n	80047f8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	212c      	movs	r1, #44	; 0x2c
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	4413      	add	r3, r2
 80047be:	3360      	adds	r3, #96	; 0x60
 80047c0:	2202      	movs	r2, #2
 80047c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e023      	b.n	8004840 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3361      	adds	r3, #97	; 0x61
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b07      	cmp	r3, #7
 800480a:	d119      	bne.n	8004840 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	335c      	adds	r3, #92	; 0x5c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	202c      	movs	r0, #44	; 0x2c
 8004824:	fb00 f303 	mul.w	r3, r0, r3
 8004828:	440b      	add	r3, r1
 800482a:	335c      	adds	r3, #92	; 0x5c
 800482c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	212c      	movs	r1, #44	; 0x2c
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	4413      	add	r3, r2
 800483a:	3360      	adds	r3, #96	; 0x60
 800483c:	2204      	movs	r2, #4
 800483e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	461a      	mov	r2, r3
 800484e:	2302      	movs	r3, #2
 8004850:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	b2d9      	uxtb	r1, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	202c      	movs	r0, #44	; 0x2c
 800485c:	fb00 f303 	mul.w	r3, r0, r3
 8004860:	4413      	add	r3, r2
 8004862:	3360      	adds	r3, #96	; 0x60
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f005 fdc9 	bl	800a400 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800486e:	e061      	b.n	8004934 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b10      	cmp	r3, #16
 8004884:	d156      	bne.n	8004934 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	333f      	adds	r3, #63	; 0x3f
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d111      	bne.n	80048be <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	335c      	adds	r3, #92	; 0x5c
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f003 f81d 	bl	80078f6 <USB_HC_Halt>
 80048bc:	e031      	b.n	8004922 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	333f      	adds	r3, #63	; 0x3f
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	212c      	movs	r1, #44	; 0x2c
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	4413      	add	r3, r2
 80048de:	333f      	adds	r3, #63	; 0x3f
 80048e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d11d      	bne.n	8004922 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	212c      	movs	r1, #44	; 0x2c
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
 80048f2:	335c      	adds	r3, #92	; 0x5c
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d110      	bne.n	8004922 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	212c      	movs	r1, #44	; 0x2c
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	4413      	add	r3, r2
 800490c:	3361      	adds	r3, #97	; 0x61
 800490e:	2203      	movs	r2, #3
 8004910:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f002 ffea 	bl	80078f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	461a      	mov	r2, r3
 8004930:	2310      	movs	r3, #16
 8004932:	6093      	str	r3, [r2, #8]
}
 8004934:	bf00      	nop
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d11a      	bne.n	80049a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	4413      	add	r3, r2
 8004974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004978:	461a      	mov	r2, r3
 800497a:	2304      	movs	r3, #4
 800497c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	3361      	adds	r3, #97	; 0x61
 800498c:	2206      	movs	r2, #6
 800498e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f002 ffab 	bl	80078f6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80049a0:	e331      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d12e      	bne.n	8004a16 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c4:	461a      	mov	r2, r3
 80049c6:	2320      	movs	r3, #32
 80049c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	333d      	adds	r3, #61	; 0x3d
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f040 8313 	bne.w	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	333d      	adds	r3, #61	; 0x3d
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	212c      	movs	r1, #44	; 0x2c
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	3360      	adds	r3, #96	; 0x60
 8004a00:	2202      	movs	r2, #2
 8004a02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f002 ff71 	bl	80078f6 <USB_HC_Halt>
}
 8004a14:	e2f7      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2c:	d112      	bne.n	8004a54 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f002 ff52 	bl	80078f6 <USB_HC_Halt>
}
 8004a52:	e2d8      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d140      	bne.n	8004aec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	212c      	movs	r1, #44	; 0x2c
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	335c      	adds	r3, #92	; 0x5c
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d111      	bne.n	8004ab6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	333d      	adds	r3, #61	; 0x3d
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	212c      	movs	r1, #44	; 0x2c
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3361      	adds	r3, #97	; 0x61
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f002 ff06 	bl	80078f6 <USB_HC_Halt>
}
 8004aea:	e28c      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d12c      	bne.n	8004b5c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	212c      	movs	r1, #44	; 0x2c
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	3361      	adds	r3, #97	; 0x61
 8004b10:	2204      	movs	r2, #4
 8004b12:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	212c      	movs	r1, #44	; 0x2c
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	4413      	add	r3, r2
 8004b20:	333d      	adds	r3, #61	; 0x3d
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	212c      	movs	r1, #44	; 0x2c
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	335c      	adds	r3, #92	; 0x5c
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f002 fed7 	bl	80078f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b54:	461a      	mov	r2, r3
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	6093      	str	r3, [r2, #8]
}
 8004b5a:	e254      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d11a      	bne.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2308      	movs	r3, #8
 8004b82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3361      	adds	r3, #97	; 0x61
 8004b92:	2205      	movs	r2, #5
 8004b94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f002 fea8 	bl	80078f6 <USB_HC_Halt>
}
 8004ba6:	e22e      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d140      	bne.n	8004c40 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	212c      	movs	r1, #44	; 0x2c
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	4413      	add	r3, r2
 8004bca:	335c      	adds	r3, #92	; 0x5c
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	212c      	movs	r1, #44	; 0x2c
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3361      	adds	r3, #97	; 0x61
 8004bde:	2203      	movs	r2, #3
 8004be0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	333d      	adds	r3, #61	; 0x3d
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d112      	bne.n	8004c1c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	333c      	adds	r3, #60	; 0x3c
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d108      	bne.n	8004c1c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	212c      	movs	r1, #44	; 0x2c
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	4413      	add	r3, r2
 8004c16:	333d      	adds	r3, #61	; 0x3d
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f002 fe65 	bl	80078f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2310      	movs	r3, #16
 8004c3c:	6093      	str	r3, [r2, #8]
}
 8004c3e:	e1e2      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d164      	bne.n	8004d20 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d111      	bne.n	8004c82 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	212c      	movs	r1, #44	; 0x2c
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	3361      	adds	r3, #97	; 0x61
 8004c6c:	2206      	movs	r2, #6
 8004c6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f002 fe3b 	bl	80078f6 <USB_HC_Halt>
 8004c80:	e044      	b.n	8004d0c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	335c      	adds	r3, #92	; 0x5c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	202c      	movs	r0, #44	; 0x2c
 8004c9a:	fb00 f303 	mul.w	r3, r0, r3
 8004c9e:	440b      	add	r3, r1
 8004ca0:	335c      	adds	r3, #92	; 0x5c
 8004ca2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	212c      	movs	r1, #44	; 0x2c
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	335c      	adds	r3, #92	; 0x5c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d920      	bls.n	8004cfa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	212c      	movs	r1, #44	; 0x2c
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	335c      	adds	r3, #92	; 0x5c
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3360      	adds	r3, #96	; 0x60
 8004cd8:	2204      	movs	r2, #4
 8004cda:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	b2d9      	uxtb	r1, r3
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	202c      	movs	r0, #44	; 0x2c
 8004ce6:	fb00 f303 	mul.w	r3, r0, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	3360      	adds	r3, #96	; 0x60
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f005 fb84 	bl	800a400 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cf8:	e008      	b.n	8004d0c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	3360      	adds	r3, #96	; 0x60
 8004d08:	2202      	movs	r2, #2
 8004d0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	6093      	str	r3, [r2, #8]
}
 8004d1e:	e172      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d11b      	bne.n	8004d70 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	212c      	movs	r1, #44	; 0x2c
 8004d3e:	fb01 f303 	mul.w	r3, r1, r3
 8004d42:	4413      	add	r3, r2
 8004d44:	3361      	adds	r3, #97	; 0x61
 8004d46:	2208      	movs	r2, #8
 8004d48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f002 fdce 	bl	80078f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	461a      	mov	r2, r3
 8004d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d6c:	6093      	str	r3, [r2, #8]
}
 8004d6e:	e14a      	b.n	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	f040 813f 	bne.w	8005006 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	212c      	movs	r1, #44	; 0x2c
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	3361      	adds	r3, #97	; 0x61
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d17d      	bne.n	8004e98 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	212c      	movs	r1, #44	; 0x2c
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	3360      	adds	r3, #96	; 0x60
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	212c      	movs	r1, #44	; 0x2c
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	4413      	add	r3, r2
 8004dba:	333f      	adds	r3, #63	; 0x3f
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d00a      	beq.n	8004dd8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	212c      	movs	r1, #44	; 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	333f      	adds	r3, #63	; 0x3f
 8004dd0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	f040 8100 	bne.w	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d113      	bne.n	8004e08 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	3355      	adds	r3, #85	; 0x55
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	f083 0301 	eor.w	r3, r3, #1
 8004df4:	b2d8      	uxtb	r0, r3
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	212c      	movs	r1, #44	; 0x2c
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	4413      	add	r3, r2
 8004e02:	3355      	adds	r3, #85	; 0x55
 8004e04:	4602      	mov	r2, r0
 8004e06:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 80e3 	bne.w	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	212c      	movs	r1, #44	; 0x2c
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	334c      	adds	r3, #76	; 0x4c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80d8 	beq.w	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	334c      	adds	r3, #76	; 0x4c
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	202c      	movs	r0, #44	; 0x2c
 8004e3e:	fb00 f202 	mul.w	r2, r0, r2
 8004e42:	440a      	add	r2, r1
 8004e44:	3240      	adds	r2, #64	; 0x40
 8004e46:	8812      	ldrh	r2, [r2, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	202c      	movs	r0, #44	; 0x2c
 8004e52:	fb00 f202 	mul.w	r2, r0, r2
 8004e56:	440a      	add	r2, r1
 8004e58:	3240      	adds	r2, #64	; 0x40
 8004e5a:	8812      	ldrh	r2, [r2, #0]
 8004e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80b5 	beq.w	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	212c      	movs	r1, #44	; 0x2c
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	3355      	adds	r3, #85	; 0x55
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	f083 0301 	eor.w	r3, r3, #1
 8004e82:	b2d8      	uxtb	r0, r3
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	212c      	movs	r1, #44	; 0x2c
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	4413      	add	r3, r2
 8004e90:	3355      	adds	r3, #85	; 0x55
 8004e92:	4602      	mov	r2, r0
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e09f      	b.n	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	212c      	movs	r1, #44	; 0x2c
 8004e9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3361      	adds	r3, #97	; 0x61
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d109      	bne.n	8004ec0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	212c      	movs	r1, #44	; 0x2c
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3360      	adds	r3, #96	; 0x60
 8004eba:	2202      	movs	r2, #2
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e08b      	b.n	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	212c      	movs	r1, #44	; 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	3361      	adds	r3, #97	; 0x61
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d109      	bne.n	8004ee8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	212c      	movs	r1, #44	; 0x2c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3360      	adds	r3, #96	; 0x60
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e077      	b.n	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	212c      	movs	r1, #44	; 0x2c
 8004eee:	fb01 f303 	mul.w	r3, r1, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3361      	adds	r3, #97	; 0x61
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	d109      	bne.n	8004f10 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3360      	adds	r3, #96	; 0x60
 8004f0a:	2205      	movs	r2, #5
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e063      	b.n	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3361      	adds	r3, #97	; 0x61
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b06      	cmp	r3, #6
 8004f22:	d009      	beq.n	8004f38 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	3361      	adds	r3, #97	; 0x61
 8004f32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d14f      	bne.n	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	335c      	adds	r3, #92	; 0x5c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	202c      	movs	r0, #44	; 0x2c
 8004f50:	fb00 f303 	mul.w	r3, r0, r3
 8004f54:	440b      	add	r3, r1
 8004f56:	335c      	adds	r3, #92	; 0x5c
 8004f58:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	335c      	adds	r3, #92	; 0x5c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d912      	bls.n	8004f94 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	335c      	adds	r3, #92	; 0x5c
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	212c      	movs	r1, #44	; 0x2c
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3360      	adds	r3, #96	; 0x60
 8004f8e:	2204      	movs	r2, #4
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	e021      	b.n	8004fd8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	212c      	movs	r1, #44	; 0x2c
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3360      	adds	r3, #96	; 0x60
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fbc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fc4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	b2d9      	uxtb	r1, r3
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	202c      	movs	r0, #44	; 0x2c
 8004ff4:	fb00 f303 	mul.w	r3, r0, r3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3360      	adds	r3, #96	; 0x60
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f005 f9fd 	bl	800a400 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005006:	bf00      	nop
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b08a      	sub	sp, #40	; 0x28
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	0c5b      	lsrs	r3, r3, #17
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005042:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d004      	beq.n	8005054 <HCD_RXQLVL_IRQHandler+0x46>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b05      	cmp	r3, #5
 800504e:	f000 80a9 	beq.w	80051a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005052:	e0aa      	b.n	80051aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80a6 	beq.w	80051a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	3344      	adds	r3, #68	; 0x44
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 809b 	beq.w	80051a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	212c      	movs	r1, #44	; 0x2c
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	4413      	add	r3, r2
 800507e:	3350      	adds	r3, #80	; 0x50
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	441a      	add	r2, r3
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	202c      	movs	r0, #44	; 0x2c
 800508c:	fb00 f303 	mul.w	r3, r0, r3
 8005090:	440b      	add	r3, r1
 8005092:	334c      	adds	r3, #76	; 0x4c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d87a      	bhi.n	8005190 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	212c      	movs	r1, #44	; 0x2c
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	4413      	add	r3, r2
 80050aa:	3344      	adds	r3, #68	; 0x44
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	b292      	uxth	r2, r2
 80050b2:	4619      	mov	r1, r3
 80050b4:	f001 ff76 	bl	8006fa4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	212c      	movs	r1, #44	; 0x2c
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	4413      	add	r3, r2
 80050c4:	3344      	adds	r3, #68	; 0x44
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	441a      	add	r2, r3
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	202c      	movs	r0, #44	; 0x2c
 80050d2:	fb00 f303 	mul.w	r3, r0, r3
 80050d6:	440b      	add	r3, r1
 80050d8:	3344      	adds	r3, #68	; 0x44
 80050da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	212c      	movs	r1, #44	; 0x2c
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	4413      	add	r3, r2
 80050e8:	3350      	adds	r3, #80	; 0x50
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	441a      	add	r2, r3
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	202c      	movs	r0, #44	; 0x2c
 80050f6:	fb00 f303 	mul.w	r3, r0, r3
 80050fa:	440b      	add	r3, r1
 80050fc:	3350      	adds	r3, #80	; 0x50
 80050fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	4413      	add	r3, r2
 8005108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	0cdb      	lsrs	r3, r3, #19
 8005110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005114:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	212c      	movs	r1, #44	; 0x2c
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	4413      	add	r3, r2
 8005122:	3340      	adds	r3, #64	; 0x40
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4293      	cmp	r3, r2
 800512c:	d13c      	bne.n	80051a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d039      	beq.n	80051a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800514a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005152:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	212c      	movs	r1, #44	; 0x2c
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	4413      	add	r3, r2
 8005172:	3354      	adds	r3, #84	; 0x54
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f083 0301 	eor.w	r3, r3, #1
 800517a:	b2d8      	uxtb	r0, r3
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	212c      	movs	r1, #44	; 0x2c
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	3354      	adds	r3, #84	; 0x54
 800518a:	4602      	mov	r2, r0
 800518c:	701a      	strb	r2, [r3, #0]
      break;
 800518e:	e00b      	b.n	80051a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	212c      	movs	r1, #44	; 0x2c
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	4413      	add	r3, r2
 800519c:	3360      	adds	r3, #96	; 0x60
 800519e:	2204      	movs	r2, #4
 80051a0:	701a      	strb	r2, [r3, #0]
      break;
 80051a2:	e001      	b.n	80051a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80051a4:	bf00      	nop
 80051a6:	e000      	b.n	80051aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80051a8:	bf00      	nop
  }
}
 80051aa:	bf00      	nop
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b086      	sub	sp, #24
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d10b      	bne.n	8005202 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d102      	bne.n	80051fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f005 f8e7 	bl	800a3c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f043 0302 	orr.w	r3, r3, #2
 8005200:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b08      	cmp	r3, #8
 800520a:	d132      	bne.n	8005272 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f043 0308 	orr.w	r3, r3, #8
 8005212:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b04      	cmp	r3, #4
 800521c:	d126      	bne.n	800526c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d113      	bne.n	800524e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800522c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005230:	d106      	bne.n	8005240 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2102      	movs	r1, #2
 8005238:	4618      	mov	r0, r3
 800523a:	f002 f821 	bl	8007280 <USB_InitFSLSPClkSel>
 800523e:	e011      	b.n	8005264 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2101      	movs	r1, #1
 8005246:	4618      	mov	r0, r3
 8005248:	f002 f81a 	bl	8007280 <USB_InitFSLSPClkSel>
 800524c:	e00a      	b.n	8005264 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d106      	bne.n	8005264 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525c:	461a      	mov	r2, r3
 800525e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005262:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f005 f8d9 	bl	800a41c <HAL_HCD_PortEnabled_Callback>
 800526a:	e002      	b.n	8005272 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f005 f8e3 	bl	800a438 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b20      	cmp	r3, #32
 800527a:	d103      	bne.n	8005284 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f043 0320 	orr.w	r3, r3, #32
 8005282:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800528a:	461a      	mov	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6013      	str	r3, [r2, #0]
}
 8005290:	bf00      	nop
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e267      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d075      	beq.n	80053a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052b6:	4b88      	ldr	r3, [pc, #544]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d00c      	beq.n	80052dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c2:	4b85      	ldr	r3, [pc, #532]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d112      	bne.n	80052f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ce:	4b82      	ldr	r3, [pc, #520]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052da:	d10b      	bne.n	80052f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	4b7e      	ldr	r3, [pc, #504]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05b      	beq.n	80053a0 <HAL_RCC_OscConfig+0x108>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d157      	bne.n	80053a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e242      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d106      	bne.n	800530c <HAL_RCC_OscConfig+0x74>
 80052fe:	4b76      	ldr	r3, [pc, #472]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a75      	ldr	r2, [pc, #468]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e01d      	b.n	8005348 <HAL_RCC_OscConfig+0xb0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x98>
 8005316:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a6f      	ldr	r2, [pc, #444]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800531c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b6d      	ldr	r3, [pc, #436]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a6c      	ldr	r2, [pc, #432]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0xb0>
 8005330:	4b69      	ldr	r3, [pc, #420]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a68      	ldr	r2, [pc, #416]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b66      	ldr	r3, [pc, #408]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a65      	ldr	r2, [pc, #404]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d013      	beq.n	8005378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fd fc30 	bl	8002bb4 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7fd fc2c 	bl	8002bb4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e207      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	4b5b      	ldr	r3, [pc, #364]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0xc0>
 8005376:	e014      	b.n	80053a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fd fc1c 	bl	8002bb4 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005380:	f7fd fc18 	bl	8002bb4 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e1f3      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005392:	4b51      	ldr	r3, [pc, #324]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0xe8>
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d063      	beq.n	8005476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ba:	4b47      	ldr	r3, [pc, #284]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d11c      	bne.n	8005400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053c6:	4b44      	ldr	r3, [pc, #272]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d116      	bne.n	8005400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	4b41      	ldr	r3, [pc, #260]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_RCC_OscConfig+0x152>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d001      	beq.n	80053ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e1c7      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ea:	4b3b      	ldr	r3, [pc, #236]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4937      	ldr	r1, [pc, #220]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fe:	e03a      	b.n	8005476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d020      	beq.n	800544a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005408:	4b34      	ldr	r3, [pc, #208]	; (80054dc <HAL_RCC_OscConfig+0x244>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fd fbd1 	bl	8002bb4 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005416:	f7fd fbcd 	bl	8002bb4 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e1a8      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005428:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005434:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4925      	ldr	r1, [pc, #148]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]
 8005448:	e015      	b.n	8005476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_RCC_OscConfig+0x244>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fd fbb0 	bl	8002bb4 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005458:	f7fd fbac 	bl	8002bb4 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e187      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546a:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d036      	beq.n	80054f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <HAL_RCC_OscConfig+0x248>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005490:	f7fd fb90 	bl	8002bb4 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005498:	f7fd fb8c 	bl	8002bb4 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e167      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_OscConfig+0x240>)
 80054ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x200>
 80054b6:	e01b      	b.n	80054f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_OscConfig+0x248>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054be:	f7fd fb79 	bl	8002bb4 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c4:	e00e      	b.n	80054e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c6:	f7fd fb75 	bl	8002bb4 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d907      	bls.n	80054e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e150      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
 80054d8:	40023800 	.word	0x40023800
 80054dc:	42470000 	.word	0x42470000
 80054e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e4:	4b88      	ldr	r3, [pc, #544]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80054e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ea      	bne.n	80054c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8097 	beq.w	800562c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005502:	4b81      	ldr	r3, [pc, #516]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	4b7d      	ldr	r3, [pc, #500]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	4a7c      	ldr	r2, [pc, #496]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551c:	6413      	str	r3, [r2, #64]	; 0x40
 800551e:	4b7a      	ldr	r3, [pc, #488]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552e:	4b77      	ldr	r3, [pc, #476]	; (800570c <HAL_RCC_OscConfig+0x474>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d118      	bne.n	800556c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800553a:	4b74      	ldr	r3, [pc, #464]	; (800570c <HAL_RCC_OscConfig+0x474>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a73      	ldr	r2, [pc, #460]	; (800570c <HAL_RCC_OscConfig+0x474>)
 8005540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005546:	f7fd fb35 	bl	8002bb4 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800554e:	f7fd fb31 	bl	8002bb4 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e10c      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005560:	4b6a      	ldr	r3, [pc, #424]	; (800570c <HAL_RCC_OscConfig+0x474>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d106      	bne.n	8005582 <HAL_RCC_OscConfig+0x2ea>
 8005574:	4b64      	ldr	r3, [pc, #400]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a63      	ldr	r2, [pc, #396]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
 8005580:	e01c      	b.n	80055bc <HAL_RCC_OscConfig+0x324>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b05      	cmp	r3, #5
 8005588:	d10c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x30c>
 800558a:	4b5f      	ldr	r3, [pc, #380]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a5e      	ldr	r2, [pc, #376]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005590:	f043 0304 	orr.w	r3, r3, #4
 8005594:	6713      	str	r3, [r2, #112]	; 0x70
 8005596:	4b5c      	ldr	r3, [pc, #368]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a5b      	ldr	r2, [pc, #364]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
 80055a2:	e00b      	b.n	80055bc <HAL_RCC_OscConfig+0x324>
 80055a4:	4b58      	ldr	r3, [pc, #352]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	4a57      	ldr	r2, [pc, #348]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	6713      	str	r3, [r2, #112]	; 0x70
 80055b0:	4b55      	ldr	r3, [pc, #340]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	4a54      	ldr	r2, [pc, #336]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055b6:	f023 0304 	bic.w	r3, r3, #4
 80055ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d015      	beq.n	80055f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fd faf6 	bl	8002bb4 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fd faf2 	bl	8002bb4 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0cb      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e2:	4b49      	ldr	r3, [pc, #292]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0ee      	beq.n	80055cc <HAL_RCC_OscConfig+0x334>
 80055ee:	e014      	b.n	800561a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f0:	f7fd fae0 	bl	8002bb4 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fd fadc 	bl	8002bb4 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e0b5      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560e:	4b3e      	ldr	r3, [pc, #248]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1ee      	bne.n	80055f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d105      	bne.n	800562c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005620:	4b39      	ldr	r3, [pc, #228]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	4a38      	ldr	r2, [pc, #224]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800562a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80a1 	beq.w	8005778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005636:	4b34      	ldr	r3, [pc, #208]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b08      	cmp	r3, #8
 8005640:	d05c      	beq.n	80056fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d141      	bne.n	80056ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564a:	4b31      	ldr	r3, [pc, #196]	; (8005710 <HAL_RCC_OscConfig+0x478>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005650:	f7fd fab0 	bl	8002bb4 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005658:	f7fd faac 	bl	8002bb4 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e087      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	3b01      	subs	r3, #1
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	491b      	ldr	r1, [pc, #108]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 800569c:	4313      	orrs	r3, r2
 800569e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a0:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <HAL_RCC_OscConfig+0x478>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a6:	f7fd fa85 	bl	8002bb4 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fd fa81 	bl	8002bb4 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e05c      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c0:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x416>
 80056cc:	e054      	b.n	8005778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ce:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_RCC_OscConfig+0x478>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fd fa6e 	bl	8002bb4 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fd fa6a 	bl	8002bb4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e045      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_RCC_OscConfig+0x470>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x444>
 80056fa:	e03d      	b.n	8005778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d107      	bne.n	8005714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e038      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
 8005708:	40023800 	.word	0x40023800
 800570c:	40007000 	.word	0x40007000
 8005710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005714:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <HAL_RCC_OscConfig+0x4ec>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d028      	beq.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d121      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d11a      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800574a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800574c:	4293      	cmp	r3, r2
 800574e:	d111      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	3b01      	subs	r3, #1
 800575e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d107      	bne.n	8005774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800

08005788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0cc      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b68      	ldr	r3, [pc, #416]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d90c      	bls.n	80057c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b65      	ldr	r3, [pc, #404]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b2:	4b63      	ldr	r3, [pc, #396]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0b8      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057dc:	4b59      	ldr	r3, [pc, #356]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a58      	ldr	r2, [pc, #352]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057f4:	4b53      	ldr	r3, [pc, #332]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4a52      	ldr	r2, [pc, #328]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005800:	4b50      	ldr	r3, [pc, #320]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	494d      	ldr	r1, [pc, #308]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d044      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d107      	bne.n	8005836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005826:	4b47      	ldr	r3, [pc, #284]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d119      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e07f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d003      	beq.n	8005846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005842:	2b03      	cmp	r3, #3
 8005844:	d107      	bne.n	8005856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005846:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e06f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005856:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e067      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005866:	4b37      	ldr	r3, [pc, #220]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 0203 	bic.w	r2, r3, #3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4934      	ldr	r1, [pc, #208]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005878:	f7fd f99c 	bl	8002bb4 <HAL_GetTick>
 800587c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	e00a      	b.n	8005896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005880:	f7fd f998 	bl	8002bb4 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e04f      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005896:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 020c 	and.w	r2, r3, #12
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d1eb      	bne.n	8005880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058a8:	4b25      	ldr	r3, [pc, #148]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d20c      	bcs.n	80058d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b6:	4b22      	ldr	r3, [pc, #136]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b20      	ldr	r3, [pc, #128]	; (8005940 <HAL_RCC_ClockConfig+0x1b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e032      	b.n	8005936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4916      	ldr	r1, [pc, #88]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	490e      	ldr	r1, [pc, #56]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800590e:	f000 f821 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8005912:	4602      	mov	r2, r0
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	490a      	ldr	r1, [pc, #40]	; (8005948 <HAL_RCC_ClockConfig+0x1c0>)
 8005920:	5ccb      	ldrb	r3, [r1, r3]
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	4a09      	ldr	r2, [pc, #36]	; (800594c <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_RCC_ClockConfig+0x1c8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fd f8fc 	bl	8002b2c <HAL_InitTick>

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40023c00 	.word	0x40023c00
 8005944:	40023800 	.word	0x40023800
 8005948:	080192bc 	.word	0x080192bc
 800594c:	20000004 	.word	0x20000004
 8005950:	20000010 	.word	0x20000010

08005954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005958:	b090      	sub	sp, #64	; 0x40
 800595a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
 8005960:	2300      	movs	r3, #0
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005964:	2300      	movs	r3, #0
 8005966:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800596c:	4b59      	ldr	r3, [pc, #356]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 030c 	and.w	r3, r3, #12
 8005974:	2b08      	cmp	r3, #8
 8005976:	d00d      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0x40>
 8005978:	2b08      	cmp	r3, #8
 800597a:	f200 80a1 	bhi.w	8005ac0 <HAL_RCC_GetSysClockFreq+0x16c>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x34>
 8005982:	2b04      	cmp	r3, #4
 8005984:	d003      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x3a>
 8005986:	e09b      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005988:	4b53      	ldr	r3, [pc, #332]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 800598a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800598c:	e09b      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800598e:	4b53      	ldr	r3, [pc, #332]	; (8005adc <HAL_RCC_GetSysClockFreq+0x188>)
 8005990:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005992:	e098      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005994:	4b4f      	ldr	r3, [pc, #316]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800599e:	4b4d      	ldr	r3, [pc, #308]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d028      	beq.n	80059fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059aa:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	2200      	movs	r2, #0
 80059b2:	623b      	str	r3, [r7, #32]
 80059b4:	627a      	str	r2, [r7, #36]	; 0x24
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059bc:	2100      	movs	r1, #0
 80059be:	4b47      	ldr	r3, [pc, #284]	; (8005adc <HAL_RCC_GetSysClockFreq+0x188>)
 80059c0:	fb03 f201 	mul.w	r2, r3, r1
 80059c4:	2300      	movs	r3, #0
 80059c6:	fb00 f303 	mul.w	r3, r0, r3
 80059ca:	4413      	add	r3, r2
 80059cc:	4a43      	ldr	r2, [pc, #268]	; (8005adc <HAL_RCC_GetSysClockFreq+0x188>)
 80059ce:	fba0 1202 	umull	r1, r2, r0, r2
 80059d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d4:	460a      	mov	r2, r1
 80059d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80059d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059da:	4413      	add	r3, r2
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e0:	2200      	movs	r2, #0
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	61fa      	str	r2, [r7, #28]
 80059e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059ee:	f7fa fc47 	bl	8000280 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4613      	mov	r3, r2
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fa:	e053      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059fc:	4b35      	ldr	r3, [pc, #212]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	099b      	lsrs	r3, r3, #6
 8005a02:	2200      	movs	r2, #0
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	617a      	str	r2, [r7, #20]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a0e:	f04f 0b00 	mov.w	fp, #0
 8005a12:	4652      	mov	r2, sl
 8005a14:	465b      	mov	r3, fp
 8005a16:	f04f 0000 	mov.w	r0, #0
 8005a1a:	f04f 0100 	mov.w	r1, #0
 8005a1e:	0159      	lsls	r1, r3, #5
 8005a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a24:	0150      	lsls	r0, r2, #5
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	ebb2 080a 	subs.w	r8, r2, sl
 8005a2e:	eb63 090b 	sbc.w	r9, r3, fp
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a46:	ebb2 0408 	subs.w	r4, r2, r8
 8005a4a:	eb63 0509 	sbc.w	r5, r3, r9
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	00eb      	lsls	r3, r5, #3
 8005a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a5c:	00e2      	lsls	r2, r4, #3
 8005a5e:	4614      	mov	r4, r2
 8005a60:	461d      	mov	r5, r3
 8005a62:	eb14 030a 	adds.w	r3, r4, sl
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	eb45 030b 	adc.w	r3, r5, fp
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	028b      	lsls	r3, r1, #10
 8005a7e:	4621      	mov	r1, r4
 8005a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a84:	4621      	mov	r1, r4
 8005a86:	028a      	lsls	r2, r1, #10
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	2200      	movs	r2, #0
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	60fa      	str	r2, [r7, #12]
 8005a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a98:	f7fa fbf2 	bl	8000280 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ac2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3740      	adds	r7, #64	; 0x40
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	017d7840 	.word	0x017d7840

08005ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e041      	b.n	8005b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb fc16 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f000 fcf0 	bl	8006504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d001      	beq.n	8005b98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e03c      	b.n	8005c12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1e      	ldr	r2, [pc, #120]	; (8005c20 <HAL_TIM_Base_Start+0xa0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <HAL_TIM_Base_Start+0x5c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d013      	beq.n	8005bdc <HAL_TIM_Base_Start+0x5c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <HAL_TIM_Base_Start+0xa4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_TIM_Base_Start+0x5c>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <HAL_TIM_Base_Start+0xa8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_TIM_Base_Start+0x5c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <HAL_TIM_Base_Start+0xac>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIM_Base_Start+0x5c>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <HAL_TIM_Base_Start+0xb0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d111      	bne.n	8005c00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b06      	cmp	r3, #6
 8005bec:	d010      	beq.n	8005c10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	e007      	b.n	8005c10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40000c00 	.word	0x40000c00
 8005c30:	40014000 	.word	0x40014000

08005c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d001      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e044      	b.n	8005cd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1e      	ldr	r2, [pc, #120]	; (8005ce4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d018      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c76:	d013      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ce8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00e      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a19      	ldr	r2, [pc, #100]	; (8005cec <HAL_TIM_Base_Start_IT+0xb8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d009      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d004      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d111      	bne.n	8005cc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b06      	cmp	r3, #6
 8005cb0:	d010      	beq.n	8005cd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc2:	e007      	b.n	8005cd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40014000 	.word	0x40014000

08005cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e041      	b.n	8005d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f839 	bl	8005d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f000 fbe4 	bl	8006504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <HAL_TIM_PWM_Start+0x24>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	e022      	b.n	8005e16 <HAL_TIM_PWM_Start+0x6a>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d109      	bne.n	8005dea <HAL_TIM_PWM_Start+0x3e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	bf14      	ite	ne
 8005de2:	2301      	movne	r3, #1
 8005de4:	2300      	moveq	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	e015      	b.n	8005e16 <HAL_TIM_PWM_Start+0x6a>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d109      	bne.n	8005e04 <HAL_TIM_PWM_Start+0x58>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	bf14      	ite	ne
 8005dfc:	2301      	movne	r3, #1
 8005dfe:	2300      	moveq	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e008      	b.n	8005e16 <HAL_TIM_PWM_Start+0x6a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e068      	b.n	8005ef0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Start+0x82>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e2c:	e013      	b.n	8005e56 <HAL_TIM_PWM_Start+0xaa>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_PWM_Start+0x92>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e3c:	e00b      	b.n	8005e56 <HAL_TIM_PWM_Start+0xaa>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_PWM_Start+0xa2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e4c:	e003      	b.n	8005e56 <HAL_TIM_PWM_Start+0xaa>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fe87 	bl	8006b72 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a23      	ldr	r2, [pc, #140]	; (8005ef8 <HAL_TIM_PWM_Start+0x14c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d107      	bne.n	8005e7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1d      	ldr	r2, [pc, #116]	; (8005ef8 <HAL_TIM_PWM_Start+0x14c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_TIM_PWM_Start+0x10e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d013      	beq.n	8005eba <HAL_TIM_PWM_Start+0x10e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a19      	ldr	r2, [pc, #100]	; (8005efc <HAL_TIM_PWM_Start+0x150>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_TIM_PWM_Start+0x10e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <HAL_TIM_PWM_Start+0x154>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_TIM_PWM_Start+0x10e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <HAL_TIM_PWM_Start+0x158>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIM_PWM_Start+0x10e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <HAL_TIM_PWM_Start+0x15c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d111      	bne.n	8005ede <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	d010      	beq.n	8005eee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005edc:	e007      	b.n	8005eee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40010000 	.word	0x40010000
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40000c00 	.word	0x40000c00
 8005f08:	40014000 	.word	0x40014000

08005f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d122      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0202 	mvn.w	r2, #2
 8005f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fab9 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 faab 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fabc 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d122      	bne.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11b      	bne.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0204 	mvn.w	r2, #4
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa8f 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa81 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fa92 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d122      	bne.n	8006010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d11b      	bne.n	8006010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0208 	mvn.w	r2, #8
 8005fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa65 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa57 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa68 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b10      	cmp	r3, #16
 800601c:	d122      	bne.n	8006064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d11b      	bne.n	8006064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0210 	mvn.w	r2, #16
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2208      	movs	r2, #8
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa3b 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa2d 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fa3e 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10e      	bne.n	8006090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d107      	bne.n	8006090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0201 	mvn.w	r2, #1
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fa faec 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b80      	cmp	r3, #128	; 0x80
 800609c:	d10e      	bne.n	80060bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b80      	cmp	r3, #128	; 0x80
 80060aa:	d107      	bne.n	80060bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fdf8 	bl	8006cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d10e      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	d107      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa03 	bl	80064ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d10e      	bne.n	8006114 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b20      	cmp	r3, #32
 8006102:	d107      	bne.n	8006114 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0220 	mvn.w	r2, #32
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fdc2 	bl	8006c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006136:	2302      	movs	r3, #2
 8006138:	e0ae      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b0c      	cmp	r3, #12
 8006146:	f200 809f 	bhi.w	8006288 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006185 	.word	0x08006185
 8006154:	08006289 	.word	0x08006289
 8006158:	08006289 	.word	0x08006289
 800615c:	08006289 	.word	0x08006289
 8006160:	080061c5 	.word	0x080061c5
 8006164:	08006289 	.word	0x08006289
 8006168:	08006289 	.word	0x08006289
 800616c:	08006289 	.word	0x08006289
 8006170:	08006207 	.word	0x08006207
 8006174:	08006289 	.word	0x08006289
 8006178:	08006289 	.word	0x08006289
 800617c:	08006289 	.word	0x08006289
 8006180:	08006247 	.word	0x08006247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fa3a 	bl	8006604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0208 	orr.w	r2, r2, #8
 800619e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0204 	bic.w	r2, r2, #4
 80061ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6999      	ldr	r1, [r3, #24]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	619a      	str	r2, [r3, #24]
      break;
 80061c2:	e064      	b.n	800628e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fa80 	bl	80066d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	021a      	lsls	r2, r3, #8
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	619a      	str	r2, [r3, #24]
      break;
 8006204:	e043      	b.n	800628e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 facb 	bl	80067a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0208 	orr.w	r2, r2, #8
 8006220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0204 	bic.w	r2, r2, #4
 8006230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69d9      	ldr	r1, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	61da      	str	r2, [r3, #28]
      break;
 8006244:	e023      	b.n	800628e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fb15 	bl	800687c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	021a      	lsls	r2, r3, #8
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	61da      	str	r2, [r3, #28]
      break;
 8006286:	e002      	b.n	800628e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	75fb      	strb	r3, [r7, #23]
      break;
 800628c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006296:	7dfb      	ldrb	r3, [r7, #23]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_TIM_ConfigClockSource+0x1c>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0b4      	b.n	8006426 <HAL_TIM_ConfigClockSource+0x186>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f4:	d03e      	beq.n	8006374 <HAL_TIM_ConfigClockSource+0xd4>
 80062f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fa:	f200 8087 	bhi.w	800640c <HAL_TIM_ConfigClockSource+0x16c>
 80062fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006302:	f000 8086 	beq.w	8006412 <HAL_TIM_ConfigClockSource+0x172>
 8006306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630a:	d87f      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b70      	cmp	r3, #112	; 0x70
 800630e:	d01a      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0xa6>
 8006310:	2b70      	cmp	r3, #112	; 0x70
 8006312:	d87b      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 8006314:	2b60      	cmp	r3, #96	; 0x60
 8006316:	d050      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0x11a>
 8006318:	2b60      	cmp	r3, #96	; 0x60
 800631a:	d877      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 800631c:	2b50      	cmp	r3, #80	; 0x50
 800631e:	d03c      	beq.n	800639a <HAL_TIM_ConfigClockSource+0xfa>
 8006320:	2b50      	cmp	r3, #80	; 0x50
 8006322:	d873      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d058      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x13a>
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d86f      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b30      	cmp	r3, #48	; 0x30
 800632e:	d064      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x15a>
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	d86b      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b20      	cmp	r3, #32
 8006336:	d060      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x15a>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d867      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d05c      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x15a>
 8006340:	2b10      	cmp	r3, #16
 8006342:	d05a      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0x15a>
 8006344:	e062      	b.n	800640c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6899      	ldr	r1, [r3, #8]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f000 fbec 	bl	8006b32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	609a      	str	r2, [r3, #8]
      break;
 8006372:	e04f      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	6899      	ldr	r1, [r3, #8]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f000 fbd5 	bl	8006b32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006396:	609a      	str	r2, [r3, #8]
      break;
 8006398:	e03c      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6859      	ldr	r1, [r3, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f000 fb49 	bl	8006a3e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2150      	movs	r1, #80	; 0x50
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fba2 	bl	8006afc <TIM_ITRx_SetConfig>
      break;
 80063b8:	e02c      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f000 fb68 	bl	8006a9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2160      	movs	r1, #96	; 0x60
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fb92 	bl	8006afc <TIM_ITRx_SetConfig>
      break;
 80063d8:	e01c      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6859      	ldr	r1, [r3, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f000 fb29 	bl	8006a3e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2140      	movs	r1, #64	; 0x40
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fb82 	bl	8006afc <TIM_ITRx_SetConfig>
      break;
 80063f8:	e00c      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f000 fb79 	bl	8006afc <TIM_ITRx_SetConfig>
      break;
 800640a:	e003      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e000      	b.n	8006414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006442:	2302      	movs	r3, #2
 8006444:	e031      	b.n	80064aa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fa5f 	bl	800691c <TIM_SlaveTimer_SetConfig>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e018      	b.n	80064aa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006486:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006496:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a34      	ldr	r2, [pc, #208]	; (80065e8 <TIM_Base_SetConfig+0xe4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00f      	beq.n	800653c <TIM_Base_SetConfig+0x38>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d00b      	beq.n	800653c <TIM_Base_SetConfig+0x38>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a31      	ldr	r2, [pc, #196]	; (80065ec <TIM_Base_SetConfig+0xe8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d007      	beq.n	800653c <TIM_Base_SetConfig+0x38>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a30      	ldr	r2, [pc, #192]	; (80065f0 <TIM_Base_SetConfig+0xec>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d003      	beq.n	800653c <TIM_Base_SetConfig+0x38>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a2f      	ldr	r2, [pc, #188]	; (80065f4 <TIM_Base_SetConfig+0xf0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d108      	bne.n	800654e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <TIM_Base_SetConfig+0xe4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01b      	beq.n	800658e <TIM_Base_SetConfig+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655c:	d017      	beq.n	800658e <TIM_Base_SetConfig+0x8a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a22      	ldr	r2, [pc, #136]	; (80065ec <TIM_Base_SetConfig+0xe8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <TIM_Base_SetConfig+0x8a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <TIM_Base_SetConfig+0xec>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00f      	beq.n	800658e <TIM_Base_SetConfig+0x8a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <TIM_Base_SetConfig+0xf0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00b      	beq.n	800658e <TIM_Base_SetConfig+0x8a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <TIM_Base_SetConfig+0xf4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <TIM_Base_SetConfig+0x8a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a1e      	ldr	r2, [pc, #120]	; (80065fc <TIM_Base_SetConfig+0xf8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_Base_SetConfig+0x8a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1d      	ldr	r2, [pc, #116]	; (8006600 <TIM_Base_SetConfig+0xfc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d108      	bne.n	80065a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <TIM_Base_SetConfig+0xe4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d103      	bne.n	80065d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	615a      	str	r2, [r3, #20]
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40000400 	.word	0x40000400
 80065f0:	40000800 	.word	0x40000800
 80065f4:	40000c00 	.word	0x40000c00
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40014400 	.word	0x40014400
 8006600:	40014800 	.word	0x40014800

08006604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f023 0201 	bic.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0302 	bic.w	r3, r3, #2
 800664c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <TIM_OC1_SetConfig+0xc8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10c      	bne.n	800667a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0308 	bic.w	r3, r3, #8
 8006666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a13      	ldr	r2, [pc, #76]	; (80066cc <TIM_OC1_SetConfig+0xc8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d111      	bne.n	80066a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	621a      	str	r2, [r3, #32]
}
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40010000 	.word	0x40010000

080066d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	f023 0210 	bic.w	r2, r3, #16
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0320 	bic.w	r3, r3, #32
 800671a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <TIM_OC2_SetConfig+0xd4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10d      	bne.n	800674c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <TIM_OC2_SetConfig+0xd4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d113      	bne.n	800677c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800675a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40010000 	.word	0x40010000

080067a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <TIM_OC3_SetConfig+0xd0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d10d      	bne.n	8006822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a14      	ldr	r2, [pc, #80]	; (8006878 <TIM_OC3_SetConfig+0xd0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d113      	bne.n	8006852 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40010000 	.word	0x40010000

0800687c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	031b      	lsls	r3, r3, #12
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a10      	ldr	r2, [pc, #64]	; (8006918 <TIM_OC4_SetConfig+0x9c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d109      	bne.n	80068f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40010000 	.word	0x40010000

0800691c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006938:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f023 0307 	bic.w	r3, r3, #7
 800694a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b70      	cmp	r3, #112	; 0x70
 8006964:	d01a      	beq.n	800699c <TIM_SlaveTimer_SetConfig+0x80>
 8006966:	2b70      	cmp	r3, #112	; 0x70
 8006968:	d860      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 800696a:	2b60      	cmp	r3, #96	; 0x60
 800696c:	d054      	beq.n	8006a18 <TIM_SlaveTimer_SetConfig+0xfc>
 800696e:	2b60      	cmp	r3, #96	; 0x60
 8006970:	d85c      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 8006972:	2b50      	cmp	r3, #80	; 0x50
 8006974:	d046      	beq.n	8006a04 <TIM_SlaveTimer_SetConfig+0xe8>
 8006976:	2b50      	cmp	r3, #80	; 0x50
 8006978:	d858      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d019      	beq.n	80069b2 <TIM_SlaveTimer_SetConfig+0x96>
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d854      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 8006982:	2b30      	cmp	r3, #48	; 0x30
 8006984:	d055      	beq.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
 8006986:	2b30      	cmp	r3, #48	; 0x30
 8006988:	d850      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 800698a:	2b20      	cmp	r3, #32
 800698c:	d051      	beq.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
 800698e:	2b20      	cmp	r3, #32
 8006990:	d84c      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d04d      	beq.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
 8006996:	2b10      	cmp	r3, #16
 8006998:	d04b      	beq.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
 800699a:	e047      	b.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68d9      	ldr	r1, [r3, #12]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f000 f8c1 	bl	8006b32 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80069b0:	e040      	b.n	8006a34 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d101      	bne.n	80069be <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e03b      	b.n	8006a36 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6a1a      	ldr	r2, [r3, #32]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	621a      	str	r2, [r3, #32]
      break;
 8006a02:	e017      	b.n	8006a34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6899      	ldr	r1, [r3, #8]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	461a      	mov	r2, r3
 8006a12:	f000 f814 	bl	8006a3e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006a16:	e00d      	b.n	8006a34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6899      	ldr	r1, [r3, #8]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	461a      	mov	r2, r3
 8006a26:	f000 f839 	bl	8006a9c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006a2a:	e003      	b.n	8006a34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a30:	e000      	b.n	8006a34 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006a32:	bf00      	nop
  }

  return status;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b087      	sub	sp, #28
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	f023 0201 	bic.w	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 030a 	bic.w	r3, r3, #10
 8006a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f023 0210 	bic.w	r2, r3, #16
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ac6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	031b      	lsls	r3, r3, #12
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	621a      	str	r2, [r3, #32]
}
 8006af0:	bf00      	nop
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f043 0307 	orr.w	r3, r3, #7
 8006b1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	609a      	str	r2, [r3, #8]
}
 8006b26:	bf00      	nop
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b087      	sub	sp, #28
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	021a      	lsls	r2, r3, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	609a      	str	r2, [r3, #8]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b087      	sub	sp, #28
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	2201      	movs	r2, #1
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	43db      	mvns	r3, r3
 8006b94:	401a      	ands	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	431a      	orrs	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e050      	b.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d018      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c20:	d013      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00e      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a16      	ldr	r2, [pc, #88]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a15      	ldr	r2, [pc, #84]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a13      	ldr	r2, [pc, #76]	; (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d10c      	bne.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	40014000 	.word	0x40014000

08006c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	f107 001c 	add.w	r0, r7, #28
 8006cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d122      	bne.n	8006d1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d105      	bne.n	8006d12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9c0 	bl	8007098 <USB_CoreReset>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e01a      	b.n	8006d54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9b4 	bl	8007098 <USB_CoreReset>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
 8006d46:	e005      	b.n	8006d54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d10b      	bne.n	8006d72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f043 0206 	orr.w	r2, r3, #6
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f043 0220 	orr.w	r2, r3, #32
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d7e:	b004      	add	sp, #16
 8006d80:	4770      	bx	lr

08006d82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f043 0201 	orr.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f023 0201 	bic.w	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d115      	bne.n	8006e14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006df4:	2001      	movs	r0, #1
 8006df6:	f7fb fee9 	bl	8002bcc <HAL_Delay>
      ms++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f93a 	bl	800707a <USB_GetMode>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d01e      	beq.n	8006e4a <USB_SetCurrentMode+0x84>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b31      	cmp	r3, #49	; 0x31
 8006e10:	d9f0      	bls.n	8006df4 <USB_SetCurrentMode+0x2e>
 8006e12:	e01a      	b.n	8006e4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d115      	bne.n	8006e46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e26:	2001      	movs	r0, #1
 8006e28:	f7fb fed0 	bl	8002bcc <HAL_Delay>
      ms++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f921 	bl	800707a <USB_GetMode>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <USB_SetCurrentMode+0x84>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b31      	cmp	r3, #49	; 0x31
 8006e42:	d9f0      	bls.n	8006e26 <USB_SetCurrentMode+0x60>
 8006e44:	e001      	b.n	8006e4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e005      	b.n	8006e56 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b32      	cmp	r3, #50	; 0x32
 8006e4e:	d101      	bne.n	8006e54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4a13      	ldr	r2, [pc, #76]	; (8006ec4 <USB_FlushTxFifo+0x64>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d901      	bls.n	8006e80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e01b      	b.n	8006eb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	daf2      	bge.n	8006e6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	019b      	lsls	r3, r3, #6
 8006e90:	f043 0220 	orr.w	r2, r3, #32
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4a08      	ldr	r2, [pc, #32]	; (8006ec4 <USB_FlushTxFifo+0x64>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d901      	bls.n	8006eaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e006      	b.n	8006eb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d0f0      	beq.n	8006e98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	00030d40 	.word	0x00030d40

08006ec8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a11      	ldr	r2, [pc, #68]	; (8006f24 <USB_FlushRxFifo+0x5c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d901      	bls.n	8006ee6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e018      	b.n	8006f18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	daf2      	bge.n	8006ed4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2210      	movs	r2, #16
 8006ef6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <USB_FlushRxFifo+0x5c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d901      	bls.n	8006f0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e006      	b.n	8006f18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0310 	and.w	r3, r3, #16
 8006f12:	2b10      	cmp	r3, #16
 8006f14:	d0f0      	beq.n	8006ef8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	00030d40 	.word	0x00030d40

08006f28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b089      	sub	sp, #36	; 0x24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4611      	mov	r1, r2
 8006f34:	461a      	mov	r2, r3
 8006f36:	460b      	mov	r3, r1
 8006f38:	71fb      	strb	r3, [r7, #7]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d123      	bne.n	8006f96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f4e:	88bb      	ldrh	r3, [r7, #4]
 8006f50:	3303      	adds	r3, #3
 8006f52:	089b      	lsrs	r3, r3, #2
 8006f54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f56:	2300      	movs	r3, #0
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	e018      	b.n	8006f8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	031a      	lsls	r2, r3, #12
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f68:	461a      	mov	r2, r3
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	3301      	adds	r3, #1
 8006f74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	3301      	adds	r3, #1
 8006f86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d3e2      	bcc.n	8006f5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3724      	adds	r7, #36	; 0x24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b08b      	sub	sp, #44	; 0x2c
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	089b      	lsrs	r3, r3, #2
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	f003 0303 	and.w	r3, r3, #3
 8006fc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	e014      	b.n	8006ffa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	3301      	adds	r3, #1
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	3301      	adds	r3, #1
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	623b      	str	r3, [r7, #32]
 8006ffa:	6a3a      	ldr	r2, [r7, #32]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d3e6      	bcc.n	8006fd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007002:	8bfb      	ldrh	r3, [r7, #30]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01e      	beq.n	8007046 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007012:	461a      	mov	r2, r3
 8007014:	f107 0310 	add.w	r3, r7, #16
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	fa22 f303 	lsr.w	r3, r2, r3
 8007028:	b2da      	uxtb	r2, r3
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	701a      	strb	r2, [r3, #0]
      i++;
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	3301      	adds	r3, #1
 8007032:	623b      	str	r3, [r7, #32]
      pDest++;
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	3301      	adds	r3, #1
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800703a:	8bfb      	ldrh	r3, [r7, #30]
 800703c:	3b01      	subs	r3, #1
 800703e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007040:	8bfb      	ldrh	r3, [r7, #30]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1ea      	bne.n	800701c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007048:	4618      	mov	r0, r3
 800704a:	372c      	adds	r7, #44	; 0x2c
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4013      	ands	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800706c:	68fb      	ldr	r3, [r7, #12]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0301 	and.w	r3, r3, #1
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
	...

08007098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4a13      	ldr	r2, [pc, #76]	; (80070fc <USB_CoreReset+0x64>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d901      	bls.n	80070b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e01b      	b.n	80070ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	daf2      	bge.n	80070a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f043 0201 	orr.w	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3301      	adds	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <USB_CoreReset+0x64>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d901      	bls.n	80070e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e006      	b.n	80070ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d0f0      	beq.n	80070ce <USB_CoreReset+0x36>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	00030d40 	.word	0x00030d40

08007100 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007100:	b084      	sub	sp, #16
 8007102:	b580      	push	{r7, lr}
 8007104:	b086      	sub	sp, #24
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800710e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007120:	461a      	mov	r2, r3
 8007122:	2300      	movs	r3, #0
 8007124:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007152:	2b00      	cmp	r3, #0
 8007154:	d018      	beq.n	8007188 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10a      	bne.n	8007172 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800716a:	f043 0304 	orr.w	r3, r3, #4
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	e014      	b.n	800719c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007180:	f023 0304 	bic.w	r3, r3, #4
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	e009      	b.n	800719c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007196:	f023 0304 	bic.w	r3, r3, #4
 800719a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800719c:	2110      	movs	r1, #16
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff fe5e 	bl	8006e60 <USB_FlushTxFifo>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fe8a 	bl	8006ec8 <USB_FlushRxFifo>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	e015      	b.n	80071f0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d0:	461a      	mov	r2, r3
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295
 80071d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e4:	461a      	mov	r2, r3
 80071e6:	2300      	movs	r3, #0
 80071e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3301      	adds	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d3e5      	bcc.n	80071c4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f04f 32ff 	mov.w	r2, #4294967295
 8007204:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007218:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a13      	ldr	r2, [pc, #76]	; (800726c <USB_HostInit+0x16c>)
 800721e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a13      	ldr	r2, [pc, #76]	; (8007270 <USB_HostInit+0x170>)
 8007224:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007228:	e009      	b.n	800723e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2280      	movs	r2, #128	; 0x80
 800722e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a10      	ldr	r2, [pc, #64]	; (8007274 <USB_HostInit+0x174>)
 8007234:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a0f      	ldr	r2, [pc, #60]	; (8007278 <USB_HostInit+0x178>)
 800723a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	2b00      	cmp	r3, #0
 8007242:	d105      	bne.n	8007250 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f043 0210 	orr.w	r2, r3, #16
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699a      	ldr	r2, [r3, #24]
 8007254:	4b09      	ldr	r3, [pc, #36]	; (800727c <USB_HostInit+0x17c>)
 8007256:	4313      	orrs	r3, r2
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007268:	b004      	add	sp, #16
 800726a:	4770      	bx	lr
 800726c:	01000200 	.word	0x01000200
 8007270:	00e00300 	.word	0x00e00300
 8007274:	00600080 	.word	0x00600080
 8007278:	004000e0 	.word	0x004000e0
 800727c:	a3200008 	.word	0xa3200008

08007280 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072b8:	4313      	orrs	r3, r2
 80072ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80072bc:	78fb      	ldrb	r3, [r7, #3]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d107      	bne.n	80072d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c8:	461a      	mov	r2, r3
 80072ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072ce:	6053      	str	r3, [r2, #4]
 80072d0:	e009      	b.n	80072e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d106      	bne.n	80072e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072de:	461a      	mov	r2, r3
 80072e0:	f241 7370 	movw	r3, #6000	; 0x1770
 80072e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007314:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800731e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007322:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007324:	2064      	movs	r0, #100	; 0x64
 8007326:	f7fb fc51 	bl	8002bcc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007336:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007338:	200a      	movs	r0, #10
 800733a:	f7fb fc47 	bl	8002bcc <HAL_Delay>

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800736c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <USB_DriveVbus+0x44>
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d106      	bne.n	800738c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800738a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	d109      	bne.n	80073ac <USB_DriveVbus+0x64>
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	0c5b      	lsrs	r3, r3, #17
 80073d8:	f003 0303 	and.w	r3, r3, #3
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	b29b      	uxth	r3, r3
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
	...

0800740c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	461a      	mov	r2, r3
 800741a:	4603      	mov	r3, r0
 800741c:	70fb      	strb	r3, [r7, #3]
 800741e:	460b      	mov	r3, r1
 8007420:	70bb      	strb	r3, [r7, #2]
 8007422:	4613      	mov	r3, r2
 8007424:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4413      	add	r3, r2
 8007436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743a:	461a      	mov	r2, r3
 800743c:	f04f 33ff 	mov.w	r3, #4294967295
 8007440:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007442:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007446:	2b03      	cmp	r3, #3
 8007448:	d87e      	bhi.n	8007548 <USB_HC_Init+0x13c>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <USB_HC_Init+0x44>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007461 	.word	0x08007461
 8007454:	0800750b 	.word	0x0800750b
 8007458:	08007461 	.word	0x08007461
 800745c:	080074cd 	.word	0x080074cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	4413      	add	r3, r2
 8007468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746c:	461a      	mov	r2, r3
 800746e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007472:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007474:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007478:	2b00      	cmp	r3, #0
 800747a:	da10      	bge.n	800749e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4413      	add	r3, r2
 8007484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	78fa      	ldrb	r2, [r7, #3]
 800748c:	0151      	lsls	r1, r2, #5
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	440a      	add	r2, r1
 8007492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800749a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800749c:	e057      	b.n	800754e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d051      	beq.n	800754e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80074c8:	60d3      	str	r3, [r2, #12]
      break;
 80074ca:	e040      	b.n	800754e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d8:	461a      	mov	r2, r3
 80074da:	f240 639d 	movw	r3, #1693	; 0x69d
 80074de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	da34      	bge.n	8007552 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	78fa      	ldrb	r2, [r7, #3]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007506:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007508:	e023      	b.n	8007552 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	4413      	add	r3, r2
 8007512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007516:	461a      	mov	r2, r3
 8007518:	f240 2325 	movw	r3, #549	; 0x225
 800751c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800751e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007522:	2b00      	cmp	r3, #0
 8007524:	da17      	bge.n	8007556 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	4413      	add	r3, r2
 800752e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	440a      	add	r2, r1
 800753c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007540:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007544:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007546:	e006      	b.n	8007556 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	77fb      	strb	r3, [r7, #31]
      break;
 800754c:	e004      	b.n	8007558 <USB_HC_Init+0x14c>
      break;
 800754e:	bf00      	nop
 8007550:	e002      	b.n	8007558 <USB_HC_Init+0x14c>
      break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <USB_HC_Init+0x14c>
      break;
 8007556:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	4413      	add	r3, r2
 8007560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	0151      	lsls	r1, r2, #5
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	440a      	add	r2, r1
 800756e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007572:	f043 0302 	orr.w	r3, r3, #2
 8007576:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800757e:	699a      	ldr	r2, [r3, #24]
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	2101      	movs	r1, #1
 8007588:	fa01 f303 	lsl.w	r3, r1, r3
 800758c:	6939      	ldr	r1, [r7, #16]
 800758e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007592:	4313      	orrs	r3, r2
 8007594:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80075a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	da03      	bge.n	80075b2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80075aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	e001      	b.n	80075b6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff feff 	bl	80073ba <USB_GetHostSpeed>
 80075bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80075be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d106      	bne.n	80075d4 <USB_HC_Init+0x1c8>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d003      	beq.n	80075d4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80075cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e001      	b.n	80075d8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075d8:	787b      	ldrb	r3, [r7, #1]
 80075da:	059b      	lsls	r3, r3, #22
 80075dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075e0:	78bb      	ldrb	r3, [r7, #2]
 80075e2:	02db      	lsls	r3, r3, #11
 80075e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80075ee:	049b      	lsls	r3, r3, #18
 80075f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80075f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	0159      	lsls	r1, r3, #5
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	440b      	add	r3, r1
 800760a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007614:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007616:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800761a:	2b03      	cmp	r3, #3
 800761c:	d003      	beq.n	8007626 <USB_HC_Init+0x21a>
 800761e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d10f      	bne.n	8007646 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	4413      	add	r3, r2
 800762e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	0151      	lsls	r1, r2, #5
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	440a      	add	r2, r1
 800763c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007644:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007646:	7ffb      	ldrb	r3, [r7, #31]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08c      	sub	sp, #48	; 0x30
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800766c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d02d      	beq.n	80076d6 <USB_HC_StartXfer+0x86>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	791b      	ldrb	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d129      	bne.n	80076d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d117      	bne.n	80076b8 <USB_HC_StartXfer+0x68>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	79db      	ldrb	r3, [r3, #7]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <USB_HC_StartXfer+0x48>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	79db      	ldrb	r3, [r3, #7]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d10f      	bne.n	80076b8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10b      	bne.n	80076d6 <USB_HC_StartXfer+0x86>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	795b      	ldrb	r3, [r3, #5]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d107      	bne.n	80076d6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fa0f 	bl	8007af0 <USB_DoPing>
      return HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e0f8      	b.n	80078c8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d018      	beq.n	8007710 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	8912      	ldrh	r2, [r2, #8]
 80076e6:	4413      	add	r3, r2
 80076e8:	3b01      	subs	r3, #1
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	8912      	ldrh	r2, [r2, #8]
 80076ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80076f2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80076f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076f6:	8b7b      	ldrh	r3, [r7, #26]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d90b      	bls.n	8007714 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80076fc:	8b7b      	ldrh	r3, [r7, #26]
 80076fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007700:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	8912      	ldrh	r2, [r2, #8]
 8007706:	fb03 f202 	mul.w	r2, r3, r2
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	611a      	str	r2, [r3, #16]
 800770e:	e001      	b.n	8007714 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007710:	2301      	movs	r3, #1
 8007712:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	78db      	ldrb	r3, [r3, #3]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800771c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	8912      	ldrh	r2, [r2, #8]
 8007722:	fb03 f202 	mul.w	r2, r3, r2
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	611a      	str	r2, [r3, #16]
 800772a:	e003      	b.n	8007734 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	695a      	ldr	r2, [r3, #20]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800773c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800773e:	04d9      	lsls	r1, r3, #19
 8007740:	4b63      	ldr	r3, [pc, #396]	; (80078d0 <USB_HC_StartXfer+0x280>)
 8007742:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007744:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	7a9b      	ldrb	r3, [r3, #10]
 800774a:	075b      	lsls	r3, r3, #29
 800774c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007750:	69f9      	ldr	r1, [r7, #28]
 8007752:	0148      	lsls	r0, r1, #5
 8007754:	6a39      	ldr	r1, [r7, #32]
 8007756:	4401      	add	r1, r0
 8007758:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800775c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800775e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	68d9      	ldr	r1, [r3, #12]
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	4413      	add	r3, r2
 8007772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007776:	460a      	mov	r2, r1
 8007778:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf0c      	ite	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	2300      	movne	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	4413      	add	r3, r2
 800779a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	0151      	lsls	r1, r2, #5
 80077a4:	6a3a      	ldr	r2, [r7, #32]
 80077a6:	440a      	add	r2, r1
 80077a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	7e7b      	ldrb	r3, [r7, #25]
 80077c2:	075b      	lsls	r3, r3, #29
 80077c4:	69f9      	ldr	r1, [r7, #28]
 80077c6:	0148      	lsls	r0, r1, #5
 80077c8:	6a39      	ldr	r1, [r7, #32]
 80077ca:	4401      	add	r1, r0
 80077cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80077d0:	4313      	orrs	r3, r2
 80077d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077ea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	78db      	ldrb	r3, [r3, #3]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	e003      	b.n	8007806 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007804:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800780c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	4413      	add	r3, r2
 8007816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781a:	461a      	mov	r2, r3
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e04e      	b.n	80078c8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	78db      	ldrb	r3, [r3, #3]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d149      	bne.n	80078c6 <USB_HC_StartXfer+0x276>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d045      	beq.n	80078c6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	79db      	ldrb	r3, [r3, #7]
 800783e:	2b03      	cmp	r3, #3
 8007840:	d830      	bhi.n	80078a4 <USB_HC_StartXfer+0x254>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <USB_HC_StartXfer+0x1f8>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	08007859 	.word	0x08007859
 800784c:	0800787d 	.word	0x0800787d
 8007850:	08007859 	.word	0x08007859
 8007854:	0800787d 	.word	0x0800787d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	3303      	adds	r3, #3
 800785e:	089b      	lsrs	r3, r3, #2
 8007860:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007862:	8afa      	ldrh	r2, [r7, #22]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	b29b      	uxth	r3, r3
 800786a:	429a      	cmp	r2, r3
 800786c:	d91c      	bls.n	80078a8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	619a      	str	r2, [r3, #24]
        }
        break;
 800787a:	e015      	b.n	80078a8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	3303      	adds	r3, #3
 8007882:	089b      	lsrs	r3, r3, #2
 8007884:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007886:	8afa      	ldrh	r2, [r7, #22]
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	b29b      	uxth	r3, r3
 8007892:	429a      	cmp	r2, r3
 8007894:	d90a      	bls.n	80078ac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80078a2:	e003      	b.n	80078ac <USB_HC_StartXfer+0x25c>

      default:
        break;
 80078a4:	bf00      	nop
 80078a6:	e002      	b.n	80078ae <USB_HC_StartXfer+0x25e>
        break;
 80078a8:	bf00      	nop
 80078aa:	e000      	b.n	80078ae <USB_HC_StartXfer+0x25e>
        break;
 80078ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	68d9      	ldr	r1, [r3, #12]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	785a      	ldrb	r2, [r3, #1]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2000      	movs	r0, #0
 80078be:	9000      	str	r0, [sp, #0]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff fb31 	bl	8006f28 <USB_WritePacket>
  }

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3728      	adds	r7, #40	; 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	1ff80000 	.word	0x1ff80000

080078d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	b29b      	uxth	r3, r3
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b089      	sub	sp, #36	; 0x24
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	460b      	mov	r3, r1
 8007900:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	0c9b      	lsrs	r3, r3, #18
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	0fdb      	lsrs	r3, r3, #31
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b20      	cmp	r3, #32
 8007944:	d104      	bne.n	8007950 <USB_HC_Halt+0x5a>
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	e0c8      	b.n	8007ae2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <USB_HC_Halt+0x66>
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b02      	cmp	r3, #2
 800795a:	d163      	bne.n	8007a24 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	4413      	add	r3, r2
 8007964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	440a      	add	r2, r1
 8007972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007976:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800797a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 80ab 	bne.w	8007ae0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d133      	bne.n	80079fe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079d4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079e2:	d81d      	bhi.n	8007a20 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079fa:	d0ec      	beq.n	80079d6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079fc:	e070      	b.n	8007ae0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a1c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a1e:	e05f      	b.n	8007ae0 <USB_HC_Halt+0x1ea>
            break;
 8007a20:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a22:	e05d      	b.n	8007ae0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	0151      	lsls	r1, r2, #5
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	440a      	add	r2, r1
 8007a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a42:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d133      	bne.n	8007abc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a92:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3301      	adds	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aa0:	d81d      	bhi.n	8007ade <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ab8:	d0ec      	beq.n	8007a94 <USB_HC_Halt+0x19e>
 8007aba:	e011      	b.n	8007ae0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	e000      	b.n	8007ae0 <USB_HC_Halt+0x1ea>
          break;
 8007ade:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3724      	adds	r7, #36	; 0x24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
	...

08007af0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b04:	2301      	movs	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	04da      	lsls	r2, r3, #19
 8007b0c:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <USB_DoPing+0x74>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b20:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b38:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b40:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4e:	461a      	mov	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	1ff80000 	.word	0x1ff80000

08007b68 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff f911 	bl	8006da4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b82:	2110      	movs	r1, #16
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff f96b 	bl	8006e60 <USB_FlushTxFifo>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff f997 	bl	8006ec8 <USB_FlushRxFifo>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61bb      	str	r3, [r7, #24]
 8007ba8:	e01f      	b.n	8007bea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bd0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bde:	461a      	mov	r2, r3
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	3301      	adds	r3, #1
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b0f      	cmp	r3, #15
 8007bee:	d9dc      	bls.n	8007baa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	e034      	b.n	8007c60 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3c:	d80c      	bhi.n	8007c58 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c54:	d0ec      	beq.n	8007c30 <USB_StopHost+0xc8>
 8007c56:	e000      	b.n	8007c5a <USB_StopHost+0xf2>
        break;
 8007c58:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2b0f      	cmp	r3, #15
 8007c64:	d9c7      	bls.n	8007bf6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c72:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff f880 	bl	8006d82 <USB_EnableGlobalInt>

  return ret;
 8007c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b08b      	sub	sp, #44	; 0x2c
 8007c90:	af04      	add	r7, sp, #16
 8007c92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c9e:	7919      	ldrb	r1, [r3, #4]
 8007ca0:	23ff      	movs	r3, #255	; 0xff
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 ff75 	bl	8008b94 <USBH_FindInterface>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007cae:	7dbb      	ldrb	r3, [r7, #22]
 8007cb0:	2bff      	cmp	r3, #255	; 0xff
 8007cb2:	d002      	beq.n	8007cba <USBH_HID_InterfaceInit+0x2e>
 8007cb4:	7dbb      	ldrb	r3, [r7, #22]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d901      	bls.n	8007cbe <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e108      	b.n	8007ed0 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8007cbe:	7dbb      	ldrb	r3, [r7, #22]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 ff4a 	bl	8008b5c <USBH_SelectInterface>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8007ccc:	7d7b      	ldrb	r3, [r7, #21]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e0fc      	b.n	8007ed0 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007cdc:	2034      	movs	r0, #52	; 0x34
 8007cde:	f002 fdd7 	bl	800a890 <malloc>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e0ea      	b.n	8007ed0 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8007cfa:	2234      	movs	r2, #52	; 0x34
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	6938      	ldr	r0, [r7, #16]
 8007d00:	f002 fde4 	bl	800a8cc <memset>

  HID_Handle->state = HID_ERROR;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	2207      	movs	r2, #7
 8007d08:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8007d0a:	7dbb      	ldrb	r3, [r7, #22]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	211a      	movs	r1, #26
 8007d10:	fb01 f303 	mul.w	r3, r1, r3
 8007d14:	4413      	add	r3, r2
 8007d16:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d103      	bne.n	8007d28 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	4a6d      	ldr	r2, [pc, #436]	; (8007ed8 <USBH_HID_InterfaceInit+0x24c>)
 8007d24:	631a      	str	r2, [r3, #48]	; 0x30
 8007d26:	e010      	b.n	8007d4a <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8007d28:	7dbb      	ldrb	r3, [r7, #22]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	211a      	movs	r1, #26
 8007d2e:	fb01 f303 	mul.w	r3, r1, r3
 8007d32:	4413      	add	r3, r2
 8007d34:	f203 3349 	addw	r3, r3, #841	; 0x349
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d103      	bne.n	8007d46 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	4a66      	ldr	r2, [pc, #408]	; (8007edc <USBH_HID_InterfaceInit+0x250>)
 8007d42:	631a      	str	r2, [r3, #48]	; 0x30
 8007d44:	e001      	b.n	8007d4a <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8007d46:	2302      	movs	r3, #2
 8007d48:	e0c2      	b.n	8007ed0 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2200      	movs	r2, #0
 8007d54:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d56:	7dbb      	ldrb	r3, [r7, #22]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	211a      	movs	r1, #26
 8007d5c:	fb01 f303 	mul.w	r3, r1, r3
 8007d60:	4413      	add	r3, r2
 8007d62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d6c:	7dbb      	ldrb	r3, [r7, #22]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	211a      	movs	r1, #26
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d7c:	881a      	ldrh	r2, [r3, #0]
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007d82:	7dbb      	ldrb	r3, [r7, #22]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	211a      	movs	r1, #26
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	8b9b      	ldrh	r3, [r3, #28]
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d802      	bhi.n	8007da8 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	220a      	movs	r2, #10
 8007da6:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8007da8:	7dbb      	ldrb	r3, [r7, #22]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	211a      	movs	r1, #26
 8007dae:	fb01 f303 	mul.w	r3, r1, r3
 8007db2:	4413      	add	r3, r2
 8007db4:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	bf28      	it	cs
 8007dbe:	2302      	movcs	r3, #2
 8007dc0:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]
 8007dc6:	e07d      	b.n	8007ec4 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8007dc8:	7dbb      	ldrb	r3, [r7, #22]
 8007dca:	7df9      	ldrb	r1, [r7, #23]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	3101      	adds	r1, #1
 8007dd0:	00c9      	lsls	r1, r1, #3
 8007dd2:	201a      	movs	r0, #26
 8007dd4:	fb00 f303 	mul.w	r3, r0, r3
 8007dd8:	440b      	add	r3, r1
 8007dda:	4413      	add	r3, r2
 8007ddc:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b25b      	sxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	da35      	bge.n	8007e54 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007de8:	7dbb      	ldrb	r3, [r7, #22]
 8007dea:	7df9      	ldrb	r1, [r7, #23]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	3101      	adds	r1, #1
 8007df0:	00c9      	lsls	r1, r1, #3
 8007df2:	201a      	movs	r0, #26
 8007df4:	fb00 f303 	mul.w	r3, r0, r3
 8007df8:	440b      	add	r3, r1
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	791b      	ldrb	r3, [r3, #4]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f002 f9b8 	bl	800a182 <USBH_AllocPipe>
 8007e12:	4603      	mov	r3, r0
 8007e14:	461a      	mov	r2, r3
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	7859      	ldrb	r1, [r3, #1]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	7918      	ldrb	r0, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	8b12      	ldrh	r2, [r2, #24]
 8007e32:	9202      	str	r2, [sp, #8]
 8007e34:	2203      	movs	r2, #3
 8007e36:	9201      	str	r2, [sp, #4]
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	4623      	mov	r3, r4
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f002 f970 	bl	800a124 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f002 fc71 	bl	800a734 <USBH_LL_SetToggle>
 8007e52:	e034      	b.n	8007ebe <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007e54:	7dbb      	ldrb	r3, [r7, #22]
 8007e56:	7df9      	ldrb	r1, [r7, #23]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	3101      	adds	r1, #1
 8007e5c:	00c9      	lsls	r1, r1, #3
 8007e5e:	201a      	movs	r0, #26
 8007e60:	fb00 f303 	mul.w	r3, r0, r3
 8007e64:	440b      	add	r3, r1
 8007e66:	4413      	add	r3, r2
 8007e68:	f203 3346 	addw	r3, r3, #838	; 0x346
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	78db      	ldrb	r3, [r3, #3]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f002 f982 	bl	800a182 <USBH_AllocPipe>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	461a      	mov	r2, r3
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	7819      	ldrb	r1, [r3, #0]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	78d8      	ldrb	r0, [r3, #3]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	8b12      	ldrh	r2, [r2, #24]
 8007e9e:	9202      	str	r2, [sp, #8]
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	9201      	str	r2, [sp, #4]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f002 f93a 	bl	800a124 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f002 fc3b 	bl	800a734 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]
 8007ec4:	7dfa      	ldrb	r2, [r7, #23]
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	f4ff af7d 	bcc.w	8007dc8 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd90      	pop	{r4, r7, pc}
 8007ed8:	080085dd 	.word	0x080085dd
 8007edc:	08008825 	.word	0x08008825

08007ee0 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00e      	beq.n	8007f18 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	785b      	ldrb	r3, [r3, #1]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f002 f92e 	bl	800a162 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	785b      	ldrb	r3, [r3, #1]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f002 f959 	bl	800a1c4 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00e      	beq.n	8007f3e <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f002 f91b 	bl	800a162 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f002 f946 	bl	800a1c4 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f002 fca4 	bl	800a8a0 <free>
    phost->pActiveClass->pData = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f5e:	2200      	movs	r2, #0
 8007f60:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8007f74:	2301      	movs	r3, #1
 8007f76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	795b      	ldrb	r3, [r3, #5]
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	d860      	bhi.n	8008050 <USBH_HID_ClassRequest+0xe4>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <USBH_HID_ClassRequest+0x28>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fad 	.word	0x08007fad
 8007f98:	08008051 	.word	0x08008051
 8007f9c:	08007fc7 	.word	0x08007fc7
 8007fa0:	08007fad 	.word	0x08007fad
 8007fa4:	08007ff1 	.word	0x08007ff1
 8007fa8:	0800801b 	.word	0x0800801b
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	331c      	adds	r3, #28
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f000 f9cd 	bl	8008358 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	715a      	strb	r2, [r3, #5]

      break;
 8007fc4:	e04b      	b.n	800805e <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f930 	bl	8008232 <USBH_HID_GetHIDReportDescriptor>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2204      	movs	r2, #4
 8007fe0:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8007fe2:	e037      	b.n	8008054 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d134      	bne.n	8008054 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8007fea:	2302      	movs	r3, #2
 8007fec:	73fb      	strb	r3, [r7, #15]
      break;
 8007fee:	e031      	b.n	8008054 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f935 	bl	8008264 <USBH_HID_SetIdle>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2205      	movs	r2, #5
 8008008:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800800a:	e025      	b.n	8008058 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b03      	cmp	r3, #3
 8008010:	d122      	bne.n	8008058 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2205      	movs	r2, #5
 8008016:	715a      	strb	r2, [r3, #5]
      break;
 8008018:	e01e      	b.n	8008058 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800801a:	2100      	movs	r1, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f975 	bl	800830c <USBH_HID_SetProtocol>
 8008022:	4603      	mov	r3, r0
 8008024:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10b      	bne.n	8008044 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2201      	movs	r2, #1
 8008030:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008038:	2102      	movs	r1, #2
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
        status = USBH_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8008042:	e00b      	b.n	800805c <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b03      	cmp	r3, #3
 8008048:	d108      	bne.n	800805c <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 800804a:	2302      	movs	r3, #2
 800804c:	73fb      	strb	r3, [r7, #15]
      break;
 800804e:	e005      	b.n	800805c <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8008050:	bf00      	nop
 8008052:	e004      	b.n	800805e <USBH_HID_ClassRequest+0xf2>
      break;
 8008054:	bf00      	nop
 8008056:	e002      	b.n	800805e <USBH_HID_ClassRequest+0xf2>
      break;
 8008058:	bf00      	nop
 800805a:	e000      	b.n	800805e <USBH_HID_ClassRequest+0xf2>
      break;
 800805c:	bf00      	nop
  }

  return status;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af02      	add	r7, sp, #8
 800806e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	789b      	ldrb	r3, [r3, #2]
 8008082:	2b06      	cmp	r3, #6
 8008084:	f200 80a9 	bhi.w	80081da <USBH_HID_Process+0x172>
 8008088:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <USBH_HID_Process+0x28>)
 800808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808e:	bf00      	nop
 8008090:	080080ad 	.word	0x080080ad
 8008094:	080080bd 	.word	0x080080bd
 8008098:	080081db 	.word	0x080081db
 800809c:	080081db 	.word	0x080081db
 80080a0:	0800812d 	.word	0x0800812d
 80080a4:	08008117 	.word	0x08008117
 80080a8:	0800815b 	.word	0x0800815b
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2201      	movs	r2, #1
 80080b8:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080ba:	e093      	b.n	80081e4 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	695a      	ldr	r2, [r3, #20]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	8b1b      	ldrh	r3, [r3, #24]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	4613      	mov	r3, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	2101      	movs	r1, #1
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8f0 	bl	80082b4 <USBH_HID_GetReport>
 80080d4:	4603      	mov	r3, r0
 80080d6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d103      	bne.n	80080e6 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2205      	movs	r2, #5
 80080e2:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080e4:	e07e      	b.n	80081e4 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d105      	bne.n	80080f8 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2201      	movs	r2, #1
 80080f0:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75fb      	strb	r3, [r7, #23]
      break;
 80080f6:	e075      	b.n	80081e4 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d105      	bne.n	800810a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2205      	movs	r2, #5
 8008102:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	75fb      	strb	r3, [r7, #23]
      break;
 8008108:	e06c      	b.n	80081e4 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2207      	movs	r2, #7
 800810e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008110:	2302      	movs	r3, #2
 8008112:	75fb      	strb	r3, [r7, #23]
      break;
 8008114:	e066      	b.n	80081e4 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d05c      	beq.n	80081de <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	2204      	movs	r2, #4
 8008128:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800812a:	e058      	b.n	80081de <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8008134:	b2da      	uxtb	r2, r3
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 ffd3 	bl	800a0e6 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2206      	movs	r2, #6
 8008144:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8008158:	e044      	b.n	80081e4 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f002 fabd 	bl	800a6e0 <USBH_LL_GetURBState>
 8008166:	4603      	mov	r3, r0
 8008168:	2b01      	cmp	r3, #1
 800816a:	d120      	bne.n	80081ae <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f002 fa22 	bl	800a5bc <USBH_LL_GetLastXferSize>
 8008178:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	d12e      	bne.n	80081e2 <USBH_HID_Process+0x17a>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d02b      	beq.n	80081e2 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f103 0008 	add.w	r0, r3, #8
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	6959      	ldr	r1, [r3, #20]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	8b1b      	ldrh	r3, [r3, #24]
 8008198:	461a      	mov	r2, r3
 800819a:	f000 f9ca 	bl	8008532 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7f8 fb54 	bl	8000854 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 80081ac:	e019      	b.n	80081e2 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f002 fa93 	bl	800a6e0 <USBH_LL_GetURBState>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b05      	cmp	r3, #5
 80081be:	d110      	bne.n	80081e2 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	7e9b      	ldrb	r3, [r3, #26]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 fab1 	bl	800972e <USBH_ClrFeature>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d107      	bne.n	80081e2 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2204      	movs	r2, #4
 80081d6:	709a      	strb	r2, [r3, #2]
      break;
 80081d8:	e003      	b.n	80081e2 <USBH_HID_Process+0x17a>

    default:
      break;
 80081da:	bf00      	nop
 80081dc:	e002      	b.n	80081e4 <USBH_HID_Process+0x17c>
      break;
 80081de:	bf00      	nop
 80081e0:	e000      	b.n	80081e4 <USBH_HID_Process+0x17c>
      break;
 80081e2:	bf00      	nop
  }

  return status;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop

080081f0 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	789b      	ldrb	r3, [r3, #2]
 8008206:	2b06      	cmp	r3, #6
 8008208:	d10c      	bne.n	8008224 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	8b92      	ldrh	r2, [r2, #28]
 800821a:	4293      	cmp	r3, r2
 800821c:	d302      	bcc.n	8008224 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2204      	movs	r2, #4
 8008222:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af02      	add	r7, sp, #8
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008244:	887b      	ldrh	r3, [r7, #2]
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800824e:	2101      	movs	r1, #1
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 f9cc 	bl	80095ee <USBH_GetDescriptor>
 8008256:	4603      	mov	r3, r0
 8008258:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
 8008270:	4613      	mov	r3, r2
 8008272:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2221      	movs	r2, #33	; 0x21
 8008278:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	220a      	movs	r2, #10
 800827e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	b29b      	uxth	r3, r3
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	b29a      	uxth	r2, r3
 8008288:	78bb      	ldrb	r3, [r7, #2]
 800828a:	b29b      	uxth	r3, r3
 800828c:	4313      	orrs	r3, r2
 800828e:	b29a      	uxth	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80082a0:	2200      	movs	r2, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 fd0f 	bl	8009cc8 <USBH_CtlReq>
 80082aa:	4603      	mov	r3, r0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	607b      	str	r3, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	72fb      	strb	r3, [r7, #11]
 80082c2:	4613      	mov	r3, r2
 80082c4:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	22a1      	movs	r2, #161	; 0xa1
 80082ca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80082d2:	7afb      	ldrb	r3, [r7, #11]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	b29a      	uxth	r2, r3
 80082da:	7abb      	ldrb	r3, [r7, #10]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80082ec:	7e3b      	ldrb	r3, [r7, #24]
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80082f4:	7e3b      	ldrb	r3, [r7, #24]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f001 fce3 	bl	8009cc8 <USBH_CtlReq>
 8008302:	4603      	mov	r3, r0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2221      	movs	r2, #33	; 0x21
 800831c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	220b      	movs	r2, #11
 8008322:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	825a      	strh	r2, [r3, #18]
 8008330:	e002      	b.n	8008338 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008344:	2200      	movs	r2, #0
 8008346:	2100      	movs	r1, #0
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 fcbd 	bl	8009cc8 <USBH_CtlReq>
 800834e:	4603      	mov	r3, r0

}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	3302      	adds	r3, #2
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	b29a      	uxth	r2, r3
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	3303      	adds	r3, #3
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	b29b      	uxth	r3, r3
 800837a:	4313      	orrs	r3, r2
 800837c:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800837e:	897b      	ldrh	r3, [r7, #10]
 8008380:	2b09      	cmp	r3, #9
 8008382:	d943      	bls.n	800840c <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008384:	2309      	movs	r3, #9
 8008386:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8008388:	e03c      	b.n	8008404 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800838a:	f107 0308 	add.w	r3, r7, #8
 800838e:	4619      	mov	r1, r3
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f001 fc7e 	bl	8009c92 <USBH_GetNextDesc>
 8008396:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b21      	cmp	r3, #33	; 0x21
 800839e:	d131      	bne.n	8008404 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	781a      	ldrb	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	785a      	ldrb	r2, [r3, #1]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3302      	adds	r3, #2
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3303      	adds	r3, #3
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	4313      	orrs	r3, r2
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	791a      	ldrb	r2, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	795a      	ldrb	r2, [r3, #5]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	799a      	ldrb	r2, [r3, #6]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3307      	adds	r3, #7
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3308      	adds	r3, #8
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	021b      	lsls	r3, r3, #8
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	4313      	orrs	r3, r2
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	811a      	strh	r2, [r3, #8]
        break;
 8008400:	bf00      	nop
      }
    }
  }
}
 8008402:	e003      	b.n	800840c <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8008404:	893b      	ldrh	r3, [r7, #8]
 8008406:	897a      	ldrh	r2, [r7, #10]
 8008408:	429a      	cmp	r2, r3
 800840a:	d8be      	bhi.n	800838a <USBH_HID_ParseHIDDesc+0x32>
}
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800841c:	23ff      	movs	r3, #255	; 0xff
 800841e:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b0b      	cmp	r3, #11
 8008428:	d117      	bne.n	800845a <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008430:	4619      	mov	r1, r3
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	231a      	movs	r3, #26
 8008436:	fb01 f303 	mul.w	r3, r1, r3
 800843a:	4413      	add	r3, r2
 800843c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d102      	bne.n	8008450 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800844a:	2302      	movs	r3, #2
 800844c:	73fb      	strb	r3, [r7, #15]
 800844e:	e004      	b.n	800845a <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d101      	bne.n	800845a <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 8008456:	2301      	movs	r3, #1
 8008458:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	4613      	mov	r3, r2
 8008474:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	7a9b      	ldrb	r3, [r3, #10]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d131      	bne.n	800851e <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80084c0:	2300      	movs	r3, #0
 80084c2:	82fb      	strh	r3, [r7, #22]
 80084c4:	e027      	b.n	8008516 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	88da      	ldrh	r2, [r3, #6]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	889b      	ldrh	r3, [r3, #4]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d019      	beq.n	8008506 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	88d2      	ldrh	r2, [r2, #6]
 80084da:	441a      	add	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	1c59      	adds	r1, r3, #1
 80084e0:	6139      	str	r1, [r7, #16]
 80084e2:	7812      	ldrb	r2, [r2, #0]
 80084e4:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	88db      	ldrh	r3, [r3, #6]
 80084ea:	3301      	adds	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	88da      	ldrh	r2, [r3, #6]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	891b      	ldrh	r3, [r3, #8]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d108      	bne.n	8008510 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	80da      	strh	r2, [r3, #6]
 8008504:	e004      	b.n	8008510 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	729a      	strb	r2, [r3, #10]
        return i;
 800850c:	8afb      	ldrh	r3, [r7, #22]
 800850e:	e00a      	b.n	8008526 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8008510:	8afb      	ldrh	r3, [r7, #22]
 8008512:	3301      	adds	r3, #1
 8008514:	82fb      	strh	r3, [r7, #22]
 8008516:	8afa      	ldrh	r2, [r7, #22]
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	429a      	cmp	r2, r3
 800851c:	d3d3      	bcc.n	80084c6 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8008524:	88fb      	ldrh	r3, [r7, #6]
}
 8008526:	4618      	mov	r0, r3
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8008532:	b480      	push	{r7}
 8008534:	b087      	sub	sp, #28
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	4613      	mov	r3, r2
 800853e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	7a9b      	ldrb	r3, [r3, #10]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d13c      	bne.n	80085c6 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8008552:	2300      	movs	r3, #0
 8008554:	82fb      	strh	r3, [r7, #22]
 8008556:	e032      	b.n	80085be <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	889b      	ldrh	r3, [r3, #4]
 800855c:	3301      	adds	r3, #1
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	88d2      	ldrh	r2, [r2, #6]
 8008562:	4293      	cmp	r3, r2
 8008564:	d00a      	beq.n	800857c <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	889b      	ldrh	r3, [r3, #4]
 800856a:	3301      	adds	r3, #1
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8008570:	4293      	cmp	r3, r2
 8008572:	d108      	bne.n	8008586 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	88db      	ldrh	r3, [r3, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	729a      	strb	r2, [r3, #10]
        return i;
 8008582:	8afb      	ldrh	r3, [r7, #22]
 8008584:	e023      	b.n	80085ce <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	613a      	str	r2, [r7, #16]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	68f9      	ldr	r1, [r7, #12]
 8008592:	8889      	ldrh	r1, [r1, #4]
 8008594:	440a      	add	r2, r1
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	7013      	strb	r3, [r2, #0]
        f->head++;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	889b      	ldrh	r3, [r3, #4]
 800859e:	3301      	adds	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	889a      	ldrh	r2, [r3, #4]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	891b      	ldrh	r3, [r3, #8]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d102      	bne.n	80085b8 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80085b8:	8afb      	ldrh	r3, [r7, #22]
 80085ba:	3301      	adds	r3, #1
 80085bc:	82fb      	strh	r3, [r7, #22]
 80085be:	8afa      	ldrh	r2, [r7, #22]
 80085c0:	88fb      	ldrh	r3, [r7, #6]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d3c8      	bcc.n	8008558 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80085cc:	88fb      	ldrh	r3, [r7, #6]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 80085ee:	4b22      	ldr	r3, [pc, #136]	; (8008678 <USBH_HID_KeybdInit+0x9c>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80085f4:	4b20      	ldr	r3, [pc, #128]	; (8008678 <USBH_HID_KeybdInit+0x9c>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80085fa:	4b1f      	ldr	r3, [pc, #124]	; (8008678 <USBH_HID_KeybdInit+0x9c>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8008600:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <USBH_HID_KeybdInit+0x9c>)
 8008602:	2200      	movs	r2, #0
 8008604:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8008606:	4b1c      	ldr	r3, [pc, #112]	; (8008678 <USBH_HID_KeybdInit+0x9c>)
 8008608:	2200      	movs	r2, #0
 800860a:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800860c:	4b1a      	ldr	r3, [pc, #104]	; (8008678 <USBH_HID_KeybdInit+0x9c>)
 800860e:	2200      	movs	r2, #0
 8008610:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8008612:	4b19      	ldr	r3, [pc, #100]	; (8008678 <USBH_HID_KeybdInit+0x9c>)
 8008614:	2200      	movs	r2, #0
 8008616:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8008618:	4b17      	ldr	r3, [pc, #92]	; (8008678 <USBH_HID_KeybdInit+0x9c>)
 800861a:	2200      	movs	r2, #0
 800861c:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e00c      	b.n	800863e <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8008624:	4a15      	ldr	r2, [pc, #84]	; (800867c <USBH_HID_KeybdInit+0xa0>)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2100      	movs	r1, #0
 800862a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800862e:	4a14      	ldr	r2, [pc, #80]	; (8008680 <USBH_HID_KeybdInit+0xa4>)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2100      	movs	r1, #0
 8008634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3301      	adds	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d9ef      	bls.n	8008624 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	8b1b      	ldrh	r3, [r3, #24]
 8008648:	2b08      	cmp	r3, #8
 800864a:	d902      	bls.n	8008652 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2208      	movs	r2, #8
 8008650:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <USBH_HID_KeybdInit+0xa4>)
 8008656:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f103 0008 	add.w	r0, r3, #8
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008664:	2250      	movs	r2, #80	; 0x50
 8008666:	4619      	mov	r1, r3
 8008668:	f7ff fefe 	bl	8008468 <USBH_HID_FifoInit>

  return USBH_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200059ec 	.word	0x200059ec
 800867c:	20005a04 	.word	0x20005a04
 8008680:	200059fc 	.word	0x200059fc

08008684 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f80d 	bl	80086ac <USBH_HID_KeybdDecode>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8008698:	4b03      	ldr	r3, [pc, #12]	; (80086a8 <USBH_HID_GetKeybdInfo+0x24>)
 800869a:	e000      	b.n	800869e <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800869c:	2300      	movs	r3, #0
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	200059ec 	.word	0x200059ec

080086ac <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	8b1b      	ldrh	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 80086c6:	2302      	movs	r3, #2
 80086c8:	e066      	b.n	8008798 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f103 0008 	add.w	r0, r3, #8
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	8b1b      	ldrh	r3, [r3, #24]
 80086d4:	461a      	mov	r2, r3
 80086d6:	4932      	ldr	r1, [pc, #200]	; (80087a0 <USBH_HID_KeybdDecode+0xf4>)
 80086d8:	f7ff fee2 	bl	80084a0 <USBH_HID_FifoRead>
 80086dc:	4603      	mov	r3, r0
 80086de:	461a      	mov	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	8b1b      	ldrh	r3, [r3, #24]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d156      	bne.n	8008796 <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 80086e8:	2100      	movs	r1, #0
 80086ea:	482e      	ldr	r0, [pc, #184]	; (80087a4 <USBH_HID_KeybdDecode+0xf8>)
 80086ec:	f000 f8e4 	bl	80088b8 <HID_ReadItem>
 80086f0:	4603      	mov	r3, r0
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	4b2c      	ldr	r3, [pc, #176]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 80086f6:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 80086f8:	2100      	movs	r1, #0
 80086fa:	482c      	ldr	r0, [pc, #176]	; (80087ac <USBH_HID_KeybdDecode+0x100>)
 80086fc:	f000 f8dc 	bl	80088b8 <HID_ReadItem>
 8008700:	4603      	mov	r3, r0
 8008702:	b2da      	uxtb	r2, r3
 8008704:	4b28      	ldr	r3, [pc, #160]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 8008706:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8008708:	2100      	movs	r1, #0
 800870a:	4829      	ldr	r0, [pc, #164]	; (80087b0 <USBH_HID_KeybdDecode+0x104>)
 800870c:	f000 f8d4 	bl	80088b8 <HID_ReadItem>
 8008710:	4603      	mov	r3, r0
 8008712:	b2da      	uxtb	r2, r3
 8008714:	4b24      	ldr	r3, [pc, #144]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 8008716:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8008718:	2100      	movs	r1, #0
 800871a:	4826      	ldr	r0, [pc, #152]	; (80087b4 <USBH_HID_KeybdDecode+0x108>)
 800871c:	f000 f8cc 	bl	80088b8 <HID_ReadItem>
 8008720:	4603      	mov	r3, r0
 8008722:	b2da      	uxtb	r2, r3
 8008724:	4b20      	ldr	r3, [pc, #128]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 8008726:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8008728:	2100      	movs	r1, #0
 800872a:	4823      	ldr	r0, [pc, #140]	; (80087b8 <USBH_HID_KeybdDecode+0x10c>)
 800872c:	f000 f8c4 	bl	80088b8 <HID_ReadItem>
 8008730:	4603      	mov	r3, r0
 8008732:	b2da      	uxtb	r2, r3
 8008734:	4b1c      	ldr	r3, [pc, #112]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 8008736:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8008738:	2100      	movs	r1, #0
 800873a:	4820      	ldr	r0, [pc, #128]	; (80087bc <USBH_HID_KeybdDecode+0x110>)
 800873c:	f000 f8bc 	bl	80088b8 <HID_ReadItem>
 8008740:	4603      	mov	r3, r0
 8008742:	b2da      	uxtb	r2, r3
 8008744:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 8008746:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8008748:	2100      	movs	r1, #0
 800874a:	481d      	ldr	r0, [pc, #116]	; (80087c0 <USBH_HID_KeybdDecode+0x114>)
 800874c:	f000 f8b4 	bl	80088b8 <HID_ReadItem>
 8008750:	4603      	mov	r3, r0
 8008752:	b2da      	uxtb	r2, r3
 8008754:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 8008756:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8008758:	2100      	movs	r1, #0
 800875a:	481a      	ldr	r0, [pc, #104]	; (80087c4 <USBH_HID_KeybdDecode+0x118>)
 800875c:	f000 f8ac 	bl	80088b8 <HID_ReadItem>
 8008760:	4603      	mov	r3, r0
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 8008766:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]
 800876c:	e00e      	b.n	800878c <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	4619      	mov	r1, r3
 8008772:	4815      	ldr	r0, [pc, #84]	; (80087c8 <USBH_HID_KeybdDecode+0x11c>)
 8008774:	f000 f8a0 	bl	80088b8 <HID_ReadItem>
 8008778:	4602      	mov	r2, r0
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	b2d1      	uxtb	r1, r2
 800877e:	4a0a      	ldr	r2, [pc, #40]	; (80087a8 <USBH_HID_KeybdDecode+0xfc>)
 8008780:	4413      	add	r3, r2
 8008782:	460a      	mov	r2, r1
 8008784:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	3301      	adds	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b05      	cmp	r3, #5
 8008790:	d9ed      	bls.n	800876e <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	e000      	b.n	8008798 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 8008796:	2302      	movs	r3, #2
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20005a04 	.word	0x20005a04
 80087a4:	08019b28 	.word	0x08019b28
 80087a8:	200059ec 	.word	0x200059ec
 80087ac:	08019b48 	.word	0x08019b48
 80087b0:	08019b68 	.word	0x08019b68
 80087b4:	08019b88 	.word	0x08019b88
 80087b8:	08019ba8 	.word	0x08019ba8
 80087bc:	08019bc8 	.word	0x08019bc8
 80087c0:	08019be8 	.word	0x08019be8
 80087c4:	08019c08 	.word	0x08019c08
 80087c8:	08019c28 	.word	0x08019c28

080087cc <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	789b      	ldrb	r3, [r3, #2]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d103      	bne.n	80087e4 <USBH_HID_GetASCIICode+0x18>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	799b      	ldrb	r3, [r3, #6]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d009      	beq.n	80087f8 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	7a5b      	ldrb	r3, [r3, #9]
 80087e8:	461a      	mov	r2, r3
 80087ea:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <USBH_HID_GetASCIICode+0x4c>)
 80087ec:	5c9b      	ldrb	r3, [r3, r2]
 80087ee:	461a      	mov	r2, r3
 80087f0:	4b0a      	ldr	r3, [pc, #40]	; (800881c <USBH_HID_GetASCIICode+0x50>)
 80087f2:	5c9b      	ldrb	r3, [r3, r2]
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	e008      	b.n	800880a <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	7a5b      	ldrb	r3, [r3, #9]
 80087fc:	461a      	mov	r2, r3
 80087fe:	4b06      	ldr	r3, [pc, #24]	; (8008818 <USBH_HID_GetASCIICode+0x4c>)
 8008800:	5c9b      	ldrb	r3, [r3, r2]
 8008802:	461a      	mov	r2, r3
 8008804:	4b06      	ldr	r3, [pc, #24]	; (8008820 <USBH_HID_GetASCIICode+0x54>)
 8008806:	5c9b      	ldrb	r3, [r3, r2]
 8008808:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	08019d50 	.word	0x08019d50
 800881c:	08019ccc 	.word	0x08019ccc
 8008820:	08019c48 	.word	0x08019c48

08008824 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8008836:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <USBH_HID_MouseInit+0x88>)
 8008838:	2200      	movs	r2, #0
 800883a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800883c:	4b1b      	ldr	r3, [pc, #108]	; (80088ac <USBH_HID_MouseInit+0x88>)
 800883e:	2200      	movs	r2, #0
 8008840:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8008842:	4b1a      	ldr	r3, [pc, #104]	; (80088ac <USBH_HID_MouseInit+0x88>)
 8008844:	2200      	movs	r2, #0
 8008846:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8008848:	4b18      	ldr	r3, [pc, #96]	; (80088ac <USBH_HID_MouseInit+0x88>)
 800884a:	2200      	movs	r2, #0
 800884c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800884e:	4b17      	ldr	r3, [pc, #92]	; (80088ac <USBH_HID_MouseInit+0x88>)
 8008850:	2200      	movs	r2, #0
 8008852:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	e00c      	b.n	8008874 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800885a:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <USBH_HID_MouseInit+0x8c>)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2100      	movs	r1, #0
 8008860:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8008864:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <USBH_HID_MouseInit+0x90>)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2100      	movs	r1, #0
 800886a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d9ef      	bls.n	800885a <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	8b1b      	ldrh	r3, [r3, #24]
 800887e:	2b08      	cmp	r3, #8
 8008880:	d902      	bls.n	8008888 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2208      	movs	r2, #8
 8008886:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4a0a      	ldr	r2, [pc, #40]	; (80088b4 <USBH_HID_MouseInit+0x90>)
 800888c:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f103 0008 	add.w	r0, r3, #8
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800889a:	2250      	movs	r2, #80	; 0x50
 800889c:	4619      	mov	r1, r3
 800889e:	f7ff fde3 	bl	8008468 <USBH_HID_FifoInit>

  return USBH_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20005a0c 	.word	0x20005a0c
 80088b0:	20005a14 	.word	0x20005a14
 80088b4:	20005a1c 	.word	0x20005a1c

080088b8 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b089      	sub	sp, #36	; 0x24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	7a1b      	ldrb	r3, [r3, #8]
 80088d6:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7a5b      	ldrb	r3, [r3, #9]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01a      	beq.n	8008916 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7a5b      	ldrb	r3, [r3, #9]
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d301      	bcc.n	80088ee <HID_ReadItem+0x36>
    {
      return (0U);
 80088ea:	2300      	movs	r3, #0
 80088ec:	e078      	b.n	80089e0 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6852      	ldr	r2, [r2, #4]
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 80088fa:	7cfb      	ldrb	r3, [r7, #19]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	08db      	lsrs	r3, r3, #3
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4413      	add	r3, r2
 800890a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8008916:	2300      	movs	r3, #0
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	e00a      	b.n	8008932 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	3301      	adds	r3, #1
 8008930:	61bb      	str	r3, [r7, #24]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	2b00      	cmp	r3, #0
 800893c:	d004      	beq.n	8008948 <HID_ReadItem+0x90>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	08db      	lsrs	r3, r3, #3
 8008944:	3301      	adds	r3, #1
 8008946:	e002      	b.n	800894e <HID_ReadItem+0x96>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	4293      	cmp	r3, r2
 8008952:	d8e3      	bhi.n	800891c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8008954:	7cfb      	ldrb	r3, [r7, #19]
 8008956:	69fa      	ldr	r2, [r7, #28]
 8008958:	40da      	lsrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f04f 31ff 	mov.w	r1, #4294967295
 8008962:	fa01 f303 	lsl.w	r3, r1, r3
 8008966:	43db      	mvns	r3, r3
 8008968:	4013      	ands	r3, r2
 800896a:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	429a      	cmp	r2, r3
 8008974:	d304      	bcc.n	8008980 <HID_ReadItem+0xc8>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	429a      	cmp	r2, r3
 800897e:	d901      	bls.n	8008984 <HID_ReadItem+0xcc>
  {
    return (0U);
 8008980:	2300      	movs	r3, #0
 8008982:	e02d      	b.n	80089e0 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	7a9b      	ldrb	r3, [r3, #10]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01e      	beq.n	80089ca <HID_ReadItem+0x112>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	3b01      	subs	r3, #1
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	fa22 f303 	lsr.w	r3, r2, r3
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d014      	beq.n	80089ca <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	fa02 f303 	lsl.w	r3, r2, r3
 80089aa:	425b      	negs	r3, r3
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d101      	bne.n	80089be <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	e010      	b.n	80089e0 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	fb02 f303 	mul.w	r3, r2, r3
 80089c8:	e00a      	b.n	80089e0 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d101      	bne.n	80089d6 <HID_ReadItem+0x11e>
    {
      return (val);
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	e004      	b.n	80089e0 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3724      	adds	r7, #36	; 0x24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008a00:	2302      	movs	r3, #2
 8008a02:	e029      	b.n	8008a58 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	79fa      	ldrb	r2, [r7, #7]
 8008a08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f81f 	bl	8008a60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f001 fcff 	bl	800a454 <USBH_LL_Init>

  return USBH_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	e009      	b.n	8008a86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	33e0      	adds	r3, #224	; 0xe0
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3301      	adds	r3, #1
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b0f      	cmp	r3, #15
 8008a8a:	d9f2      	bls.n	8008a72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e009      	b.n	8008aa6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aac:	d3f1      	bcc.n	8008a92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2240      	movs	r2, #64	; 0x40
 8008ad2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d016      	beq.n	8008b4a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10e      	bne.n	8008b44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b2c:	1c59      	adds	r1, r3, #1
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	33de      	adds	r3, #222	; 0xde
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
 8008b42:	e004      	b.n	8008b4e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b44:	2302      	movs	r3, #2
 8008b46:	73fb      	strb	r3, [r7, #15]
 8008b48:	e001      	b.n	8008b4e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d204      	bcs.n	8008b82 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008b80:	e001      	b.n	8008b86 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008b82:	2302      	movs	r3, #2
 8008b84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	70fb      	strb	r3, [r7, #3]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70bb      	strb	r3, [r7, #2]
 8008baa:	4613      	mov	r3, r2
 8008bac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008bbc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008bbe:	e025      	b.n	8008c0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	221a      	movs	r2, #26
 8008bc4:	fb02 f303 	mul.w	r3, r2, r3
 8008bc8:	3308      	adds	r3, #8
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	3302      	adds	r3, #2
 8008bd0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	795b      	ldrb	r3, [r3, #5]
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d002      	beq.n	8008be2 <USBH_FindInterface+0x4e>
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	2bff      	cmp	r3, #255	; 0xff
 8008be0:	d111      	bne.n	8008c06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008be6:	78ba      	ldrb	r2, [r7, #2]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d002      	beq.n	8008bf2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bec:	78bb      	ldrb	r3, [r7, #2]
 8008bee:	2bff      	cmp	r3, #255	; 0xff
 8008bf0:	d109      	bne.n	8008c06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bf6:	787a      	ldrb	r2, [r7, #1]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d002      	beq.n	8008c02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008bfc:	787b      	ldrb	r3, [r7, #1]
 8008bfe:	2bff      	cmp	r3, #255	; 0xff
 8008c00:	d101      	bne.n	8008c06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	e006      	b.n	8008c14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d9d6      	bls.n	8008bc0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c12:	23ff      	movs	r3, #255	; 0xff
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	371c      	adds	r7, #28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 fc4f 	bl	800a4cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008c2e:	2101      	movs	r1, #1
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 fd68 	bl	800a706 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af04      	add	r7, sp, #16
 8008c46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d102      	bne.n	8008c62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2203      	movs	r2, #3
 8008c60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b0b      	cmp	r3, #11
 8008c6a:	f200 81be 	bhi.w	8008fea <USBH_Process+0x3aa>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <USBH_Process+0x34>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008ca5 	.word	0x08008ca5
 8008c78:	08008cd7 	.word	0x08008cd7
 8008c7c:	08008d3f 	.word	0x08008d3f
 8008c80:	08008f85 	.word	0x08008f85
 8008c84:	08008feb 	.word	0x08008feb
 8008c88:	08008de3 	.word	0x08008de3
 8008c8c:	08008f2b 	.word	0x08008f2b
 8008c90:	08008e19 	.word	0x08008e19
 8008c94:	08008e39 	.word	0x08008e39
 8008c98:	08008e59 	.word	0x08008e59
 8008c9c:	08008e9d 	.word	0x08008e9d
 8008ca0:	08008f6d 	.word	0x08008f6d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 819e 	beq.w	8008fee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008cb8:	20c8      	movs	r0, #200	; 0xc8
 8008cba:	f001 fd6b 	bl	800a794 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f001 fc61 	bl	800a586 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008cd4:	e18b      	b.n	8008fee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d107      	bne.n	8008cf0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cee:	e18d      	b.n	800900c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cfa:	d914      	bls.n	8008d26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d02:	3301      	adds	r3, #1
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d903      	bls.n	8008d1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	220d      	movs	r2, #13
 8008d1a:	701a      	strb	r2, [r3, #0]
      break;
 8008d1c:	e176      	b.n	800900c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
      break;
 8008d24:	e172      	b.n	800900c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d2c:	f103 020a 	add.w	r2, r3, #10
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008d36:	200a      	movs	r0, #10
 8008d38:	f001 fd2c 	bl	800a794 <USBH_Delay>
      break;
 8008d3c:	e166      	b.n	800900c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d4e:	2104      	movs	r1, #4
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008d54:	2064      	movs	r0, #100	; 0x64
 8008d56:	f001 fd1d 	bl	800a794 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 fbec 	bl	800a538 <USBH_LL_GetSpeed>
 8008d60:	4603      	mov	r3, r0
 8008d62:	461a      	mov	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2205      	movs	r2, #5
 8008d6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fa05 	bl	800a182 <USBH_AllocPipe>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008d80:	2180      	movs	r1, #128	; 0x80
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f9fd 	bl	800a182 <USBH_AllocPipe>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	7919      	ldrb	r1, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008da4:	b292      	uxth	r2, r2
 8008da6:	9202      	str	r2, [sp, #8]
 8008da8:	2200      	movs	r2, #0
 8008daa:	9201      	str	r2, [sp, #4]
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	4603      	mov	r3, r0
 8008db0:	2280      	movs	r2, #128	; 0x80
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 f9b6 	bl	800a124 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7959      	ldrb	r1, [r3, #5]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008dcc:	b292      	uxth	r2, r2
 8008dce:	9202      	str	r2, [sp, #8]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	9201      	str	r2, [sp, #4]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2200      	movs	r2, #0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 f9a2 	bl	800a124 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008de0:	e114      	b.n	800900c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f918 	bl	8009018 <USBH_HandleEnum>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f040 80fe 	bne.w	8008ff2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d103      	bne.n	8008e10 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e0e:	e0f0      	b.n	8008ff2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2207      	movs	r2, #7
 8008e14:	701a      	strb	r2, [r3, #0]
      break;
 8008e16:	e0ec      	b.n	8008ff2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 80e9 	beq.w	8008ff6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2208      	movs	r2, #8
 8008e34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008e36:	e0de      	b.n	8008ff6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fc2c 	bl	80096a0 <USBH_SetCfg>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f040 80d5 	bne.w	8008ffa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2209      	movs	r2, #9
 8008e54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e56:	e0d0      	b.n	8008ffa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008e66:	2101      	movs	r1, #1
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc3c 	bl	80096e6 <USBH_SetFeature>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	220a      	movs	r2, #10
 8008e7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e80:	e0bd      	b.n	8008ffe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	f040 80b9 	bne.w	8008ffe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	220a      	movs	r2, #10
 8008e90:	701a      	strb	r2, [r3, #0]
      break;
 8008e92:	e0b4      	b.n	8008ffe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	220a      	movs	r2, #10
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e0b0      	b.n	8008ffe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 80ad 	beq.w	8009002 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
 8008eb4:	e016      	b.n	8008ee4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008eb6:	7bfa      	ldrb	r2, [r7, #15]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	32de      	adds	r2, #222	; 0xde
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	791a      	ldrb	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d108      	bne.n	8008ede <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008ecc:	7bfa      	ldrb	r2, [r7, #15]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32de      	adds	r2, #222	; 0xde
 8008ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008edc:	e005      	b.n	8008eea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0e5      	beq.n	8008eb6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d016      	beq.n	8008f22 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	4798      	blx	r3
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d109      	bne.n	8008f1a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2206      	movs	r2, #6
 8008f0a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f12:	2103      	movs	r1, #3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f18:	e073      	b.n	8009002 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	220d      	movs	r2, #13
 8008f1e:	701a      	strb	r2, [r3, #0]
      break;
 8008f20:	e06f      	b.n	8009002 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	220d      	movs	r2, #13
 8008f26:	701a      	strb	r2, [r3, #0]
      break;
 8008f28:	e06b      	b.n	8009002 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d017      	beq.n	8008f64 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	4798      	blx	r3
 8008f40:	4603      	mov	r3, r0
 8008f42:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d103      	bne.n	8008f54 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	220b      	movs	r2, #11
 8008f50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f52:	e058      	b.n	8009006 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d154      	bne.n	8009006 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	220d      	movs	r2, #13
 8008f60:	701a      	strb	r2, [r3, #0]
      break;
 8008f62:	e050      	b.n	8009006 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	220d      	movs	r2, #13
 8008f68:	701a      	strb	r2, [r3, #0]
      break;
 8008f6a:	e04c      	b.n	8009006 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d049      	beq.n	800900a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
      }
      break;
 8008f82:	e042      	b.n	800900a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff fd67 	bl	8008a60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d009      	beq.n	8008fb0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fc0:	2105      	movs	r1, #5
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d107      	bne.n	8008fe2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fe20 	bl	8008c20 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fe0:	e014      	b.n	800900c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 fa72 	bl	800a4cc <USBH_LL_Start>
      break;
 8008fe8:	e010      	b.n	800900c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008fea:	bf00      	nop
 8008fec:	e00e      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8008fee:	bf00      	nop
 8008ff0:	e00c      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8008ff2:	bf00      	nop
 8008ff4:	e00a      	b.n	800900c <USBH_Process+0x3cc>
    break;
 8008ff6:	bf00      	nop
 8008ff8:	e008      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8008ffa:	bf00      	nop
 8008ffc:	e006      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8008ffe:	bf00      	nop
 8009000:	e004      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8009002:	bf00      	nop
 8009004:	e002      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8009006:	bf00      	nop
 8009008:	e000      	b.n	800900c <USBH_Process+0x3cc>
      break;
 800900a:	bf00      	nop
  }
  return USBH_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop

08009018 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af04      	add	r7, sp, #16
 800901e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009020:	2301      	movs	r3, #1
 8009022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009024:	2301      	movs	r3, #1
 8009026:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	785b      	ldrb	r3, [r3, #1]
 800902c:	2b07      	cmp	r3, #7
 800902e:	f200 81c1 	bhi.w	80093b4 <USBH_HandleEnum+0x39c>
 8009032:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <USBH_HandleEnum+0x20>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	08009059 	.word	0x08009059
 800903c:	08009117 	.word	0x08009117
 8009040:	08009181 	.word	0x08009181
 8009044:	0800920f 	.word	0x0800920f
 8009048:	08009279 	.word	0x08009279
 800904c:	080092e9 	.word	0x080092e9
 8009050:	0800932f 	.word	0x0800932f
 8009054:	08009375 	.word	0x08009375
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009058:	2108      	movs	r1, #8
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa50 	bl	8009500 <USBH_Get_DevDesc>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d130      	bne.n	80090cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7919      	ldrb	r1, [r3, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800908e:	b292      	uxth	r2, r2
 8009090:	9202      	str	r2, [sp, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	9201      	str	r2, [sp, #4]
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	4603      	mov	r3, r0
 800909a:	2280      	movs	r2, #128	; 0x80
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f841 	bl	800a124 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	7959      	ldrb	r1, [r3, #5]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090b6:	b292      	uxth	r2, r2
 80090b8:	9202      	str	r2, [sp, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	9201      	str	r2, [sp, #4]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4603      	mov	r3, r0
 80090c2:	2200      	movs	r2, #0
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 f82d 	bl	800a124 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090ca:	e175      	b.n	80093b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	f040 8172 	bne.w	80093b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090da:	3301      	adds	r3, #1
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d903      	bls.n	80090f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	220d      	movs	r2, #13
 80090f2:	701a      	strb	r2, [r3, #0]
      break;
 80090f4:	e160      	b.n	80093b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	795b      	ldrb	r3, [r3, #5]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 f861 	bl	800a1c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	791b      	ldrb	r3, [r3, #4]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f001 f85b 	bl	800a1c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	701a      	strb	r2, [r3, #0]
      break;
 8009114:	e150      	b.n	80093b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009116:	2112      	movs	r1, #18
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f9f1 	bl	8009500 <USBH_Get_DevDesc>
 800911e:	4603      	mov	r3, r0
 8009120:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d103      	bne.n	8009130 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800912e:	e145      	b.n	80093bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b03      	cmp	r3, #3
 8009134:	f040 8142 	bne.w	80093bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800913e:	3301      	adds	r3, #1
 8009140:	b2da      	uxtb	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800914e:	2b03      	cmp	r3, #3
 8009150:	d903      	bls.n	800915a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	220d      	movs	r2, #13
 8009156:	701a      	strb	r2, [r3, #0]
      break;
 8009158:	e130      	b.n	80093bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	795b      	ldrb	r3, [r3, #5]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 f82f 	bl	800a1c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	791b      	ldrb	r3, [r3, #4]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 f829 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
      break;
 800917e:	e11d      	b.n	80093bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009180:	2101      	movs	r1, #1
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa68 	bl	8009658 <USBH_SetAddress>
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d132      	bne.n	80091f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009192:	2002      	movs	r0, #2
 8009194:	f001 fafe 	bl	800a794 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2203      	movs	r2, #3
 80091a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	7919      	ldrb	r1, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091ba:	b292      	uxth	r2, r2
 80091bc:	9202      	str	r2, [sp, #8]
 80091be:	2200      	movs	r2, #0
 80091c0:	9201      	str	r2, [sp, #4]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	4603      	mov	r3, r0
 80091c6:	2280      	movs	r2, #128	; 0x80
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 ffab 	bl	800a124 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7959      	ldrb	r1, [r3, #5]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091e2:	b292      	uxth	r2, r2
 80091e4:	9202      	str	r2, [sp, #8]
 80091e6:	2200      	movs	r2, #0
 80091e8:	9201      	str	r2, [sp, #4]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	4603      	mov	r3, r0
 80091ee:	2200      	movs	r2, #0
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 ff97 	bl	800a124 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80091f6:	e0e3      	b.n	80093c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	f040 80e0 	bne.w	80093c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	220d      	movs	r2, #13
 8009204:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	705a      	strb	r2, [r3, #1]
      break;
 800920c:	e0d8      	b.n	80093c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800920e:	2109      	movs	r1, #9
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f99d 	bl	8009550 <USBH_Get_CfgDesc>
 8009216:	4603      	mov	r3, r0
 8009218:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2204      	movs	r2, #4
 8009224:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009226:	e0cd      	b.n	80093c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b03      	cmp	r3, #3
 800922c:	f040 80ca 	bne.w	80093c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009236:	3301      	adds	r3, #1
 8009238:	b2da      	uxtb	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009246:	2b03      	cmp	r3, #3
 8009248:	d903      	bls.n	8009252 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	220d      	movs	r2, #13
 800924e:	701a      	strb	r2, [r3, #0]
      break;
 8009250:	e0b8      	b.n	80093c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	795b      	ldrb	r3, [r3, #5]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 ffb3 	bl	800a1c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	791b      	ldrb	r3, [r3, #4]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 ffad 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
      break;
 8009276:	e0a5      	b.n	80093c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f965 	bl	8009550 <USBH_Get_CfgDesc>
 8009286:	4603      	mov	r3, r0
 8009288:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2205      	movs	r2, #5
 8009294:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009296:	e097      	b.n	80093c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	2b03      	cmp	r3, #3
 800929c:	f040 8094 	bne.w	80093c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092a6:	3301      	adds	r3, #1
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d903      	bls.n	80092c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	220d      	movs	r2, #13
 80092be:	701a      	strb	r2, [r3, #0]
      break;
 80092c0:	e082      	b.n	80093c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	795b      	ldrb	r3, [r3, #5]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 ff7b 	bl	800a1c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	791b      	ldrb	r3, [r3, #4]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 ff75 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
      break;
 80092e6:	e06f      	b.n	80093c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d019      	beq.n	8009326 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092fe:	23ff      	movs	r3, #255	; 0xff
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f949 	bl	8009598 <USBH_Get_StringDesc>
 8009306:	4603      	mov	r3, r0
 8009308:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d103      	bne.n	8009318 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2206      	movs	r2, #6
 8009314:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009316:	e059      	b.n	80093cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	2b03      	cmp	r3, #3
 800931c:	d156      	bne.n	80093cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2206      	movs	r2, #6
 8009322:	705a      	strb	r2, [r3, #1]
      break;
 8009324:	e052      	b.n	80093cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2206      	movs	r2, #6
 800932a:	705a      	strb	r2, [r3, #1]
      break;
 800932c:	e04e      	b.n	80093cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009334:	2b00      	cmp	r3, #0
 8009336:	d019      	beq.n	800936c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009344:	23ff      	movs	r3, #255	; 0xff
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f926 	bl	8009598 <USBH_Get_StringDesc>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d103      	bne.n	800935e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2207      	movs	r2, #7
 800935a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800935c:	e038      	b.n	80093d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d135      	bne.n	80093d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2207      	movs	r2, #7
 8009368:	705a      	strb	r2, [r3, #1]
      break;
 800936a:	e031      	b.n	80093d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2207      	movs	r2, #7
 8009370:	705a      	strb	r2, [r3, #1]
      break;
 8009372:	e02d      	b.n	80093d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800937a:	2b00      	cmp	r3, #0
 800937c:	d017      	beq.n	80093ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800938a:	23ff      	movs	r3, #255	; 0xff
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f903 	bl	8009598 <USBH_Get_StringDesc>
 8009392:	4603      	mov	r3, r0
 8009394:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80093a0:	e018      	b.n	80093d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d115      	bne.n	80093d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
      break;
 80093ac:	e012      	b.n	80093d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
      break;
 80093b2:	e00f      	b.n	80093d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80093b4:	bf00      	nop
 80093b6:	e00e      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093b8:	bf00      	nop
 80093ba:	e00c      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093bc:	bf00      	nop
 80093be:	e00a      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093c0:	bf00      	nop
 80093c2:	e008      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093c4:	bf00      	nop
 80093c6:	e006      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093c8:	bf00      	nop
 80093ca:	e004      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093cc:	bf00      	nop
 80093ce:	e002      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093d0:	bf00      	nop
 80093d2:	e000      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093d4:	bf00      	nop
  }
  return Status;
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f804 	bl	8009422 <USBH_HandleSof>
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b0b      	cmp	r3, #11
 8009432:	d10a      	bne.n	800944a <USBH_HandleSof+0x28>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d005      	beq.n	800944a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
  }
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009462:	bf00      	nop
}
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800947e:	bf00      	nop
}
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 f812 	bl	800a502 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	791b      	ldrb	r3, [r3, #4]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fe6d 	bl	800a1c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	795b      	ldrb	r3, [r3, #5]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fe67 	bl	800a1c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af02      	add	r7, sp, #8
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	b29b      	uxth	r3, r3
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	4613      	mov	r3, r2
 800951a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800951e:	2100      	movs	r1, #0
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f864 	bl	80095ee <USBH_GetDescriptor>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800953c:	78fa      	ldrb	r2, [r7, #3]
 800953e:	b292      	uxth	r2, r2
 8009540:	4619      	mov	r1, r3
 8009542:	f000 f918 	bl	8009776 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af02      	add	r7, sp, #8
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	331c      	adds	r3, #28
 8009560:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009562:	887b      	ldrh	r3, [r7, #2]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800956c:	2100      	movs	r1, #0
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f83d 	bl	80095ee <USBH_GetDescriptor>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d107      	bne.n	800958e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800957e:	887b      	ldrh	r3, [r7, #2]
 8009580:	461a      	mov	r2, r3
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f987 	bl	8009898 <USBH_ParseCfgDesc>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	607a      	str	r2, [r7, #4]
 80095a2:	461a      	mov	r2, r3
 80095a4:	460b      	mov	r3, r1
 80095a6:	72fb      	strb	r3, [r7, #11]
 80095a8:	4613      	mov	r3, r2
 80095aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80095b4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80095bc:	893b      	ldrh	r3, [r7, #8]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	460b      	mov	r3, r1
 80095c2:	2100      	movs	r1, #0
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f812 	bl	80095ee <USBH_GetDescriptor>
 80095ca:	4603      	mov	r3, r0
 80095cc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d107      	bne.n	80095e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80095da:	893a      	ldrh	r2, [r7, #8]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fb24 	bl	8009c2c <USBH_ParseStringDesc>
  }

  return status;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	72fb      	strb	r3, [r7, #11]
 80095fc:	4613      	mov	r3, r2
 80095fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	789b      	ldrb	r3, [r3, #2]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d11c      	bne.n	8009642 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800960e:	b2da      	uxtb	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2206      	movs	r2, #6
 8009618:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	893a      	ldrh	r2, [r7, #8]
 800961e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009620:	893b      	ldrh	r3, [r7, #8]
 8009622:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800962a:	d104      	bne.n	8009636 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f240 4209 	movw	r2, #1033	; 0x409
 8009632:	829a      	strh	r2, [r3, #20]
 8009634:	e002      	b.n	800963c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8b3a      	ldrh	r2, [r7, #24]
 8009640:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009642:	8b3b      	ldrh	r3, [r7, #24]
 8009644:	461a      	mov	r2, r3
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fb3d 	bl	8009cc8 <USBH_CtlReq>
 800964e:	4603      	mov	r3, r0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	789b      	ldrb	r3, [r3, #2]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d10f      	bne.n	800968c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2205      	movs	r2, #5
 8009676:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	b29a      	uxth	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800968c:	2200      	movs	r2, #0
 800968e:	2100      	movs	r1, #0
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fb19 	bl	8009cc8 <USBH_CtlReq>
 8009696:	4603      	mov	r3, r0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	789b      	ldrb	r3, [r3, #2]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d10e      	bne.n	80096d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2209      	movs	r2, #9
 80096be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	887a      	ldrh	r2, [r7, #2]
 80096c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096d2:	2200      	movs	r2, #0
 80096d4:	2100      	movs	r1, #0
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 faf6 	bl	8009cc8 <USBH_CtlReq>
 80096dc:	4603      	mov	r3, r0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	789b      	ldrb	r3, [r3, #2]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d10f      	bne.n	800971a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2203      	movs	r2, #3
 8009704:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	b29a      	uxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800971a:	2200      	movs	r2, #0
 800971c:	2100      	movs	r1, #0
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fad2 	bl	8009cc8 <USBH_CtlReq>
 8009724:	4603      	mov	r3, r0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	789b      	ldrb	r3, [r3, #2]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d10f      	bne.n	8009762 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2202      	movs	r2, #2
 8009746:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009762:	2200      	movs	r2, #0
 8009764:	2100      	movs	r1, #0
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 faae 	bl	8009cc8 <USBH_CtlReq>
 800976c:	4603      	mov	r3, r0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009776:	b480      	push	{r7}
 8009778:	b085      	sub	sp, #20
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	4613      	mov	r3, r2
 8009782:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	785a      	ldrb	r2, [r3, #1]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	3302      	adds	r3, #2
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b29a      	uxth	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	3303      	adds	r3, #3
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4313      	orrs	r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	791a      	ldrb	r2, [r3, #4]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	795a      	ldrb	r2, [r3, #5]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	799a      	ldrb	r2, [r3, #6]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	79da      	ldrb	r2, [r3, #7]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	79db      	ldrb	r3, [r3, #7]
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	dc11      	bgt.n	80097fc <USBH_ParseDevDesc+0x86>
 80097d8:	2b08      	cmp	r3, #8
 80097da:	db16      	blt.n	800980a <USBH_ParseDevDesc+0x94>
 80097dc:	3b08      	subs	r3, #8
 80097de:	2201      	movs	r2, #1
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80097e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bf14      	ite	ne
 80097f0:	2301      	movne	r3, #1
 80097f2:	2300      	moveq	r3, #0
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <USBH_ParseDevDesc+0x8a>
 80097fa:	e006      	b.n	800980a <USBH_ParseDevDesc+0x94>
 80097fc:	2b40      	cmp	r3, #64	; 0x40
 80097fe:	d104      	bne.n	800980a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	79da      	ldrb	r2, [r3, #7]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	71da      	strb	r2, [r3, #7]
      break;
 8009808:	e003      	b.n	8009812 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2240      	movs	r2, #64	; 0x40
 800980e:	71da      	strb	r2, [r3, #7]
      break;
 8009810:	bf00      	nop
  }

  if (length > 8U)
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	2b08      	cmp	r3, #8
 8009816:	d939      	bls.n	800988c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	3308      	adds	r3, #8
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b29a      	uxth	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3309      	adds	r3, #9
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b29b      	uxth	r3, r3
 800982c:	4313      	orrs	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	330a      	adds	r3, #10
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b29a      	uxth	r2, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	330b      	adds	r3, #11
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	b29b      	uxth	r3, r3
 8009848:	4313      	orrs	r3, r2
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	330c      	adds	r3, #12
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	b29a      	uxth	r2, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	330d      	adds	r3, #13
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	b29b      	uxth	r3, r3
 8009860:	021b      	lsls	r3, r3, #8
 8009862:	b29b      	uxth	r3, r3
 8009864:	4313      	orrs	r3, r2
 8009866:	b29a      	uxth	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	7b9a      	ldrb	r2, [r3, #14]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	7bda      	ldrb	r2, [r3, #15]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	7c1a      	ldrb	r2, [r3, #16]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	7c5a      	ldrb	r2, [r3, #17]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	745a      	strb	r2, [r3, #17]
  }
}
 800988c:	bf00      	nop
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08c      	sub	sp, #48	; 0x30
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	4613      	mov	r3, r2
 80098a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80098ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	781a      	ldrb	r2, [r3, #0]
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	785a      	ldrb	r2, [r3, #1]
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	3302      	adds	r3, #2
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	3303      	adds	r3, #3
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	4313      	orrs	r3, r2
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f4:	bf28      	it	cs
 80098f6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	791a      	ldrb	r2, [r3, #4]
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	795a      	ldrb	r2, [r3, #5]
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	799a      	ldrb	r2, [r3, #6]
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	79da      	ldrb	r2, [r3, #7]
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	7a1a      	ldrb	r2, [r3, #8]
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b09      	cmp	r3, #9
 800992e:	d002      	beq.n	8009936 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	2209      	movs	r2, #9
 8009934:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009936:	88fb      	ldrh	r3, [r7, #6]
 8009938:	2b09      	cmp	r3, #9
 800993a:	f240 809d 	bls.w	8009a78 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800993e:	2309      	movs	r3, #9
 8009940:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009946:	e081      	b.n	8009a4c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009948:	f107 0316 	add.w	r3, r7, #22
 800994c:	4619      	mov	r1, r3
 800994e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009950:	f000 f99f 	bl	8009c92 <USBH_GetNextDesc>
 8009954:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b04      	cmp	r3, #4
 800995c:	d176      	bne.n	8009a4c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b09      	cmp	r3, #9
 8009964:	d002      	beq.n	800996c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	2209      	movs	r2, #9
 800996a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800996c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009970:	221a      	movs	r2, #26
 8009972:	fb02 f303 	mul.w	r3, r2, r3
 8009976:	3308      	adds	r3, #8
 8009978:	6a3a      	ldr	r2, [r7, #32]
 800997a:	4413      	add	r3, r2
 800997c:	3302      	adds	r3, #2
 800997e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009982:	69f8      	ldr	r0, [r7, #28]
 8009984:	f000 f87e 	bl	8009a84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009992:	e043      	b.n	8009a1c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009994:	f107 0316 	add.w	r3, r7, #22
 8009998:	4619      	mov	r1, r3
 800999a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999c:	f000 f979 	bl	8009c92 <USBH_GetNextDesc>
 80099a0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b05      	cmp	r3, #5
 80099a8:	d138      	bne.n	8009a1c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	795b      	ldrb	r3, [r3, #5]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d10f      	bne.n	80099d2 <USBH_ParseCfgDesc+0x13a>
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	799b      	ldrb	r3, [r3, #6]
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d10b      	bne.n	80099d2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	79db      	ldrb	r3, [r3, #7]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10f      	bne.n	80099e2 <USBH_ParseCfgDesc+0x14a>
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b09      	cmp	r3, #9
 80099c8:	d00b      	beq.n	80099e2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	2209      	movs	r2, #9
 80099ce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099d0:	e007      	b.n	80099e2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b07      	cmp	r3, #7
 80099d8:	d004      	beq.n	80099e4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80099da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099dc:	2207      	movs	r2, #7
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e000      	b.n	80099e4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099e2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80099ec:	3201      	adds	r2, #1
 80099ee:	00d2      	lsls	r2, r2, #3
 80099f0:	211a      	movs	r1, #26
 80099f2:	fb01 f303 	mul.w	r3, r1, r3
 80099f6:	4413      	add	r3, r2
 80099f8:	3308      	adds	r3, #8
 80099fa:	6a3a      	ldr	r2, [r7, #32]
 80099fc:	4413      	add	r3, r2
 80099fe:	3304      	adds	r3, #4
 8009a00:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a04:	69b9      	ldr	r1, [r7, #24]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 f86b 	bl	8009ae2 <USBH_ParseEPDesc>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009a12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a16:	3301      	adds	r3, #1
 8009a18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	791b      	ldrb	r3, [r3, #4]
 8009a20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d204      	bcs.n	8009a32 <USBH_ParseCfgDesc+0x19a>
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	885a      	ldrh	r2, [r3, #2]
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d8b0      	bhi.n	8009994 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	791b      	ldrb	r3, [r3, #4]
 8009a36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d201      	bcs.n	8009a42 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e01c      	b.n	8009a7c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a46:	3301      	adds	r3, #1
 8009a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d805      	bhi.n	8009a60 <USBH_ParseCfgDesc+0x1c8>
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	885a      	ldrh	r2, [r3, #2]
 8009a58:	8afb      	ldrh	r3, [r7, #22]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	f63f af74 	bhi.w	8009948 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	791b      	ldrb	r3, [r3, #4]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	bf28      	it	cs
 8009a68:	2302      	movcs	r3, #2
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d201      	bcs.n	8009a78 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e001      	b.n	8009a7c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009a78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3730      	adds	r7, #48	; 0x30
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781a      	ldrb	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	785a      	ldrb	r2, [r3, #1]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	789a      	ldrb	r2, [r3, #2]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	78da      	ldrb	r2, [r3, #3]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	791a      	ldrb	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	795a      	ldrb	r2, [r3, #5]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	799a      	ldrb	r2, [r3, #6]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	79da      	ldrb	r2, [r3, #7]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	7a1a      	ldrb	r2, [r3, #8]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	721a      	strb	r2, [r3, #8]
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b087      	sub	sp, #28
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	781a      	ldrb	r2, [r3, #0]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	785a      	ldrb	r2, [r3, #1]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	789a      	ldrb	r2, [r3, #2]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	78da      	ldrb	r2, [r3, #3]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3304      	adds	r3, #4
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3305      	adds	r3, #5
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	4313      	orrs	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	799a      	ldrb	r2, [r3, #6]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	889b      	ldrh	r3, [r3, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	75fb      	strb	r3, [r7, #23]
 8009b42:	e033      	b.n	8009bac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	889b      	ldrh	r3, [r3, #4]
 8009b48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b4c:	f023 0307 	bic.w	r3, r3, #7
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	889b      	ldrh	r3, [r3, #4]
 8009b5a:	b21a      	sxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	b299      	uxth	r1, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3305      	adds	r3, #5
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	021b      	lsls	r3, r3, #8
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	430b      	orrs	r3, r1
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d110      	bne.n	8009b9e <USBH_ParseEPDesc+0xbc>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b299      	uxth	r1, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3305      	adds	r3, #5
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	430b      	orrs	r3, r1
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	b21b      	sxth	r3, r3
 8009b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b9a:	b21b      	sxth	r3, r3
 8009b9c:	e001      	b.n	8009ba2 <USBH_ParseEPDesc+0xc0>
 8009b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	b21b      	sxth	r3, r3
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d116      	bne.n	8009be4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	78db      	ldrb	r3, [r3, #3]
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d005      	beq.n	8009bce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	78db      	ldrb	r3, [r3, #3]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d127      	bne.n	8009c1e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	799b      	ldrb	r3, [r3, #6]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <USBH_ParseEPDesc+0xfc>
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	799b      	ldrb	r3, [r3, #6]
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d91f      	bls.n	8009c1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009bde:	2303      	movs	r3, #3
 8009be0:	75fb      	strb	r3, [r7, #23]
 8009be2:	e01c      	b.n	8009c1e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	78db      	ldrb	r3, [r3, #3]
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d10a      	bne.n	8009c06 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	799b      	ldrb	r3, [r3, #6]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <USBH_ParseEPDesc+0x11e>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	799b      	ldrb	r3, [r3, #6]
 8009bfc:	2b10      	cmp	r3, #16
 8009bfe:	d90e      	bls.n	8009c1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009c00:	2303      	movs	r3, #3
 8009c02:	75fb      	strb	r3, [r7, #23]
 8009c04:	e00b      	b.n	8009c1e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	78db      	ldrb	r3, [r3, #3]
 8009c0a:	f003 0303 	and.w	r3, r3, #3
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d105      	bne.n	8009c1e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	799b      	ldrb	r3, [r3, #6]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d120      	bne.n	8009c86 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	1e9a      	subs	r2, r3, #2
 8009c4a:	88fb      	ldrh	r3, [r7, #6]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	bf28      	it	cs
 8009c50:	4613      	movcs	r3, r2
 8009c52:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3302      	adds	r3, #2
 8009c58:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	82fb      	strh	r3, [r7, #22]
 8009c5e:	e00b      	b.n	8009c78 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c60:	8afb      	ldrh	r3, [r7, #22]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	4413      	add	r3, r2
 8009c66:	781a      	ldrb	r2, [r3, #0]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c72:	8afb      	ldrh	r3, [r7, #22]
 8009c74:	3302      	adds	r3, #2
 8009c76:	82fb      	strh	r3, [r7, #22]
 8009c78:	8afa      	ldrh	r2, [r7, #22]
 8009c7a:	8abb      	ldrh	r3, [r7, #20]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d3ef      	bcc.n	8009c60 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	701a      	strb	r2, [r3, #0]
  }
}
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	881a      	ldrh	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009cba:	68fb      	ldr	r3, [r7, #12]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	789b      	ldrb	r3, [r3, #2]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d002      	beq.n	8009ce8 <USBH_CtlReq+0x20>
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d00f      	beq.n	8009d06 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009ce6:	e027      	b.n	8009d38 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	88fa      	ldrh	r2, [r7, #6]
 8009cf2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009d00:	2301      	movs	r3, #1
 8009d02:	75fb      	strb	r3, [r7, #23]
      break;
 8009d04:	e018      	b.n	8009d38 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 f81c 	bl	8009d44 <USBH_HandleControl>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <USBH_CtlReq+0x54>
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d106      	bne.n	8009d2a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	761a      	strb	r2, [r3, #24]
      break;
 8009d28:	e005      	b.n	8009d36 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d102      	bne.n	8009d36 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2201      	movs	r2, #1
 8009d34:	709a      	strb	r2, [r3, #2]
      break;
 8009d36:	bf00      	nop
  }
  return status;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	7e1b      	ldrb	r3, [r3, #24]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	2b0a      	cmp	r3, #10
 8009d5c:	f200 8156 	bhi.w	800a00c <USBH_HandleControl+0x2c8>
 8009d60:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <USBH_HandleControl+0x24>)
 8009d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d66:	bf00      	nop
 8009d68:	08009d95 	.word	0x08009d95
 8009d6c:	08009daf 	.word	0x08009daf
 8009d70:	08009e19 	.word	0x08009e19
 8009d74:	08009e3f 	.word	0x08009e3f
 8009d78:	08009e77 	.word	0x08009e77
 8009d7c:	08009ea1 	.word	0x08009ea1
 8009d80:	08009ef3 	.word	0x08009ef3
 8009d84:	08009f15 	.word	0x08009f15
 8009d88:	08009f51 	.word	0x08009f51
 8009d8c:	08009f77 	.word	0x08009f77
 8009d90:	08009fb5 	.word	0x08009fb5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f103 0110 	add.w	r1, r3, #16
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	795b      	ldrb	r3, [r3, #5]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f943 	bl	800a02c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2202      	movs	r2, #2
 8009daa:	761a      	strb	r2, [r3, #24]
      break;
 8009dac:	e139      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	795b      	ldrb	r3, [r3, #5]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fc93 	bl	800a6e0 <USBH_LL_GetURBState>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d11e      	bne.n	8009e02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7c1b      	ldrb	r3, [r3, #16]
 8009dc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	8adb      	ldrh	r3, [r3, #22]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00a      	beq.n	8009dec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009dd6:	7b7b      	ldrb	r3, [r7, #13]
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d103      	bne.n	8009de4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2203      	movs	r2, #3
 8009de0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009de2:	e115      	b.n	800a010 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2205      	movs	r2, #5
 8009de8:	761a      	strb	r2, [r3, #24]
      break;
 8009dea:	e111      	b.n	800a010 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009dec:	7b7b      	ldrb	r3, [r7, #13]
 8009dee:	2b80      	cmp	r3, #128	; 0x80
 8009df0:	d103      	bne.n	8009dfa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2209      	movs	r2, #9
 8009df6:	761a      	strb	r2, [r3, #24]
      break;
 8009df8:	e10a      	b.n	800a010 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2207      	movs	r2, #7
 8009dfe:	761a      	strb	r2, [r3, #24]
      break;
 8009e00:	e106      	b.n	800a010 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d003      	beq.n	8009e10 <USBH_HandleControl+0xcc>
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	f040 8100 	bne.w	800a010 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	220b      	movs	r2, #11
 8009e14:	761a      	strb	r2, [r3, #24]
      break;
 8009e16:	e0fb      	b.n	800a010 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6899      	ldr	r1, [r3, #8]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	899a      	ldrh	r2, [r3, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	791b      	ldrb	r3, [r3, #4]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f93a 	bl	800a0aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	761a      	strb	r2, [r3, #24]
      break;
 8009e3c:	e0f1      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	791b      	ldrb	r3, [r3, #4]
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc4b 	bl	800a6e0 <USBH_LL_GetURBState>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d102      	bne.n	8009e5a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2209      	movs	r2, #9
 8009e58:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2b05      	cmp	r3, #5
 8009e5e:	d102      	bne.n	8009e66 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e60:	2303      	movs	r3, #3
 8009e62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e64:	e0d6      	b.n	800a014 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	f040 80d3 	bne.w	800a014 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	220b      	movs	r2, #11
 8009e72:	761a      	strb	r2, [r3, #24]
      break;
 8009e74:	e0ce      	b.n	800a014 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6899      	ldr	r1, [r3, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	899a      	ldrh	r2, [r3, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	795b      	ldrb	r3, [r3, #5]
 8009e82:	2001      	movs	r0, #1
 8009e84:	9000      	str	r0, [sp, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f8ea 	bl	800a060 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2206      	movs	r2, #6
 8009e9c:	761a      	strb	r2, [r3, #24]
      break;
 8009e9e:	e0c0      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	795b      	ldrb	r3, [r3, #5]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fc1a 	bl	800a6e0 <USBH_LL_GetURBState>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d103      	bne.n	8009ebe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2207      	movs	r2, #7
 8009eba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ebc:	e0ac      	b.n	800a018 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b05      	cmp	r3, #5
 8009ec2:	d105      	bne.n	8009ed0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	220c      	movs	r2, #12
 8009ec8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ece:	e0a3      	b.n	800a018 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d103      	bne.n	8009ede <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2205      	movs	r2, #5
 8009eda:	761a      	strb	r2, [r3, #24]
      break;
 8009edc:	e09c      	b.n	800a018 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	f040 8099 	bne.w	800a018 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	220b      	movs	r2, #11
 8009eea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009eec:	2302      	movs	r3, #2
 8009eee:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef0:	e092      	b.n	800a018 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	791b      	ldrb	r3, [r3, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2100      	movs	r1, #0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f8d5 	bl	800a0aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2208      	movs	r2, #8
 8009f10:	761a      	strb	r2, [r3, #24]

      break;
 8009f12:	e086      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	791b      	ldrb	r3, [r3, #4]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fbe0 	bl	800a6e0 <USBH_LL_GetURBState>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d105      	bne.n	8009f36 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	220d      	movs	r2, #13
 8009f2e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f34:	e072      	b.n	800a01c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f36:	7bbb      	ldrb	r3, [r7, #14]
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d103      	bne.n	8009f44 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	220b      	movs	r2, #11
 8009f40:	761a      	strb	r2, [r3, #24]
      break;
 8009f42:	e06b      	b.n	800a01c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	2b05      	cmp	r3, #5
 8009f48:	d168      	bne.n	800a01c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f4e:	e065      	b.n	800a01c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	795b      	ldrb	r3, [r3, #5]
 8009f54:	2201      	movs	r2, #1
 8009f56:	9200      	str	r2, [sp, #0]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f87f 	bl	800a060 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	220a      	movs	r2, #10
 8009f72:	761a      	strb	r2, [r3, #24]
      break;
 8009f74:	e055      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	795b      	ldrb	r3, [r3, #5]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fbaf 	bl	800a6e0 <USBH_LL_GetURBState>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d105      	bne.n	8009f98 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	220d      	movs	r2, #13
 8009f94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f96:	e043      	b.n	800a020 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d103      	bne.n	8009fa6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2209      	movs	r2, #9
 8009fa2:	761a      	strb	r2, [r3, #24]
      break;
 8009fa4:	e03c      	b.n	800a020 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	2b04      	cmp	r3, #4
 8009faa:	d139      	bne.n	800a020 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	220b      	movs	r2, #11
 8009fb0:	761a      	strb	r2, [r3, #24]
      break;
 8009fb2:	e035      	b.n	800a020 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	7e5b      	ldrb	r3, [r3, #25]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	765a      	strb	r2, [r3, #25]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	7e5b      	ldrb	r3, [r3, #25]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d806      	bhi.n	8009fd6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009fd4:	e025      	b.n	800a022 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fdc:	2106      	movs	r1, #6
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	795b      	ldrb	r3, [r3, #5]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f8e8 	bl	800a1c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	791b      	ldrb	r3, [r3, #4]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f8e2 	bl	800a1c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a006:	2302      	movs	r3, #2
 800a008:	73fb      	strb	r3, [r7, #15]
      break;
 800a00a:	e00a      	b.n	800a022 <USBH_HandleControl+0x2de>

    default:
      break;
 800a00c:	bf00      	nop
 800a00e:	e008      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a010:	bf00      	nop
 800a012:	e006      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a014:	bf00      	nop
 800a016:	e004      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a018:	bf00      	nop
 800a01a:	e002      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a01c:	bf00      	nop
 800a01e:	e000      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a020:	bf00      	nop
  }

  return status;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af04      	add	r7, sp, #16
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	4613      	mov	r3, r2
 800a038:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a03a:	79f9      	ldrb	r1, [r7, #7]
 800a03c:	2300      	movs	r3, #0
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	2308      	movs	r3, #8
 800a042:	9302      	str	r3, [sp, #8]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	2300      	movs	r3, #0
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	2300      	movs	r3, #0
 800a04e:	2200      	movs	r2, #0
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fb14 	bl	800a67e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af04      	add	r7, sp, #16
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	4611      	mov	r1, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	460b      	mov	r3, r1
 800a070:	80fb      	strh	r3, [r7, #6]
 800a072:	4613      	mov	r3, r2
 800a074:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a084:	7979      	ldrb	r1, [r7, #5]
 800a086:	7e3b      	ldrb	r3, [r7, #24]
 800a088:	9303      	str	r3, [sp, #12]
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	9302      	str	r3, [sp, #8]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	2301      	movs	r3, #1
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	2300      	movs	r3, #0
 800a098:	2200      	movs	r2, #0
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f000 faef 	bl	800a67e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b088      	sub	sp, #32
 800a0ae:	af04      	add	r7, sp, #16
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	80fb      	strh	r3, [r7, #6]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0c0:	7979      	ldrb	r1, [r7, #5]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	88fb      	ldrh	r3, [r7, #6]
 800a0c8:	9302      	str	r3, [sp, #8]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fad1 	bl	800a67e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0dc:	2300      	movs	r3, #0

}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b088      	sub	sp, #32
 800a0ea:	af04      	add	r7, sp, #16
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	71fb      	strb	r3, [r7, #7]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	79b9      	ldrb	r1, [r7, #6]
 800a102:	2200      	movs	r2, #0
 800a104:	9203      	str	r2, [sp, #12]
 800a106:	9302      	str	r3, [sp, #8]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	2301      	movs	r3, #1
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	2303      	movs	r3, #3
 800a112:	2201      	movs	r2, #1
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 fab2 	bl	800a67e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af04      	add	r7, sp, #16
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	4608      	mov	r0, r1
 800a12e:	4611      	mov	r1, r2
 800a130:	461a      	mov	r2, r3
 800a132:	4603      	mov	r3, r0
 800a134:	70fb      	strb	r3, [r7, #3]
 800a136:	460b      	mov	r3, r1
 800a138:	70bb      	strb	r3, [r7, #2]
 800a13a:	4613      	mov	r3, r2
 800a13c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a13e:	7878      	ldrb	r0, [r7, #1]
 800a140:	78ba      	ldrb	r2, [r7, #2]
 800a142:	78f9      	ldrb	r1, [r7, #3]
 800a144:	8b3b      	ldrh	r3, [r7, #24]
 800a146:	9302      	str	r3, [sp, #8]
 800a148:	7d3b      	ldrb	r3, [r7, #20]
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	7c3b      	ldrb	r3, [r7, #16]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4603      	mov	r3, r0
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa45 	bl	800a5e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fa64 	bl	800a640 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f836 	bl	800a200 <USBH_GetFreePipe>
 800a194:	4603      	mov	r3, r0
 800a196:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a198:	89fb      	ldrh	r3, [r7, #14]
 800a19a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d00a      	beq.n	800a1b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	89fb      	ldrh	r3, [r7, #14]
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	33e0      	adds	r3, #224	; 0xe0
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a1b8:	89fb      	ldrh	r3, [r7, #14]
 800a1ba:	b2db      	uxtb	r3, r3
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	2b0f      	cmp	r3, #15
 800a1d4:	d80d      	bhi.n	800a1f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	33e0      	adds	r3, #224	; 0xe0
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	33e0      	adds	r3, #224	; 0xe0
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
 800a210:	e00f      	b.n	800a232 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	33e0      	adds	r3, #224	; 0xe0
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	e007      	b.n	800a23c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	3301      	adds	r3, #1
 800a230:	73fb      	strb	r3, [r7, #15]
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	2b0f      	cmp	r3, #15
 800a236:	d9ec      	bls.n	800a212 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a238:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a24c:	2201      	movs	r2, #1
 800a24e:	490e      	ldr	r1, [pc, #56]	; (800a288 <MX_USB_HOST_Init+0x40>)
 800a250:	480e      	ldr	r0, [pc, #56]	; (800a28c <MX_USB_HOST_Init+0x44>)
 800a252:	f7fe fbcb 	bl	80089ec <USBH_Init>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a25c:	f7f7 f83e 	bl	80012dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800a260:	490b      	ldr	r1, [pc, #44]	; (800a290 <MX_USB_HOST_Init+0x48>)
 800a262:	480a      	ldr	r0, [pc, #40]	; (800a28c <MX_USB_HOST_Init+0x44>)
 800a264:	f7fe fc50 	bl	8008b08 <USBH_RegisterClass>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a26e:	f7f7 f835 	bl	80012dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a272:	4806      	ldr	r0, [pc, #24]	; (800a28c <MX_USB_HOST_Init+0x44>)
 800a274:	f7fe fcd4 	bl	8008c20 <USBH_Start>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a27e:	f7f7 f82d 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a282:	bf00      	nop
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	0800a2a9 	.word	0x0800a2a9
 800a28c:	20005a24 	.word	0x20005a24
 800a290:	20000018 	.word	0x20000018

0800a294 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a298:	4802      	ldr	r0, [pc, #8]	; (800a2a4 <MX_USB_HOST_Process+0x10>)
 800a29a:	f7fe fcd1 	bl	8008c40 <USBH_Process>
}
 800a29e:	bf00      	nop
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20005a24 	.word	0x20005a24

0800a2a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d819      	bhi.n	800a2f0 <USBH_UserProcess+0x48>
 800a2bc:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <USBH_UserProcess+0x1c>)
 800a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c2:	bf00      	nop
 800a2c4:	0800a2f1 	.word	0x0800a2f1
 800a2c8:	0800a2e1 	.word	0x0800a2e1
 800a2cc:	0800a2f1 	.word	0x0800a2f1
 800a2d0:	0800a2e9 	.word	0x0800a2e9
 800a2d4:	0800a2d9 	.word	0x0800a2d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a2d8:	4b09      	ldr	r3, [pc, #36]	; (800a300 <USBH_UserProcess+0x58>)
 800a2da:	2203      	movs	r2, #3
 800a2dc:	701a      	strb	r2, [r3, #0]
  break;
 800a2de:	e008      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a2e0:	4b07      	ldr	r3, [pc, #28]	; (800a300 <USBH_UserProcess+0x58>)
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	701a      	strb	r2, [r3, #0]
  break;
 800a2e6:	e004      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <USBH_UserProcess+0x58>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	701a      	strb	r2, [r3, #0]
  break;
 800a2ee:	e000      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a2f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20005dfc 	.word	0x20005dfc

0800a304 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08a      	sub	sp, #40	; 0x28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a30c:	f107 0314 	add.w	r3, r7, #20
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	609a      	str	r2, [r3, #8]
 800a318:	60da      	str	r2, [r3, #12]
 800a31a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a324:	d13a      	bne.n	800a39c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a326:	2300      	movs	r3, #0
 800a328:	613b      	str	r3, [r7, #16]
 800a32a:	4b1e      	ldr	r3, [pc, #120]	; (800a3a4 <HAL_HCD_MspInit+0xa0>)
 800a32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32e:	4a1d      	ldr	r2, [pc, #116]	; (800a3a4 <HAL_HCD_MspInit+0xa0>)
 800a330:	f043 0301 	orr.w	r3, r3, #1
 800a334:	6313      	str	r3, [r2, #48]	; 0x30
 800a336:	4b1b      	ldr	r3, [pc, #108]	; (800a3a4 <HAL_HCD_MspInit+0xa0>)
 800a338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a342:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a348:	2302      	movs	r3, #2
 800a34a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a350:	2303      	movs	r3, #3
 800a352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a354:	230a      	movs	r3, #10
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a358:	f107 0314 	add.w	r3, r7, #20
 800a35c:	4619      	mov	r1, r3
 800a35e:	4812      	ldr	r0, [pc, #72]	; (800a3a8 <HAL_HCD_MspInit+0xa4>)
 800a360:	f7f9 f9c0 	bl	80036e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a364:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <HAL_HCD_MspInit+0xa0>)
 800a366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a368:	4a0e      	ldr	r2, [pc, #56]	; (800a3a4 <HAL_HCD_MspInit+0xa0>)
 800a36a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36e:	6353      	str	r3, [r2, #52]	; 0x34
 800a370:	2300      	movs	r3, #0
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <HAL_HCD_MspInit+0xa0>)
 800a376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a378:	4a0a      	ldr	r2, [pc, #40]	; (800a3a4 <HAL_HCD_MspInit+0xa0>)
 800a37a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a37e:	6453      	str	r3, [r2, #68]	; 0x44
 800a380:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <HAL_HCD_MspInit+0xa0>)
 800a382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a38c:	2200      	movs	r2, #0
 800a38e:	2100      	movs	r1, #0
 800a390:	2043      	movs	r0, #67	; 0x43
 800a392:	f7f8 fd1a 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a396:	2043      	movs	r0, #67	; 0x43
 800a398:	f7f8 fd33 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a39c:	bf00      	nop
 800a39e:	3728      	adds	r7, #40	; 0x28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	40023800 	.word	0x40023800
 800a3a8:	40020000 	.word	0x40020000

0800a3ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff f81f 	bl	80093fe <USBH_LL_IncTimer>
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff f857 	bl	800948a <USBH_LL_Connect>
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff f860 	bl	80094b8 <USBH_LL_Disconnect>
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
 800a40c:	4613      	mov	r3, r2
 800a40e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7ff f811 	bl	8009452 <USBH_LL_PortEnabled>
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a446:	4618      	mov	r0, r3
 800a448:	f7ff f811 	bl	800946e <USBH_LL_PortDisabled>
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a462:	2b01      	cmp	r3, #1
 800a464:	d12a      	bne.n	800a4bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a466:	4a18      	ldr	r2, [pc, #96]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a15      	ldr	r2, [pc, #84]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a472:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a478:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a47c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a47e:	4b12      	ldr	r3, [pc, #72]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a480:	2208      	movs	r2, #8
 800a482:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 800a484:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a486:	2201      	movs	r2, #1
 800a488:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a48a:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a490:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a492:	2202      	movs	r2, #2
 800a494:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a496:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a498:	2200      	movs	r2, #0
 800a49a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a49c:	480a      	ldr	r0, [pc, #40]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a49e:	f7f9 faf1 	bl	8003a84 <HAL_HCD_Init>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a4a8:	f7f6 ff18 	bl	80012dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a4ac:	4806      	ldr	r0, [pc, #24]	; (800a4c8 <USBH_LL_Init+0x74>)
 800a4ae:	f7f9 fed4 	bl	800425a <HAL_HCD_GetCurrentFrame>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7fe ff92 	bl	80093e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20005e00 	.word	0x20005e00

0800a4cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7f9 fe43 	bl	800416e <HAL_HCD_Start>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 f95c 	bl	800a7ac <USBH_Get_USB_Status>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a518:	4618      	mov	r0, r3
 800a51a:	f7f9 fe4b 	bl	80041b4 <HAL_HCD_Stop>
 800a51e:	4603      	mov	r3, r0
 800a520:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	4618      	mov	r0, r3
 800a526:	f000 f941 	bl	800a7ac <USBH_Get_USB_Status>
 800a52a:	4603      	mov	r3, r0
 800a52c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a540:	2301      	movs	r3, #1
 800a542:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f9 fe93 	bl	8004276 <HAL_HCD_GetCurrentSpeed>
 800a550:	4603      	mov	r3, r0
 800a552:	2b02      	cmp	r3, #2
 800a554:	d00c      	beq.n	800a570 <USBH_LL_GetSpeed+0x38>
 800a556:	2b02      	cmp	r3, #2
 800a558:	d80d      	bhi.n	800a576 <USBH_LL_GetSpeed+0x3e>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <USBH_LL_GetSpeed+0x2c>
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d003      	beq.n	800a56a <USBH_LL_GetSpeed+0x32>
 800a562:	e008      	b.n	800a576 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
    break;
 800a568:	e008      	b.n	800a57c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a56a:	2301      	movs	r3, #1
 800a56c:	73fb      	strb	r3, [r7, #15]
    break;
 800a56e:	e005      	b.n	800a57c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a570:	2302      	movs	r3, #2
 800a572:	73fb      	strb	r3, [r7, #15]
    break;
 800a574:	e002      	b.n	800a57c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a576:	2301      	movs	r3, #1
 800a578:	73fb      	strb	r3, [r7, #15]
    break;
 800a57a:	bf00      	nop
  }
  return  speed;
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7f9 fe26 	bl	80041ee <HAL_HCD_ResetPort>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 f8ff 	bl	800a7ac <USBH_Get_USB_Status>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5ce:	78fa      	ldrb	r2, [r7, #3]
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7f9 fe2d 	bl	8004232 <HAL_HCD_HC_GetXferCount>
 800a5d8:	4603      	mov	r3, r0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5e2:	b590      	push	{r4, r7, lr}
 800a5e4:	b089      	sub	sp, #36	; 0x24
 800a5e6:	af04      	add	r7, sp, #16
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	4608      	mov	r0, r1
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	70fb      	strb	r3, [r7, #3]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70bb      	strb	r3, [r7, #2]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a60a:	787c      	ldrb	r4, [r7, #1]
 800a60c:	78ba      	ldrb	r2, [r7, #2]
 800a60e:	78f9      	ldrb	r1, [r7, #3]
 800a610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	4623      	mov	r3, r4
 800a622:	f7f9 fa91 	bl	8003b48 <HAL_HCD_HC_Init>
 800a626:	4603      	mov	r3, r0
 800a628:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 f8bd 	bl	800a7ac <USBH_Get_USB_Status>
 800a632:	4603      	mov	r3, r0
 800a634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a636:	7bbb      	ldrb	r3, [r7, #14]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd90      	pop	{r4, r7, pc}

0800a640 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	460b      	mov	r3, r1
 800a64a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a65a:	78fa      	ldrb	r2, [r7, #3]
 800a65c:	4611      	mov	r1, r2
 800a65e:	4618      	mov	r0, r3
 800a660:	f7f9 fb01 	bl	8003c66 <HAL_HCD_HC_Halt>
 800a664:	4603      	mov	r3, r0
 800a666:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a668:	7bfb      	ldrb	r3, [r7, #15]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 f89e 	bl	800a7ac <USBH_Get_USB_Status>
 800a670:	4603      	mov	r3, r0
 800a672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a674:	7bbb      	ldrb	r3, [r7, #14]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a67e:	b590      	push	{r4, r7, lr}
 800a680:	b089      	sub	sp, #36	; 0x24
 800a682:	af04      	add	r7, sp, #16
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	4608      	mov	r0, r1
 800a688:	4611      	mov	r1, r2
 800a68a:	461a      	mov	r2, r3
 800a68c:	4603      	mov	r3, r0
 800a68e:	70fb      	strb	r3, [r7, #3]
 800a690:	460b      	mov	r3, r1
 800a692:	70bb      	strb	r3, [r7, #2]
 800a694:	4613      	mov	r3, r2
 800a696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a6a6:	787c      	ldrb	r4, [r7, #1]
 800a6a8:	78ba      	ldrb	r2, [r7, #2]
 800a6aa:	78f9      	ldrb	r1, [r7, #3]
 800a6ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6b0:	9303      	str	r3, [sp, #12]
 800a6b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	f7f9 faf3 	bl	8003cac <HAL_HCD_HC_SubmitRequest>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f86d 	bl	800a7ac <USBH_Get_USB_Status>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd90      	pop	{r4, r7, pc}

0800a6e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6f2:	78fa      	ldrb	r2, [r7, #3]
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7f9 fd87 	bl	800420a <HAL_HCD_HC_GetURBState>
 800a6fc:	4603      	mov	r3, r0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	460b      	mov	r3, r1
 800a710:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d103      	bne.n	800a724 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 f870 	bl	800a804 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a724:	20c8      	movs	r0, #200	; 0xc8
 800a726:	f7f8 fa51 	bl	8002bcc <HAL_Delay>
  return USBH_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
 800a740:	4613      	mov	r3, r2
 800a742:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a74a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a74c:	78fb      	ldrb	r3, [r7, #3]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	212c      	movs	r1, #44	; 0x2c
 800a752:	fb01 f303 	mul.w	r3, r1, r3
 800a756:	4413      	add	r3, r2
 800a758:	333b      	adds	r3, #59	; 0x3b
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d009      	beq.n	800a774 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a760:	78fb      	ldrb	r3, [r7, #3]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	212c      	movs	r1, #44	; 0x2c
 800a766:	fb01 f303 	mul.w	r3, r1, r3
 800a76a:	4413      	add	r3, r2
 800a76c:	3354      	adds	r3, #84	; 0x54
 800a76e:	78ba      	ldrb	r2, [r7, #2]
 800a770:	701a      	strb	r2, [r3, #0]
 800a772:	e008      	b.n	800a786 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a774:	78fb      	ldrb	r3, [r7, #3]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	212c      	movs	r1, #44	; 0x2c
 800a77a:	fb01 f303 	mul.w	r3, r1, r3
 800a77e:	4413      	add	r3, r2
 800a780:	3355      	adds	r3, #85	; 0x55
 800a782:	78ba      	ldrb	r2, [r7, #2]
 800a784:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7f8 fa15 	bl	8002bcc <HAL_Delay>
}
 800a7a2:	bf00      	nop
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d817      	bhi.n	800a7f0 <USBH_Get_USB_Status+0x44>
 800a7c0:	a201      	add	r2, pc, #4	; (adr r2, 800a7c8 <USBH_Get_USB_Status+0x1c>)
 800a7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c6:	bf00      	nop
 800a7c8:	0800a7d9 	.word	0x0800a7d9
 800a7cc:	0800a7df 	.word	0x0800a7df
 800a7d0:	0800a7e5 	.word	0x0800a7e5
 800a7d4:	0800a7eb 	.word	0x0800a7eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73fb      	strb	r3, [r7, #15]
    break;
 800a7dc:	e00b      	b.n	800a7f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7de:	2302      	movs	r3, #2
 800a7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e2:	e008      	b.n	800a7f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e8:	e005      	b.n	800a7f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ee:	e002      	b.n	800a7f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f4:	bf00      	nop
  }
  return usb_status;
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a812:	79fb      	ldrb	r3, [r7, #7]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
 800a81c:	e001      	b.n	800a822 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a81e:	2301      	movs	r3, #1
 800a820:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	461a      	mov	r2, r3
 800a826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a82a:	4803      	ldr	r0, [pc, #12]	; (800a838 <MX_DriverVbusFS+0x34>)
 800a82c:	f7f9 f8de 	bl	80039ec <HAL_GPIO_WritePin>
}
 800a830:	bf00      	nop
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	40020000 	.word	0x40020000

0800a83c <__errno>:
 800a83c:	4b01      	ldr	r3, [pc, #4]	; (800a844 <__errno+0x8>)
 800a83e:	6818      	ldr	r0, [r3, #0]
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	20000038 	.word	0x20000038

0800a848 <__libc_init_array>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	4d0d      	ldr	r5, [pc, #52]	; (800a880 <__libc_init_array+0x38>)
 800a84c:	4c0d      	ldr	r4, [pc, #52]	; (800a884 <__libc_init_array+0x3c>)
 800a84e:	1b64      	subs	r4, r4, r5
 800a850:	10a4      	asrs	r4, r4, #2
 800a852:	2600      	movs	r6, #0
 800a854:	42a6      	cmp	r6, r4
 800a856:	d109      	bne.n	800a86c <__libc_init_array+0x24>
 800a858:	4d0b      	ldr	r5, [pc, #44]	; (800a888 <__libc_init_array+0x40>)
 800a85a:	4c0c      	ldr	r4, [pc, #48]	; (800a88c <__libc_init_array+0x44>)
 800a85c:	f001 fa6a 	bl	800bd34 <_init>
 800a860:	1b64      	subs	r4, r4, r5
 800a862:	10a4      	asrs	r4, r4, #2
 800a864:	2600      	movs	r6, #0
 800a866:	42a6      	cmp	r6, r4
 800a868:	d105      	bne.n	800a876 <__libc_init_array+0x2e>
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
 800a86c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a870:	4798      	blx	r3
 800a872:	3601      	adds	r6, #1
 800a874:	e7ee      	b.n	800a854 <__libc_init_array+0xc>
 800a876:	f855 3b04 	ldr.w	r3, [r5], #4
 800a87a:	4798      	blx	r3
 800a87c:	3601      	adds	r6, #1
 800a87e:	e7f2      	b.n	800a866 <__libc_init_array+0x1e>
 800a880:	08019f88 	.word	0x08019f88
 800a884:	08019f88 	.word	0x08019f88
 800a888:	08019f88 	.word	0x08019f88
 800a88c:	08019f8c 	.word	0x08019f8c

0800a890 <malloc>:
 800a890:	4b02      	ldr	r3, [pc, #8]	; (800a89c <malloc+0xc>)
 800a892:	4601      	mov	r1, r0
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	f000 b88d 	b.w	800a9b4 <_malloc_r>
 800a89a:	bf00      	nop
 800a89c:	20000038 	.word	0x20000038

0800a8a0 <free>:
 800a8a0:	4b02      	ldr	r3, [pc, #8]	; (800a8ac <free+0xc>)
 800a8a2:	4601      	mov	r1, r0
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	f000 b819 	b.w	800a8dc <_free_r>
 800a8aa:	bf00      	nop
 800a8ac:	20000038 	.word	0x20000038

0800a8b0 <memcpy>:
 800a8b0:	440a      	add	r2, r1
 800a8b2:	4291      	cmp	r1, r2
 800a8b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8b8:	d100      	bne.n	800a8bc <memcpy+0xc>
 800a8ba:	4770      	bx	lr
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8c6:	4291      	cmp	r1, r2
 800a8c8:	d1f9      	bne.n	800a8be <memcpy+0xe>
 800a8ca:	bd10      	pop	{r4, pc}

0800a8cc <memset>:
 800a8cc:	4402      	add	r2, r0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d100      	bne.n	800a8d6 <memset+0xa>
 800a8d4:	4770      	bx	lr
 800a8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8da:	e7f9      	b.n	800a8d0 <memset+0x4>

0800a8dc <_free_r>:
 800a8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d044      	beq.n	800a96c <_free_r+0x90>
 800a8e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e6:	9001      	str	r0, [sp, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ee:	bfb8      	it	lt
 800a8f0:	18e4      	addlt	r4, r4, r3
 800a8f2:	f000 f99f 	bl	800ac34 <__malloc_lock>
 800a8f6:	4a1e      	ldr	r2, [pc, #120]	; (800a970 <_free_r+0x94>)
 800a8f8:	9801      	ldr	r0, [sp, #4]
 800a8fa:	6813      	ldr	r3, [r2, #0]
 800a8fc:	b933      	cbnz	r3, 800a90c <_free_r+0x30>
 800a8fe:	6063      	str	r3, [r4, #4]
 800a900:	6014      	str	r4, [r2, #0]
 800a902:	b003      	add	sp, #12
 800a904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a908:	f000 b99a 	b.w	800ac40 <__malloc_unlock>
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d908      	bls.n	800a922 <_free_r+0x46>
 800a910:	6825      	ldr	r5, [r4, #0]
 800a912:	1961      	adds	r1, r4, r5
 800a914:	428b      	cmp	r3, r1
 800a916:	bf01      	itttt	eq
 800a918:	6819      	ldreq	r1, [r3, #0]
 800a91a:	685b      	ldreq	r3, [r3, #4]
 800a91c:	1949      	addeq	r1, r1, r5
 800a91e:	6021      	streq	r1, [r4, #0]
 800a920:	e7ed      	b.n	800a8fe <_free_r+0x22>
 800a922:	461a      	mov	r2, r3
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	b10b      	cbz	r3, 800a92c <_free_r+0x50>
 800a928:	42a3      	cmp	r3, r4
 800a92a:	d9fa      	bls.n	800a922 <_free_r+0x46>
 800a92c:	6811      	ldr	r1, [r2, #0]
 800a92e:	1855      	adds	r5, r2, r1
 800a930:	42a5      	cmp	r5, r4
 800a932:	d10b      	bne.n	800a94c <_free_r+0x70>
 800a934:	6824      	ldr	r4, [r4, #0]
 800a936:	4421      	add	r1, r4
 800a938:	1854      	adds	r4, r2, r1
 800a93a:	42a3      	cmp	r3, r4
 800a93c:	6011      	str	r1, [r2, #0]
 800a93e:	d1e0      	bne.n	800a902 <_free_r+0x26>
 800a940:	681c      	ldr	r4, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	6053      	str	r3, [r2, #4]
 800a946:	4421      	add	r1, r4
 800a948:	6011      	str	r1, [r2, #0]
 800a94a:	e7da      	b.n	800a902 <_free_r+0x26>
 800a94c:	d902      	bls.n	800a954 <_free_r+0x78>
 800a94e:	230c      	movs	r3, #12
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	e7d6      	b.n	800a902 <_free_r+0x26>
 800a954:	6825      	ldr	r5, [r4, #0]
 800a956:	1961      	adds	r1, r4, r5
 800a958:	428b      	cmp	r3, r1
 800a95a:	bf04      	itt	eq
 800a95c:	6819      	ldreq	r1, [r3, #0]
 800a95e:	685b      	ldreq	r3, [r3, #4]
 800a960:	6063      	str	r3, [r4, #4]
 800a962:	bf04      	itt	eq
 800a964:	1949      	addeq	r1, r1, r5
 800a966:	6021      	streq	r1, [r4, #0]
 800a968:	6054      	str	r4, [r2, #4]
 800a96a:	e7ca      	b.n	800a902 <_free_r+0x26>
 800a96c:	b003      	add	sp, #12
 800a96e:	bd30      	pop	{r4, r5, pc}
 800a970:	20006104 	.word	0x20006104

0800a974 <sbrk_aligned>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4e0e      	ldr	r6, [pc, #56]	; (800a9b0 <sbrk_aligned+0x3c>)
 800a978:	460c      	mov	r4, r1
 800a97a:	6831      	ldr	r1, [r6, #0]
 800a97c:	4605      	mov	r5, r0
 800a97e:	b911      	cbnz	r1, 800a986 <sbrk_aligned+0x12>
 800a980:	f000 f8f8 	bl	800ab74 <_sbrk_r>
 800a984:	6030      	str	r0, [r6, #0]
 800a986:	4621      	mov	r1, r4
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 f8f3 	bl	800ab74 <_sbrk_r>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d00a      	beq.n	800a9a8 <sbrk_aligned+0x34>
 800a992:	1cc4      	adds	r4, r0, #3
 800a994:	f024 0403 	bic.w	r4, r4, #3
 800a998:	42a0      	cmp	r0, r4
 800a99a:	d007      	beq.n	800a9ac <sbrk_aligned+0x38>
 800a99c:	1a21      	subs	r1, r4, r0
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 f8e8 	bl	800ab74 <_sbrk_r>
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d101      	bne.n	800a9ac <sbrk_aligned+0x38>
 800a9a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	20006108 	.word	0x20006108

0800a9b4 <_malloc_r>:
 800a9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b8:	1ccd      	adds	r5, r1, #3
 800a9ba:	f025 0503 	bic.w	r5, r5, #3
 800a9be:	3508      	adds	r5, #8
 800a9c0:	2d0c      	cmp	r5, #12
 800a9c2:	bf38      	it	cc
 800a9c4:	250c      	movcc	r5, #12
 800a9c6:	2d00      	cmp	r5, #0
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	db01      	blt.n	800a9d0 <_malloc_r+0x1c>
 800a9cc:	42a9      	cmp	r1, r5
 800a9ce:	d905      	bls.n	800a9dc <_malloc_r+0x28>
 800a9d0:	230c      	movs	r3, #12
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9dc:	4e2e      	ldr	r6, [pc, #184]	; (800aa98 <_malloc_r+0xe4>)
 800a9de:	f000 f929 	bl	800ac34 <__malloc_lock>
 800a9e2:	6833      	ldr	r3, [r6, #0]
 800a9e4:	461c      	mov	r4, r3
 800a9e6:	bb34      	cbnz	r4, 800aa36 <_malloc_r+0x82>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f7ff ffc2 	bl	800a974 <sbrk_aligned>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	d14d      	bne.n	800aa92 <_malloc_r+0xde>
 800a9f6:	6834      	ldr	r4, [r6, #0]
 800a9f8:	4626      	mov	r6, r4
 800a9fa:	2e00      	cmp	r6, #0
 800a9fc:	d140      	bne.n	800aa80 <_malloc_r+0xcc>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	4631      	mov	r1, r6
 800aa02:	4638      	mov	r0, r7
 800aa04:	eb04 0803 	add.w	r8, r4, r3
 800aa08:	f000 f8b4 	bl	800ab74 <_sbrk_r>
 800aa0c:	4580      	cmp	r8, r0
 800aa0e:	d13a      	bne.n	800aa86 <_malloc_r+0xd2>
 800aa10:	6821      	ldr	r1, [r4, #0]
 800aa12:	3503      	adds	r5, #3
 800aa14:	1a6d      	subs	r5, r5, r1
 800aa16:	f025 0503 	bic.w	r5, r5, #3
 800aa1a:	3508      	adds	r5, #8
 800aa1c:	2d0c      	cmp	r5, #12
 800aa1e:	bf38      	it	cc
 800aa20:	250c      	movcc	r5, #12
 800aa22:	4629      	mov	r1, r5
 800aa24:	4638      	mov	r0, r7
 800aa26:	f7ff ffa5 	bl	800a974 <sbrk_aligned>
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	d02b      	beq.n	800aa86 <_malloc_r+0xd2>
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	442b      	add	r3, r5
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	e00e      	b.n	800aa54 <_malloc_r+0xa0>
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	1b52      	subs	r2, r2, r5
 800aa3a:	d41e      	bmi.n	800aa7a <_malloc_r+0xc6>
 800aa3c:	2a0b      	cmp	r2, #11
 800aa3e:	d916      	bls.n	800aa6e <_malloc_r+0xba>
 800aa40:	1961      	adds	r1, r4, r5
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	6025      	str	r5, [r4, #0]
 800aa46:	bf18      	it	ne
 800aa48:	6059      	strne	r1, [r3, #4]
 800aa4a:	6863      	ldr	r3, [r4, #4]
 800aa4c:	bf08      	it	eq
 800aa4e:	6031      	streq	r1, [r6, #0]
 800aa50:	5162      	str	r2, [r4, r5]
 800aa52:	604b      	str	r3, [r1, #4]
 800aa54:	4638      	mov	r0, r7
 800aa56:	f104 060b 	add.w	r6, r4, #11
 800aa5a:	f000 f8f1 	bl	800ac40 <__malloc_unlock>
 800aa5e:	f026 0607 	bic.w	r6, r6, #7
 800aa62:	1d23      	adds	r3, r4, #4
 800aa64:	1af2      	subs	r2, r6, r3
 800aa66:	d0b6      	beq.n	800a9d6 <_malloc_r+0x22>
 800aa68:	1b9b      	subs	r3, r3, r6
 800aa6a:	50a3      	str	r3, [r4, r2]
 800aa6c:	e7b3      	b.n	800a9d6 <_malloc_r+0x22>
 800aa6e:	6862      	ldr	r2, [r4, #4]
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	bf0c      	ite	eq
 800aa74:	6032      	streq	r2, [r6, #0]
 800aa76:	605a      	strne	r2, [r3, #4]
 800aa78:	e7ec      	b.n	800aa54 <_malloc_r+0xa0>
 800aa7a:	4623      	mov	r3, r4
 800aa7c:	6864      	ldr	r4, [r4, #4]
 800aa7e:	e7b2      	b.n	800a9e6 <_malloc_r+0x32>
 800aa80:	4634      	mov	r4, r6
 800aa82:	6876      	ldr	r6, [r6, #4]
 800aa84:	e7b9      	b.n	800a9fa <_malloc_r+0x46>
 800aa86:	230c      	movs	r3, #12
 800aa88:	603b      	str	r3, [r7, #0]
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	f000 f8d8 	bl	800ac40 <__malloc_unlock>
 800aa90:	e7a1      	b.n	800a9d6 <_malloc_r+0x22>
 800aa92:	6025      	str	r5, [r4, #0]
 800aa94:	e7de      	b.n	800aa54 <_malloc_r+0xa0>
 800aa96:	bf00      	nop
 800aa98:	20006104 	.word	0x20006104

0800aa9c <srand>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <srand+0x44>)
 800aaa0:	681d      	ldr	r5, [r3, #0]
 800aaa2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	b9b3      	cbnz	r3, 800aad6 <srand+0x3a>
 800aaa8:	2018      	movs	r0, #24
 800aaaa:	f7ff fef1 	bl	800a890 <malloc>
 800aaae:	4602      	mov	r2, r0
 800aab0:	63a8      	str	r0, [r5, #56]	; 0x38
 800aab2:	b920      	cbnz	r0, 800aabe <srand+0x22>
 800aab4:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <srand+0x48>)
 800aab6:	480c      	ldr	r0, [pc, #48]	; (800aae8 <srand+0x4c>)
 800aab8:	2142      	movs	r1, #66	; 0x42
 800aaba:	f000 f88b 	bl	800abd4 <__assert_func>
 800aabe:	490b      	ldr	r1, [pc, #44]	; (800aaec <srand+0x50>)
 800aac0:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <srand+0x54>)
 800aac2:	e9c0 1300 	strd	r1, r3, [r0]
 800aac6:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <srand+0x58>)
 800aac8:	6083      	str	r3, [r0, #8]
 800aaca:	230b      	movs	r3, #11
 800aacc:	8183      	strh	r3, [r0, #12]
 800aace:	2100      	movs	r1, #0
 800aad0:	2001      	movs	r0, #1
 800aad2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aad6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aad8:	2200      	movs	r2, #0
 800aada:	611c      	str	r4, [r3, #16]
 800aadc:	615a      	str	r2, [r3, #20]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	20000038 	.word	0x20000038
 800aae4:	08019e3c 	.word	0x08019e3c
 800aae8:	08019e53 	.word	0x08019e53
 800aaec:	abcd330e 	.word	0xabcd330e
 800aaf0:	e66d1234 	.word	0xe66d1234
 800aaf4:	0005deec 	.word	0x0005deec

0800aaf8 <rand>:
 800aaf8:	4b16      	ldr	r3, [pc, #88]	; (800ab54 <rand+0x5c>)
 800aafa:	b510      	push	{r4, lr}
 800aafc:	681c      	ldr	r4, [r3, #0]
 800aafe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab00:	b9b3      	cbnz	r3, 800ab30 <rand+0x38>
 800ab02:	2018      	movs	r0, #24
 800ab04:	f7ff fec4 	bl	800a890 <malloc>
 800ab08:	63a0      	str	r0, [r4, #56]	; 0x38
 800ab0a:	b928      	cbnz	r0, 800ab18 <rand+0x20>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <rand+0x60>)
 800ab10:	4812      	ldr	r0, [pc, #72]	; (800ab5c <rand+0x64>)
 800ab12:	214e      	movs	r1, #78	; 0x4e
 800ab14:	f000 f85e 	bl	800abd4 <__assert_func>
 800ab18:	4a11      	ldr	r2, [pc, #68]	; (800ab60 <rand+0x68>)
 800ab1a:	4b12      	ldr	r3, [pc, #72]	; (800ab64 <rand+0x6c>)
 800ab1c:	e9c0 2300 	strd	r2, r3, [r0]
 800ab20:	4b11      	ldr	r3, [pc, #68]	; (800ab68 <rand+0x70>)
 800ab22:	6083      	str	r3, [r0, #8]
 800ab24:	230b      	movs	r3, #11
 800ab26:	8183      	strh	r3, [r0, #12]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ab30:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ab32:	4a0e      	ldr	r2, [pc, #56]	; (800ab6c <rand+0x74>)
 800ab34:	6920      	ldr	r0, [r4, #16]
 800ab36:	6963      	ldr	r3, [r4, #20]
 800ab38:	490d      	ldr	r1, [pc, #52]	; (800ab70 <rand+0x78>)
 800ab3a:	4342      	muls	r2, r0
 800ab3c:	fb01 2203 	mla	r2, r1, r3, r2
 800ab40:	fba0 0101 	umull	r0, r1, r0, r1
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	eb42 0001 	adc.w	r0, r2, r1
 800ab4a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ab4e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ab52:	bd10      	pop	{r4, pc}
 800ab54:	20000038 	.word	0x20000038
 800ab58:	08019e3c 	.word	0x08019e3c
 800ab5c:	08019e53 	.word	0x08019e53
 800ab60:	abcd330e 	.word	0xabcd330e
 800ab64:	e66d1234 	.word	0xe66d1234
 800ab68:	0005deec 	.word	0x0005deec
 800ab6c:	5851f42d 	.word	0x5851f42d
 800ab70:	4c957f2d 	.word	0x4c957f2d

0800ab74 <_sbrk_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4d06      	ldr	r5, [pc, #24]	; (800ab90 <_sbrk_r+0x1c>)
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	f7f6 fdb8 	bl	80016f4 <_sbrk>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d102      	bne.n	800ab8e <_sbrk_r+0x1a>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	b103      	cbz	r3, 800ab8e <_sbrk_r+0x1a>
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	2000610c 	.word	0x2000610c

0800ab94 <siprintf>:
 800ab94:	b40e      	push	{r1, r2, r3}
 800ab96:	b500      	push	{lr}
 800ab98:	b09c      	sub	sp, #112	; 0x70
 800ab9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ab9c:	9002      	str	r0, [sp, #8]
 800ab9e:	9006      	str	r0, [sp, #24]
 800aba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aba4:	4809      	ldr	r0, [pc, #36]	; (800abcc <siprintf+0x38>)
 800aba6:	9107      	str	r1, [sp, #28]
 800aba8:	9104      	str	r1, [sp, #16]
 800abaa:	4909      	ldr	r1, [pc, #36]	; (800abd0 <siprintf+0x3c>)
 800abac:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb0:	9105      	str	r1, [sp, #20]
 800abb2:	6800      	ldr	r0, [r0, #0]
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	a902      	add	r1, sp, #8
 800abb8:	f000 f8a4 	bl	800ad04 <_svfiprintf_r>
 800abbc:	9b02      	ldr	r3, [sp, #8]
 800abbe:	2200      	movs	r2, #0
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	b01c      	add	sp, #112	; 0x70
 800abc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800abc8:	b003      	add	sp, #12
 800abca:	4770      	bx	lr
 800abcc:	20000038 	.word	0x20000038
 800abd0:	ffff0208 	.word	0xffff0208

0800abd4 <__assert_func>:
 800abd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abd6:	4614      	mov	r4, r2
 800abd8:	461a      	mov	r2, r3
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <__assert_func+0x2c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4605      	mov	r5, r0
 800abe0:	68d8      	ldr	r0, [r3, #12]
 800abe2:	b14c      	cbz	r4, 800abf8 <__assert_func+0x24>
 800abe4:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <__assert_func+0x30>)
 800abe6:	9100      	str	r1, [sp, #0]
 800abe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abec:	4906      	ldr	r1, [pc, #24]	; (800ac08 <__assert_func+0x34>)
 800abee:	462b      	mov	r3, r5
 800abf0:	f000 f80e 	bl	800ac10 <fiprintf>
 800abf4:	f000 fd34 	bl	800b660 <abort>
 800abf8:	4b04      	ldr	r3, [pc, #16]	; (800ac0c <__assert_func+0x38>)
 800abfa:	461c      	mov	r4, r3
 800abfc:	e7f3      	b.n	800abe6 <__assert_func+0x12>
 800abfe:	bf00      	nop
 800ac00:	20000038 	.word	0x20000038
 800ac04:	08019eae 	.word	0x08019eae
 800ac08:	08019ebb 	.word	0x08019ebb
 800ac0c:	08019ee9 	.word	0x08019ee9

0800ac10 <fiprintf>:
 800ac10:	b40e      	push	{r1, r2, r3}
 800ac12:	b503      	push	{r0, r1, lr}
 800ac14:	4601      	mov	r1, r0
 800ac16:	ab03      	add	r3, sp, #12
 800ac18:	4805      	ldr	r0, [pc, #20]	; (800ac30 <fiprintf+0x20>)
 800ac1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1e:	6800      	ldr	r0, [r0, #0]
 800ac20:	9301      	str	r3, [sp, #4]
 800ac22:	f000 f999 	bl	800af58 <_vfiprintf_r>
 800ac26:	b002      	add	sp, #8
 800ac28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac2c:	b003      	add	sp, #12
 800ac2e:	4770      	bx	lr
 800ac30:	20000038 	.word	0x20000038

0800ac34 <__malloc_lock>:
 800ac34:	4801      	ldr	r0, [pc, #4]	; (800ac3c <__malloc_lock+0x8>)
 800ac36:	f000 bed3 	b.w	800b9e0 <__retarget_lock_acquire_recursive>
 800ac3a:	bf00      	nop
 800ac3c:	20006110 	.word	0x20006110

0800ac40 <__malloc_unlock>:
 800ac40:	4801      	ldr	r0, [pc, #4]	; (800ac48 <__malloc_unlock+0x8>)
 800ac42:	f000 bece 	b.w	800b9e2 <__retarget_lock_release_recursive>
 800ac46:	bf00      	nop
 800ac48:	20006110 	.word	0x20006110

0800ac4c <__ssputs_r>:
 800ac4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	688e      	ldr	r6, [r1, #8]
 800ac52:	429e      	cmp	r6, r3
 800ac54:	4682      	mov	sl, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	4690      	mov	r8, r2
 800ac5a:	461f      	mov	r7, r3
 800ac5c:	d838      	bhi.n	800acd0 <__ssputs_r+0x84>
 800ac5e:	898a      	ldrh	r2, [r1, #12]
 800ac60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac64:	d032      	beq.n	800accc <__ssputs_r+0x80>
 800ac66:	6825      	ldr	r5, [r4, #0]
 800ac68:	6909      	ldr	r1, [r1, #16]
 800ac6a:	eba5 0901 	sub.w	r9, r5, r1
 800ac6e:	6965      	ldr	r5, [r4, #20]
 800ac70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac78:	3301      	adds	r3, #1
 800ac7a:	444b      	add	r3, r9
 800ac7c:	106d      	asrs	r5, r5, #1
 800ac7e:	429d      	cmp	r5, r3
 800ac80:	bf38      	it	cc
 800ac82:	461d      	movcc	r5, r3
 800ac84:	0553      	lsls	r3, r2, #21
 800ac86:	d531      	bpl.n	800acec <__ssputs_r+0xa0>
 800ac88:	4629      	mov	r1, r5
 800ac8a:	f7ff fe93 	bl	800a9b4 <_malloc_r>
 800ac8e:	4606      	mov	r6, r0
 800ac90:	b950      	cbnz	r0, 800aca8 <__ssputs_r+0x5c>
 800ac92:	230c      	movs	r3, #12
 800ac94:	f8ca 3000 	str.w	r3, [sl]
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295
 800aca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca8:	6921      	ldr	r1, [r4, #16]
 800acaa:	464a      	mov	r2, r9
 800acac:	f7ff fe00 	bl	800a8b0 <memcpy>
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	6126      	str	r6, [r4, #16]
 800acbe:	6165      	str	r5, [r4, #20]
 800acc0:	444e      	add	r6, r9
 800acc2:	eba5 0509 	sub.w	r5, r5, r9
 800acc6:	6026      	str	r6, [r4, #0]
 800acc8:	60a5      	str	r5, [r4, #8]
 800acca:	463e      	mov	r6, r7
 800accc:	42be      	cmp	r6, r7
 800acce:	d900      	bls.n	800acd2 <__ssputs_r+0x86>
 800acd0:	463e      	mov	r6, r7
 800acd2:	6820      	ldr	r0, [r4, #0]
 800acd4:	4632      	mov	r2, r6
 800acd6:	4641      	mov	r1, r8
 800acd8:	f000 feea 	bl	800bab0 <memmove>
 800acdc:	68a3      	ldr	r3, [r4, #8]
 800acde:	1b9b      	subs	r3, r3, r6
 800ace0:	60a3      	str	r3, [r4, #8]
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	4433      	add	r3, r6
 800ace6:	6023      	str	r3, [r4, #0]
 800ace8:	2000      	movs	r0, #0
 800acea:	e7db      	b.n	800aca4 <__ssputs_r+0x58>
 800acec:	462a      	mov	r2, r5
 800acee:	f000 fef9 	bl	800bae4 <_realloc_r>
 800acf2:	4606      	mov	r6, r0
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d1e1      	bne.n	800acbc <__ssputs_r+0x70>
 800acf8:	6921      	ldr	r1, [r4, #16]
 800acfa:	4650      	mov	r0, sl
 800acfc:	f7ff fdee 	bl	800a8dc <_free_r>
 800ad00:	e7c7      	b.n	800ac92 <__ssputs_r+0x46>
	...

0800ad04 <_svfiprintf_r>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	4698      	mov	r8, r3
 800ad0a:	898b      	ldrh	r3, [r1, #12]
 800ad0c:	061b      	lsls	r3, r3, #24
 800ad0e:	b09d      	sub	sp, #116	; 0x74
 800ad10:	4607      	mov	r7, r0
 800ad12:	460d      	mov	r5, r1
 800ad14:	4614      	mov	r4, r2
 800ad16:	d50e      	bpl.n	800ad36 <_svfiprintf_r+0x32>
 800ad18:	690b      	ldr	r3, [r1, #16]
 800ad1a:	b963      	cbnz	r3, 800ad36 <_svfiprintf_r+0x32>
 800ad1c:	2140      	movs	r1, #64	; 0x40
 800ad1e:	f7ff fe49 	bl	800a9b4 <_malloc_r>
 800ad22:	6028      	str	r0, [r5, #0]
 800ad24:	6128      	str	r0, [r5, #16]
 800ad26:	b920      	cbnz	r0, 800ad32 <_svfiprintf_r+0x2e>
 800ad28:	230c      	movs	r3, #12
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad30:	e0d1      	b.n	800aed6 <_svfiprintf_r+0x1d2>
 800ad32:	2340      	movs	r3, #64	; 0x40
 800ad34:	616b      	str	r3, [r5, #20]
 800ad36:	2300      	movs	r3, #0
 800ad38:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3a:	2320      	movs	r3, #32
 800ad3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad44:	2330      	movs	r3, #48	; 0x30
 800ad46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aef0 <_svfiprintf_r+0x1ec>
 800ad4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad4e:	f04f 0901 	mov.w	r9, #1
 800ad52:	4623      	mov	r3, r4
 800ad54:	469a      	mov	sl, r3
 800ad56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad5a:	b10a      	cbz	r2, 800ad60 <_svfiprintf_r+0x5c>
 800ad5c:	2a25      	cmp	r2, #37	; 0x25
 800ad5e:	d1f9      	bne.n	800ad54 <_svfiprintf_r+0x50>
 800ad60:	ebba 0b04 	subs.w	fp, sl, r4
 800ad64:	d00b      	beq.n	800ad7e <_svfiprintf_r+0x7a>
 800ad66:	465b      	mov	r3, fp
 800ad68:	4622      	mov	r2, r4
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	f7ff ff6d 	bl	800ac4c <__ssputs_r>
 800ad72:	3001      	adds	r0, #1
 800ad74:	f000 80aa 	beq.w	800aecc <_svfiprintf_r+0x1c8>
 800ad78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad7a:	445a      	add	r2, fp
 800ad7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 80a2 	beq.w	800aecc <_svfiprintf_r+0x1c8>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad92:	f10a 0a01 	add.w	sl, sl, #1
 800ad96:	9304      	str	r3, [sp, #16]
 800ad98:	9307      	str	r3, [sp, #28]
 800ad9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad9e:	931a      	str	r3, [sp, #104]	; 0x68
 800ada0:	4654      	mov	r4, sl
 800ada2:	2205      	movs	r2, #5
 800ada4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada8:	4851      	ldr	r0, [pc, #324]	; (800aef0 <_svfiprintf_r+0x1ec>)
 800adaa:	f7f5 fa19 	bl	80001e0 <memchr>
 800adae:	9a04      	ldr	r2, [sp, #16]
 800adb0:	b9d8      	cbnz	r0, 800adea <_svfiprintf_r+0xe6>
 800adb2:	06d0      	lsls	r0, r2, #27
 800adb4:	bf44      	itt	mi
 800adb6:	2320      	movmi	r3, #32
 800adb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adbc:	0711      	lsls	r1, r2, #28
 800adbe:	bf44      	itt	mi
 800adc0:	232b      	movmi	r3, #43	; 0x2b
 800adc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc6:	f89a 3000 	ldrb.w	r3, [sl]
 800adca:	2b2a      	cmp	r3, #42	; 0x2a
 800adcc:	d015      	beq.n	800adfa <_svfiprintf_r+0xf6>
 800adce:	9a07      	ldr	r2, [sp, #28]
 800add0:	4654      	mov	r4, sl
 800add2:	2000      	movs	r0, #0
 800add4:	f04f 0c0a 	mov.w	ip, #10
 800add8:	4621      	mov	r1, r4
 800adda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adde:	3b30      	subs	r3, #48	; 0x30
 800ade0:	2b09      	cmp	r3, #9
 800ade2:	d94e      	bls.n	800ae82 <_svfiprintf_r+0x17e>
 800ade4:	b1b0      	cbz	r0, 800ae14 <_svfiprintf_r+0x110>
 800ade6:	9207      	str	r2, [sp, #28]
 800ade8:	e014      	b.n	800ae14 <_svfiprintf_r+0x110>
 800adea:	eba0 0308 	sub.w	r3, r0, r8
 800adee:	fa09 f303 	lsl.w	r3, r9, r3
 800adf2:	4313      	orrs	r3, r2
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	46a2      	mov	sl, r4
 800adf8:	e7d2      	b.n	800ada0 <_svfiprintf_r+0x9c>
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	1d19      	adds	r1, r3, #4
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	9103      	str	r1, [sp, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bfbb      	ittet	lt
 800ae06:	425b      	neglt	r3, r3
 800ae08:	f042 0202 	orrlt.w	r2, r2, #2
 800ae0c:	9307      	strge	r3, [sp, #28]
 800ae0e:	9307      	strlt	r3, [sp, #28]
 800ae10:	bfb8      	it	lt
 800ae12:	9204      	strlt	r2, [sp, #16]
 800ae14:	7823      	ldrb	r3, [r4, #0]
 800ae16:	2b2e      	cmp	r3, #46	; 0x2e
 800ae18:	d10c      	bne.n	800ae34 <_svfiprintf_r+0x130>
 800ae1a:	7863      	ldrb	r3, [r4, #1]
 800ae1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae1e:	d135      	bne.n	800ae8c <_svfiprintf_r+0x188>
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	1d1a      	adds	r2, r3, #4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	9203      	str	r2, [sp, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfb8      	it	lt
 800ae2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae30:	3402      	adds	r4, #2
 800ae32:	9305      	str	r3, [sp, #20]
 800ae34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af00 <_svfiprintf_r+0x1fc>
 800ae38:	7821      	ldrb	r1, [r4, #0]
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	f7f5 f9cf 	bl	80001e0 <memchr>
 800ae42:	b140      	cbz	r0, 800ae56 <_svfiprintf_r+0x152>
 800ae44:	2340      	movs	r3, #64	; 0x40
 800ae46:	eba0 000a 	sub.w	r0, r0, sl
 800ae4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	4303      	orrs	r3, r0
 800ae52:	3401      	adds	r4, #1
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae5a:	4826      	ldr	r0, [pc, #152]	; (800aef4 <_svfiprintf_r+0x1f0>)
 800ae5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae60:	2206      	movs	r2, #6
 800ae62:	f7f5 f9bd 	bl	80001e0 <memchr>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d038      	beq.n	800aedc <_svfiprintf_r+0x1d8>
 800ae6a:	4b23      	ldr	r3, [pc, #140]	; (800aef8 <_svfiprintf_r+0x1f4>)
 800ae6c:	bb1b      	cbnz	r3, 800aeb6 <_svfiprintf_r+0x1b2>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	3307      	adds	r3, #7
 800ae72:	f023 0307 	bic.w	r3, r3, #7
 800ae76:	3308      	adds	r3, #8
 800ae78:	9303      	str	r3, [sp, #12]
 800ae7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7c:	4433      	add	r3, r6
 800ae7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae80:	e767      	b.n	800ad52 <_svfiprintf_r+0x4e>
 800ae82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae86:	460c      	mov	r4, r1
 800ae88:	2001      	movs	r0, #1
 800ae8a:	e7a5      	b.n	800add8 <_svfiprintf_r+0xd4>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	3401      	adds	r4, #1
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	4619      	mov	r1, r3
 800ae94:	f04f 0c0a 	mov.w	ip, #10
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae9e:	3a30      	subs	r2, #48	; 0x30
 800aea0:	2a09      	cmp	r2, #9
 800aea2:	d903      	bls.n	800aeac <_svfiprintf_r+0x1a8>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d0c5      	beq.n	800ae34 <_svfiprintf_r+0x130>
 800aea8:	9105      	str	r1, [sp, #20]
 800aeaa:	e7c3      	b.n	800ae34 <_svfiprintf_r+0x130>
 800aeac:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e7f0      	b.n	800ae98 <_svfiprintf_r+0x194>
 800aeb6:	ab03      	add	r3, sp, #12
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	462a      	mov	r2, r5
 800aebc:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <_svfiprintf_r+0x1f8>)
 800aebe:	a904      	add	r1, sp, #16
 800aec0:	4638      	mov	r0, r7
 800aec2:	f3af 8000 	nop.w
 800aec6:	1c42      	adds	r2, r0, #1
 800aec8:	4606      	mov	r6, r0
 800aeca:	d1d6      	bne.n	800ae7a <_svfiprintf_r+0x176>
 800aecc:	89ab      	ldrh	r3, [r5, #12]
 800aece:	065b      	lsls	r3, r3, #25
 800aed0:	f53f af2c 	bmi.w	800ad2c <_svfiprintf_r+0x28>
 800aed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aed6:	b01d      	add	sp, #116	; 0x74
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	ab03      	add	r3, sp, #12
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	462a      	mov	r2, r5
 800aee2:	4b06      	ldr	r3, [pc, #24]	; (800aefc <_svfiprintf_r+0x1f8>)
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	4638      	mov	r0, r7
 800aee8:	f000 f9d4 	bl	800b294 <_printf_i>
 800aeec:	e7eb      	b.n	800aec6 <_svfiprintf_r+0x1c2>
 800aeee:	bf00      	nop
 800aef0:	08019eea 	.word	0x08019eea
 800aef4:	08019ef4 	.word	0x08019ef4
 800aef8:	00000000 	.word	0x00000000
 800aefc:	0800ac4d 	.word	0x0800ac4d
 800af00:	08019ef0 	.word	0x08019ef0

0800af04 <__sfputc_r>:
 800af04:	6893      	ldr	r3, [r2, #8]
 800af06:	3b01      	subs	r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	b410      	push	{r4}
 800af0c:	6093      	str	r3, [r2, #8]
 800af0e:	da08      	bge.n	800af22 <__sfputc_r+0x1e>
 800af10:	6994      	ldr	r4, [r2, #24]
 800af12:	42a3      	cmp	r3, r4
 800af14:	db01      	blt.n	800af1a <__sfputc_r+0x16>
 800af16:	290a      	cmp	r1, #10
 800af18:	d103      	bne.n	800af22 <__sfputc_r+0x1e>
 800af1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af1e:	f000 badf 	b.w	800b4e0 <__swbuf_r>
 800af22:	6813      	ldr	r3, [r2, #0]
 800af24:	1c58      	adds	r0, r3, #1
 800af26:	6010      	str	r0, [r2, #0]
 800af28:	7019      	strb	r1, [r3, #0]
 800af2a:	4608      	mov	r0, r1
 800af2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <__sfputs_r>:
 800af32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af34:	4606      	mov	r6, r0
 800af36:	460f      	mov	r7, r1
 800af38:	4614      	mov	r4, r2
 800af3a:	18d5      	adds	r5, r2, r3
 800af3c:	42ac      	cmp	r4, r5
 800af3e:	d101      	bne.n	800af44 <__sfputs_r+0x12>
 800af40:	2000      	movs	r0, #0
 800af42:	e007      	b.n	800af54 <__sfputs_r+0x22>
 800af44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af48:	463a      	mov	r2, r7
 800af4a:	4630      	mov	r0, r6
 800af4c:	f7ff ffda 	bl	800af04 <__sfputc_r>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d1f3      	bne.n	800af3c <__sfputs_r+0xa>
 800af54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af58 <_vfiprintf_r>:
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	460d      	mov	r5, r1
 800af5e:	b09d      	sub	sp, #116	; 0x74
 800af60:	4614      	mov	r4, r2
 800af62:	4698      	mov	r8, r3
 800af64:	4606      	mov	r6, r0
 800af66:	b118      	cbz	r0, 800af70 <_vfiprintf_r+0x18>
 800af68:	6983      	ldr	r3, [r0, #24]
 800af6a:	b90b      	cbnz	r3, 800af70 <_vfiprintf_r+0x18>
 800af6c:	f000 fc9a 	bl	800b8a4 <__sinit>
 800af70:	4b89      	ldr	r3, [pc, #548]	; (800b198 <_vfiprintf_r+0x240>)
 800af72:	429d      	cmp	r5, r3
 800af74:	d11b      	bne.n	800afae <_vfiprintf_r+0x56>
 800af76:	6875      	ldr	r5, [r6, #4]
 800af78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af7a:	07d9      	lsls	r1, r3, #31
 800af7c:	d405      	bmi.n	800af8a <_vfiprintf_r+0x32>
 800af7e:	89ab      	ldrh	r3, [r5, #12]
 800af80:	059a      	lsls	r2, r3, #22
 800af82:	d402      	bmi.n	800af8a <_vfiprintf_r+0x32>
 800af84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af86:	f000 fd2b 	bl	800b9e0 <__retarget_lock_acquire_recursive>
 800af8a:	89ab      	ldrh	r3, [r5, #12]
 800af8c:	071b      	lsls	r3, r3, #28
 800af8e:	d501      	bpl.n	800af94 <_vfiprintf_r+0x3c>
 800af90:	692b      	ldr	r3, [r5, #16]
 800af92:	b9eb      	cbnz	r3, 800afd0 <_vfiprintf_r+0x78>
 800af94:	4629      	mov	r1, r5
 800af96:	4630      	mov	r0, r6
 800af98:	f000 faf4 	bl	800b584 <__swsetup_r>
 800af9c:	b1c0      	cbz	r0, 800afd0 <_vfiprintf_r+0x78>
 800af9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa0:	07dc      	lsls	r4, r3, #31
 800afa2:	d50e      	bpl.n	800afc2 <_vfiprintf_r+0x6a>
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	b01d      	add	sp, #116	; 0x74
 800afaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afae:	4b7b      	ldr	r3, [pc, #492]	; (800b19c <_vfiprintf_r+0x244>)
 800afb0:	429d      	cmp	r5, r3
 800afb2:	d101      	bne.n	800afb8 <_vfiprintf_r+0x60>
 800afb4:	68b5      	ldr	r5, [r6, #8]
 800afb6:	e7df      	b.n	800af78 <_vfiprintf_r+0x20>
 800afb8:	4b79      	ldr	r3, [pc, #484]	; (800b1a0 <_vfiprintf_r+0x248>)
 800afba:	429d      	cmp	r5, r3
 800afbc:	bf08      	it	eq
 800afbe:	68f5      	ldreq	r5, [r6, #12]
 800afc0:	e7da      	b.n	800af78 <_vfiprintf_r+0x20>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	0598      	lsls	r0, r3, #22
 800afc6:	d4ed      	bmi.n	800afa4 <_vfiprintf_r+0x4c>
 800afc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afca:	f000 fd0a 	bl	800b9e2 <__retarget_lock_release_recursive>
 800afce:	e7e9      	b.n	800afa4 <_vfiprintf_r+0x4c>
 800afd0:	2300      	movs	r3, #0
 800afd2:	9309      	str	r3, [sp, #36]	; 0x24
 800afd4:	2320      	movs	r3, #32
 800afd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afda:	f8cd 800c 	str.w	r8, [sp, #12]
 800afde:	2330      	movs	r3, #48	; 0x30
 800afe0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1a4 <_vfiprintf_r+0x24c>
 800afe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afe8:	f04f 0901 	mov.w	r9, #1
 800afec:	4623      	mov	r3, r4
 800afee:	469a      	mov	sl, r3
 800aff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aff4:	b10a      	cbz	r2, 800affa <_vfiprintf_r+0xa2>
 800aff6:	2a25      	cmp	r2, #37	; 0x25
 800aff8:	d1f9      	bne.n	800afee <_vfiprintf_r+0x96>
 800affa:	ebba 0b04 	subs.w	fp, sl, r4
 800affe:	d00b      	beq.n	800b018 <_vfiprintf_r+0xc0>
 800b000:	465b      	mov	r3, fp
 800b002:	4622      	mov	r2, r4
 800b004:	4629      	mov	r1, r5
 800b006:	4630      	mov	r0, r6
 800b008:	f7ff ff93 	bl	800af32 <__sfputs_r>
 800b00c:	3001      	adds	r0, #1
 800b00e:	f000 80aa 	beq.w	800b166 <_vfiprintf_r+0x20e>
 800b012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b014:	445a      	add	r2, fp
 800b016:	9209      	str	r2, [sp, #36]	; 0x24
 800b018:	f89a 3000 	ldrb.w	r3, [sl]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 80a2 	beq.w	800b166 <_vfiprintf_r+0x20e>
 800b022:	2300      	movs	r3, #0
 800b024:	f04f 32ff 	mov.w	r2, #4294967295
 800b028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b02c:	f10a 0a01 	add.w	sl, sl, #1
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	9307      	str	r3, [sp, #28]
 800b034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b038:	931a      	str	r3, [sp, #104]	; 0x68
 800b03a:	4654      	mov	r4, sl
 800b03c:	2205      	movs	r2, #5
 800b03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b042:	4858      	ldr	r0, [pc, #352]	; (800b1a4 <_vfiprintf_r+0x24c>)
 800b044:	f7f5 f8cc 	bl	80001e0 <memchr>
 800b048:	9a04      	ldr	r2, [sp, #16]
 800b04a:	b9d8      	cbnz	r0, 800b084 <_vfiprintf_r+0x12c>
 800b04c:	06d1      	lsls	r1, r2, #27
 800b04e:	bf44      	itt	mi
 800b050:	2320      	movmi	r3, #32
 800b052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b056:	0713      	lsls	r3, r2, #28
 800b058:	bf44      	itt	mi
 800b05a:	232b      	movmi	r3, #43	; 0x2b
 800b05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b060:	f89a 3000 	ldrb.w	r3, [sl]
 800b064:	2b2a      	cmp	r3, #42	; 0x2a
 800b066:	d015      	beq.n	800b094 <_vfiprintf_r+0x13c>
 800b068:	9a07      	ldr	r2, [sp, #28]
 800b06a:	4654      	mov	r4, sl
 800b06c:	2000      	movs	r0, #0
 800b06e:	f04f 0c0a 	mov.w	ip, #10
 800b072:	4621      	mov	r1, r4
 800b074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b078:	3b30      	subs	r3, #48	; 0x30
 800b07a:	2b09      	cmp	r3, #9
 800b07c:	d94e      	bls.n	800b11c <_vfiprintf_r+0x1c4>
 800b07e:	b1b0      	cbz	r0, 800b0ae <_vfiprintf_r+0x156>
 800b080:	9207      	str	r2, [sp, #28]
 800b082:	e014      	b.n	800b0ae <_vfiprintf_r+0x156>
 800b084:	eba0 0308 	sub.w	r3, r0, r8
 800b088:	fa09 f303 	lsl.w	r3, r9, r3
 800b08c:	4313      	orrs	r3, r2
 800b08e:	9304      	str	r3, [sp, #16]
 800b090:	46a2      	mov	sl, r4
 800b092:	e7d2      	b.n	800b03a <_vfiprintf_r+0xe2>
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	1d19      	adds	r1, r3, #4
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	9103      	str	r1, [sp, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	bfbb      	ittet	lt
 800b0a0:	425b      	neglt	r3, r3
 800b0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0a6:	9307      	strge	r3, [sp, #28]
 800b0a8:	9307      	strlt	r3, [sp, #28]
 800b0aa:	bfb8      	it	lt
 800b0ac:	9204      	strlt	r2, [sp, #16]
 800b0ae:	7823      	ldrb	r3, [r4, #0]
 800b0b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0b2:	d10c      	bne.n	800b0ce <_vfiprintf_r+0x176>
 800b0b4:	7863      	ldrb	r3, [r4, #1]
 800b0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b8:	d135      	bne.n	800b126 <_vfiprintf_r+0x1ce>
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	1d1a      	adds	r2, r3, #4
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	9203      	str	r2, [sp, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	bfb8      	it	lt
 800b0c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0ca:	3402      	adds	r4, #2
 800b0cc:	9305      	str	r3, [sp, #20]
 800b0ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1b4 <_vfiprintf_r+0x25c>
 800b0d2:	7821      	ldrb	r1, [r4, #0]
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	4650      	mov	r0, sl
 800b0d8:	f7f5 f882 	bl	80001e0 <memchr>
 800b0dc:	b140      	cbz	r0, 800b0f0 <_vfiprintf_r+0x198>
 800b0de:	2340      	movs	r3, #64	; 0x40
 800b0e0:	eba0 000a 	sub.w	r0, r0, sl
 800b0e4:	fa03 f000 	lsl.w	r0, r3, r0
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	4303      	orrs	r3, r0
 800b0ec:	3401      	adds	r4, #1
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f4:	482c      	ldr	r0, [pc, #176]	; (800b1a8 <_vfiprintf_r+0x250>)
 800b0f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0fa:	2206      	movs	r2, #6
 800b0fc:	f7f5 f870 	bl	80001e0 <memchr>
 800b100:	2800      	cmp	r0, #0
 800b102:	d03f      	beq.n	800b184 <_vfiprintf_r+0x22c>
 800b104:	4b29      	ldr	r3, [pc, #164]	; (800b1ac <_vfiprintf_r+0x254>)
 800b106:	bb1b      	cbnz	r3, 800b150 <_vfiprintf_r+0x1f8>
 800b108:	9b03      	ldr	r3, [sp, #12]
 800b10a:	3307      	adds	r3, #7
 800b10c:	f023 0307 	bic.w	r3, r3, #7
 800b110:	3308      	adds	r3, #8
 800b112:	9303      	str	r3, [sp, #12]
 800b114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b116:	443b      	add	r3, r7
 800b118:	9309      	str	r3, [sp, #36]	; 0x24
 800b11a:	e767      	b.n	800afec <_vfiprintf_r+0x94>
 800b11c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b120:	460c      	mov	r4, r1
 800b122:	2001      	movs	r0, #1
 800b124:	e7a5      	b.n	800b072 <_vfiprintf_r+0x11a>
 800b126:	2300      	movs	r3, #0
 800b128:	3401      	adds	r4, #1
 800b12a:	9305      	str	r3, [sp, #20]
 800b12c:	4619      	mov	r1, r3
 800b12e:	f04f 0c0a 	mov.w	ip, #10
 800b132:	4620      	mov	r0, r4
 800b134:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b138:	3a30      	subs	r2, #48	; 0x30
 800b13a:	2a09      	cmp	r2, #9
 800b13c:	d903      	bls.n	800b146 <_vfiprintf_r+0x1ee>
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0c5      	beq.n	800b0ce <_vfiprintf_r+0x176>
 800b142:	9105      	str	r1, [sp, #20]
 800b144:	e7c3      	b.n	800b0ce <_vfiprintf_r+0x176>
 800b146:	fb0c 2101 	mla	r1, ip, r1, r2
 800b14a:	4604      	mov	r4, r0
 800b14c:	2301      	movs	r3, #1
 800b14e:	e7f0      	b.n	800b132 <_vfiprintf_r+0x1da>
 800b150:	ab03      	add	r3, sp, #12
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	462a      	mov	r2, r5
 800b156:	4b16      	ldr	r3, [pc, #88]	; (800b1b0 <_vfiprintf_r+0x258>)
 800b158:	a904      	add	r1, sp, #16
 800b15a:	4630      	mov	r0, r6
 800b15c:	f3af 8000 	nop.w
 800b160:	4607      	mov	r7, r0
 800b162:	1c78      	adds	r0, r7, #1
 800b164:	d1d6      	bne.n	800b114 <_vfiprintf_r+0x1bc>
 800b166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b168:	07d9      	lsls	r1, r3, #31
 800b16a:	d405      	bmi.n	800b178 <_vfiprintf_r+0x220>
 800b16c:	89ab      	ldrh	r3, [r5, #12]
 800b16e:	059a      	lsls	r2, r3, #22
 800b170:	d402      	bmi.n	800b178 <_vfiprintf_r+0x220>
 800b172:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b174:	f000 fc35 	bl	800b9e2 <__retarget_lock_release_recursive>
 800b178:	89ab      	ldrh	r3, [r5, #12]
 800b17a:	065b      	lsls	r3, r3, #25
 800b17c:	f53f af12 	bmi.w	800afa4 <_vfiprintf_r+0x4c>
 800b180:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b182:	e711      	b.n	800afa8 <_vfiprintf_r+0x50>
 800b184:	ab03      	add	r3, sp, #12
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	462a      	mov	r2, r5
 800b18a:	4b09      	ldr	r3, [pc, #36]	; (800b1b0 <_vfiprintf_r+0x258>)
 800b18c:	a904      	add	r1, sp, #16
 800b18e:	4630      	mov	r0, r6
 800b190:	f000 f880 	bl	800b294 <_printf_i>
 800b194:	e7e4      	b.n	800b160 <_vfiprintf_r+0x208>
 800b196:	bf00      	nop
 800b198:	08019f40 	.word	0x08019f40
 800b19c:	08019f60 	.word	0x08019f60
 800b1a0:	08019f20 	.word	0x08019f20
 800b1a4:	08019eea 	.word	0x08019eea
 800b1a8:	08019ef4 	.word	0x08019ef4
 800b1ac:	00000000 	.word	0x00000000
 800b1b0:	0800af33 	.word	0x0800af33
 800b1b4:	08019ef0 	.word	0x08019ef0

0800b1b8 <_printf_common>:
 800b1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1bc:	4616      	mov	r6, r2
 800b1be:	4699      	mov	r9, r3
 800b1c0:	688a      	ldr	r2, [r1, #8]
 800b1c2:	690b      	ldr	r3, [r1, #16]
 800b1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	bfb8      	it	lt
 800b1cc:	4613      	movlt	r3, r2
 800b1ce:	6033      	str	r3, [r6, #0]
 800b1d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1d4:	4607      	mov	r7, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	b10a      	cbz	r2, 800b1de <_printf_common+0x26>
 800b1da:	3301      	adds	r3, #1
 800b1dc:	6033      	str	r3, [r6, #0]
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	0699      	lsls	r1, r3, #26
 800b1e2:	bf42      	ittt	mi
 800b1e4:	6833      	ldrmi	r3, [r6, #0]
 800b1e6:	3302      	addmi	r3, #2
 800b1e8:	6033      	strmi	r3, [r6, #0]
 800b1ea:	6825      	ldr	r5, [r4, #0]
 800b1ec:	f015 0506 	ands.w	r5, r5, #6
 800b1f0:	d106      	bne.n	800b200 <_printf_common+0x48>
 800b1f2:	f104 0a19 	add.w	sl, r4, #25
 800b1f6:	68e3      	ldr	r3, [r4, #12]
 800b1f8:	6832      	ldr	r2, [r6, #0]
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	42ab      	cmp	r3, r5
 800b1fe:	dc26      	bgt.n	800b24e <_printf_common+0x96>
 800b200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b204:	1e13      	subs	r3, r2, #0
 800b206:	6822      	ldr	r2, [r4, #0]
 800b208:	bf18      	it	ne
 800b20a:	2301      	movne	r3, #1
 800b20c:	0692      	lsls	r2, r2, #26
 800b20e:	d42b      	bmi.n	800b268 <_printf_common+0xb0>
 800b210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b214:	4649      	mov	r1, r9
 800b216:	4638      	mov	r0, r7
 800b218:	47c0      	blx	r8
 800b21a:	3001      	adds	r0, #1
 800b21c:	d01e      	beq.n	800b25c <_printf_common+0xa4>
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	68e5      	ldr	r5, [r4, #12]
 800b222:	6832      	ldr	r2, [r6, #0]
 800b224:	f003 0306 	and.w	r3, r3, #6
 800b228:	2b04      	cmp	r3, #4
 800b22a:	bf08      	it	eq
 800b22c:	1aad      	subeq	r5, r5, r2
 800b22e:	68a3      	ldr	r3, [r4, #8]
 800b230:	6922      	ldr	r2, [r4, #16]
 800b232:	bf0c      	ite	eq
 800b234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b238:	2500      	movne	r5, #0
 800b23a:	4293      	cmp	r3, r2
 800b23c:	bfc4      	itt	gt
 800b23e:	1a9b      	subgt	r3, r3, r2
 800b240:	18ed      	addgt	r5, r5, r3
 800b242:	2600      	movs	r6, #0
 800b244:	341a      	adds	r4, #26
 800b246:	42b5      	cmp	r5, r6
 800b248:	d11a      	bne.n	800b280 <_printf_common+0xc8>
 800b24a:	2000      	movs	r0, #0
 800b24c:	e008      	b.n	800b260 <_printf_common+0xa8>
 800b24e:	2301      	movs	r3, #1
 800b250:	4652      	mov	r2, sl
 800b252:	4649      	mov	r1, r9
 800b254:	4638      	mov	r0, r7
 800b256:	47c0      	blx	r8
 800b258:	3001      	adds	r0, #1
 800b25a:	d103      	bne.n	800b264 <_printf_common+0xac>
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b264:	3501      	adds	r5, #1
 800b266:	e7c6      	b.n	800b1f6 <_printf_common+0x3e>
 800b268:	18e1      	adds	r1, r4, r3
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	2030      	movs	r0, #48	; 0x30
 800b26e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b272:	4422      	add	r2, r4
 800b274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b27c:	3302      	adds	r3, #2
 800b27e:	e7c7      	b.n	800b210 <_printf_common+0x58>
 800b280:	2301      	movs	r3, #1
 800b282:	4622      	mov	r2, r4
 800b284:	4649      	mov	r1, r9
 800b286:	4638      	mov	r0, r7
 800b288:	47c0      	blx	r8
 800b28a:	3001      	adds	r0, #1
 800b28c:	d0e6      	beq.n	800b25c <_printf_common+0xa4>
 800b28e:	3601      	adds	r6, #1
 800b290:	e7d9      	b.n	800b246 <_printf_common+0x8e>
	...

0800b294 <_printf_i>:
 800b294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b298:	7e0f      	ldrb	r7, [r1, #24]
 800b29a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b29c:	2f78      	cmp	r7, #120	; 0x78
 800b29e:	4691      	mov	r9, r2
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	469a      	mov	sl, r3
 800b2a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2aa:	d807      	bhi.n	800b2bc <_printf_i+0x28>
 800b2ac:	2f62      	cmp	r7, #98	; 0x62
 800b2ae:	d80a      	bhi.n	800b2c6 <_printf_i+0x32>
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	f000 80d8 	beq.w	800b466 <_printf_i+0x1d2>
 800b2b6:	2f58      	cmp	r7, #88	; 0x58
 800b2b8:	f000 80a3 	beq.w	800b402 <_printf_i+0x16e>
 800b2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2c4:	e03a      	b.n	800b33c <_printf_i+0xa8>
 800b2c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2ca:	2b15      	cmp	r3, #21
 800b2cc:	d8f6      	bhi.n	800b2bc <_printf_i+0x28>
 800b2ce:	a101      	add	r1, pc, #4	; (adr r1, 800b2d4 <_printf_i+0x40>)
 800b2d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2d4:	0800b32d 	.word	0x0800b32d
 800b2d8:	0800b341 	.word	0x0800b341
 800b2dc:	0800b2bd 	.word	0x0800b2bd
 800b2e0:	0800b2bd 	.word	0x0800b2bd
 800b2e4:	0800b2bd 	.word	0x0800b2bd
 800b2e8:	0800b2bd 	.word	0x0800b2bd
 800b2ec:	0800b341 	.word	0x0800b341
 800b2f0:	0800b2bd 	.word	0x0800b2bd
 800b2f4:	0800b2bd 	.word	0x0800b2bd
 800b2f8:	0800b2bd 	.word	0x0800b2bd
 800b2fc:	0800b2bd 	.word	0x0800b2bd
 800b300:	0800b44d 	.word	0x0800b44d
 800b304:	0800b371 	.word	0x0800b371
 800b308:	0800b42f 	.word	0x0800b42f
 800b30c:	0800b2bd 	.word	0x0800b2bd
 800b310:	0800b2bd 	.word	0x0800b2bd
 800b314:	0800b46f 	.word	0x0800b46f
 800b318:	0800b2bd 	.word	0x0800b2bd
 800b31c:	0800b371 	.word	0x0800b371
 800b320:	0800b2bd 	.word	0x0800b2bd
 800b324:	0800b2bd 	.word	0x0800b2bd
 800b328:	0800b437 	.word	0x0800b437
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	1d1a      	adds	r2, r3, #4
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	602a      	str	r2, [r5, #0]
 800b334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b33c:	2301      	movs	r3, #1
 800b33e:	e0a3      	b.n	800b488 <_printf_i+0x1f4>
 800b340:	6820      	ldr	r0, [r4, #0]
 800b342:	6829      	ldr	r1, [r5, #0]
 800b344:	0606      	lsls	r6, r0, #24
 800b346:	f101 0304 	add.w	r3, r1, #4
 800b34a:	d50a      	bpl.n	800b362 <_printf_i+0xce>
 800b34c:	680e      	ldr	r6, [r1, #0]
 800b34e:	602b      	str	r3, [r5, #0]
 800b350:	2e00      	cmp	r6, #0
 800b352:	da03      	bge.n	800b35c <_printf_i+0xc8>
 800b354:	232d      	movs	r3, #45	; 0x2d
 800b356:	4276      	negs	r6, r6
 800b358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b35c:	485e      	ldr	r0, [pc, #376]	; (800b4d8 <_printf_i+0x244>)
 800b35e:	230a      	movs	r3, #10
 800b360:	e019      	b.n	800b396 <_printf_i+0x102>
 800b362:	680e      	ldr	r6, [r1, #0]
 800b364:	602b      	str	r3, [r5, #0]
 800b366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b36a:	bf18      	it	ne
 800b36c:	b236      	sxthne	r6, r6
 800b36e:	e7ef      	b.n	800b350 <_printf_i+0xbc>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	6820      	ldr	r0, [r4, #0]
 800b374:	1d19      	adds	r1, r3, #4
 800b376:	6029      	str	r1, [r5, #0]
 800b378:	0601      	lsls	r1, r0, #24
 800b37a:	d501      	bpl.n	800b380 <_printf_i+0xec>
 800b37c:	681e      	ldr	r6, [r3, #0]
 800b37e:	e002      	b.n	800b386 <_printf_i+0xf2>
 800b380:	0646      	lsls	r6, r0, #25
 800b382:	d5fb      	bpl.n	800b37c <_printf_i+0xe8>
 800b384:	881e      	ldrh	r6, [r3, #0]
 800b386:	4854      	ldr	r0, [pc, #336]	; (800b4d8 <_printf_i+0x244>)
 800b388:	2f6f      	cmp	r7, #111	; 0x6f
 800b38a:	bf0c      	ite	eq
 800b38c:	2308      	moveq	r3, #8
 800b38e:	230a      	movne	r3, #10
 800b390:	2100      	movs	r1, #0
 800b392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b396:	6865      	ldr	r5, [r4, #4]
 800b398:	60a5      	str	r5, [r4, #8]
 800b39a:	2d00      	cmp	r5, #0
 800b39c:	bfa2      	ittt	ge
 800b39e:	6821      	ldrge	r1, [r4, #0]
 800b3a0:	f021 0104 	bicge.w	r1, r1, #4
 800b3a4:	6021      	strge	r1, [r4, #0]
 800b3a6:	b90e      	cbnz	r6, 800b3ac <_printf_i+0x118>
 800b3a8:	2d00      	cmp	r5, #0
 800b3aa:	d04d      	beq.n	800b448 <_printf_i+0x1b4>
 800b3ac:	4615      	mov	r5, r2
 800b3ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3b2:	fb03 6711 	mls	r7, r3, r1, r6
 800b3b6:	5dc7      	ldrb	r7, [r0, r7]
 800b3b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3bc:	4637      	mov	r7, r6
 800b3be:	42bb      	cmp	r3, r7
 800b3c0:	460e      	mov	r6, r1
 800b3c2:	d9f4      	bls.n	800b3ae <_printf_i+0x11a>
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d10b      	bne.n	800b3e0 <_printf_i+0x14c>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	07de      	lsls	r6, r3, #31
 800b3cc:	d508      	bpl.n	800b3e0 <_printf_i+0x14c>
 800b3ce:	6923      	ldr	r3, [r4, #16]
 800b3d0:	6861      	ldr	r1, [r4, #4]
 800b3d2:	4299      	cmp	r1, r3
 800b3d4:	bfde      	ittt	le
 800b3d6:	2330      	movle	r3, #48	; 0x30
 800b3d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3e0:	1b52      	subs	r2, r2, r5
 800b3e2:	6122      	str	r2, [r4, #16]
 800b3e4:	f8cd a000 	str.w	sl, [sp]
 800b3e8:	464b      	mov	r3, r9
 800b3ea:	aa03      	add	r2, sp, #12
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	f7ff fee2 	bl	800b1b8 <_printf_common>
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d14c      	bne.n	800b492 <_printf_i+0x1fe>
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fc:	b004      	add	sp, #16
 800b3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b402:	4835      	ldr	r0, [pc, #212]	; (800b4d8 <_printf_i+0x244>)
 800b404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b408:	6829      	ldr	r1, [r5, #0]
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b410:	6029      	str	r1, [r5, #0]
 800b412:	061d      	lsls	r5, r3, #24
 800b414:	d514      	bpl.n	800b440 <_printf_i+0x1ac>
 800b416:	07df      	lsls	r7, r3, #31
 800b418:	bf44      	itt	mi
 800b41a:	f043 0320 	orrmi.w	r3, r3, #32
 800b41e:	6023      	strmi	r3, [r4, #0]
 800b420:	b91e      	cbnz	r6, 800b42a <_printf_i+0x196>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	f023 0320 	bic.w	r3, r3, #32
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	2310      	movs	r3, #16
 800b42c:	e7b0      	b.n	800b390 <_printf_i+0xfc>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	f043 0320 	orr.w	r3, r3, #32
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	2378      	movs	r3, #120	; 0x78
 800b438:	4828      	ldr	r0, [pc, #160]	; (800b4dc <_printf_i+0x248>)
 800b43a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b43e:	e7e3      	b.n	800b408 <_printf_i+0x174>
 800b440:	0659      	lsls	r1, r3, #25
 800b442:	bf48      	it	mi
 800b444:	b2b6      	uxthmi	r6, r6
 800b446:	e7e6      	b.n	800b416 <_printf_i+0x182>
 800b448:	4615      	mov	r5, r2
 800b44a:	e7bb      	b.n	800b3c4 <_printf_i+0x130>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	6826      	ldr	r6, [r4, #0]
 800b450:	6961      	ldr	r1, [r4, #20]
 800b452:	1d18      	adds	r0, r3, #4
 800b454:	6028      	str	r0, [r5, #0]
 800b456:	0635      	lsls	r5, r6, #24
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	d501      	bpl.n	800b460 <_printf_i+0x1cc>
 800b45c:	6019      	str	r1, [r3, #0]
 800b45e:	e002      	b.n	800b466 <_printf_i+0x1d2>
 800b460:	0670      	lsls	r0, r6, #25
 800b462:	d5fb      	bpl.n	800b45c <_printf_i+0x1c8>
 800b464:	8019      	strh	r1, [r3, #0]
 800b466:	2300      	movs	r3, #0
 800b468:	6123      	str	r3, [r4, #16]
 800b46a:	4615      	mov	r5, r2
 800b46c:	e7ba      	b.n	800b3e4 <_printf_i+0x150>
 800b46e:	682b      	ldr	r3, [r5, #0]
 800b470:	1d1a      	adds	r2, r3, #4
 800b472:	602a      	str	r2, [r5, #0]
 800b474:	681d      	ldr	r5, [r3, #0]
 800b476:	6862      	ldr	r2, [r4, #4]
 800b478:	2100      	movs	r1, #0
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7f4 feb0 	bl	80001e0 <memchr>
 800b480:	b108      	cbz	r0, 800b486 <_printf_i+0x1f2>
 800b482:	1b40      	subs	r0, r0, r5
 800b484:	6060      	str	r0, [r4, #4]
 800b486:	6863      	ldr	r3, [r4, #4]
 800b488:	6123      	str	r3, [r4, #16]
 800b48a:	2300      	movs	r3, #0
 800b48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b490:	e7a8      	b.n	800b3e4 <_printf_i+0x150>
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	462a      	mov	r2, r5
 800b496:	4649      	mov	r1, r9
 800b498:	4640      	mov	r0, r8
 800b49a:	47d0      	blx	sl
 800b49c:	3001      	adds	r0, #1
 800b49e:	d0ab      	beq.n	800b3f8 <_printf_i+0x164>
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	079b      	lsls	r3, r3, #30
 800b4a4:	d413      	bmi.n	800b4ce <_printf_i+0x23a>
 800b4a6:	68e0      	ldr	r0, [r4, #12]
 800b4a8:	9b03      	ldr	r3, [sp, #12]
 800b4aa:	4298      	cmp	r0, r3
 800b4ac:	bfb8      	it	lt
 800b4ae:	4618      	movlt	r0, r3
 800b4b0:	e7a4      	b.n	800b3fc <_printf_i+0x168>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	47d0      	blx	sl
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d09b      	beq.n	800b3f8 <_printf_i+0x164>
 800b4c0:	3501      	adds	r5, #1
 800b4c2:	68e3      	ldr	r3, [r4, #12]
 800b4c4:	9903      	ldr	r1, [sp, #12]
 800b4c6:	1a5b      	subs	r3, r3, r1
 800b4c8:	42ab      	cmp	r3, r5
 800b4ca:	dcf2      	bgt.n	800b4b2 <_printf_i+0x21e>
 800b4cc:	e7eb      	b.n	800b4a6 <_printf_i+0x212>
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	f104 0619 	add.w	r6, r4, #25
 800b4d4:	e7f5      	b.n	800b4c2 <_printf_i+0x22e>
 800b4d6:	bf00      	nop
 800b4d8:	08019efb 	.word	0x08019efb
 800b4dc:	08019f0c 	.word	0x08019f0c

0800b4e0 <__swbuf_r>:
 800b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e2:	460e      	mov	r6, r1
 800b4e4:	4614      	mov	r4, r2
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	b118      	cbz	r0, 800b4f2 <__swbuf_r+0x12>
 800b4ea:	6983      	ldr	r3, [r0, #24]
 800b4ec:	b90b      	cbnz	r3, 800b4f2 <__swbuf_r+0x12>
 800b4ee:	f000 f9d9 	bl	800b8a4 <__sinit>
 800b4f2:	4b21      	ldr	r3, [pc, #132]	; (800b578 <__swbuf_r+0x98>)
 800b4f4:	429c      	cmp	r4, r3
 800b4f6:	d12b      	bne.n	800b550 <__swbuf_r+0x70>
 800b4f8:	686c      	ldr	r4, [r5, #4]
 800b4fa:	69a3      	ldr	r3, [r4, #24]
 800b4fc:	60a3      	str	r3, [r4, #8]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	071a      	lsls	r2, r3, #28
 800b502:	d52f      	bpl.n	800b564 <__swbuf_r+0x84>
 800b504:	6923      	ldr	r3, [r4, #16]
 800b506:	b36b      	cbz	r3, 800b564 <__swbuf_r+0x84>
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	6820      	ldr	r0, [r4, #0]
 800b50c:	1ac0      	subs	r0, r0, r3
 800b50e:	6963      	ldr	r3, [r4, #20]
 800b510:	b2f6      	uxtb	r6, r6
 800b512:	4283      	cmp	r3, r0
 800b514:	4637      	mov	r7, r6
 800b516:	dc04      	bgt.n	800b522 <__swbuf_r+0x42>
 800b518:	4621      	mov	r1, r4
 800b51a:	4628      	mov	r0, r5
 800b51c:	f000 f92e 	bl	800b77c <_fflush_r>
 800b520:	bb30      	cbnz	r0, 800b570 <__swbuf_r+0x90>
 800b522:	68a3      	ldr	r3, [r4, #8]
 800b524:	3b01      	subs	r3, #1
 800b526:	60a3      	str	r3, [r4, #8]
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	6022      	str	r2, [r4, #0]
 800b52e:	701e      	strb	r6, [r3, #0]
 800b530:	6963      	ldr	r3, [r4, #20]
 800b532:	3001      	adds	r0, #1
 800b534:	4283      	cmp	r3, r0
 800b536:	d004      	beq.n	800b542 <__swbuf_r+0x62>
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	07db      	lsls	r3, r3, #31
 800b53c:	d506      	bpl.n	800b54c <__swbuf_r+0x6c>
 800b53e:	2e0a      	cmp	r6, #10
 800b540:	d104      	bne.n	800b54c <__swbuf_r+0x6c>
 800b542:	4621      	mov	r1, r4
 800b544:	4628      	mov	r0, r5
 800b546:	f000 f919 	bl	800b77c <_fflush_r>
 800b54a:	b988      	cbnz	r0, 800b570 <__swbuf_r+0x90>
 800b54c:	4638      	mov	r0, r7
 800b54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b550:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <__swbuf_r+0x9c>)
 800b552:	429c      	cmp	r4, r3
 800b554:	d101      	bne.n	800b55a <__swbuf_r+0x7a>
 800b556:	68ac      	ldr	r4, [r5, #8]
 800b558:	e7cf      	b.n	800b4fa <__swbuf_r+0x1a>
 800b55a:	4b09      	ldr	r3, [pc, #36]	; (800b580 <__swbuf_r+0xa0>)
 800b55c:	429c      	cmp	r4, r3
 800b55e:	bf08      	it	eq
 800b560:	68ec      	ldreq	r4, [r5, #12]
 800b562:	e7ca      	b.n	800b4fa <__swbuf_r+0x1a>
 800b564:	4621      	mov	r1, r4
 800b566:	4628      	mov	r0, r5
 800b568:	f000 f80c 	bl	800b584 <__swsetup_r>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d0cb      	beq.n	800b508 <__swbuf_r+0x28>
 800b570:	f04f 37ff 	mov.w	r7, #4294967295
 800b574:	e7ea      	b.n	800b54c <__swbuf_r+0x6c>
 800b576:	bf00      	nop
 800b578:	08019f40 	.word	0x08019f40
 800b57c:	08019f60 	.word	0x08019f60
 800b580:	08019f20 	.word	0x08019f20

0800b584 <__swsetup_r>:
 800b584:	4b32      	ldr	r3, [pc, #200]	; (800b650 <__swsetup_r+0xcc>)
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	681d      	ldr	r5, [r3, #0]
 800b58a:	4606      	mov	r6, r0
 800b58c:	460c      	mov	r4, r1
 800b58e:	b125      	cbz	r5, 800b59a <__swsetup_r+0x16>
 800b590:	69ab      	ldr	r3, [r5, #24]
 800b592:	b913      	cbnz	r3, 800b59a <__swsetup_r+0x16>
 800b594:	4628      	mov	r0, r5
 800b596:	f000 f985 	bl	800b8a4 <__sinit>
 800b59a:	4b2e      	ldr	r3, [pc, #184]	; (800b654 <__swsetup_r+0xd0>)
 800b59c:	429c      	cmp	r4, r3
 800b59e:	d10f      	bne.n	800b5c0 <__swsetup_r+0x3c>
 800b5a0:	686c      	ldr	r4, [r5, #4]
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5a8:	0719      	lsls	r1, r3, #28
 800b5aa:	d42c      	bmi.n	800b606 <__swsetup_r+0x82>
 800b5ac:	06dd      	lsls	r5, r3, #27
 800b5ae:	d411      	bmi.n	800b5d4 <__swsetup_r+0x50>
 800b5b0:	2309      	movs	r3, #9
 800b5b2:	6033      	str	r3, [r6, #0]
 800b5b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5b8:	81a3      	strh	r3, [r4, #12]
 800b5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b5be:	e03e      	b.n	800b63e <__swsetup_r+0xba>
 800b5c0:	4b25      	ldr	r3, [pc, #148]	; (800b658 <__swsetup_r+0xd4>)
 800b5c2:	429c      	cmp	r4, r3
 800b5c4:	d101      	bne.n	800b5ca <__swsetup_r+0x46>
 800b5c6:	68ac      	ldr	r4, [r5, #8]
 800b5c8:	e7eb      	b.n	800b5a2 <__swsetup_r+0x1e>
 800b5ca:	4b24      	ldr	r3, [pc, #144]	; (800b65c <__swsetup_r+0xd8>)
 800b5cc:	429c      	cmp	r4, r3
 800b5ce:	bf08      	it	eq
 800b5d0:	68ec      	ldreq	r4, [r5, #12]
 800b5d2:	e7e6      	b.n	800b5a2 <__swsetup_r+0x1e>
 800b5d4:	0758      	lsls	r0, r3, #29
 800b5d6:	d512      	bpl.n	800b5fe <__swsetup_r+0x7a>
 800b5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5da:	b141      	cbz	r1, 800b5ee <__swsetup_r+0x6a>
 800b5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5e0:	4299      	cmp	r1, r3
 800b5e2:	d002      	beq.n	800b5ea <__swsetup_r+0x66>
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f7ff f979 	bl	800a8dc <_free_r>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	6363      	str	r3, [r4, #52]	; 0x34
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	6063      	str	r3, [r4, #4]
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	89a3      	ldrh	r3, [r4, #12]
 800b600:	f043 0308 	orr.w	r3, r3, #8
 800b604:	81a3      	strh	r3, [r4, #12]
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	b94b      	cbnz	r3, 800b61e <__swsetup_r+0x9a>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b614:	d003      	beq.n	800b61e <__swsetup_r+0x9a>
 800b616:	4621      	mov	r1, r4
 800b618:	4630      	mov	r0, r6
 800b61a:	f000 fa09 	bl	800ba30 <__smakebuf_r>
 800b61e:	89a0      	ldrh	r0, [r4, #12]
 800b620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b624:	f010 0301 	ands.w	r3, r0, #1
 800b628:	d00a      	beq.n	800b640 <__swsetup_r+0xbc>
 800b62a:	2300      	movs	r3, #0
 800b62c:	60a3      	str	r3, [r4, #8]
 800b62e:	6963      	ldr	r3, [r4, #20]
 800b630:	425b      	negs	r3, r3
 800b632:	61a3      	str	r3, [r4, #24]
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	b943      	cbnz	r3, 800b64a <__swsetup_r+0xc6>
 800b638:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b63c:	d1ba      	bne.n	800b5b4 <__swsetup_r+0x30>
 800b63e:	bd70      	pop	{r4, r5, r6, pc}
 800b640:	0781      	lsls	r1, r0, #30
 800b642:	bf58      	it	pl
 800b644:	6963      	ldrpl	r3, [r4, #20]
 800b646:	60a3      	str	r3, [r4, #8]
 800b648:	e7f4      	b.n	800b634 <__swsetup_r+0xb0>
 800b64a:	2000      	movs	r0, #0
 800b64c:	e7f7      	b.n	800b63e <__swsetup_r+0xba>
 800b64e:	bf00      	nop
 800b650:	20000038 	.word	0x20000038
 800b654:	08019f40 	.word	0x08019f40
 800b658:	08019f60 	.word	0x08019f60
 800b65c:	08019f20 	.word	0x08019f20

0800b660 <abort>:
 800b660:	b508      	push	{r3, lr}
 800b662:	2006      	movs	r0, #6
 800b664:	f000 fa96 	bl	800bb94 <raise>
 800b668:	2001      	movs	r0, #1
 800b66a:	f7f5 ffcb 	bl	8001604 <_exit>
	...

0800b670 <__sflush_r>:
 800b670:	898a      	ldrh	r2, [r1, #12]
 800b672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b676:	4605      	mov	r5, r0
 800b678:	0710      	lsls	r0, r2, #28
 800b67a:	460c      	mov	r4, r1
 800b67c:	d458      	bmi.n	800b730 <__sflush_r+0xc0>
 800b67e:	684b      	ldr	r3, [r1, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	dc05      	bgt.n	800b690 <__sflush_r+0x20>
 800b684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b686:	2b00      	cmp	r3, #0
 800b688:	dc02      	bgt.n	800b690 <__sflush_r+0x20>
 800b68a:	2000      	movs	r0, #0
 800b68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b692:	2e00      	cmp	r6, #0
 800b694:	d0f9      	beq.n	800b68a <__sflush_r+0x1a>
 800b696:	2300      	movs	r3, #0
 800b698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b69c:	682f      	ldr	r7, [r5, #0]
 800b69e:	602b      	str	r3, [r5, #0]
 800b6a0:	d032      	beq.n	800b708 <__sflush_r+0x98>
 800b6a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	075a      	lsls	r2, r3, #29
 800b6a8:	d505      	bpl.n	800b6b6 <__sflush_r+0x46>
 800b6aa:	6863      	ldr	r3, [r4, #4]
 800b6ac:	1ac0      	subs	r0, r0, r3
 800b6ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6b0:	b10b      	cbz	r3, 800b6b6 <__sflush_r+0x46>
 800b6b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6b4:	1ac0      	subs	r0, r0, r3
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6bc:	6a21      	ldr	r1, [r4, #32]
 800b6be:	4628      	mov	r0, r5
 800b6c0:	47b0      	blx	r6
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	89a3      	ldrh	r3, [r4, #12]
 800b6c6:	d106      	bne.n	800b6d6 <__sflush_r+0x66>
 800b6c8:	6829      	ldr	r1, [r5, #0]
 800b6ca:	291d      	cmp	r1, #29
 800b6cc:	d82c      	bhi.n	800b728 <__sflush_r+0xb8>
 800b6ce:	4a2a      	ldr	r2, [pc, #168]	; (800b778 <__sflush_r+0x108>)
 800b6d0:	40ca      	lsrs	r2, r1
 800b6d2:	07d6      	lsls	r6, r2, #31
 800b6d4:	d528      	bpl.n	800b728 <__sflush_r+0xb8>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	6062      	str	r2, [r4, #4]
 800b6da:	04d9      	lsls	r1, r3, #19
 800b6dc:	6922      	ldr	r2, [r4, #16]
 800b6de:	6022      	str	r2, [r4, #0]
 800b6e0:	d504      	bpl.n	800b6ec <__sflush_r+0x7c>
 800b6e2:	1c42      	adds	r2, r0, #1
 800b6e4:	d101      	bne.n	800b6ea <__sflush_r+0x7a>
 800b6e6:	682b      	ldr	r3, [r5, #0]
 800b6e8:	b903      	cbnz	r3, 800b6ec <__sflush_r+0x7c>
 800b6ea:	6560      	str	r0, [r4, #84]	; 0x54
 800b6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ee:	602f      	str	r7, [r5, #0]
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	d0ca      	beq.n	800b68a <__sflush_r+0x1a>
 800b6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6f8:	4299      	cmp	r1, r3
 800b6fa:	d002      	beq.n	800b702 <__sflush_r+0x92>
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	f7ff f8ed 	bl	800a8dc <_free_r>
 800b702:	2000      	movs	r0, #0
 800b704:	6360      	str	r0, [r4, #52]	; 0x34
 800b706:	e7c1      	b.n	800b68c <__sflush_r+0x1c>
 800b708:	6a21      	ldr	r1, [r4, #32]
 800b70a:	2301      	movs	r3, #1
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b0      	blx	r6
 800b710:	1c41      	adds	r1, r0, #1
 800b712:	d1c7      	bne.n	800b6a4 <__sflush_r+0x34>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0c4      	beq.n	800b6a4 <__sflush_r+0x34>
 800b71a:	2b1d      	cmp	r3, #29
 800b71c:	d001      	beq.n	800b722 <__sflush_r+0xb2>
 800b71e:	2b16      	cmp	r3, #22
 800b720:	d101      	bne.n	800b726 <__sflush_r+0xb6>
 800b722:	602f      	str	r7, [r5, #0]
 800b724:	e7b1      	b.n	800b68a <__sflush_r+0x1a>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b72c:	81a3      	strh	r3, [r4, #12]
 800b72e:	e7ad      	b.n	800b68c <__sflush_r+0x1c>
 800b730:	690f      	ldr	r7, [r1, #16]
 800b732:	2f00      	cmp	r7, #0
 800b734:	d0a9      	beq.n	800b68a <__sflush_r+0x1a>
 800b736:	0793      	lsls	r3, r2, #30
 800b738:	680e      	ldr	r6, [r1, #0]
 800b73a:	bf08      	it	eq
 800b73c:	694b      	ldreq	r3, [r1, #20]
 800b73e:	600f      	str	r7, [r1, #0]
 800b740:	bf18      	it	ne
 800b742:	2300      	movne	r3, #0
 800b744:	eba6 0807 	sub.w	r8, r6, r7
 800b748:	608b      	str	r3, [r1, #8]
 800b74a:	f1b8 0f00 	cmp.w	r8, #0
 800b74e:	dd9c      	ble.n	800b68a <__sflush_r+0x1a>
 800b750:	6a21      	ldr	r1, [r4, #32]
 800b752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b754:	4643      	mov	r3, r8
 800b756:	463a      	mov	r2, r7
 800b758:	4628      	mov	r0, r5
 800b75a:	47b0      	blx	r6
 800b75c:	2800      	cmp	r0, #0
 800b75e:	dc06      	bgt.n	800b76e <__sflush_r+0xfe>
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	f04f 30ff 	mov.w	r0, #4294967295
 800b76c:	e78e      	b.n	800b68c <__sflush_r+0x1c>
 800b76e:	4407      	add	r7, r0
 800b770:	eba8 0800 	sub.w	r8, r8, r0
 800b774:	e7e9      	b.n	800b74a <__sflush_r+0xda>
 800b776:	bf00      	nop
 800b778:	20400001 	.word	0x20400001

0800b77c <_fflush_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	690b      	ldr	r3, [r1, #16]
 800b780:	4605      	mov	r5, r0
 800b782:	460c      	mov	r4, r1
 800b784:	b913      	cbnz	r3, 800b78c <_fflush_r+0x10>
 800b786:	2500      	movs	r5, #0
 800b788:	4628      	mov	r0, r5
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	b118      	cbz	r0, 800b796 <_fflush_r+0x1a>
 800b78e:	6983      	ldr	r3, [r0, #24]
 800b790:	b90b      	cbnz	r3, 800b796 <_fflush_r+0x1a>
 800b792:	f000 f887 	bl	800b8a4 <__sinit>
 800b796:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <_fflush_r+0x6c>)
 800b798:	429c      	cmp	r4, r3
 800b79a:	d11b      	bne.n	800b7d4 <_fflush_r+0x58>
 800b79c:	686c      	ldr	r4, [r5, #4]
 800b79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d0ef      	beq.n	800b786 <_fflush_r+0xa>
 800b7a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7a8:	07d0      	lsls	r0, r2, #31
 800b7aa:	d404      	bmi.n	800b7b6 <_fflush_r+0x3a>
 800b7ac:	0599      	lsls	r1, r3, #22
 800b7ae:	d402      	bmi.n	800b7b6 <_fflush_r+0x3a>
 800b7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7b2:	f000 f915 	bl	800b9e0 <__retarget_lock_acquire_recursive>
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	f7ff ff59 	bl	800b670 <__sflush_r>
 800b7be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7c0:	07da      	lsls	r2, r3, #31
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	d4e0      	bmi.n	800b788 <_fflush_r+0xc>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	059b      	lsls	r3, r3, #22
 800b7ca:	d4dd      	bmi.n	800b788 <_fflush_r+0xc>
 800b7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ce:	f000 f908 	bl	800b9e2 <__retarget_lock_release_recursive>
 800b7d2:	e7d9      	b.n	800b788 <_fflush_r+0xc>
 800b7d4:	4b05      	ldr	r3, [pc, #20]	; (800b7ec <_fflush_r+0x70>)
 800b7d6:	429c      	cmp	r4, r3
 800b7d8:	d101      	bne.n	800b7de <_fflush_r+0x62>
 800b7da:	68ac      	ldr	r4, [r5, #8]
 800b7dc:	e7df      	b.n	800b79e <_fflush_r+0x22>
 800b7de:	4b04      	ldr	r3, [pc, #16]	; (800b7f0 <_fflush_r+0x74>)
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	bf08      	it	eq
 800b7e4:	68ec      	ldreq	r4, [r5, #12]
 800b7e6:	e7da      	b.n	800b79e <_fflush_r+0x22>
 800b7e8:	08019f40 	.word	0x08019f40
 800b7ec:	08019f60 	.word	0x08019f60
 800b7f0:	08019f20 	.word	0x08019f20

0800b7f4 <std>:
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	b510      	push	{r4, lr}
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b7fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b802:	6083      	str	r3, [r0, #8]
 800b804:	8181      	strh	r1, [r0, #12]
 800b806:	6643      	str	r3, [r0, #100]	; 0x64
 800b808:	81c2      	strh	r2, [r0, #14]
 800b80a:	6183      	str	r3, [r0, #24]
 800b80c:	4619      	mov	r1, r3
 800b80e:	2208      	movs	r2, #8
 800b810:	305c      	adds	r0, #92	; 0x5c
 800b812:	f7ff f85b 	bl	800a8cc <memset>
 800b816:	4b05      	ldr	r3, [pc, #20]	; (800b82c <std+0x38>)
 800b818:	6263      	str	r3, [r4, #36]	; 0x24
 800b81a:	4b05      	ldr	r3, [pc, #20]	; (800b830 <std+0x3c>)
 800b81c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b81e:	4b05      	ldr	r3, [pc, #20]	; (800b834 <std+0x40>)
 800b820:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b822:	4b05      	ldr	r3, [pc, #20]	; (800b838 <std+0x44>)
 800b824:	6224      	str	r4, [r4, #32]
 800b826:	6323      	str	r3, [r4, #48]	; 0x30
 800b828:	bd10      	pop	{r4, pc}
 800b82a:	bf00      	nop
 800b82c:	0800bbcd 	.word	0x0800bbcd
 800b830:	0800bbef 	.word	0x0800bbef
 800b834:	0800bc27 	.word	0x0800bc27
 800b838:	0800bc4b 	.word	0x0800bc4b

0800b83c <_cleanup_r>:
 800b83c:	4901      	ldr	r1, [pc, #4]	; (800b844 <_cleanup_r+0x8>)
 800b83e:	f000 b8af 	b.w	800b9a0 <_fwalk_reent>
 800b842:	bf00      	nop
 800b844:	0800b77d 	.word	0x0800b77d

0800b848 <__sfmoreglue>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	2268      	movs	r2, #104	; 0x68
 800b84c:	1e4d      	subs	r5, r1, #1
 800b84e:	4355      	muls	r5, r2
 800b850:	460e      	mov	r6, r1
 800b852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b856:	f7ff f8ad 	bl	800a9b4 <_malloc_r>
 800b85a:	4604      	mov	r4, r0
 800b85c:	b140      	cbz	r0, 800b870 <__sfmoreglue+0x28>
 800b85e:	2100      	movs	r1, #0
 800b860:	e9c0 1600 	strd	r1, r6, [r0]
 800b864:	300c      	adds	r0, #12
 800b866:	60a0      	str	r0, [r4, #8]
 800b868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b86c:	f7ff f82e 	bl	800a8cc <memset>
 800b870:	4620      	mov	r0, r4
 800b872:	bd70      	pop	{r4, r5, r6, pc}

0800b874 <__sfp_lock_acquire>:
 800b874:	4801      	ldr	r0, [pc, #4]	; (800b87c <__sfp_lock_acquire+0x8>)
 800b876:	f000 b8b3 	b.w	800b9e0 <__retarget_lock_acquire_recursive>
 800b87a:	bf00      	nop
 800b87c:	20006111 	.word	0x20006111

0800b880 <__sfp_lock_release>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__sfp_lock_release+0x8>)
 800b882:	f000 b8ae 	b.w	800b9e2 <__retarget_lock_release_recursive>
 800b886:	bf00      	nop
 800b888:	20006111 	.word	0x20006111

0800b88c <__sinit_lock_acquire>:
 800b88c:	4801      	ldr	r0, [pc, #4]	; (800b894 <__sinit_lock_acquire+0x8>)
 800b88e:	f000 b8a7 	b.w	800b9e0 <__retarget_lock_acquire_recursive>
 800b892:	bf00      	nop
 800b894:	20006112 	.word	0x20006112

0800b898 <__sinit_lock_release>:
 800b898:	4801      	ldr	r0, [pc, #4]	; (800b8a0 <__sinit_lock_release+0x8>)
 800b89a:	f000 b8a2 	b.w	800b9e2 <__retarget_lock_release_recursive>
 800b89e:	bf00      	nop
 800b8a0:	20006112 	.word	0x20006112

0800b8a4 <__sinit>:
 800b8a4:	b510      	push	{r4, lr}
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	f7ff fff0 	bl	800b88c <__sinit_lock_acquire>
 800b8ac:	69a3      	ldr	r3, [r4, #24]
 800b8ae:	b11b      	cbz	r3, 800b8b8 <__sinit+0x14>
 800b8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8b4:	f7ff bff0 	b.w	800b898 <__sinit_lock_release>
 800b8b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8bc:	6523      	str	r3, [r4, #80]	; 0x50
 800b8be:	4b13      	ldr	r3, [pc, #76]	; (800b90c <__sinit+0x68>)
 800b8c0:	4a13      	ldr	r2, [pc, #76]	; (800b910 <__sinit+0x6c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8c6:	42a3      	cmp	r3, r4
 800b8c8:	bf04      	itt	eq
 800b8ca:	2301      	moveq	r3, #1
 800b8cc:	61a3      	streq	r3, [r4, #24]
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 f820 	bl	800b914 <__sfp>
 800b8d4:	6060      	str	r0, [r4, #4]
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 f81c 	bl	800b914 <__sfp>
 800b8dc:	60a0      	str	r0, [r4, #8]
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 f818 	bl	800b914 <__sfp>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	60e0      	str	r0, [r4, #12]
 800b8e8:	2104      	movs	r1, #4
 800b8ea:	6860      	ldr	r0, [r4, #4]
 800b8ec:	f7ff ff82 	bl	800b7f4 <std>
 800b8f0:	68a0      	ldr	r0, [r4, #8]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	2109      	movs	r1, #9
 800b8f6:	f7ff ff7d 	bl	800b7f4 <std>
 800b8fa:	68e0      	ldr	r0, [r4, #12]
 800b8fc:	2202      	movs	r2, #2
 800b8fe:	2112      	movs	r1, #18
 800b900:	f7ff ff78 	bl	800b7f4 <std>
 800b904:	2301      	movs	r3, #1
 800b906:	61a3      	str	r3, [r4, #24]
 800b908:	e7d2      	b.n	800b8b0 <__sinit+0xc>
 800b90a:	bf00      	nop
 800b90c:	08019e38 	.word	0x08019e38
 800b910:	0800b83d 	.word	0x0800b83d

0800b914 <__sfp>:
 800b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b916:	4607      	mov	r7, r0
 800b918:	f7ff ffac 	bl	800b874 <__sfp_lock_acquire>
 800b91c:	4b1e      	ldr	r3, [pc, #120]	; (800b998 <__sfp+0x84>)
 800b91e:	681e      	ldr	r6, [r3, #0]
 800b920:	69b3      	ldr	r3, [r6, #24]
 800b922:	b913      	cbnz	r3, 800b92a <__sfp+0x16>
 800b924:	4630      	mov	r0, r6
 800b926:	f7ff ffbd 	bl	800b8a4 <__sinit>
 800b92a:	3648      	adds	r6, #72	; 0x48
 800b92c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b930:	3b01      	subs	r3, #1
 800b932:	d503      	bpl.n	800b93c <__sfp+0x28>
 800b934:	6833      	ldr	r3, [r6, #0]
 800b936:	b30b      	cbz	r3, 800b97c <__sfp+0x68>
 800b938:	6836      	ldr	r6, [r6, #0]
 800b93a:	e7f7      	b.n	800b92c <__sfp+0x18>
 800b93c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b940:	b9d5      	cbnz	r5, 800b978 <__sfp+0x64>
 800b942:	4b16      	ldr	r3, [pc, #88]	; (800b99c <__sfp+0x88>)
 800b944:	60e3      	str	r3, [r4, #12]
 800b946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b94a:	6665      	str	r5, [r4, #100]	; 0x64
 800b94c:	f000 f847 	bl	800b9de <__retarget_lock_init_recursive>
 800b950:	f7ff ff96 	bl	800b880 <__sfp_lock_release>
 800b954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b95c:	6025      	str	r5, [r4, #0]
 800b95e:	61a5      	str	r5, [r4, #24]
 800b960:	2208      	movs	r2, #8
 800b962:	4629      	mov	r1, r5
 800b964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b968:	f7fe ffb0 	bl	800a8cc <memset>
 800b96c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b974:	4620      	mov	r0, r4
 800b976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b978:	3468      	adds	r4, #104	; 0x68
 800b97a:	e7d9      	b.n	800b930 <__sfp+0x1c>
 800b97c:	2104      	movs	r1, #4
 800b97e:	4638      	mov	r0, r7
 800b980:	f7ff ff62 	bl	800b848 <__sfmoreglue>
 800b984:	4604      	mov	r4, r0
 800b986:	6030      	str	r0, [r6, #0]
 800b988:	2800      	cmp	r0, #0
 800b98a:	d1d5      	bne.n	800b938 <__sfp+0x24>
 800b98c:	f7ff ff78 	bl	800b880 <__sfp_lock_release>
 800b990:	230c      	movs	r3, #12
 800b992:	603b      	str	r3, [r7, #0]
 800b994:	e7ee      	b.n	800b974 <__sfp+0x60>
 800b996:	bf00      	nop
 800b998:	08019e38 	.word	0x08019e38
 800b99c:	ffff0001 	.word	0xffff0001

0800b9a0 <_fwalk_reent>:
 800b9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	4688      	mov	r8, r1
 800b9a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9ac:	2700      	movs	r7, #0
 800b9ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9b2:	f1b9 0901 	subs.w	r9, r9, #1
 800b9b6:	d505      	bpl.n	800b9c4 <_fwalk_reent+0x24>
 800b9b8:	6824      	ldr	r4, [r4, #0]
 800b9ba:	2c00      	cmp	r4, #0
 800b9bc:	d1f7      	bne.n	800b9ae <_fwalk_reent+0xe>
 800b9be:	4638      	mov	r0, r7
 800b9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c4:	89ab      	ldrh	r3, [r5, #12]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d907      	bls.n	800b9da <_fwalk_reent+0x3a>
 800b9ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	d003      	beq.n	800b9da <_fwalk_reent+0x3a>
 800b9d2:	4629      	mov	r1, r5
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	47c0      	blx	r8
 800b9d8:	4307      	orrs	r7, r0
 800b9da:	3568      	adds	r5, #104	; 0x68
 800b9dc:	e7e9      	b.n	800b9b2 <_fwalk_reent+0x12>

0800b9de <__retarget_lock_init_recursive>:
 800b9de:	4770      	bx	lr

0800b9e0 <__retarget_lock_acquire_recursive>:
 800b9e0:	4770      	bx	lr

0800b9e2 <__retarget_lock_release_recursive>:
 800b9e2:	4770      	bx	lr

0800b9e4 <__swhatbuf_r>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	460e      	mov	r6, r1
 800b9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ec:	2900      	cmp	r1, #0
 800b9ee:	b096      	sub	sp, #88	; 0x58
 800b9f0:	4614      	mov	r4, r2
 800b9f2:	461d      	mov	r5, r3
 800b9f4:	da08      	bge.n	800ba08 <__swhatbuf_r+0x24>
 800b9f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	602a      	str	r2, [r5, #0]
 800b9fe:	061a      	lsls	r2, r3, #24
 800ba00:	d410      	bmi.n	800ba24 <__swhatbuf_r+0x40>
 800ba02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba06:	e00e      	b.n	800ba26 <__swhatbuf_r+0x42>
 800ba08:	466a      	mov	r2, sp
 800ba0a:	f000 f945 	bl	800bc98 <_fstat_r>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	dbf1      	blt.n	800b9f6 <__swhatbuf_r+0x12>
 800ba12:	9a01      	ldr	r2, [sp, #4]
 800ba14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba1c:	425a      	negs	r2, r3
 800ba1e:	415a      	adcs	r2, r3
 800ba20:	602a      	str	r2, [r5, #0]
 800ba22:	e7ee      	b.n	800ba02 <__swhatbuf_r+0x1e>
 800ba24:	2340      	movs	r3, #64	; 0x40
 800ba26:	2000      	movs	r0, #0
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	b016      	add	sp, #88	; 0x58
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba30 <__smakebuf_r>:
 800ba30:	898b      	ldrh	r3, [r1, #12]
 800ba32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba34:	079d      	lsls	r5, r3, #30
 800ba36:	4606      	mov	r6, r0
 800ba38:	460c      	mov	r4, r1
 800ba3a:	d507      	bpl.n	800ba4c <__smakebuf_r+0x1c>
 800ba3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	2301      	movs	r3, #1
 800ba46:	6163      	str	r3, [r4, #20]
 800ba48:	b002      	add	sp, #8
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	ab01      	add	r3, sp, #4
 800ba4e:	466a      	mov	r2, sp
 800ba50:	f7ff ffc8 	bl	800b9e4 <__swhatbuf_r>
 800ba54:	9900      	ldr	r1, [sp, #0]
 800ba56:	4605      	mov	r5, r0
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7fe ffab 	bl	800a9b4 <_malloc_r>
 800ba5e:	b948      	cbnz	r0, 800ba74 <__smakebuf_r+0x44>
 800ba60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba64:	059a      	lsls	r2, r3, #22
 800ba66:	d4ef      	bmi.n	800ba48 <__smakebuf_r+0x18>
 800ba68:	f023 0303 	bic.w	r3, r3, #3
 800ba6c:	f043 0302 	orr.w	r3, r3, #2
 800ba70:	81a3      	strh	r3, [r4, #12]
 800ba72:	e7e3      	b.n	800ba3c <__smakebuf_r+0xc>
 800ba74:	4b0d      	ldr	r3, [pc, #52]	; (800baac <__smakebuf_r+0x7c>)
 800ba76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	6020      	str	r0, [r4, #0]
 800ba7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba80:	81a3      	strh	r3, [r4, #12]
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	6163      	str	r3, [r4, #20]
 800ba86:	9b01      	ldr	r3, [sp, #4]
 800ba88:	6120      	str	r0, [r4, #16]
 800ba8a:	b15b      	cbz	r3, 800baa4 <__smakebuf_r+0x74>
 800ba8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba90:	4630      	mov	r0, r6
 800ba92:	f000 f913 	bl	800bcbc <_isatty_r>
 800ba96:	b128      	cbz	r0, 800baa4 <__smakebuf_r+0x74>
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	f023 0303 	bic.w	r3, r3, #3
 800ba9e:	f043 0301 	orr.w	r3, r3, #1
 800baa2:	81a3      	strh	r3, [r4, #12]
 800baa4:	89a0      	ldrh	r0, [r4, #12]
 800baa6:	4305      	orrs	r5, r0
 800baa8:	81a5      	strh	r5, [r4, #12]
 800baaa:	e7cd      	b.n	800ba48 <__smakebuf_r+0x18>
 800baac:	0800b83d 	.word	0x0800b83d

0800bab0 <memmove>:
 800bab0:	4288      	cmp	r0, r1
 800bab2:	b510      	push	{r4, lr}
 800bab4:	eb01 0402 	add.w	r4, r1, r2
 800bab8:	d902      	bls.n	800bac0 <memmove+0x10>
 800baba:	4284      	cmp	r4, r0
 800babc:	4623      	mov	r3, r4
 800babe:	d807      	bhi.n	800bad0 <memmove+0x20>
 800bac0:	1e43      	subs	r3, r0, #1
 800bac2:	42a1      	cmp	r1, r4
 800bac4:	d008      	beq.n	800bad8 <memmove+0x28>
 800bac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bace:	e7f8      	b.n	800bac2 <memmove+0x12>
 800bad0:	4402      	add	r2, r0
 800bad2:	4601      	mov	r1, r0
 800bad4:	428a      	cmp	r2, r1
 800bad6:	d100      	bne.n	800bada <memmove+0x2a>
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bae2:	e7f7      	b.n	800bad4 <memmove+0x24>

0800bae4 <_realloc_r>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	4680      	mov	r8, r0
 800baea:	4614      	mov	r4, r2
 800baec:	460e      	mov	r6, r1
 800baee:	b921      	cbnz	r1, 800bafa <_realloc_r+0x16>
 800baf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	4611      	mov	r1, r2
 800baf6:	f7fe bf5d 	b.w	800a9b4 <_malloc_r>
 800bafa:	b92a      	cbnz	r2, 800bb08 <_realloc_r+0x24>
 800bafc:	f7fe feee 	bl	800a8dc <_free_r>
 800bb00:	4625      	mov	r5, r4
 800bb02:	4628      	mov	r0, r5
 800bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb08:	f000 f8fa 	bl	800bd00 <_malloc_usable_size_r>
 800bb0c:	4284      	cmp	r4, r0
 800bb0e:	4607      	mov	r7, r0
 800bb10:	d802      	bhi.n	800bb18 <_realloc_r+0x34>
 800bb12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb16:	d812      	bhi.n	800bb3e <_realloc_r+0x5a>
 800bb18:	4621      	mov	r1, r4
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	f7fe ff4a 	bl	800a9b4 <_malloc_r>
 800bb20:	4605      	mov	r5, r0
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d0ed      	beq.n	800bb02 <_realloc_r+0x1e>
 800bb26:	42bc      	cmp	r4, r7
 800bb28:	4622      	mov	r2, r4
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	bf28      	it	cs
 800bb2e:	463a      	movcs	r2, r7
 800bb30:	f7fe febe 	bl	800a8b0 <memcpy>
 800bb34:	4631      	mov	r1, r6
 800bb36:	4640      	mov	r0, r8
 800bb38:	f7fe fed0 	bl	800a8dc <_free_r>
 800bb3c:	e7e1      	b.n	800bb02 <_realloc_r+0x1e>
 800bb3e:	4635      	mov	r5, r6
 800bb40:	e7df      	b.n	800bb02 <_realloc_r+0x1e>

0800bb42 <_raise_r>:
 800bb42:	291f      	cmp	r1, #31
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4604      	mov	r4, r0
 800bb48:	460d      	mov	r5, r1
 800bb4a:	d904      	bls.n	800bb56 <_raise_r+0x14>
 800bb4c:	2316      	movs	r3, #22
 800bb4e:	6003      	str	r3, [r0, #0]
 800bb50:	f04f 30ff 	mov.w	r0, #4294967295
 800bb54:	bd38      	pop	{r3, r4, r5, pc}
 800bb56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb58:	b112      	cbz	r2, 800bb60 <_raise_r+0x1e>
 800bb5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb5e:	b94b      	cbnz	r3, 800bb74 <_raise_r+0x32>
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 f831 	bl	800bbc8 <_getpid_r>
 800bb66:	462a      	mov	r2, r5
 800bb68:	4601      	mov	r1, r0
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb70:	f000 b818 	b.w	800bba4 <_kill_r>
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d00a      	beq.n	800bb8e <_raise_r+0x4c>
 800bb78:	1c59      	adds	r1, r3, #1
 800bb7a:	d103      	bne.n	800bb84 <_raise_r+0x42>
 800bb7c:	2316      	movs	r3, #22
 800bb7e:	6003      	str	r3, [r0, #0]
 800bb80:	2001      	movs	r0, #1
 800bb82:	e7e7      	b.n	800bb54 <_raise_r+0x12>
 800bb84:	2400      	movs	r4, #0
 800bb86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	4798      	blx	r3
 800bb8e:	2000      	movs	r0, #0
 800bb90:	e7e0      	b.n	800bb54 <_raise_r+0x12>
	...

0800bb94 <raise>:
 800bb94:	4b02      	ldr	r3, [pc, #8]	; (800bba0 <raise+0xc>)
 800bb96:	4601      	mov	r1, r0
 800bb98:	6818      	ldr	r0, [r3, #0]
 800bb9a:	f7ff bfd2 	b.w	800bb42 <_raise_r>
 800bb9e:	bf00      	nop
 800bba0:	20000038 	.word	0x20000038

0800bba4 <_kill_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4d07      	ldr	r5, [pc, #28]	; (800bbc4 <_kill_r+0x20>)
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	4611      	mov	r1, r2
 800bbb0:	602b      	str	r3, [r5, #0]
 800bbb2:	f7f5 fd17 	bl	80015e4 <_kill>
 800bbb6:	1c43      	adds	r3, r0, #1
 800bbb8:	d102      	bne.n	800bbc0 <_kill_r+0x1c>
 800bbba:	682b      	ldr	r3, [r5, #0]
 800bbbc:	b103      	cbz	r3, 800bbc0 <_kill_r+0x1c>
 800bbbe:	6023      	str	r3, [r4, #0]
 800bbc0:	bd38      	pop	{r3, r4, r5, pc}
 800bbc2:	bf00      	nop
 800bbc4:	2000610c 	.word	0x2000610c

0800bbc8 <_getpid_r>:
 800bbc8:	f7f5 bd04 	b.w	80015d4 <_getpid>

0800bbcc <__sread>:
 800bbcc:	b510      	push	{r4, lr}
 800bbce:	460c      	mov	r4, r1
 800bbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd4:	f000 f89c 	bl	800bd10 <_read_r>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	bfab      	itete	ge
 800bbdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbde:	89a3      	ldrhlt	r3, [r4, #12]
 800bbe0:	181b      	addge	r3, r3, r0
 800bbe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbe6:	bfac      	ite	ge
 800bbe8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbea:	81a3      	strhlt	r3, [r4, #12]
 800bbec:	bd10      	pop	{r4, pc}

0800bbee <__swrite>:
 800bbee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf2:	461f      	mov	r7, r3
 800bbf4:	898b      	ldrh	r3, [r1, #12]
 800bbf6:	05db      	lsls	r3, r3, #23
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	4616      	mov	r6, r2
 800bbfe:	d505      	bpl.n	800bc0c <__swrite+0x1e>
 800bc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc04:	2302      	movs	r3, #2
 800bc06:	2200      	movs	r2, #0
 800bc08:	f000 f868 	bl	800bcdc <_lseek_r>
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc16:	81a3      	strh	r3, [r4, #12]
 800bc18:	4632      	mov	r2, r6
 800bc1a:	463b      	mov	r3, r7
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc22:	f000 b817 	b.w	800bc54 <_write_r>

0800bc26 <__sseek>:
 800bc26:	b510      	push	{r4, lr}
 800bc28:	460c      	mov	r4, r1
 800bc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2e:	f000 f855 	bl	800bcdc <_lseek_r>
 800bc32:	1c43      	adds	r3, r0, #1
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	bf15      	itete	ne
 800bc38:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc42:	81a3      	strheq	r3, [r4, #12]
 800bc44:	bf18      	it	ne
 800bc46:	81a3      	strhne	r3, [r4, #12]
 800bc48:	bd10      	pop	{r4, pc}

0800bc4a <__sclose>:
 800bc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4e:	f000 b813 	b.w	800bc78 <_close_r>
	...

0800bc54 <_write_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d07      	ldr	r5, [pc, #28]	; (800bc74 <_write_r+0x20>)
 800bc58:	4604      	mov	r4, r0
 800bc5a:	4608      	mov	r0, r1
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	2200      	movs	r2, #0
 800bc60:	602a      	str	r2, [r5, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	f7f5 fcf5 	bl	8001652 <_write>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_write_r+0x1e>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_write_r+0x1e>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	2000610c 	.word	0x2000610c

0800bc78 <_close_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4d06      	ldr	r5, [pc, #24]	; (800bc94 <_close_r+0x1c>)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	f7f5 fd01 	bl	800168a <_close>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_close_r+0x1a>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_close_r+0x1a>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	2000610c 	.word	0x2000610c

0800bc98 <_fstat_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4d07      	ldr	r5, [pc, #28]	; (800bcb8 <_fstat_r+0x20>)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4604      	mov	r4, r0
 800bca0:	4608      	mov	r0, r1
 800bca2:	4611      	mov	r1, r2
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	f7f5 fcfc 	bl	80016a2 <_fstat>
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	d102      	bne.n	800bcb4 <_fstat_r+0x1c>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	b103      	cbz	r3, 800bcb4 <_fstat_r+0x1c>
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	bd38      	pop	{r3, r4, r5, pc}
 800bcb6:	bf00      	nop
 800bcb8:	2000610c 	.word	0x2000610c

0800bcbc <_isatty_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d06      	ldr	r5, [pc, #24]	; (800bcd8 <_isatty_r+0x1c>)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	602b      	str	r3, [r5, #0]
 800bcc8:	f7f5 fcfb 	bl	80016c2 <_isatty>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d102      	bne.n	800bcd6 <_isatty_r+0x1a>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	b103      	cbz	r3, 800bcd6 <_isatty_r+0x1a>
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	2000610c 	.word	0x2000610c

0800bcdc <_lseek_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d07      	ldr	r5, [pc, #28]	; (800bcfc <_lseek_r+0x20>)
 800bce0:	4604      	mov	r4, r0
 800bce2:	4608      	mov	r0, r1
 800bce4:	4611      	mov	r1, r2
 800bce6:	2200      	movs	r2, #0
 800bce8:	602a      	str	r2, [r5, #0]
 800bcea:	461a      	mov	r2, r3
 800bcec:	f7f5 fcf4 	bl	80016d8 <_lseek>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	d102      	bne.n	800bcfa <_lseek_r+0x1e>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	b103      	cbz	r3, 800bcfa <_lseek_r+0x1e>
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	2000610c 	.word	0x2000610c

0800bd00 <_malloc_usable_size_r>:
 800bd00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd04:	1f18      	subs	r0, r3, #4
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	bfbc      	itt	lt
 800bd0a:	580b      	ldrlt	r3, [r1, r0]
 800bd0c:	18c0      	addlt	r0, r0, r3
 800bd0e:	4770      	bx	lr

0800bd10 <_read_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d07      	ldr	r5, [pc, #28]	; (800bd30 <_read_r+0x20>)
 800bd14:	4604      	mov	r4, r0
 800bd16:	4608      	mov	r0, r1
 800bd18:	4611      	mov	r1, r2
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	602a      	str	r2, [r5, #0]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f7f5 fc7a 	bl	8001618 <_read>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d102      	bne.n	800bd2e <_read_r+0x1e>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	b103      	cbz	r3, 800bd2e <_read_r+0x1e>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	2000610c 	.word	0x2000610c

0800bd34 <_init>:
 800bd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd36:	bf00      	nop
 800bd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3a:	bc08      	pop	{r3}
 800bd3c:	469e      	mov	lr, r3
 800bd3e:	4770      	bx	lr

0800bd40 <_fini>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	bf00      	nop
 800bd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd46:	bc08      	pop	{r3}
 800bd48:	469e      	mov	lr, r3
 800bd4a:	4770      	bx	lr
